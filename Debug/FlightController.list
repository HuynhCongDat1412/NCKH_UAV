
FlightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab6c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  0800ad10  0800ad10  0000bd10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b114  0800b114  0000d1f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b114  0800b114  0000c114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b11c  0800b11c  0000d1f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b11c  0800b11c  0000c11c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b120  0800b120  0000c120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f8  20000000  0800b124  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004cc  200001f8  0800b31c  0000d1f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006c4  0800b31c  0000d6c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010921  00000000  00000000  0000d228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022a0  00000000  00000000  0001db49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001028  00000000  00000000  0001fdf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cc9  00000000  00000000  00020e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a6f  00000000  00000000  00021ae1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013214  00000000  00000000  00039550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093740  00000000  00000000  0004c764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dfea4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059c0  00000000  00000000  000dfee8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000e58a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800acf4 	.word	0x0800acf4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	0800acf4 	.word	0x0800acf4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b9a0 	b.w	8000f90 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f83c 	bl	8000cd4 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_d2lz>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	460d      	mov	r5, r1
 8000c72:	f7ff ff33 	bl	8000adc <__aeabi_dcmplt>
 8000c76:	b928      	cbnz	r0, 8000c84 <__aeabi_d2lz+0x1c>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	4629      	mov	r1, r5
 8000c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c80:	f000 b80a 	b.w	8000c98 <__aeabi_d2ulz>
 8000c84:	4620      	mov	r0, r4
 8000c86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c8a:	f000 f805 	bl	8000c98 <__aeabi_d2ulz>
 8000c8e:	4240      	negs	r0, r0
 8000c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c94:	bd38      	pop	{r3, r4, r5, pc}
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2ulz>:
 8000c98:	b5d0      	push	{r4, r6, r7, lr}
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000ccc <__aeabi_d2ulz+0x34>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4606      	mov	r6, r0
 8000ca0:	460f      	mov	r7, r1
 8000ca2:	f7ff fca9 	bl	80005f8 <__aeabi_dmul>
 8000ca6:	f7ff ff57 	bl	8000b58 <__aeabi_d2uiz>
 8000caa:	4604      	mov	r4, r0
 8000cac:	f7ff fc2a 	bl	8000504 <__aeabi_ui2d>
 8000cb0:	4b07      	ldr	r3, [pc, #28]	@ (8000cd0 <__aeabi_d2ulz+0x38>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f7ff fca0 	bl	80005f8 <__aeabi_dmul>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	4639      	mov	r1, r7
 8000cc0:	f7ff fae2 	bl	8000288 <__aeabi_dsub>
 8000cc4:	f7ff ff48 	bl	8000b58 <__aeabi_d2uiz>
 8000cc8:	4621      	mov	r1, r4
 8000cca:	bdd0      	pop	{r4, r6, r7, pc}
 8000ccc:	3df00000 	.word	0x3df00000
 8000cd0:	41f00000 	.word	0x41f00000

08000cd4 <__udivmoddi4>:
 8000cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd8:	9d08      	ldr	r5, [sp, #32]
 8000cda:	460c      	mov	r4, r1
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d14e      	bne.n	8000d7e <__udivmoddi4+0xaa>
 8000ce0:	4694      	mov	ip, r2
 8000ce2:	458c      	cmp	ip, r1
 8000ce4:	4686      	mov	lr, r0
 8000ce6:	fab2 f282 	clz	r2, r2
 8000cea:	d962      	bls.n	8000db2 <__udivmoddi4+0xde>
 8000cec:	b14a      	cbz	r2, 8000d02 <__udivmoddi4+0x2e>
 8000cee:	f1c2 0320 	rsb	r3, r2, #32
 8000cf2:	4091      	lsls	r1, r2
 8000cf4:	fa20 f303 	lsr.w	r3, r0, r3
 8000cf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cfc:	4319      	orrs	r1, r3
 8000cfe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f f68c 	uxth.w	r6, ip
 8000d0a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb07 1114 	mls	r1, r7, r4, r1
 8000d16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1a:	fb04 f106 	mul.w	r1, r4, r6
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x64>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d2a:	f080 8112 	bcs.w	8000f52 <__udivmoddi4+0x27e>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 810f 	bls.w	8000f52 <__udivmoddi4+0x27e>
 8000d34:	3c02      	subs	r4, #2
 8000d36:	4463      	add	r3, ip
 8000d38:	1a59      	subs	r1, r3, r1
 8000d3a:	fa1f f38e 	uxth.w	r3, lr
 8000d3e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d42:	fb07 1110 	mls	r1, r7, r0, r1
 8000d46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4a:	fb00 f606 	mul.w	r6, r0, r6
 8000d4e:	429e      	cmp	r6, r3
 8000d50:	d90a      	bls.n	8000d68 <__udivmoddi4+0x94>
 8000d52:	eb1c 0303 	adds.w	r3, ip, r3
 8000d56:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d5a:	f080 80fc 	bcs.w	8000f56 <__udivmoddi4+0x282>
 8000d5e:	429e      	cmp	r6, r3
 8000d60:	f240 80f9 	bls.w	8000f56 <__udivmoddi4+0x282>
 8000d64:	4463      	add	r3, ip
 8000d66:	3802      	subs	r0, #2
 8000d68:	1b9b      	subs	r3, r3, r6
 8000d6a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d6e:	2100      	movs	r1, #0
 8000d70:	b11d      	cbz	r5, 8000d7a <__udivmoddi4+0xa6>
 8000d72:	40d3      	lsrs	r3, r2
 8000d74:	2200      	movs	r2, #0
 8000d76:	e9c5 3200 	strd	r3, r2, [r5]
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d905      	bls.n	8000d8e <__udivmoddi4+0xba>
 8000d82:	b10d      	cbz	r5, 8000d88 <__udivmoddi4+0xb4>
 8000d84:	e9c5 0100 	strd	r0, r1, [r5]
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4608      	mov	r0, r1
 8000d8c:	e7f5      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000d8e:	fab3 f183 	clz	r1, r3
 8000d92:	2900      	cmp	r1, #0
 8000d94:	d146      	bne.n	8000e24 <__udivmoddi4+0x150>
 8000d96:	42a3      	cmp	r3, r4
 8000d98:	d302      	bcc.n	8000da0 <__udivmoddi4+0xcc>
 8000d9a:	4290      	cmp	r0, r2
 8000d9c:	f0c0 80f0 	bcc.w	8000f80 <__udivmoddi4+0x2ac>
 8000da0:	1a86      	subs	r6, r0, r2
 8000da2:	eb64 0303 	sbc.w	r3, r4, r3
 8000da6:	2001      	movs	r0, #1
 8000da8:	2d00      	cmp	r5, #0
 8000daa:	d0e6      	beq.n	8000d7a <__udivmoddi4+0xa6>
 8000dac:	e9c5 6300 	strd	r6, r3, [r5]
 8000db0:	e7e3      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000db2:	2a00      	cmp	r2, #0
 8000db4:	f040 8090 	bne.w	8000ed8 <__udivmoddi4+0x204>
 8000db8:	eba1 040c 	sub.w	r4, r1, ip
 8000dbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc0:	fa1f f78c 	uxth.w	r7, ip
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dce:	fb08 4416 	mls	r4, r8, r6, r4
 8000dd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dd6:	fb07 f006 	mul.w	r0, r7, r6
 8000dda:	4298      	cmp	r0, r3
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x11c>
 8000dde:	eb1c 0303 	adds.w	r3, ip, r3
 8000de2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000de6:	d202      	bcs.n	8000dee <__udivmoddi4+0x11a>
 8000de8:	4298      	cmp	r0, r3
 8000dea:	f200 80cd 	bhi.w	8000f88 <__udivmoddi4+0x2b4>
 8000dee:	4626      	mov	r6, r4
 8000df0:	1a1c      	subs	r4, r3, r0
 8000df2:	fa1f f38e 	uxth.w	r3, lr
 8000df6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dfa:	fb08 4410 	mls	r4, r8, r0, r4
 8000dfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e02:	fb00 f707 	mul.w	r7, r0, r7
 8000e06:	429f      	cmp	r7, r3
 8000e08:	d908      	bls.n	8000e1c <__udivmoddi4+0x148>
 8000e0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e0e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x146>
 8000e14:	429f      	cmp	r7, r3
 8000e16:	f200 80b0 	bhi.w	8000f7a <__udivmoddi4+0x2a6>
 8000e1a:	4620      	mov	r0, r4
 8000e1c:	1bdb      	subs	r3, r3, r7
 8000e1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e22:	e7a5      	b.n	8000d70 <__udivmoddi4+0x9c>
 8000e24:	f1c1 0620 	rsb	r6, r1, #32
 8000e28:	408b      	lsls	r3, r1
 8000e2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e2e:	431f      	orrs	r7, r3
 8000e30:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e34:	fa04 f301 	lsl.w	r3, r4, r1
 8000e38:	ea43 030c 	orr.w	r3, r3, ip
 8000e3c:	40f4      	lsrs	r4, r6
 8000e3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e42:	0c38      	lsrs	r0, r7, #16
 8000e44:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e48:	fbb4 fef0 	udiv	lr, r4, r0
 8000e4c:	fa1f fc87 	uxth.w	ip, r7
 8000e50:	fb00 441e 	mls	r4, r0, lr, r4
 8000e54:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e58:	fb0e f90c 	mul.w	r9, lr, ip
 8000e5c:	45a1      	cmp	r9, r4
 8000e5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e62:	d90a      	bls.n	8000e7a <__udivmoddi4+0x1a6>
 8000e64:	193c      	adds	r4, r7, r4
 8000e66:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e6a:	f080 8084 	bcs.w	8000f76 <__udivmoddi4+0x2a2>
 8000e6e:	45a1      	cmp	r9, r4
 8000e70:	f240 8081 	bls.w	8000f76 <__udivmoddi4+0x2a2>
 8000e74:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e78:	443c      	add	r4, r7
 8000e7a:	eba4 0409 	sub.w	r4, r4, r9
 8000e7e:	fa1f f983 	uxth.w	r9, r3
 8000e82:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e86:	fb00 4413 	mls	r4, r0, r3, r4
 8000e8a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d907      	bls.n	8000ea6 <__udivmoddi4+0x1d2>
 8000e96:	193c      	adds	r4, r7, r4
 8000e98:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e9c:	d267      	bcs.n	8000f6e <__udivmoddi4+0x29a>
 8000e9e:	45a4      	cmp	ip, r4
 8000ea0:	d965      	bls.n	8000f6e <__udivmoddi4+0x29a>
 8000ea2:	3b02      	subs	r3, #2
 8000ea4:	443c      	add	r4, r7
 8000ea6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eaa:	fba0 9302 	umull	r9, r3, r0, r2
 8000eae:	eba4 040c 	sub.w	r4, r4, ip
 8000eb2:	429c      	cmp	r4, r3
 8000eb4:	46ce      	mov	lr, r9
 8000eb6:	469c      	mov	ip, r3
 8000eb8:	d351      	bcc.n	8000f5e <__udivmoddi4+0x28a>
 8000eba:	d04e      	beq.n	8000f5a <__udivmoddi4+0x286>
 8000ebc:	b155      	cbz	r5, 8000ed4 <__udivmoddi4+0x200>
 8000ebe:	ebb8 030e 	subs.w	r3, r8, lr
 8000ec2:	eb64 040c 	sbc.w	r4, r4, ip
 8000ec6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eca:	40cb      	lsrs	r3, r1
 8000ecc:	431e      	orrs	r6, r3
 8000ece:	40cc      	lsrs	r4, r1
 8000ed0:	e9c5 6400 	strd	r6, r4, [r5]
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	e750      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f103 	lsr.w	r1, r0, r3
 8000ee0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ee4:	fa24 f303 	lsr.w	r3, r4, r3
 8000ee8:	4094      	lsls	r4, r2
 8000eea:	430c      	orrs	r4, r1
 8000eec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ef4:	fa1f f78c 	uxth.w	r7, ip
 8000ef8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000efc:	fb08 3110 	mls	r1, r8, r0, r3
 8000f00:	0c23      	lsrs	r3, r4, #16
 8000f02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f06:	fb00 f107 	mul.w	r1, r0, r7
 8000f0a:	4299      	cmp	r1, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x24c>
 8000f0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f12:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f16:	d22c      	bcs.n	8000f72 <__udivmoddi4+0x29e>
 8000f18:	4299      	cmp	r1, r3
 8000f1a:	d92a      	bls.n	8000f72 <__udivmoddi4+0x29e>
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	4463      	add	r3, ip
 8000f20:	1a5b      	subs	r3, r3, r1
 8000f22:	b2a4      	uxth	r4, r4
 8000f24:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f28:	fb08 3311 	mls	r3, r8, r1, r3
 8000f2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f30:	fb01 f307 	mul.w	r3, r1, r7
 8000f34:	42a3      	cmp	r3, r4
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x276>
 8000f38:	eb1c 0404 	adds.w	r4, ip, r4
 8000f3c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f40:	d213      	bcs.n	8000f6a <__udivmoddi4+0x296>
 8000f42:	42a3      	cmp	r3, r4
 8000f44:	d911      	bls.n	8000f6a <__udivmoddi4+0x296>
 8000f46:	3902      	subs	r1, #2
 8000f48:	4464      	add	r4, ip
 8000f4a:	1ae4      	subs	r4, r4, r3
 8000f4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f50:	e739      	b.n	8000dc6 <__udivmoddi4+0xf2>
 8000f52:	4604      	mov	r4, r0
 8000f54:	e6f0      	b.n	8000d38 <__udivmoddi4+0x64>
 8000f56:	4608      	mov	r0, r1
 8000f58:	e706      	b.n	8000d68 <__udivmoddi4+0x94>
 8000f5a:	45c8      	cmp	r8, r9
 8000f5c:	d2ae      	bcs.n	8000ebc <__udivmoddi4+0x1e8>
 8000f5e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f62:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f66:	3801      	subs	r0, #1
 8000f68:	e7a8      	b.n	8000ebc <__udivmoddi4+0x1e8>
 8000f6a:	4631      	mov	r1, r6
 8000f6c:	e7ed      	b.n	8000f4a <__udivmoddi4+0x276>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	e799      	b.n	8000ea6 <__udivmoddi4+0x1d2>
 8000f72:	4630      	mov	r0, r6
 8000f74:	e7d4      	b.n	8000f20 <__udivmoddi4+0x24c>
 8000f76:	46d6      	mov	lr, sl
 8000f78:	e77f      	b.n	8000e7a <__udivmoddi4+0x1a6>
 8000f7a:	4463      	add	r3, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e74d      	b.n	8000e1c <__udivmoddi4+0x148>
 8000f80:	4606      	mov	r6, r0
 8000f82:	4623      	mov	r3, r4
 8000f84:	4608      	mov	r0, r1
 8000f86:	e70f      	b.n	8000da8 <__udivmoddi4+0xd4>
 8000f88:	3e02      	subs	r6, #2
 8000f8a:	4463      	add	r3, ip
 8000f8c:	e730      	b.n	8000df0 <__udivmoddi4+0x11c>
 8000f8e:	bf00      	nop

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <wr8>:

#define I2C_TIMEOUT_MS 3 // vi vong lap 4ms nen de timeout 3ms

//2 ham user de ghi va doc vao i2c
// vi 0x68 co 7 bit ma ta dia chi can 8 bit nen ta dich 1 bit
static inline HAL_StatusTypeDef wr8(I2C_HandleTypeDef* hi2c, uint8_t reg, uint8_t val) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af04      	add	r7, sp, #16
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	70fb      	strb	r3, [r7, #3]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	70bb      	strb	r3, [r7, #2]
  return HAL_I2C_Mem_Write(hi2c, 0x68<<1, reg, I2C_MEMADD_SIZE_8BIT, &val, 1, I2C_TIMEOUT_MS);
 8000fa4:	78fb      	ldrb	r3, [r7, #3]
 8000fa6:	b29a      	uxth	r2, r3
 8000fa8:	2303      	movs	r3, #3
 8000faa:	9302      	str	r3, [sp, #8]
 8000fac:	2301      	movs	r3, #1
 8000fae:	9301      	str	r3, [sp, #4]
 8000fb0:	1cbb      	adds	r3, r7, #2
 8000fb2:	9300      	str	r3, [sp, #0]
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	21d0      	movs	r1, #208	@ 0xd0
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f003 f89f 	bl	80040fc <HAL_I2C_Mem_Write>
 8000fbe:	4603      	mov	r3, r0
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <rd>:
static inline HAL_StatusTypeDef rd(I2C_HandleTypeDef* hi2c, uint8_t reg, uint8_t* buf, uint16_t len) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b088      	sub	sp, #32
 8000fcc:	af04      	add	r7, sp, #16
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	607a      	str	r2, [r7, #4]
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	72fb      	strb	r3, [r7, #11]
 8000fd8:	4613      	mov	r3, r2
 8000fda:	813b      	strh	r3, [r7, #8]
  return HAL_I2C_Mem_Read(hi2c, 0x68<<1, reg, I2C_MEMADD_SIZE_8BIT, buf, len, I2C_TIMEOUT_MS);
 8000fdc:	7afb      	ldrb	r3, [r7, #11]
 8000fde:	b29a      	uxth	r2, r3
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	9302      	str	r3, [sp, #8]
 8000fe4:	893b      	ldrh	r3, [r7, #8]
 8000fe6:	9301      	str	r3, [sp, #4]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	9300      	str	r3, [sp, #0]
 8000fec:	2301      	movs	r3, #1
 8000fee:	21d0      	movs	r1, #208	@ 0xd0
 8000ff0:	68f8      	ldr	r0, [r7, #12]
 8000ff2:	f003 f97d 	bl	80042f0 <HAL_I2C_Mem_Read>
 8000ff6:	4603      	mov	r3, r0
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3710      	adds	r7, #16
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <kalman_1d>:

//kalman filter lay input la: gia tri truoc do, sai so truoc do, input(rate_gyro), gia tri measure (angle_accelerometer) 
void kalman_1d(float* pKalmanState, 
  float* pKalmanUncertainty, float KalmanInput, 
  float KalmanMeasurement, float dt_s) 
  {
 8001000:	b480      	push	{r7}
 8001002:	b08b      	sub	sp, #44	@ 0x2c
 8001004:	af00      	add	r7, sp, #0
 8001006:	6178      	str	r0, [r7, #20]
 8001008:	6139      	str	r1, [r7, #16]
 800100a:	ed87 0a03 	vstr	s0, [r7, #12]
 800100e:	edc7 0a02 	vstr	s1, [r7, #8]
 8001012:	ed87 1a01 	vstr	s2, [r7, #4]
    float KalmanState = *pKalmanState; //lay gia tri k-1
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	627b      	str	r3, [r7, #36]	@ 0x24
    float KalmanUncertainty = *pKalmanUncertainty; ////lay sai so k-1
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	623b      	str	r3, [r7, #32]
    KalmanState=KalmanState+dt_s*KalmanInput; //B1: du doan tho (raw) goc hien tai (angle(k) = angle(k-1) + dt*toc_do_goc )
 8001022:	ed97 7a01 	vldr	s14, [r7, #4]
 8001026:	edd7 7a03 	vldr	s15, [r7, #12]
 800102a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800102e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001032:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001036:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    KalmanUncertainty=KalmanUncertainty + dt_s*dt_s * 4 * 4; //B2 du doan tho (raw) sai so hien tai
 800103a:	edd7 7a01 	vldr	s15, [r7, #4]
 800103e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001042:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001046:	ee67 7a87 	vmul.f32	s15, s15, s14
 800104a:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800104e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001052:	ed97 7a08 	vldr	s14, [r7, #32]
 8001056:	ee77 7a27 	vadd.f32	s15, s14, s15
 800105a:	edc7 7a08 	vstr	s15, [r7, #32]
    float KalmanGain=KalmanUncertainty * 1/(1*KalmanUncertainty + 3 * 3); //B3: tinh he so kalman gain
 800105e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001062:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 8001066:	ee37 7a87 	vadd.f32	s14, s15, s14
 800106a:	edd7 6a08 	vldr	s13, [r7, #32]
 800106e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001072:	edc7 7a07 	vstr	s15, [r7, #28]
    KalmanState=KalmanState+KalmanGain * (KalmanMeasurement-KalmanState); //B4: du doan toi uu goc hien tai (angle_kalman)
 8001076:	ed97 7a02 	vldr	s14, [r7, #8]
 800107a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800107e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001082:	edd7 7a07 	vldr	s15, [r7, #28]
 8001086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800108a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800108e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001092:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    KalmanUncertainty=(1-KalmanGain) *  KalmanUncertainty; //B5: du doan toi uu sai so hien tai (saiSo_kalman)
 8001096:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800109a:	edd7 7a07 	vldr	s15, [r7, #28]
 800109e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010a2:	ed97 7a08 	vldr	s14, [r7, #32]
 80010a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010aa:	edc7 7a08 	vstr	s15, [r7, #32]
    *pKalmanState=KalmanState; //luu goc du doan_kalman hien tai
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010b2:	601a      	str	r2, [r3, #0]
    *pKalmanUncertainty=KalmanUncertainty; //luu sai so du doan_kalman hien tai
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	6a3a      	ldr	r2, [r7, #32]
 80010b8:	601a      	str	r2, [r3, #0]
 }
 80010ba:	bf00      	nop
 80010bc:	372c      	adds	r7, #44	@ 0x2c
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
	...

080010c8 <gyro_signal>:
void gyro_signal(void){
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b088      	sub	sp, #32
 80010cc:	af00      	add	r7, sp, #0

  // read register 0x43 -> 0x48 => 6 byte
  // save to b[6], vi data cua gyro 16bit
  //, ma chia ra 2 mang nen b[0] va b[1] la data day du cua rate_x, tuong tu y voi z
  // tuy nhien voi sensing scale factor 65.5/ do/s thi ta chia gia tri doc duoc cho 65.5 => toc do  
  if (rd(&hi2c1, 0x43, value, 6) == HAL_OK) {
 80010ce:	2306      	movs	r3, #6
 80010d0:	4a83      	ldr	r2, [pc, #524]	@ (80012e0 <gyro_signal+0x218>)
 80010d2:	2143      	movs	r1, #67	@ 0x43
 80010d4:	4883      	ldr	r0, [pc, #524]	@ (80012e4 <gyro_signal+0x21c>)
 80010d6:	f7ff ff77 	bl	8000fc8 <rd>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d146      	bne.n	800116e <gyro_signal+0xa6>
	mpu6050_gyro_flag = 1;
 80010e0:	4b81      	ldr	r3, [pc, #516]	@ (80012e8 <gyro_signal+0x220>)
 80010e2:	2201      	movs	r2, #1
 80010e4:	701a      	strb	r2, [r3, #0]
    int16_t gx_raw = (int16_t)((value[0] << 8) | value[1]);
 80010e6:	4b7e      	ldr	r3, [pc, #504]	@ (80012e0 <gyro_signal+0x218>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	021b      	lsls	r3, r3, #8
 80010ec:	b21a      	sxth	r2, r3
 80010ee:	4b7c      	ldr	r3, [pc, #496]	@ (80012e0 <gyro_signal+0x218>)
 80010f0:	785b      	ldrb	r3, [r3, #1]
 80010f2:	b21b      	sxth	r3, r3
 80010f4:	4313      	orrs	r3, r2
 80010f6:	83fb      	strh	r3, [r7, #30]
    int16_t gy_raw = (int16_t)((value[2] << 8) | value[3]);
 80010f8:	4b79      	ldr	r3, [pc, #484]	@ (80012e0 <gyro_signal+0x218>)
 80010fa:	789b      	ldrb	r3, [r3, #2]
 80010fc:	021b      	lsls	r3, r3, #8
 80010fe:	b21a      	sxth	r2, r3
 8001100:	4b77      	ldr	r3, [pc, #476]	@ (80012e0 <gyro_signal+0x218>)
 8001102:	78db      	ldrb	r3, [r3, #3]
 8001104:	b21b      	sxth	r3, r3
 8001106:	4313      	orrs	r3, r2
 8001108:	83bb      	strh	r3, [r7, #28]
    int16_t gz_raw = (int16_t)((value[4] << 8) | value[5]);
 800110a:	4b75      	ldr	r3, [pc, #468]	@ (80012e0 <gyro_signal+0x218>)
 800110c:	791b      	ldrb	r3, [r3, #4]
 800110e:	021b      	lsls	r3, r3, #8
 8001110:	b21a      	sxth	r2, r3
 8001112:	4b73      	ldr	r3, [pc, #460]	@ (80012e0 <gyro_signal+0x218>)
 8001114:	795b      	ldrb	r3, [r3, #5]
 8001116:	b21b      	sxth	r3, r3
 8001118:	4313      	orrs	r3, r2
 800111a:	837b      	strh	r3, [r7, #26]
    const float sens = 65.5f; // LSB per (deg/s) for FS_SEL=1
 800111c:	4b73      	ldr	r3, [pc, #460]	@ (80012ec <gyro_signal+0x224>)
 800111e:	617b      	str	r3, [r7, #20]
    RateRoll  = gx_raw / sens;
 8001120:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001124:	ee07 3a90 	vmov	s15, r3
 8001128:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800112c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001130:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001134:	4b6e      	ldr	r3, [pc, #440]	@ (80012f0 <gyro_signal+0x228>)
 8001136:	edc3 7a00 	vstr	s15, [r3]
    RatePitch = gy_raw / sens;
 800113a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800113e:	ee07 3a90 	vmov	s15, r3
 8001142:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001146:	ed97 7a05 	vldr	s14, [r7, #20]
 800114a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800114e:	4b69      	ldr	r3, [pc, #420]	@ (80012f4 <gyro_signal+0x22c>)
 8001150:	edc3 7a00 	vstr	s15, [r3]
    RateYaw   = gz_raw / sens;
 8001154:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001158:	ee07 3a90 	vmov	s15, r3
 800115c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001160:	ed97 7a05 	vldr	s14, [r7, #20]
 8001164:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001168:	4b63      	ldr	r3, [pc, #396]	@ (80012f8 <gyro_signal+0x230>)
 800116a:	edc3 7a00 	vstr	s15, [r3]
  }

  //doc accelerometer
  if (rd(&hi2c1, 0x3B, value, 6) == HAL_OK) {
 800116e:	2306      	movs	r3, #6
 8001170:	4a5b      	ldr	r2, [pc, #364]	@ (80012e0 <gyro_signal+0x218>)
 8001172:	213b      	movs	r1, #59	@ 0x3b
 8001174:	485b      	ldr	r0, [pc, #364]	@ (80012e4 <gyro_signal+0x21c>)
 8001176:	f7ff ff27 	bl	8000fc8 <rd>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	f040 80ab 	bne.w	80012d8 <gyro_signal+0x210>
	mpu6050_acc_flag = 1;
 8001182:	4b5e      	ldr	r3, [pc, #376]	@ (80012fc <gyro_signal+0x234>)
 8001184:	2201      	movs	r2, #1
 8001186:	701a      	strb	r2, [r3, #0]
	int16_t AccXLSB = (int16_t)((value[0] << 8) | value[1]);
 8001188:	4b55      	ldr	r3, [pc, #340]	@ (80012e0 <gyro_signal+0x218>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	021b      	lsls	r3, r3, #8
 800118e:	b21a      	sxth	r2, r3
 8001190:	4b53      	ldr	r3, [pc, #332]	@ (80012e0 <gyro_signal+0x218>)
 8001192:	785b      	ldrb	r3, [r3, #1]
 8001194:	b21b      	sxth	r3, r3
 8001196:	4313      	orrs	r3, r2
 8001198:	827b      	strh	r3, [r7, #18]
	int16_t AccYLSB = (int16_t)((value[2] << 8) | value[3]);
 800119a:	4b51      	ldr	r3, [pc, #324]	@ (80012e0 <gyro_signal+0x218>)
 800119c:	789b      	ldrb	r3, [r3, #2]
 800119e:	021b      	lsls	r3, r3, #8
 80011a0:	b21a      	sxth	r2, r3
 80011a2:	4b4f      	ldr	r3, [pc, #316]	@ (80012e0 <gyro_signal+0x218>)
 80011a4:	78db      	ldrb	r3, [r3, #3]
 80011a6:	b21b      	sxth	r3, r3
 80011a8:	4313      	orrs	r3, r2
 80011aa:	823b      	strh	r3, [r7, #16]
	int16_t AccZLSB = (int16_t)((value[4] << 8) | value[5]);
 80011ac:	4b4c      	ldr	r3, [pc, #304]	@ (80012e0 <gyro_signal+0x218>)
 80011ae:	791b      	ldrb	r3, [r3, #4]
 80011b0:	021b      	lsls	r3, r3, #8
 80011b2:	b21a      	sxth	r2, r3
 80011b4:	4b4a      	ldr	r3, [pc, #296]	@ (80012e0 <gyro_signal+0x218>)
 80011b6:	795b      	ldrb	r3, [r3, #5]
 80011b8:	b21b      	sxth	r3, r3
 80011ba:	4313      	orrs	r3, r2
 80011bc:	81fb      	strh	r3, [r7, #14]


	AccX=(float)AccXLSB/4096;
 80011be:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80011c2:	ee07 3a90 	vmov	s15, r3
 80011c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011ca:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 8001300 <gyro_signal+0x238>
 80011ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011d2:	4b4c      	ldr	r3, [pc, #304]	@ (8001304 <gyro_signal+0x23c>)
 80011d4:	edc3 7a00 	vstr	s15, [r3]
	AccY=(float)AccYLSB/4096;
 80011d8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80011dc:	ee07 3a90 	vmov	s15, r3
 80011e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011e4:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8001300 <gyro_signal+0x238>
 80011e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011ec:	4b46      	ldr	r3, [pc, #280]	@ (8001308 <gyro_signal+0x240>)
 80011ee:	edc3 7a00 	vstr	s15, [r3]
	AccZ=(float)AccZLSB/4096;
 80011f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011f6:	ee07 3a90 	vmov	s15, r3
 80011fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011fe:	eddf 6a40 	vldr	s13, [pc, #256]	@ 8001300 <gyro_signal+0x238>
 8001202:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001206:	4b41      	ldr	r3, [pc, #260]	@ (800130c <gyro_signal+0x244>)
 8001208:	edc3 7a00 	vstr	s15, [r3]
	float denomR = sqrtf(AccX*AccX + AccZ*AccZ) + 1e-6f; // tranh chia cho 0
 800120c:	4b3d      	ldr	r3, [pc, #244]	@ (8001304 <gyro_signal+0x23c>)
 800120e:	ed93 7a00 	vldr	s14, [r3]
 8001212:	4b3c      	ldr	r3, [pc, #240]	@ (8001304 <gyro_signal+0x23c>)
 8001214:	edd3 7a00 	vldr	s15, [r3]
 8001218:	ee27 7a27 	vmul.f32	s14, s14, s15
 800121c:	4b3b      	ldr	r3, [pc, #236]	@ (800130c <gyro_signal+0x244>)
 800121e:	edd3 6a00 	vldr	s13, [r3]
 8001222:	4b3a      	ldr	r3, [pc, #232]	@ (800130c <gyro_signal+0x244>)
 8001224:	edd3 7a00 	vldr	s15, [r3]
 8001228:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800122c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001230:	eeb0 0a67 	vmov.f32	s0, s15
 8001234:	f009 fc62 	bl	800aafc <sqrtf>
 8001238:	eef0 7a40 	vmov.f32	s15, s0
 800123c:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8001310 <gyro_signal+0x248>
 8001240:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001244:	edc7 7a02 	vstr	s15, [r7, #8]
	float denomP = sqrtf(AccY*AccY + AccZ*AccZ) + 1e-6f;
 8001248:	4b2f      	ldr	r3, [pc, #188]	@ (8001308 <gyro_signal+0x240>)
 800124a:	ed93 7a00 	vldr	s14, [r3]
 800124e:	4b2e      	ldr	r3, [pc, #184]	@ (8001308 <gyro_signal+0x240>)
 8001250:	edd3 7a00 	vldr	s15, [r3]
 8001254:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001258:	4b2c      	ldr	r3, [pc, #176]	@ (800130c <gyro_signal+0x244>)
 800125a:	edd3 6a00 	vldr	s13, [r3]
 800125e:	4b2b      	ldr	r3, [pc, #172]	@ (800130c <gyro_signal+0x244>)
 8001260:	edd3 7a00 	vldr	s15, [r3]
 8001264:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001268:	ee77 7a27 	vadd.f32	s15, s14, s15
 800126c:	eeb0 0a67 	vmov.f32	s0, s15
 8001270:	f009 fc44 	bl	800aafc <sqrtf>
 8001274:	eef0 7a40 	vmov.f32	s15, s0
 8001278:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8001310 <gyro_signal+0x248>
 800127c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001280:	edc7 7a01 	vstr	s15, [r7, #4]
	AngleRoll  = atanf(AccY / denomR) * RAD2DEG;
 8001284:	4b20      	ldr	r3, [pc, #128]	@ (8001308 <gyro_signal+0x240>)
 8001286:	ed93 7a00 	vldr	s14, [r3]
 800128a:	edd7 7a02 	vldr	s15, [r7, #8]
 800128e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001292:	eeb0 0a66 	vmov.f32	s0, s13
 8001296:	f009 fc4f 	bl	800ab38 <atanf>
 800129a:	eef0 7a40 	vmov.f32	s15, s0
 800129e:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001314 <gyro_signal+0x24c>
 80012a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001318 <gyro_signal+0x250>)
 80012a8:	edc3 7a00 	vstr	s15, [r3]
	AnglePitch = -atanf(AccX / denomP) * RAD2DEG;
 80012ac:	4b15      	ldr	r3, [pc, #84]	@ (8001304 <gyro_signal+0x23c>)
 80012ae:	ed93 7a00 	vldr	s14, [r3]
 80012b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80012b6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80012ba:	eeb0 0a66 	vmov.f32	s0, s13
 80012be:	f009 fc3b 	bl	800ab38 <atanf>
 80012c2:	eef0 7a40 	vmov.f32	s15, s0
 80012c6:	eef1 7a67 	vneg.f32	s15, s15
 80012ca:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001314 <gyro_signal+0x24c>
 80012ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012d2:	4b12      	ldr	r3, [pc, #72]	@ (800131c <gyro_signal+0x254>)
 80012d4:	edc3 7a00 	vstr	s15, [r3]
  }
} 
 80012d8:	bf00      	nop
 80012da:	3720      	adds	r7, #32
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	2000046c 	.word	0x2000046c
 80012e4:	20000214 	.word	0x20000214
 80012e8:	2000044c 	.word	0x2000044c
 80012ec:	42830000 	.word	0x42830000
 80012f0:	20000450 	.word	0x20000450
 80012f4:	20000454 	.word	0x20000454
 80012f8:	20000458 	.word	0x20000458
 80012fc:	20000472 	.word	0x20000472
 8001300:	45800000 	.word	0x45800000
 8001304:	20000474 	.word	0x20000474
 8001308:	20000478 	.word	0x20000478
 800130c:	2000047c 	.word	0x2000047c
 8001310:	358637bd 	.word	0x358637bd
 8001314:	42652ee1 	.word	0x42652ee1
 8001318:	20000480 	.word	0x20000480
 800131c:	20000484 	.word	0x20000484

08001320 <pid_equation>:

//pid tranh I bao hoa, tich luy qua nhieu, vuot gioi han i_limit
// tranh gia tri pid out vuot gioi han out_limit
void pid_equation(float Error, float P , float I, float D, 
                  float PrevError, float PrevIterm, float dt_s,
                  float i_limit, float out_limit) {
 8001320:	b480      	push	{r7}
 8001322:	b091      	sub	sp, #68	@ 0x44
 8001324:	af00      	add	r7, sp, #0
 8001326:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 800132a:	edc7 0a08 	vstr	s1, [r7, #32]
 800132e:	ed87 1a07 	vstr	s2, [r7, #28]
 8001332:	edc7 1a06 	vstr	s3, [r7, #24]
 8001336:	ed87 2a05 	vstr	s4, [r7, #20]
 800133a:	edc7 2a04 	vstr	s5, [r7, #16]
 800133e:	ed87 3a03 	vstr	s6, [r7, #12]
 8001342:	edc7 3a02 	vstr	s7, [r7, #8]
 8001346:	ed87 4a01 	vstr	s8, [r7, #4]
  float Pterm = P * Error;
 800134a:	ed97 7a08 	vldr	s14, [r7, #32]
 800134e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001356:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

  // D dùng dt có chặn đáy
  float deriv_dt = (dt_s > 0.0005f) ? dt_s : 0.0005f; //tranh dt qua nho ~ 0 thi chia bi loi
 800135a:	edd7 7a03 	vldr	s15, [r7, #12]
 800135e:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 800150c <pid_equation+0x1ec>
 8001362:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800136a:	dd01      	ble.n	8001370 <pid_equation+0x50>
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	e000      	b.n	8001372 <pid_equation+0x52>
 8001370:	4b67      	ldr	r3, [pc, #412]	@ (8001510 <pid_equation+0x1f0>)
 8001372:	633b      	str	r3, [r7, #48]	@ 0x30
  float Dterm = D * (Error - PrevError) / deriv_dt;
 8001374:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001378:	edd7 7a05 	vldr	s15, [r7, #20]
 800137c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001380:	edd7 7a06 	vldr	s15, [r7, #24]
 8001384:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001388:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800138c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001390:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

  // Tính output tạm thời (chưa tích I) để xét bão hòa
  float pre = Pterm + PrevIterm + Dterm;
 8001394:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001398:	edd7 7a04 	vldr	s15, [r7, #16]
 800139c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013a0:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80013a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013a8:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

  float Iterm = PrevIterm;
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  // Nếu đang bão hòa và lỗi cùng chiều → không tích I (anti-windup)
  if (!((pre >=  out_limit && Error >  0) ||
 80013b0:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80013b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80013b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c0:	bfac      	ite	ge
 80013c2:	2301      	movge	r3, #1
 80013c4:	2300      	movlt	r3, #0
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	f083 0301 	eor.w	r3, r3, #1
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d10e      	bne.n	80013f0 <pid_equation+0xd0>
 80013d2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80013d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013de:	bfcc      	ite	gt
 80013e0:	2301      	movgt	r3, #1
 80013e2:	2300      	movle	r3, #0
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	f083 0301 	eor.w	r3, r3, #1
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d055      	beq.n	800149c <pid_equation+0x17c>
        (pre <= -out_limit && Error <  0))) {
 80013f0:	edd7 7a01 	vldr	s15, [r7, #4]
 80013f4:	eef1 7a67 	vneg.f32	s15, s15
 80013f8:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80013fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001404:	bf94      	ite	ls
 8001406:	2301      	movls	r3, #1
 8001408:	2300      	movhi	r3, #0
 800140a:	b2db      	uxtb	r3, r3
 800140c:	f083 0301 	eor.w	r3, r3, #1
 8001410:	b2db      	uxtb	r3, r3
  if (!((pre >=  out_limit && Error >  0) ||
 8001412:	2b00      	cmp	r3, #0
 8001414:	d10e      	bne.n	8001434 <pid_equation+0x114>
        (pre <= -out_limit && Error <  0))) {
 8001416:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800141a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800141e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001422:	bf4c      	ite	mi
 8001424:	2301      	movmi	r3, #1
 8001426:	2300      	movpl	r3, #0
 8001428:	b2db      	uxtb	r3, r3
 800142a:	f083 0301 	eor.w	r3, r3, #1
 800142e:	b2db      	uxtb	r3, r3
 8001430:	2b00      	cmp	r3, #0
 8001432:	d033      	beq.n	800149c <pid_equation+0x17c>
    Iterm = PrevIterm + I * (Error + PrevError) * (dt_s * 0.5f); // dien tich hinh thang = (f(k-1) + f(k))*dt/2
 8001434:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001438:	edd7 7a05 	vldr	s15, [r7, #20]
 800143c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001440:	edd7 7a07 	vldr	s15, [r7, #28]
 8001444:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001448:	edd7 7a03 	vldr	s15, [r7, #12]
 800144c:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8001450:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001454:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001458:	ed97 7a04 	vldr	s14, [r7, #16]
 800145c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001460:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    if (Iterm >  i_limit) Iterm =  i_limit;
 8001464:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8001468:	edd7 7a02 	vldr	s15, [r7, #8]
 800146c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001474:	dd01      	ble.n	800147a <pid_equation+0x15a>
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (Iterm < -i_limit) Iterm = -i_limit;
 800147a:	edd7 7a02 	vldr	s15, [r7, #8]
 800147e:	eef1 7a67 	vneg.f32	s15, s15
 8001482:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8001486:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800148a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800148e:	d505      	bpl.n	800149c <pid_equation+0x17c>
 8001490:	edd7 7a02 	vldr	s15, [r7, #8]
 8001494:	eef1 7a67 	vneg.f32	s15, s15
 8001498:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
  }

  float out = Pterm + Iterm + Dterm; //gia tri pid
 800149c:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80014a0:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80014a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014a8:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80014ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014b0:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
  if (out >  out_limit) out =  out_limit;
 80014b4:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80014b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80014bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c4:	dd01      	ble.n	80014ca <pid_equation+0x1aa>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (out < -out_limit) out = -out_limit;
 80014ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80014ce:	eef1 7a67 	vneg.f32	s15, s15
 80014d2:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80014d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014de:	d505      	bpl.n	80014ec <pid_equation+0x1cc>
 80014e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80014e4:	eef1 7a67 	vneg.f32	s15, s15
 80014e8:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

  PIDReturn[0] = out;
 80014ec:	4a09      	ldr	r2, [pc, #36]	@ (8001514 <pid_equation+0x1f4>)
 80014ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80014f0:	6013      	str	r3, [r2, #0]
  PIDReturn[1] = Error;
 80014f2:	4a08      	ldr	r2, [pc, #32]	@ (8001514 <pid_equation+0x1f4>)
 80014f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f6:	6053      	str	r3, [r2, #4]
  PIDReturn[2] = Iterm;
 80014f8:	4a06      	ldr	r2, [pc, #24]	@ (8001514 <pid_equation+0x1f4>)
 80014fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80014fc:	6093      	str	r3, [r2, #8]
}
 80014fe:	bf00      	nop
 8001500:	3744      	adds	r7, #68	@ 0x44
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	3a03126f 	.word	0x3a03126f
 8001510:	3a03126f 	.word	0x3a03126f
 8001514:	20000498 	.word	0x20000498

08001518 <reset_pid>:

void reset_pid(void) {
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
	PrevErrorRateRoll=0; PrevErrorRatePitch=0;	PrevErrorRateYaw=0;
 800151c:	4b16      	ldr	r3, [pc, #88]	@ (8001578 <reset_pid+0x60>)
 800151e:	f04f 0200 	mov.w	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	4b15      	ldr	r3, [pc, #84]	@ (800157c <reset_pid+0x64>)
 8001526:	f04f 0200 	mov.w	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	4b14      	ldr	r3, [pc, #80]	@ (8001580 <reset_pid+0x68>)
 800152e:	f04f 0200 	mov.w	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
	PrevItermRateRoll=0; PrevItermRatePitch=0;	PrevItermRateYaw=0;
 8001534:	4b13      	ldr	r3, [pc, #76]	@ (8001584 <reset_pid+0x6c>)
 8001536:	f04f 0200 	mov.w	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	4b12      	ldr	r3, [pc, #72]	@ (8001588 <reset_pid+0x70>)
 800153e:	f04f 0200 	mov.w	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	4b11      	ldr	r3, [pc, #68]	@ (800158c <reset_pid+0x74>)
 8001546:	f04f 0200 	mov.w	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
	PrevErrorAngleRoll=0; PrevErrorAnglePitch=0;
 800154c:	4b10      	ldr	r3, [pc, #64]	@ (8001590 <reset_pid+0x78>)
 800154e:	f04f 0200 	mov.w	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	4b0f      	ldr	r3, [pc, #60]	@ (8001594 <reset_pid+0x7c>)
 8001556:	f04f 0200 	mov.w	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
	PrevItermAngleRoll=0; PrevItermAnglePitch=0;
 800155c:	4b0e      	ldr	r3, [pc, #56]	@ (8001598 <reset_pid+0x80>)
 800155e:	f04f 0200 	mov.w	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	4b0d      	ldr	r3, [pc, #52]	@ (800159c <reset_pid+0x84>)
 8001566:	f04f 0200 	mov.w	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	200004c8 	.word	0x200004c8
 800157c:	200004cc 	.word	0x200004cc
 8001580:	200004d0 	.word	0x200004d0
 8001584:	200004d4 	.word	0x200004d4
 8001588:	200004d8 	.word	0x200004d8
 800158c:	200004dc 	.word	0x200004dc
 8001590:	20000508 	.word	0x20000508
 8001594:	2000050c 	.word	0x2000050c
 8001598:	20000510 	.word	0x20000510
 800159c:	20000514 	.word	0x20000514

080015a0 <pulse_saturate>:

//gioi han gia tri power (us) gui ve esc
static inline uint16_t pulse_saturate(int v) {
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  if (v < ESC_MIN_CCR) v = ESC_MIN_CCR;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2b31      	cmp	r3, #49	@ 0x31
 80015ac:	dc01      	bgt.n	80015b2 <pulse_saturate+0x12>
 80015ae:	2332      	movs	r3, #50	@ 0x32
 80015b0:	607b      	str	r3, [r7, #4]
  if (v > ESC_MAX_CCR) v = ESC_MAX_CCR;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2b64      	cmp	r3, #100	@ 0x64
 80015b6:	dd01      	ble.n	80015bc <pulse_saturate+0x1c>
 80015b8:	2364      	movs	r3, #100	@ 0x64
 80015ba:	607b      	str	r3, [r7, #4]
  return (uint16_t)v;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	b29b      	uxth	r3, r3
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <sbus_decode>:




//giai ma sbus data raw vao rc_channel[16]
void sbus_decode(volatile uint8_t* sbus_frame, uint16_t* channels) {
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
    // Kiểm tra Start Byte và End Byte, end byte co loa 0x00 co loai 0x04
    if (sbus_frame[0] != SBUS_START_BYTE || (sbus_frame[24] != SBUS_END_BYTE && sbus_frame[24] != SBUS_END_BYTE2)) {
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	2b0f      	cmp	r3, #15
 80015de:	f040 8189 	bne.w	80018f4 <sbus_decode+0x328>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	3318      	adds	r3, #24
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d006      	beq.n	80015fc <sbus_decode+0x30>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	3318      	adds	r3, #24
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	2b04      	cmp	r3, #4
 80015f8:	f040 817c 	bne.w	80018f4 <sbus_decode+0x328>
        return; // Gói tin không hợp lệ
    }

    // Giải mã 16 kênh (mỗi kênh 11 bit)
    channels[0]  = (uint16_t)((sbus_frame[1]    | sbus_frame[2] << 8) & 0x07FF);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3301      	adds	r3, #1
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	b2db      	uxtb	r3, r3
 8001604:	b21a      	sxth	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	3302      	adds	r3, #2
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	b2db      	uxtb	r3, r3
 800160e:	021b      	lsls	r3, r3, #8
 8001610:	b21b      	sxth	r3, r3
 8001612:	4313      	orrs	r3, r2
 8001614:	b21b      	sxth	r3, r3
 8001616:	b29b      	uxth	r3, r3
 8001618:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800161c:	b29a      	uxth	r2, r3
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	801a      	strh	r2, [r3, #0]
    channels[1]  = (uint16_t)((sbus_frame[2] >> 3 | sbus_frame[3] << 5) & 0x07FF);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	3302      	adds	r3, #2
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	b2db      	uxtb	r3, r3
 800162a:	08db      	lsrs	r3, r3, #3
 800162c:	b2db      	uxtb	r3, r3
 800162e:	b21a      	sxth	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	3303      	adds	r3, #3
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	b2db      	uxtb	r3, r3
 8001638:	015b      	lsls	r3, r3, #5
 800163a:	b21b      	sxth	r3, r3
 800163c:	4313      	orrs	r3, r2
 800163e:	b21b      	sxth	r3, r3
 8001640:	b29a      	uxth	r2, r3
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	3302      	adds	r3, #2
 8001646:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800164a:	b292      	uxth	r2, r2
 800164c:	801a      	strh	r2, [r3, #0]
    channels[2]  = (uint16_t)((sbus_frame[3] >> 6 | sbus_frame[4] << 2 | sbus_frame[5] << 10) & 0x07FF);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	3303      	adds	r3, #3
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	b2db      	uxtb	r3, r3
 8001656:	099b      	lsrs	r3, r3, #6
 8001658:	b2db      	uxtb	r3, r3
 800165a:	b21a      	sxth	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	3304      	adds	r3, #4
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	b2db      	uxtb	r3, r3
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	b21b      	sxth	r3, r3
 8001668:	4313      	orrs	r3, r2
 800166a:	b21a      	sxth	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	3305      	adds	r3, #5
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	b2db      	uxtb	r3, r3
 8001674:	029b      	lsls	r3, r3, #10
 8001676:	b21b      	sxth	r3, r3
 8001678:	4313      	orrs	r3, r2
 800167a:	b21b      	sxth	r3, r3
 800167c:	b29a      	uxth	r2, r3
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	3304      	adds	r3, #4
 8001682:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8001686:	b292      	uxth	r2, r2
 8001688:	801a      	strh	r2, [r3, #0]
    channels[3]  = (uint16_t)((sbus_frame[5] >> 1 | sbus_frame[6] << 7) & 0x07FF);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	3305      	adds	r3, #5
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	b2db      	uxtb	r3, r3
 8001692:	085b      	lsrs	r3, r3, #1
 8001694:	b2db      	uxtb	r3, r3
 8001696:	b21a      	sxth	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3306      	adds	r3, #6
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	01db      	lsls	r3, r3, #7
 80016a2:	b21b      	sxth	r3, r3
 80016a4:	4313      	orrs	r3, r2
 80016a6:	b21b      	sxth	r3, r3
 80016a8:	b29a      	uxth	r2, r3
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	3306      	adds	r3, #6
 80016ae:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80016b2:	b292      	uxth	r2, r2
 80016b4:	801a      	strh	r2, [r3, #0]
    channels[4]  = (uint16_t)((sbus_frame[6] >> 4 | sbus_frame[7] << 4) & 0x07FF);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	3306      	adds	r3, #6
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	091b      	lsrs	r3, r3, #4
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	b21a      	sxth	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	3307      	adds	r3, #7
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	011b      	lsls	r3, r3, #4
 80016ce:	b21b      	sxth	r3, r3
 80016d0:	4313      	orrs	r3, r2
 80016d2:	b21b      	sxth	r3, r3
 80016d4:	b29a      	uxth	r2, r3
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	3308      	adds	r3, #8
 80016da:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80016de:	b292      	uxth	r2, r2
 80016e0:	801a      	strh	r2, [r3, #0]
    channels[5]  = (uint16_t)((sbus_frame[7] >> 7 | sbus_frame[8] << 1 | sbus_frame[9] << 9) & 0x07FF);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	3307      	adds	r3, #7
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	09db      	lsrs	r3, r3, #7
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	b21a      	sxth	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	3308      	adds	r3, #8
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	b21b      	sxth	r3, r3
 80016fc:	4313      	orrs	r3, r2
 80016fe:	b21a      	sxth	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	3309      	adds	r3, #9
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	b2db      	uxtb	r3, r3
 8001708:	025b      	lsls	r3, r3, #9
 800170a:	b21b      	sxth	r3, r3
 800170c:	4313      	orrs	r3, r2
 800170e:	b21b      	sxth	r3, r3
 8001710:	b29a      	uxth	r2, r3
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	330a      	adds	r3, #10
 8001716:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800171a:	b292      	uxth	r2, r2
 800171c:	801a      	strh	r2, [r3, #0]
    channels[6]  = (uint16_t)((sbus_frame[9] >> 2 | sbus_frame[10] << 6) & 0x07FF);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	3309      	adds	r3, #9
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	b2db      	uxtb	r3, r3
 8001726:	089b      	lsrs	r3, r3, #2
 8001728:	b2db      	uxtb	r3, r3
 800172a:	b21a      	sxth	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	330a      	adds	r3, #10
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	b2db      	uxtb	r3, r3
 8001734:	019b      	lsls	r3, r3, #6
 8001736:	b21b      	sxth	r3, r3
 8001738:	4313      	orrs	r3, r2
 800173a:	b21b      	sxth	r3, r3
 800173c:	b29a      	uxth	r2, r3
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	330c      	adds	r3, #12
 8001742:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8001746:	b292      	uxth	r2, r2
 8001748:	801a      	strh	r2, [r3, #0]
    channels[7]  = (uint16_t)((sbus_frame[10] >> 5 | sbus_frame[11] << 3) & 0x07FF);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	330a      	adds	r3, #10
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	b2db      	uxtb	r3, r3
 8001752:	095b      	lsrs	r3, r3, #5
 8001754:	b2db      	uxtb	r3, r3
 8001756:	b21a      	sxth	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	330b      	adds	r3, #11
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	b2db      	uxtb	r3, r3
 8001760:	00db      	lsls	r3, r3, #3
 8001762:	b21b      	sxth	r3, r3
 8001764:	4313      	orrs	r3, r2
 8001766:	b21b      	sxth	r3, r3
 8001768:	b29a      	uxth	r2, r3
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	330e      	adds	r3, #14
 800176e:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8001772:	b292      	uxth	r2, r2
 8001774:	801a      	strh	r2, [r3, #0]
    channels[8]  = (uint16_t)((sbus_frame[12]   | sbus_frame[13] << 8) & 0x07FF);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	330c      	adds	r3, #12
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	b2db      	uxtb	r3, r3
 800177e:	b21a      	sxth	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	330d      	adds	r3, #13
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	b2db      	uxtb	r3, r3
 8001788:	021b      	lsls	r3, r3, #8
 800178a:	b21b      	sxth	r3, r3
 800178c:	4313      	orrs	r3, r2
 800178e:	b21b      	sxth	r3, r3
 8001790:	b29a      	uxth	r2, r3
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	3310      	adds	r3, #16
 8001796:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800179a:	b292      	uxth	r2, r2
 800179c:	801a      	strh	r2, [r3, #0]
    channels[9]  = (uint16_t)((sbus_frame[13] >> 3 | sbus_frame[14] << 5) & 0x07FF);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	330d      	adds	r3, #13
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	08db      	lsrs	r3, r3, #3
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	b21a      	sxth	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	330e      	adds	r3, #14
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	015b      	lsls	r3, r3, #5
 80017b6:	b21b      	sxth	r3, r3
 80017b8:	4313      	orrs	r3, r2
 80017ba:	b21b      	sxth	r3, r3
 80017bc:	b29a      	uxth	r2, r3
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	3312      	adds	r3, #18
 80017c2:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80017c6:	b292      	uxth	r2, r2
 80017c8:	801a      	strh	r2, [r3, #0]
    channels[10] = (uint16_t)((sbus_frame[14] >> 6 | sbus_frame[15] << 2 | sbus_frame[16] << 10) & 0x07FF);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	330e      	adds	r3, #14
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	099b      	lsrs	r3, r3, #6
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	b21a      	sxth	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	330f      	adds	r3, #15
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	b21b      	sxth	r3, r3
 80017e4:	4313      	orrs	r3, r2
 80017e6:	b21a      	sxth	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3310      	adds	r3, #16
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	029b      	lsls	r3, r3, #10
 80017f2:	b21b      	sxth	r3, r3
 80017f4:	4313      	orrs	r3, r2
 80017f6:	b21b      	sxth	r3, r3
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	3314      	adds	r3, #20
 80017fe:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8001802:	b292      	uxth	r2, r2
 8001804:	801a      	strh	r2, [r3, #0]
    channels[11] = (uint16_t)((sbus_frame[16] >> 1 | sbus_frame[17] << 7) & 0x07FF);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	3310      	adds	r3, #16
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	b2db      	uxtb	r3, r3
 800180e:	085b      	lsrs	r3, r3, #1
 8001810:	b2db      	uxtb	r3, r3
 8001812:	b21a      	sxth	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	3311      	adds	r3, #17
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	b2db      	uxtb	r3, r3
 800181c:	01db      	lsls	r3, r3, #7
 800181e:	b21b      	sxth	r3, r3
 8001820:	4313      	orrs	r3, r2
 8001822:	b21b      	sxth	r3, r3
 8001824:	b29a      	uxth	r2, r3
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	3316      	adds	r3, #22
 800182a:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800182e:	b292      	uxth	r2, r2
 8001830:	801a      	strh	r2, [r3, #0]
    channels[12] = (uint16_t)((sbus_frame[17] >> 4 | sbus_frame[18] << 4) & 0x07FF);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	3311      	adds	r3, #17
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	b2db      	uxtb	r3, r3
 800183a:	091b      	lsrs	r3, r3, #4
 800183c:	b2db      	uxtb	r3, r3
 800183e:	b21a      	sxth	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3312      	adds	r3, #18
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	b2db      	uxtb	r3, r3
 8001848:	011b      	lsls	r3, r3, #4
 800184a:	b21b      	sxth	r3, r3
 800184c:	4313      	orrs	r3, r2
 800184e:	b21b      	sxth	r3, r3
 8001850:	b29a      	uxth	r2, r3
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	3318      	adds	r3, #24
 8001856:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800185a:	b292      	uxth	r2, r2
 800185c:	801a      	strh	r2, [r3, #0]
    channels[13] = (uint16_t)((sbus_frame[18] >> 7 | sbus_frame[19] << 1 | sbus_frame[20] << 9) & 0x07FF);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	3312      	adds	r3, #18
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	b2db      	uxtb	r3, r3
 8001866:	09db      	lsrs	r3, r3, #7
 8001868:	b2db      	uxtb	r3, r3
 800186a:	b21a      	sxth	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	3313      	adds	r3, #19
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	b2db      	uxtb	r3, r3
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	b21b      	sxth	r3, r3
 8001878:	4313      	orrs	r3, r2
 800187a:	b21a      	sxth	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3314      	adds	r3, #20
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	b2db      	uxtb	r3, r3
 8001884:	025b      	lsls	r3, r3, #9
 8001886:	b21b      	sxth	r3, r3
 8001888:	4313      	orrs	r3, r2
 800188a:	b21b      	sxth	r3, r3
 800188c:	b29a      	uxth	r2, r3
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	331a      	adds	r3, #26
 8001892:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8001896:	b292      	uxth	r2, r2
 8001898:	801a      	strh	r2, [r3, #0]
    channels[14] = (uint16_t)((sbus_frame[20] >> 2 | sbus_frame[21] << 6) & 0x07FF);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	3314      	adds	r3, #20
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	089b      	lsrs	r3, r3, #2
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	b21a      	sxth	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3315      	adds	r3, #21
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	019b      	lsls	r3, r3, #6
 80018b2:	b21b      	sxth	r3, r3
 80018b4:	4313      	orrs	r3, r2
 80018b6:	b21b      	sxth	r3, r3
 80018b8:	b29a      	uxth	r2, r3
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	331c      	adds	r3, #28
 80018be:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80018c2:	b292      	uxth	r2, r2
 80018c4:	801a      	strh	r2, [r3, #0]
    channels[15] = (uint16_t)((sbus_frame[21] >> 5 | sbus_frame[22] << 3) & 0x07FF);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	3315      	adds	r3, #21
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	095b      	lsrs	r3, r3, #5
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	b21a      	sxth	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3316      	adds	r3, #22
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	00db      	lsls	r3, r3, #3
 80018de:	b21b      	sxth	r3, r3
 80018e0:	4313      	orrs	r3, r2
 80018e2:	b21b      	sxth	r3, r3
 80018e4:	b29a      	uxth	r2, r3
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	331e      	adds	r3, #30
 80018ea:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80018ee:	b292      	uxth	r2, r2
 80018f0:	801a      	strh	r2, [r3, #0]
 80018f2:	e000      	b.n	80018f6 <sbus_decode+0x32a>
        return; // Gói tin không hợp lệ
 80018f4:	bf00      	nop
}
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <HAL_UARTEx_RxEventCallback>:
  return (uint16_t)(1000 + (v - SBUS_MIN) * (1000.0f / (SBUS_MAX - SBUS_MIN)));
}

//ham call back RX khi nhan data 
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	460b      	mov	r3, r1
 800190a:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a11      	ldr	r2, [pc, #68]	@ (8001958 <HAL_UARTEx_RxEventCallback+0x58>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d11b      	bne.n	800194e <HAL_UARTEx_RxEventCallback+0x4e>
	{
		if (Size >= SBUS_FRAME_SIZE)
 8001916:	887b      	ldrh	r3, [r7, #2]
 8001918:	2b18      	cmp	r3, #24
 800191a:	d90b      	bls.n	8001934 <HAL_UARTEx_RxEventCallback+0x34>
		{
			sbus_decode(sbus_rx_buffer, rc_channels);
 800191c:	490f      	ldr	r1, [pc, #60]	@ (800195c <HAL_UARTEx_RxEventCallback+0x5c>)
 800191e:	4810      	ldr	r0, [pc, #64]	@ (8001960 <HAL_UARTEx_RxEventCallback+0x60>)
 8001920:	f7ff fe54 	bl	80015cc <sbus_decode>
			sbus_data_ready_flag = 1; //dat co trong while
 8001924:	4b0f      	ldr	r3, [pc, #60]	@ (8001964 <HAL_UARTEx_RxEventCallback+0x64>)
 8001926:	2201      	movs	r2, #1
 8001928:	701a      	strb	r2, [r3, #0]
      last_sbus_ms = HAL_GetTick(); //dat moc decode xong SBUS
 800192a:	f001 fbdb 	bl	80030e4 <HAL_GetTick>
 800192e:	4603      	mov	r3, r0
 8001930:	4a0d      	ldr	r2, [pc, #52]	@ (8001968 <HAL_UARTEx_RxEventCallback+0x68>)
 8001932:	6013      	str	r3, [r2, #0]
		}
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, sbus_rx_buffer, SBUS_FRAME_SIZE);
 8001934:	2219      	movs	r2, #25
 8001936:	490a      	ldr	r1, [pc, #40]	@ (8001960 <HAL_UARTEx_RxEventCallback+0x60>)
 8001938:	480c      	ldr	r0, [pc, #48]	@ (800196c <HAL_UARTEx_RxEventCallback+0x6c>)
 800193a:	f004 fd89 	bl	8006450 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT); // tránh callback nửa khung
 800193e:	4b0c      	ldr	r3, [pc, #48]	@ (8001970 <HAL_UARTEx_RxEventCallback+0x70>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	4b0a      	ldr	r3, [pc, #40]	@ (8001970 <HAL_UARTEx_RxEventCallback+0x70>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f022 0208 	bic.w	r2, r2, #8
 800194c:	601a      	str	r2, [r3, #0]
//        gy951_data_ready_flag = 1; // Bat co bao hieu cho while(1)
//
//        // Khoi dong lai DMA de nhan goi tiep theo
//        HAL_UARTEx_ReceiveToIdle_DMA(&huart1, gy951_rx_buffer, 64);
//    }
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40004400 	.word	0x40004400
 800195c:	20000548 	.word	0x20000548
 8001960:	2000052c 	.word	0x2000052c
 8001964:	20000568 	.word	0x20000568
 8001968:	2000056c 	.word	0x2000056c
 800196c:	200002f8 	.word	0x200002f8
 8001970:	200003e8 	.word	0x200003e8

08001974 <map>:

//map gia tri trong khoang [in_min,in_max] -> [out_min, out_max]
long map(long value, long in_min, long in_max, long out_min, long out_max) {
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
 8001980:	603b      	str	r3, [r7, #0]
	if (value < in_min) value = in_min;
 8001982:	68fa      	ldr	r2, [r7, #12]
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	429a      	cmp	r2, r3
 8001988:	da01      	bge.n	800198e <map+0x1a>
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	60fb      	str	r3, [r7, #12]
  if (value > in_max) value = in_max;
 800198e:	68fa      	ldr	r2, [r7, #12]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	429a      	cmp	r2, r3
 8001994:	dd01      	ble.n	800199a <map+0x26>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	60fb      	str	r3, [r7, #12]
  return (value - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800199a:	68fa      	ldr	r2, [r7, #12]
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	69b9      	ldr	r1, [r7, #24]
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	1a8a      	subs	r2, r1, r2
 80019a6:	fb03 f202 	mul.w	r2, r3, r2
 80019aa:	6879      	ldr	r1, [r7, #4]
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	1acb      	subs	r3, r1, r3
 80019b0:	fb92 f2f3 	sdiv	r2, r2, r3
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	4413      	add	r3, r2
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3714      	adds	r7, #20
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <fmap>:

static inline float fmap(long value, long in_min, long in_max, float out_min, float out_max) {
 80019c4:	b480      	push	{r7}
 80019c6:	b087      	sub	sp, #28
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6178      	str	r0, [r7, #20]
 80019cc:	6139      	str	r1, [r7, #16]
 80019ce:	60fa      	str	r2, [r7, #12]
 80019d0:	ed87 0a02 	vstr	s0, [r7, #8]
 80019d4:	edc7 0a01 	vstr	s1, [r7, #4]
	if (value < in_min) value = in_min;
 80019d8:	697a      	ldr	r2, [r7, #20]
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	429a      	cmp	r2, r3
 80019de:	da01      	bge.n	80019e4 <fmap+0x20>
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	617b      	str	r3, [r7, #20]
	if (value > in_max) value = in_max;
 80019e4:	697a      	ldr	r2, [r7, #20]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	dd01      	ble.n	80019f0 <fmap+0x2c>
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	617b      	str	r3, [r7, #20]
  return out_min + (float)(value - in_min) * (out_max - out_min) / (float)(in_max - in_min);
 80019f0:	697a      	ldr	r2, [r7, #20]
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	ee07 3a90 	vmov	s15, r3
 80019fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019fe:	edd7 6a01 	vldr	s13, [r7, #4]
 8001a02:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a06:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001a0a:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	ee07 3a90 	vmov	s15, r3
 8001a18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a20:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a24:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001a28:	eeb0 0a67 	vmov.f32	s0, s15
 8001a2c:	371c      	adds	r7, #28
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
	...

08001a38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a3e:	f001 faeb 	bl	8003018 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a42:	f000 fd67 	bl	8002514 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a46:	f000 ff4b 	bl	80028e0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a4a:	f000 ff13 	bl	8002874 <MX_DMA_Init>
  MX_I2C1_Init();
 8001a4e:	f000 fdc9 	bl	80025e4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001a52:	f000 fe8d 	bl	8002770 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8001a56:	f000 fdf3 	bl	8002640 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001a5a:	f000 feb3 	bl	80027c4 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8001a5e:	f000 fedf 	bl	8002820 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001a62:	2100      	movs	r1, #0
 8001a64:	4870      	ldr	r0, [pc, #448]	@ (8001c28 <main+0x1f0>)
 8001a66:	f003 ff29 	bl	80058bc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001a6a:	2104      	movs	r1, #4
 8001a6c:	486e      	ldr	r0, [pc, #440]	@ (8001c28 <main+0x1f0>)
 8001a6e:	f003 ff25 	bl	80058bc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001a72:	2108      	movs	r1, #8
 8001a74:	486c      	ldr	r0, [pc, #432]	@ (8001c28 <main+0x1f0>)
 8001a76:	f003 ff21 	bl	80058bc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001a7a:	210c      	movs	r1, #12
 8001a7c:	486a      	ldr	r0, [pc, #424]	@ (8001c28 <main+0x1f0>)
 8001a7e:	f003 ff1d 	bl	80058bc <HAL_TIM_PWM_Start>

  #if Calibrate
		TIM3->CCR1=ESC_MAX_CCR; //set the maximum (2ms)
 8001a82:	4b6a      	ldr	r3, [pc, #424]	@ (8001c2c <main+0x1f4>)
 8001a84:	2264      	movs	r2, #100	@ 0x64
 8001a86:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM3->CCR2=ESC_MAX_CCR;
 8001a88:	4b68      	ldr	r3, [pc, #416]	@ (8001c2c <main+0x1f4>)
 8001a8a:	2264      	movs	r2, #100	@ 0x64
 8001a8c:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM3->CCR3=ESC_MAX_CCR;
 8001a8e:	4b67      	ldr	r3, [pc, #412]	@ (8001c2c <main+0x1f4>)
 8001a90:	2264      	movs	r2, #100	@ 0x64
 8001a92:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM3->CCR4=ESC_MAX_CCR;
 8001a94:	4b65      	ldr	r3, [pc, #404]	@ (8001c2c <main+0x1f4>)
 8001a96:	2264      	movs	r2, #100	@ 0x64
 8001a98:	641a      	str	r2, [r3, #64]	@ 0x40

		HAL_Delay(3000); //wait for 1 beep
 8001a9a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001a9e:	f001 fb2d 	bl	80030fc <HAL_Delay>
		TIM3->CCR1=ESC_MIN_CCR; //set the minimum (2ms)
 8001aa2:	4b62      	ldr	r3, [pc, #392]	@ (8001c2c <main+0x1f4>)
 8001aa4:	2232      	movs	r2, #50	@ 0x32
 8001aa6:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM3->CCR2=ESC_MIN_CCR;
 8001aa8:	4b60      	ldr	r3, [pc, #384]	@ (8001c2c <main+0x1f4>)
 8001aaa:	2232      	movs	r2, #50	@ 0x32
 8001aac:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM3->CCR3=ESC_MIN_CCR;
 8001aae:	4b5f      	ldr	r3, [pc, #380]	@ (8001c2c <main+0x1f4>)
 8001ab0:	2232      	movs	r2, #50	@ 0x32
 8001ab2:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM3->CCR4=ESC_MIN_CCR;
 8001ab4:	4b5d      	ldr	r3, [pc, #372]	@ (8001c2c <main+0x1f4>)
 8001ab6:	2232      	movs	r2, #50	@ 0x32
 8001ab8:	641a      	str	r2, [r3, #64]	@ 0x40
		HAL_Delay(3000); //wait for 1 beep
 8001aba:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001abe:	f001 fb1d 	bl	80030fc <HAL_Delay>
	#endif

  HAL_Delay(250);
 8001ac2:	20fa      	movs	r0, #250	@ 0xfa
 8001ac4:	f001 fb1a 	bl	80030fc <HAL_Delay>
  (void)wr8(&hi2c1, 0x6B, 0x00);  // wake mpu 
 8001ac8:	2200      	movs	r2, #0
 8001aca:	216b      	movs	r1, #107	@ 0x6b
 8001acc:	4858      	ldr	r0, [pc, #352]	@ (8001c30 <main+0x1f8>)
 8001ace:	f7ff fa61 	bl	8000f94 <wr8>
  (void)wr8(&hi2c1, 0x1A,0x03); // cho thanh ghi 0x1A = 0x03 => low pass filter ~44hz
 8001ad2:	2203      	movs	r2, #3
 8001ad4:	211a      	movs	r1, #26
 8001ad6:	4856      	ldr	r0, [pc, #344]	@ (8001c30 <main+0x1f8>)
 8001ad8:	f7ff fa5c 	bl	8000f94 <wr8>
  (void)wr8(&hi2c1, 0x1B,0x08); // config sensing scale factor la *65.5*/ do/s
 8001adc:	2208      	movs	r2, #8
 8001ade:	211b      	movs	r1, #27
 8001ae0:	4853      	ldr	r0, [pc, #332]	@ (8001c30 <main+0x1f8>)
 8001ae2:	f7ff fa57 	bl	8000f94 <wr8>
  //sample rate cua cam bien binh thuong la 8khz, neu bat lowpassfilter thi doc la 1000hz
  (void)wr8(&hi2c1, 0x19, 0x03); // Set Sample Rate cua cam bien 250hz
 8001ae6:	2203      	movs	r2, #3
 8001ae8:	2119      	movs	r1, #25
 8001aea:	4851      	ldr	r0, [pc, #324]	@ (8001c30 <main+0x1f8>)
 8001aec:	f7ff fa52 	bl	8000f94 <wr8>
  (void)wr8(&hi2c1, 0x1C, 0x10); // set full scale range cua accelerometer la +-8g
 8001af0:	2210      	movs	r2, #16
 8001af2:	211c      	movs	r1, #28
 8001af4:	484e      	ldr	r0, [pc, #312]	@ (8001c30 <main+0x1f8>)
 8001af6:	f7ff fa4d 	bl	8000f94 <wr8>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, sbus_rx_buffer, SBUS_FRAME_SIZE); //bat callback
 8001afa:	2219      	movs	r2, #25
 8001afc:	494d      	ldr	r1, [pc, #308]	@ (8001c34 <main+0x1fc>)
 8001afe:	484e      	ldr	r0, [pc, #312]	@ (8001c38 <main+0x200>)
 8001b00:	f004 fca6 	bl	8006450 <HAL_UARTEx_ReceiveToIdle_DMA>
//  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, gy951_rx_buffer, 64);

	__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);   // tắt ngat giua chung khi dang doc tin nhan uart
 8001b04:	4b4d      	ldr	r3, [pc, #308]	@ (8001c3c <main+0x204>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	4b4c      	ldr	r3, [pc, #304]	@ (8001c3c <main+0x204>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f022 0208 	bic.w	r2, r2, #8
 8001b12:	601a      	str	r2, [r3, #0]


  //calibrate gyro && accelerometer
  // doc 2000 lan, tinh trung binh roi tru di gia tri trung binh do
  for (RateCalibrationNumber = 0;
 8001b14:	4b4a      	ldr	r3, [pc, #296]	@ (8001c40 <main+0x208>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	e040      	b.n	8001b9e <main+0x166>
	  RateCalibrationNumber < 2000;
	  RateCalibrationNumber++)
  {
	  gyro_signal();
 8001b1c:	f7ff fad4 	bl	80010c8 <gyro_signal>
	  RateCalibrationPitch += RatePitch;
 8001b20:	4b48      	ldr	r3, [pc, #288]	@ (8001c44 <main+0x20c>)
 8001b22:	ed93 7a00 	vldr	s14, [r3]
 8001b26:	4b48      	ldr	r3, [pc, #288]	@ (8001c48 <main+0x210>)
 8001b28:	edd3 7a00 	vldr	s15, [r3]
 8001b2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b30:	4b44      	ldr	r3, [pc, #272]	@ (8001c44 <main+0x20c>)
 8001b32:	edc3 7a00 	vstr	s15, [r3]
	  RateCalibrationRoll += RateRoll;
 8001b36:	4b45      	ldr	r3, [pc, #276]	@ (8001c4c <main+0x214>)
 8001b38:	ed93 7a00 	vldr	s14, [r3]
 8001b3c:	4b44      	ldr	r3, [pc, #272]	@ (8001c50 <main+0x218>)
 8001b3e:	edd3 7a00 	vldr	s15, [r3]
 8001b42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b46:	4b41      	ldr	r3, [pc, #260]	@ (8001c4c <main+0x214>)
 8001b48:	edc3 7a00 	vstr	s15, [r3]
	  RateCalibrationYaw += RateYaw;
 8001b4c:	4b41      	ldr	r3, [pc, #260]	@ (8001c54 <main+0x21c>)
 8001b4e:	ed93 7a00 	vldr	s14, [r3]
 8001b52:	4b41      	ldr	r3, [pc, #260]	@ (8001c58 <main+0x220>)
 8001b54:	edd3 7a00 	vldr	s15, [r3]
 8001b58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b5c:	4b3d      	ldr	r3, [pc, #244]	@ (8001c54 <main+0x21c>)
 8001b5e:	edc3 7a00 	vstr	s15, [r3]

	  AngleCalibrationPitch += AnglePitch;
 8001b62:	4b3e      	ldr	r3, [pc, #248]	@ (8001c5c <main+0x224>)
 8001b64:	ed93 7a00 	vldr	s14, [r3]
 8001b68:	4b3d      	ldr	r3, [pc, #244]	@ (8001c60 <main+0x228>)
 8001b6a:	edd3 7a00 	vldr	s15, [r3]
 8001b6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b72:	4b3a      	ldr	r3, [pc, #232]	@ (8001c5c <main+0x224>)
 8001b74:	edc3 7a00 	vstr	s15, [r3]
	  AngleCalibrationRoll += AngleRoll;
 8001b78:	4b3a      	ldr	r3, [pc, #232]	@ (8001c64 <main+0x22c>)
 8001b7a:	ed93 7a00 	vldr	s14, [r3]
 8001b7e:	4b3a      	ldr	r3, [pc, #232]	@ (8001c68 <main+0x230>)
 8001b80:	edd3 7a00 	vldr	s15, [r3]
 8001b84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b88:	4b36      	ldr	r3, [pc, #216]	@ (8001c64 <main+0x22c>)
 8001b8a:	edc3 7a00 	vstr	s15, [r3]
	  HAL_Delay(1);
 8001b8e:	2001      	movs	r0, #1
 8001b90:	f001 fab4 	bl	80030fc <HAL_Delay>
	  RateCalibrationNumber++)
 8001b94:	4b2a      	ldr	r3, [pc, #168]	@ (8001c40 <main+0x208>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	4a29      	ldr	r2, [pc, #164]	@ (8001c40 <main+0x208>)
 8001b9c:	6013      	str	r3, [r2, #0]
	  RateCalibrationNumber < 2000;
 8001b9e:	4b28      	ldr	r3, [pc, #160]	@ (8001c40 <main+0x208>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001ba6:	dbb9      	blt.n	8001b1c <main+0xe4>
  }
  //gia tri calib
	RateCalibrationPitch/=2000;
 8001ba8:	4b26      	ldr	r3, [pc, #152]	@ (8001c44 <main+0x20c>)
 8001baa:	ed93 7a00 	vldr	s14, [r3]
 8001bae:	eddf 6a2f 	vldr	s13, [pc, #188]	@ 8001c6c <main+0x234>
 8001bb2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bb6:	4b23      	ldr	r3, [pc, #140]	@ (8001c44 <main+0x20c>)
 8001bb8:	edc3 7a00 	vstr	s15, [r3]
	RateCalibrationRoll/=2000;
 8001bbc:	4b23      	ldr	r3, [pc, #140]	@ (8001c4c <main+0x214>)
 8001bbe:	ed93 7a00 	vldr	s14, [r3]
 8001bc2:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8001c6c <main+0x234>
 8001bc6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bca:	4b20      	ldr	r3, [pc, #128]	@ (8001c4c <main+0x214>)
 8001bcc:	edc3 7a00 	vstr	s15, [r3]
	RateCalibrationYaw/=2000;
 8001bd0:	4b20      	ldr	r3, [pc, #128]	@ (8001c54 <main+0x21c>)
 8001bd2:	ed93 7a00 	vldr	s14, [r3]
 8001bd6:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8001c6c <main+0x234>
 8001bda:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bde:	4b1d      	ldr	r3, [pc, #116]	@ (8001c54 <main+0x21c>)
 8001be0:	edc3 7a00 	vstr	s15, [r3]
	AngleCalibrationPitch /= 2000;
 8001be4:	4b1d      	ldr	r3, [pc, #116]	@ (8001c5c <main+0x224>)
 8001be6:	ed93 7a00 	vldr	s14, [r3]
 8001bea:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8001c6c <main+0x234>
 8001bee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bf2:	4b1a      	ldr	r3, [pc, #104]	@ (8001c5c <main+0x224>)
 8001bf4:	edc3 7a00 	vstr	s15, [r3]
	AngleCalibrationRoll /= 2000;
 8001bf8:	4b1a      	ldr	r3, [pc, #104]	@ (8001c64 <main+0x22c>)
 8001bfa:	ed93 7a00 	vldr	s14, [r3]
 8001bfe:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 8001c6c <main+0x234>
 8001c02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c06:	4b17      	ldr	r3, [pc, #92]	@ (8001c64 <main+0x22c>)
 8001c08:	edc3 7a00 	vstr	s15, [r3]
  
  //chan an toan khi chua khoi dong, can phai gat can throttle ve min roi moi bay duoc
  // Chờ tín hiệu SBUS đầu tiên
// Chờ tín hiệu SBUS đầu tiên
   while (sbus_data_ready_flag == 0) { HAL_Delay(1); }
 8001c0c:	e002      	b.n	8001c14 <main+0x1dc>
 8001c0e:	2001      	movs	r0, #1
 8001c10:	f001 fa74 	bl	80030fc <HAL_Delay>
 8001c14:	4b16      	ldr	r3, [pc, #88]	@ (8001c70 <main+0x238>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d0f7      	beq.n	8001c0e <main+0x1d6>
   // Chờ ga về min
   while ( (uint16_t)map(rc_channels[2], SBUS_MIN, SBUS_MAX, ESC_MIN_CCR, ESC_MAX_CCR) > ESC_MIN_CCR*1.2 ) {
 8001c1e:	e031      	b.n	8001c84 <main+0x24c>
 	  sbus_data_ready_flag = 0;
 8001c20:	4b13      	ldr	r3, [pc, #76]	@ (8001c70 <main+0x238>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	701a      	strb	r2, [r3, #0]
 	  while (sbus_data_ready_flag == 0) { HAL_Delay(1); }
 8001c26:	e028      	b.n	8001c7a <main+0x242>
 8001c28:	20000268 	.word	0x20000268
 8001c2c:	40000400 	.word	0x40000400
 8001c30:	20000214 	.word	0x20000214
 8001c34:	2000052c 	.word	0x2000052c
 8001c38:	200002f8 	.word	0x200002f8
 8001c3c:	200003e8 	.word	0x200003e8
 8001c40:	20000468 	.word	0x20000468
 8001c44:	20000460 	.word	0x20000460
 8001c48:	20000454 	.word	0x20000454
 8001c4c:	2000045c 	.word	0x2000045c
 8001c50:	20000450 	.word	0x20000450
 8001c54:	20000464 	.word	0x20000464
 8001c58:	20000458 	.word	0x20000458
 8001c5c:	2000048c 	.word	0x2000048c
 8001c60:	20000484 	.word	0x20000484
 8001c64:	20000488 	.word	0x20000488
 8001c68:	20000480 	.word	0x20000480
 8001c6c:	44fa0000 	.word	0x44fa0000
 8001c70:	20000568 	.word	0x20000568
 8001c74:	2001      	movs	r0, #1
 8001c76:	f001 fa41 	bl	80030fc <HAL_Delay>
 8001c7a:	4b8f      	ldr	r3, [pc, #572]	@ (8001eb8 <main+0x480>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d0f7      	beq.n	8001c74 <main+0x23c>
   while ( (uint16_t)map(rc_channels[2], SBUS_MIN, SBUS_MAX, ESC_MIN_CCR, ESC_MAX_CCR) > ESC_MIN_CCR*1.2 ) {
 8001c84:	4b8d      	ldr	r3, [pc, #564]	@ (8001ebc <main+0x484>)
 8001c86:	889b      	ldrh	r3, [r3, #4]
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	2364      	movs	r3, #100	@ 0x64
 8001c8e:	9300      	str	r3, [sp, #0]
 8001c90:	2332      	movs	r3, #50	@ 0x32
 8001c92:	f240 6269 	movw	r2, #1641	@ 0x669
 8001c96:	2109      	movs	r1, #9
 8001c98:	f7ff fe6c 	bl	8001974 <map>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	2b3c      	cmp	r3, #60	@ 0x3c
 8001ca2:	d8bd      	bhi.n	8001c20 <main+0x1e8>
 }

  reset_pid();
 8001ca4:	f7ff fc38 	bl	8001518 <reset_pid>
  LoopTimer = HAL_GetTick();
 8001ca8:	f001 fa1c 	bl	80030e4 <HAL_GetTick>
 8001cac:	4603      	mov	r3, r0
 8001cae:	4a84      	ldr	r2, [pc, #528]	@ (8001ec0 <main+0x488>)
 8001cb0:	6013      	str	r3, [r2, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // f he thong ~250 Hz
    while ((HAL_GetTick() - LoopTimer) < 4) {}
 8001cb2:	bf00      	nop
 8001cb4:	f001 fa16 	bl	80030e4 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	4b81      	ldr	r3, [pc, #516]	@ (8001ec0 <main+0x488>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b03      	cmp	r3, #3
 8001cc2:	d9f7      	bls.n	8001cb4 <main+0x27c>
    uint32_t now = HAL_GetTick();
 8001cc4:	f001 fa0e 	bl	80030e4 <HAL_GetTick>
 8001cc8:	6078      	str	r0, [r7, #4]
    dt = (now - LoopTimer) * 0.001f; // miliseconds -> second
 8001cca:	4b7d      	ldr	r3, [pc, #500]	@ (8001ec0 <main+0x488>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	ee07 3a90 	vmov	s15, r3
 8001cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cda:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8001ec4 <main+0x48c>
 8001cde:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ce2:	4b79      	ldr	r3, [pc, #484]	@ (8001ec8 <main+0x490>)
 8001ce4:	edc3 7a00 	vstr	s15, [r3]
    if (dt < 0.001f) dt = 0.001f;    // clamp to avoid div-by-zero/noise
 8001ce8:	4b77      	ldr	r3, [pc, #476]	@ (8001ec8 <main+0x490>)
 8001cea:	edd3 7a00 	vldr	s15, [r3]
 8001cee:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 8001ec4 <main+0x48c>
 8001cf2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cfa:	d502      	bpl.n	8001d02 <main+0x2ca>
 8001cfc:	4b72      	ldr	r3, [pc, #456]	@ (8001ec8 <main+0x490>)
 8001cfe:	4a73      	ldr	r2, [pc, #460]	@ (8001ecc <main+0x494>)
 8001d00:	601a      	str	r2, [r3, #0]
    if (dt > 0.05f)  dt = 0.05f;  // chan tren de tranh dt lon lam thanh phan I lon,
 8001d02:	4b71      	ldr	r3, [pc, #452]	@ (8001ec8 <main+0x490>)
 8001d04:	edd3 7a00 	vldr	s15, [r3]
 8001d08:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 8001ed0 <main+0x498>
 8001d0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d14:	dd02      	ble.n	8001d1c <main+0x2e4>
 8001d16:	4b6c      	ldr	r3, [pc, #432]	@ (8001ec8 <main+0x490>)
 8001d18:	4a6e      	ldr	r2, [pc, #440]	@ (8001ed4 <main+0x49c>)
 8001d1a:	601a      	str	r2, [r3, #0]
    LoopTimer = now;   
 8001d1c:	4a68      	ldr	r2, [pc, #416]	@ (8001ec0 <main+0x488>)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6013      	str	r3, [r2, #0]

    if (sbus_data_ready_flag) {
 8001d22:	4b65      	ldr	r3, [pc, #404]	@ (8001eb8 <main+0x480>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d066      	beq.n	8001dfa <main+0x3c2>
      sbus_data_ready_flag = 0;
 8001d2c:	4b62      	ldr	r3, [pc, #392]	@ (8001eb8 <main+0x480>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	701a      	strb	r2, [r3, #0]
      throttle_channel_value = (uint16_t)map(rc_channels[2], SBUS_MIN, SBUS_MAX, ESC_MIN_CCR, ESC_MAX_CCR);
 8001d32:	4b62      	ldr	r3, [pc, #392]	@ (8001ebc <main+0x484>)
 8001d34:	889b      	ldrh	r3, [r3, #4]
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	4618      	mov	r0, r3
 8001d3a:	2364      	movs	r3, #100	@ 0x64
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	2332      	movs	r3, #50	@ 0x32
 8001d40:	f240 6269 	movw	r2, #1641	@ 0x669
 8001d44:	2109      	movs	r1, #9
 8001d46:	f7ff fe15 	bl	8001974 <map>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	b29a      	uxth	r2, r3
 8001d4e:	4b62      	ldr	r3, [pc, #392]	@ (8001ed8 <main+0x4a0>)
 8001d50:	801a      	strh	r2, [r3, #0]
      // Dùng bộ lọc EMA để làm mượt ga ??? co can cai nay khong
      throttle_pulse_filt = (throttle_pulse_filt * 0.75f) + (throttle_channel_value * 0.25f);
 8001d52:	4b62      	ldr	r3, [pc, #392]	@ (8001edc <main+0x4a4>)
 8001d54:	edd3 7a00 	vldr	s15, [r3]
 8001d58:	eeb6 7a08 	vmov.f32	s14, #104	@ 0x3f400000  0.750
 8001d5c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001d60:	4b5d      	ldr	r3, [pc, #372]	@ (8001ed8 <main+0x4a0>)
 8001d62:	881b      	ldrh	r3, [r3, #0]
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	ee07 3a90 	vmov	s15, r3
 8001d6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d6e:	eef5 6a00 	vmov.f32	s13, #80	@ 0x3e800000  0.250
 8001d72:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001d76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d7a:	4b58      	ldr	r3, [pc, #352]	@ (8001edc <main+0x4a4>)
 8001d7c:	edc3 7a00 	vstr	s15, [r3]

      // 2. Ánh xạ các kênh điều khiển (Roll, Pitch, Yaw)
      DesiredAngleRoll = fmap(rc_channels[0], SBUS_ROLL_MIN, SBUS_ROLL_MAX, -30, 30);
 8001d80:	4b4e      	ldr	r3, [pc, #312]	@ (8001ebc <main+0x484>)
 8001d82:	881b      	ldrh	r3, [r3, #0]
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	eef3 0a0e 	vmov.f32	s1, #62	@ 0x41f00000  30.0
 8001d8a:	eebb 0a0e 	vmov.f32	s0, #190	@ 0xc1f00000 -30.0
 8001d8e:	f240 52d6 	movw	r2, #1494	@ 0x5d6
 8001d92:	f44f 7132 	mov.w	r1, #712	@ 0x2c8
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff fe14 	bl	80019c4 <fmap>
 8001d9c:	eef0 7a40 	vmov.f32	s15, s0
 8001da0:	4b4f      	ldr	r3, [pc, #316]	@ (8001ee0 <main+0x4a8>)
 8001da2:	edc3 7a00 	vstr	s15, [r3]
      DesiredAnglePitch = fmap(rc_channels[1], SBUS_PITCH_MIN, SBUS_PITCH_MAX, -30, 30);
 8001da6:	4b45      	ldr	r3, [pc, #276]	@ (8001ebc <main+0x484>)
 8001da8:	885b      	ldrh	r3, [r3, #2]
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	eef3 0a0e 	vmov.f32	s1, #62	@ 0x41f00000  30.0
 8001db0:	eebb 0a0e 	vmov.f32	s0, #190	@ 0xc1f00000 -30.0
 8001db4:	f240 52d6 	movw	r2, #1494	@ 0x5d6
 8001db8:	f240 2196 	movw	r1, #662	@ 0x296
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff fe01 	bl	80019c4 <fmap>
 8001dc2:	eef0 7a40 	vmov.f32	s15, s0
 8001dc6:	4b47      	ldr	r3, [pc, #284]	@ (8001ee4 <main+0x4ac>)
 8001dc8:	edc3 7a00 	vstr	s15, [r3]
      DesiredRateYaw = fmap(rc_channels[3], SBUS_YAWRATE_MIN, SBUS_YAWRATE_MAX, -150, 150);
 8001dcc:	4b3b      	ldr	r3, [pc, #236]	@ (8001ebc <main+0x484>)
 8001dce:	88db      	ldrh	r3, [r3, #6]
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	eddf 0a45 	vldr	s1, [pc, #276]	@ 8001ee8 <main+0x4b0>
 8001dd6:	ed9f 0a45 	vldr	s0, [pc, #276]	@ 8001eec <main+0x4b4>
 8001dda:	f240 521e 	movw	r2, #1310	@ 0x51e
 8001dde:	f240 11f9 	movw	r1, #505	@ 0x1f9
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff fdee 	bl	80019c4 <fmap>
 8001de8:	eef0 7a40 	vmov.f32	s15, s0
 8001dec:	4b40      	ldr	r3, [pc, #256]	@ (8001ef0 <main+0x4b8>)
 8001dee:	edc3 7a00 	vstr	s15, [r3]
      DesiredRateYaw = 0;
 8001df2:	4b3f      	ldr	r3, [pc, #252]	@ (8001ef0 <main+0x4b8>)
 8001df4:	f04f 0200 	mov.w	r2, #0
 8001df8:	601a      	str	r2, [r3, #0]
    // DesiredAngleRoll  = 0.0f;
    // DesiredAnglePitch = 0.0f;
    // DesiredRateYaw    = 0.0f;

    // Logic Fail 1: Mat song >50ms
    bool fs = (HAL_GetTick() - last_sbus_ms) > 50;
 8001dfa:	f001 f973 	bl	80030e4 <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	4b3c      	ldr	r3, [pc, #240]	@ (8001ef4 <main+0x4bc>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b32      	cmp	r3, #50	@ 0x32
 8001e08:	bf8c      	ite	hi
 8001e0a:	2301      	movhi	r3, #1
 8001e0c:	2300      	movls	r3, #0
 8001e0e:	70fb      	strb	r3, [r7, #3]
    if(fs) {throttle_channel_value = ESC_MIN_CCR;} // neu khong nhan tin hieu lau qua thi tat??? o day nen co logic fail safe khac
 8001e10:	78fb      	ldrb	r3, [r7, #3]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <main+0x3e6>
 8001e16:	4b30      	ldr	r3, [pc, #192]	@ (8001ed8 <main+0x4a0>)
 8001e18:	2232      	movs	r2, #50	@ 0x32
 8001e1a:	801a      	strh	r2, [r3, #0]
 8001e1c:	e009      	b.n	8001e32 <main+0x3fa>
    else {throttle_channel_value = (uint16_t)throttle_pulse_filt;}
 8001e1e:	4b2f      	ldr	r3, [pc, #188]	@ (8001edc <main+0x4a4>)
 8001e20:	edd3 7a00 	vldr	s15, [r3]
 8001e24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e28:	ee17 3a90 	vmov	r3, s15
 8001e2c:	b29a      	uxth	r2, r3
 8001e2e:	4b2a      	ldr	r3, [pc, #168]	@ (8001ed8 <main+0x4a0>)
 8001e30:	801a      	strh	r2, [r3, #0]

    //Logic Fail 2: Tat dong co thu cong
      if (throttle_channel_value < ESC_MIN_CCR*1.2)
 8001e32:	4b29      	ldr	r3, [pc, #164]	@ (8001ed8 <main+0x4a0>)
 8001e34:	881b      	ldrh	r3, [r3, #0]
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	2b3b      	cmp	r3, #59	@ 0x3b
 8001e3a:	d86d      	bhi.n	8001f18 <main+0x4e0>
      {
        throttle_channel_value = ESC_MIN_CCR; // tat dong co
 8001e3c:	4b26      	ldr	r3, [pc, #152]	@ (8001ed8 <main+0x4a0>)
 8001e3e:	2232      	movs	r2, #50	@ 0x32
 8001e40:	801a      	strh	r2, [r3, #0]
        reset_pid();
 8001e42:	f7ff fb69 	bl	8001518 <reset_pid>
        InputRoll = 0; // Tắt điều khiển khi disarm
 8001e46:	4b2c      	ldr	r3, [pc, #176]	@ (8001ef8 <main+0x4c0>)
 8001e48:	f04f 0200 	mov.w	r2, #0
 8001e4c:	601a      	str	r2, [r3, #0]
        InputPitch = 0;
 8001e4e:	4b2b      	ldr	r3, [pc, #172]	@ (8001efc <main+0x4c4>)
 8001e50:	f04f 0200 	mov.w	r2, #0
 8001e54:	601a      	str	r2, [r3, #0]
        InputYaw = 0;
 8001e56:	4b2a      	ldr	r3, [pc, #168]	@ (8001f00 <main+0x4c8>)
 8001e58:	f04f 0200 	mov.w	r2, #0
 8001e5c:	601a      	str	r2, [r3, #0]
        DesiredAngleRoll = 0.0f;
 8001e5e:	4b20      	ldr	r3, [pc, #128]	@ (8001ee0 <main+0x4a8>)
 8001e60:	f04f 0200 	mov.w	r2, #0
 8001e64:	601a      	str	r2, [r3, #0]
        DesiredAnglePitch = 0.0f;
 8001e66:	4b1f      	ldr	r3, [pc, #124]	@ (8001ee4 <main+0x4ac>)
 8001e68:	f04f 0200 	mov.w	r2, #0
 8001e6c:	601a      	str	r2, [r3, #0]
        DesiredRateYaw = 0.0f;
 8001e6e:	4b20      	ldr	r3, [pc, #128]	@ (8001ef0 <main+0x4b8>)
 8001e70:	f04f 0200 	mov.w	r2, #0
 8001e74:	601a      	str	r2, [r3, #0]
        m1=ESC_MIN_CCR;
 8001e76:	4b23      	ldr	r3, [pc, #140]	@ (8001f04 <main+0x4cc>)
 8001e78:	2232      	movs	r2, #50	@ 0x32
 8001e7a:	701a      	strb	r2, [r3, #0]
        m2=ESC_MIN_CCR;
 8001e7c:	4b22      	ldr	r3, [pc, #136]	@ (8001f08 <main+0x4d0>)
 8001e7e:	2232      	movs	r2, #50	@ 0x32
 8001e80:	701a      	strb	r2, [r3, #0]
        m3=ESC_MIN_CCR;
 8001e82:	4b22      	ldr	r3, [pc, #136]	@ (8001f0c <main+0x4d4>)
 8001e84:	2232      	movs	r2, #50	@ 0x32
 8001e86:	701a      	strb	r2, [r3, #0]
        m4=ESC_MIN_CCR;
 8001e88:	4b21      	ldr	r3, [pc, #132]	@ (8001f10 <main+0x4d8>)
 8001e8a:	2232      	movs	r2, #50	@ 0x32
 8001e8c:	701a      	strb	r2, [r3, #0]
        TIM3->CCR1 = throttle_channel_value;
 8001e8e:	4b12      	ldr	r3, [pc, #72]	@ (8001ed8 <main+0x4a0>)
 8001e90:	881b      	ldrh	r3, [r3, #0]
 8001e92:	b29a      	uxth	r2, r3
 8001e94:	4b1f      	ldr	r3, [pc, #124]	@ (8001f14 <main+0x4dc>)
 8001e96:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3->CCR2 = throttle_channel_value;
 8001e98:	4b0f      	ldr	r3, [pc, #60]	@ (8001ed8 <main+0x4a0>)
 8001e9a:	881b      	ldrh	r3, [r3, #0]
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	4b1d      	ldr	r3, [pc, #116]	@ (8001f14 <main+0x4dc>)
 8001ea0:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3->CCR3 = throttle_channel_value;
 8001ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8001ed8 <main+0x4a0>)
 8001ea4:	881b      	ldrh	r3, [r3, #0]
 8001ea6:	b29a      	uxth	r2, r3
 8001ea8:	4b1a      	ldr	r3, [pc, #104]	@ (8001f14 <main+0x4dc>)
 8001eaa:	63da      	str	r2, [r3, #60]	@ 0x3c
        TIM3->CCR4 = throttle_channel_value;
 8001eac:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed8 <main+0x4a0>)
 8001eae:	881b      	ldrh	r3, [r3, #0]
 8001eb0:	b29a      	uxth	r2, r3
 8001eb2:	4b18      	ldr	r3, [pc, #96]	@ (8001f14 <main+0x4dc>)
 8001eb4:	641a      	str	r2, [r3, #64]	@ 0x40
        continue;
 8001eb6:	e300      	b.n	80024ba <main+0xa82>
 8001eb8:	20000568 	.word	0x20000568
 8001ebc:	20000548 	.word	0x20000548
 8001ec0:	20000448 	.word	0x20000448
 8001ec4:	3a83126f 	.word	0x3a83126f
 8001ec8:	20000000 	.word	0x20000000
 8001ecc:	3a83126f 	.word	0x3a83126f
 8001ed0:	3d4ccccd 	.word	0x3d4ccccd
 8001ed4:	3d4ccccd 	.word	0x3d4ccccd
 8001ed8:	2000056a 	.word	0x2000056a
 8001edc:	20000020 	.word	0x20000020
 8001ee0:	200004f8 	.word	0x200004f8
 8001ee4:	200004fc 	.word	0x200004fc
 8001ee8:	43160000 	.word	0x43160000
 8001eec:	c3160000 	.word	0xc3160000
 8001ef0:	200004ac 	.word	0x200004ac
 8001ef4:	2000056c 	.word	0x2000056c
 8001ef8:	200004bc 	.word	0x200004bc
 8001efc:	200004c0 	.word	0x200004c0
 8001f00:	200004c4 	.word	0x200004c4
 8001f04:	20000528 	.word	0x20000528
 8001f08:	20000529 	.word	0x20000529
 8001f0c:	2000052a 	.word	0x2000052a
 8001f10:	2000052b 	.word	0x2000052b
 8001f14:	40000400 	.word	0x40000400
      }
          
    gyro_signal();
 8001f18:	f7ff f8d6 	bl	80010c8 <gyro_signal>
    //calib gyro && accelerometer
    if (mpu6050_gyro_flag){
 8001f1c:	4bc2      	ldr	r3, [pc, #776]	@ (8002228 <main+0x7f0>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d023      	beq.n	8001f6c <main+0x534>
    	mpu6050_gyro_flag = 0;
 8001f24:	4bc0      	ldr	r3, [pc, #768]	@ (8002228 <main+0x7f0>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	701a      	strb	r2, [r3, #0]
    	RatePitch -= RateCalibrationPitch;
 8001f2a:	4bc0      	ldr	r3, [pc, #768]	@ (800222c <main+0x7f4>)
 8001f2c:	ed93 7a00 	vldr	s14, [r3]
 8001f30:	4bbf      	ldr	r3, [pc, #764]	@ (8002230 <main+0x7f8>)
 8001f32:	edd3 7a00 	vldr	s15, [r3]
 8001f36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f3a:	4bbc      	ldr	r3, [pc, #752]	@ (800222c <main+0x7f4>)
 8001f3c:	edc3 7a00 	vstr	s15, [r3]
		RateRoll -= RateCalibrationRoll;
 8001f40:	4bbc      	ldr	r3, [pc, #752]	@ (8002234 <main+0x7fc>)
 8001f42:	ed93 7a00 	vldr	s14, [r3]
 8001f46:	4bbc      	ldr	r3, [pc, #752]	@ (8002238 <main+0x800>)
 8001f48:	edd3 7a00 	vldr	s15, [r3]
 8001f4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f50:	4bb8      	ldr	r3, [pc, #736]	@ (8002234 <main+0x7fc>)
 8001f52:	edc3 7a00 	vstr	s15, [r3]
		RateYaw -= RateCalibrationYaw;
 8001f56:	4bb9      	ldr	r3, [pc, #740]	@ (800223c <main+0x804>)
 8001f58:	ed93 7a00 	vldr	s14, [r3]
 8001f5c:	4bb8      	ldr	r3, [pc, #736]	@ (8002240 <main+0x808>)
 8001f5e:	edd3 7a00 	vldr	s15, [r3]
 8001f62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f66:	4bb5      	ldr	r3, [pc, #724]	@ (800223c <main+0x804>)
 8001f68:	edc3 7a00 	vstr	s15, [r3]
    }
    if (mpu6050_acc_flag) {
 8001f6c:	4bb5      	ldr	r3, [pc, #724]	@ (8002244 <main+0x80c>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d018      	beq.n	8001fa6 <main+0x56e>
    	mpu6050_acc_flag = 0;
 8001f74:	4bb3      	ldr	r3, [pc, #716]	@ (8002244 <main+0x80c>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	701a      	strb	r2, [r3, #0]
		AnglePitch -= AngleCalibrationPitch;
 8001f7a:	4bb3      	ldr	r3, [pc, #716]	@ (8002248 <main+0x810>)
 8001f7c:	ed93 7a00 	vldr	s14, [r3]
 8001f80:	4bb2      	ldr	r3, [pc, #712]	@ (800224c <main+0x814>)
 8001f82:	edd3 7a00 	vldr	s15, [r3]
 8001f86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f8a:	4baf      	ldr	r3, [pc, #700]	@ (8002248 <main+0x810>)
 8001f8c:	edc3 7a00 	vstr	s15, [r3]
		AngleRoll -= AngleCalibrationRoll;
 8001f90:	4baf      	ldr	r3, [pc, #700]	@ (8002250 <main+0x818>)
 8001f92:	ed93 7a00 	vldr	s14, [r3]
 8001f96:	4baf      	ldr	r3, [pc, #700]	@ (8002254 <main+0x81c>)
 8001f98:	edd3 7a00 	vldr	s15, [r3]
 8001f9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fa0:	4bab      	ldr	r3, [pc, #684]	@ (8002250 <main+0x818>)
 8001fa2:	edc3 7a00 	vstr	s15, [r3]
    }

    

    kalman_1d(&KalmanAngleRoll,  &KalmanUncertaintyAngleRoll,  RateRoll,  AngleRoll,  dt);
 8001fa6:	4ba3      	ldr	r3, [pc, #652]	@ (8002234 <main+0x7fc>)
 8001fa8:	edd3 7a00 	vldr	s15, [r3]
 8001fac:	4ba8      	ldr	r3, [pc, #672]	@ (8002250 <main+0x818>)
 8001fae:	ed93 7a00 	vldr	s14, [r3]
 8001fb2:	4ba9      	ldr	r3, [pc, #676]	@ (8002258 <main+0x820>)
 8001fb4:	edd3 6a00 	vldr	s13, [r3]
 8001fb8:	eeb0 1a66 	vmov.f32	s2, s13
 8001fbc:	eef0 0a47 	vmov.f32	s1, s14
 8001fc0:	eeb0 0a67 	vmov.f32	s0, s15
 8001fc4:	49a5      	ldr	r1, [pc, #660]	@ (800225c <main+0x824>)
 8001fc6:	48a6      	ldr	r0, [pc, #664]	@ (8002260 <main+0x828>)
 8001fc8:	f7ff f81a 	bl	8001000 <kalman_1d>
    kalman_1d(&KalmanAnglePitch, &KalmanUncertaintyAnglePitch, RatePitch, AnglePitch, dt);    
 8001fcc:	4b97      	ldr	r3, [pc, #604]	@ (800222c <main+0x7f4>)
 8001fce:	edd3 7a00 	vldr	s15, [r3]
 8001fd2:	4b9d      	ldr	r3, [pc, #628]	@ (8002248 <main+0x810>)
 8001fd4:	ed93 7a00 	vldr	s14, [r3]
 8001fd8:	4b9f      	ldr	r3, [pc, #636]	@ (8002258 <main+0x820>)
 8001fda:	edd3 6a00 	vldr	s13, [r3]
 8001fde:	eeb0 1a66 	vmov.f32	s2, s13
 8001fe2:	eef0 0a47 	vmov.f32	s1, s14
 8001fe6:	eeb0 0a67 	vmov.f32	s0, s15
 8001fea:	499e      	ldr	r1, [pc, #632]	@ (8002264 <main+0x82c>)
 8001fec:	489e      	ldr	r0, [pc, #632]	@ (8002268 <main+0x830>)
 8001fee:	f7ff f807 	bl	8001000 <kalman_1d>
//        items_matched = sscanf((char*)gy951_data_to_process, "#YPR=%f,%f,%f", &Yaw, &Pitch, &Roll);
//
//
//    }
    //PID outer Loop
    ErrorAngleRoll = DesiredAngleRoll - KalmanAngleRoll;
 8001ff2:	4b9e      	ldr	r3, [pc, #632]	@ (800226c <main+0x834>)
 8001ff4:	ed93 7a00 	vldr	s14, [r3]
 8001ff8:	4b99      	ldr	r3, [pc, #612]	@ (8002260 <main+0x828>)
 8001ffa:	edd3 7a00 	vldr	s15, [r3]
 8001ffe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002002:	4b9b      	ldr	r3, [pc, #620]	@ (8002270 <main+0x838>)
 8002004:	edc3 7a00 	vstr	s15, [r3]
    ErrorAnglePitch = DesiredAnglePitch - KalmanAnglePitch;
 8002008:	4b9a      	ldr	r3, [pc, #616]	@ (8002274 <main+0x83c>)
 800200a:	ed93 7a00 	vldr	s14, [r3]
 800200e:	4b96      	ldr	r3, [pc, #600]	@ (8002268 <main+0x830>)
 8002010:	edd3 7a00 	vldr	s15, [r3]
 8002014:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002018:	4b97      	ldr	r3, [pc, #604]	@ (8002278 <main+0x840>)
 800201a:	edc3 7a00 	vstr	s15, [r3]

    pid_equation(ErrorAngleRoll, PAngleRoll, IAngleRoll, DAngleRoll,
 800201e:	4b94      	ldr	r3, [pc, #592]	@ (8002270 <main+0x838>)
 8002020:	edd3 7a00 	vldr	s15, [r3]
 8002024:	4b95      	ldr	r3, [pc, #596]	@ (800227c <main+0x844>)
 8002026:	ed93 7a00 	vldr	s14, [r3]
 800202a:	4b95      	ldr	r3, [pc, #596]	@ (8002280 <main+0x848>)
 800202c:	edd3 6a00 	vldr	s13, [r3]
 8002030:	4b94      	ldr	r3, [pc, #592]	@ (8002284 <main+0x84c>)
 8002032:	ed93 6a00 	vldr	s12, [r3]
 8002036:	4b94      	ldr	r3, [pc, #592]	@ (8002288 <main+0x850>)
 8002038:	edd3 5a00 	vldr	s11, [r3]
 800203c:	4b93      	ldr	r3, [pc, #588]	@ (800228c <main+0x854>)
 800203e:	ed93 5a00 	vldr	s10, [r3]
 8002042:	4b85      	ldr	r3, [pc, #532]	@ (8002258 <main+0x820>)
 8002044:	edd3 4a00 	vldr	s9, [r3]
 8002048:	ed9f 4a91 	vldr	s8, [pc, #580]	@ 8002290 <main+0x858>
 800204c:	eddf 3a91 	vldr	s7, [pc, #580]	@ 8002294 <main+0x85c>
 8002050:	eeb0 3a64 	vmov.f32	s6, s9
 8002054:	eef0 2a45 	vmov.f32	s5, s10
 8002058:	eeb0 2a65 	vmov.f32	s4, s11
 800205c:	eef0 1a46 	vmov.f32	s3, s12
 8002060:	eeb0 1a66 	vmov.f32	s2, s13
 8002064:	eef0 0a47 	vmov.f32	s1, s14
 8002068:	eeb0 0a67 	vmov.f32	s0, s15
 800206c:	f7ff f958 	bl	8001320 <pid_equation>
                 PrevErrorAngleRoll, PrevItermAngleRoll, dt,
                 ANGLE_I_LIMIT, ANGLE_RATE_LIMIT); 
    DesiredRateRoll = PIDReturn[0];
 8002070:	4b89      	ldr	r3, [pc, #548]	@ (8002298 <main+0x860>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a89      	ldr	r2, [pc, #548]	@ (800229c <main+0x864>)
 8002076:	6013      	str	r3, [r2, #0]
    PrevErrorAngleRoll = PIDReturn[1];
 8002078:	4b87      	ldr	r3, [pc, #540]	@ (8002298 <main+0x860>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	4a82      	ldr	r2, [pc, #520]	@ (8002288 <main+0x850>)
 800207e:	6013      	str	r3, [r2, #0]
    PrevItermAngleRoll = PIDReturn[2];
 8002080:	4b85      	ldr	r3, [pc, #532]	@ (8002298 <main+0x860>)
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	4a81      	ldr	r2, [pc, #516]	@ (800228c <main+0x854>)
 8002086:	6013      	str	r3, [r2, #0]

    pid_equation(ErrorAnglePitch, PAnglePitch, IAnglePitch, DAnglePitch,
 8002088:	4b7b      	ldr	r3, [pc, #492]	@ (8002278 <main+0x840>)
 800208a:	edd3 7a00 	vldr	s15, [r3]
 800208e:	4b84      	ldr	r3, [pc, #528]	@ (80022a0 <main+0x868>)
 8002090:	ed93 7a00 	vldr	s14, [r3]
 8002094:	4b83      	ldr	r3, [pc, #524]	@ (80022a4 <main+0x86c>)
 8002096:	edd3 6a00 	vldr	s13, [r3]
 800209a:	4b83      	ldr	r3, [pc, #524]	@ (80022a8 <main+0x870>)
 800209c:	ed93 6a00 	vldr	s12, [r3]
 80020a0:	4b82      	ldr	r3, [pc, #520]	@ (80022ac <main+0x874>)
 80020a2:	edd3 5a00 	vldr	s11, [r3]
 80020a6:	4b82      	ldr	r3, [pc, #520]	@ (80022b0 <main+0x878>)
 80020a8:	ed93 5a00 	vldr	s10, [r3]
 80020ac:	4b6a      	ldr	r3, [pc, #424]	@ (8002258 <main+0x820>)
 80020ae:	edd3 4a00 	vldr	s9, [r3]
 80020b2:	ed9f 4a77 	vldr	s8, [pc, #476]	@ 8002290 <main+0x858>
 80020b6:	eddf 3a77 	vldr	s7, [pc, #476]	@ 8002294 <main+0x85c>
 80020ba:	eeb0 3a64 	vmov.f32	s6, s9
 80020be:	eef0 2a45 	vmov.f32	s5, s10
 80020c2:	eeb0 2a65 	vmov.f32	s4, s11
 80020c6:	eef0 1a46 	vmov.f32	s3, s12
 80020ca:	eeb0 1a66 	vmov.f32	s2, s13
 80020ce:	eef0 0a47 	vmov.f32	s1, s14
 80020d2:	eeb0 0a67 	vmov.f32	s0, s15
 80020d6:	f7ff f923 	bl	8001320 <pid_equation>
                 PrevErrorAnglePitch, PrevItermAnglePitch, dt,
                 ANGLE_I_LIMIT, ANGLE_RATE_LIMIT); 
    DesiredRatePitch = PIDReturn[0];
 80020da:	4b6f      	ldr	r3, [pc, #444]	@ (8002298 <main+0x860>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a75      	ldr	r2, [pc, #468]	@ (80022b4 <main+0x87c>)
 80020e0:	6013      	str	r3, [r2, #0]
    PrevErrorAnglePitch = PIDReturn[1];
 80020e2:	4b6d      	ldr	r3, [pc, #436]	@ (8002298 <main+0x860>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	4a71      	ldr	r2, [pc, #452]	@ (80022ac <main+0x874>)
 80020e8:	6013      	str	r3, [r2, #0]
    PrevItermAnglePitch = PIDReturn[2];
 80020ea:	4b6b      	ldr	r3, [pc, #428]	@ (8002298 <main+0x860>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	4a70      	ldr	r2, [pc, #448]	@ (80022b0 <main+0x878>)
 80020f0:	6013      	str	r3, [r2, #0]

    //PID inner Loop
    ErrorRateRoll = DesiredRateRoll - RateRoll;
 80020f2:	4b6a      	ldr	r3, [pc, #424]	@ (800229c <main+0x864>)
 80020f4:	ed93 7a00 	vldr	s14, [r3]
 80020f8:	4b4e      	ldr	r3, [pc, #312]	@ (8002234 <main+0x7fc>)
 80020fa:	edd3 7a00 	vldr	s15, [r3]
 80020fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002102:	4b6d      	ldr	r3, [pc, #436]	@ (80022b8 <main+0x880>)
 8002104:	edc3 7a00 	vstr	s15, [r3]
    ErrorRatePitch = DesiredRatePitch - RatePitch;
 8002108:	4b6a      	ldr	r3, [pc, #424]	@ (80022b4 <main+0x87c>)
 800210a:	ed93 7a00 	vldr	s14, [r3]
 800210e:	4b47      	ldr	r3, [pc, #284]	@ (800222c <main+0x7f4>)
 8002110:	edd3 7a00 	vldr	s15, [r3]
 8002114:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002118:	4b68      	ldr	r3, [pc, #416]	@ (80022bc <main+0x884>)
 800211a:	edc3 7a00 	vstr	s15, [r3]
    ErrorRateYaw = DesiredRateYaw - RateYaw;
 800211e:	4b68      	ldr	r3, [pc, #416]	@ (80022c0 <main+0x888>)
 8002120:	ed93 7a00 	vldr	s14, [r3]
 8002124:	4b45      	ldr	r3, [pc, #276]	@ (800223c <main+0x804>)
 8002126:	edd3 7a00 	vldr	s15, [r3]
 800212a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800212e:	4b65      	ldr	r3, [pc, #404]	@ (80022c4 <main+0x88c>)
 8002130:	edc3 7a00 	vstr	s15, [r3]
    
    pid_equation(ErrorRateRoll, PRateRoll, IRateRoll, DRateRoll,
 8002134:	4b60      	ldr	r3, [pc, #384]	@ (80022b8 <main+0x880>)
 8002136:	edd3 7a00 	vldr	s15, [r3]
 800213a:	4b63      	ldr	r3, [pc, #396]	@ (80022c8 <main+0x890>)
 800213c:	ed93 7a00 	vldr	s14, [r3]
 8002140:	4b62      	ldr	r3, [pc, #392]	@ (80022cc <main+0x894>)
 8002142:	edd3 6a00 	vldr	s13, [r3]
 8002146:	4b62      	ldr	r3, [pc, #392]	@ (80022d0 <main+0x898>)
 8002148:	ed93 6a00 	vldr	s12, [r3]
 800214c:	4b61      	ldr	r3, [pc, #388]	@ (80022d4 <main+0x89c>)
 800214e:	edd3 5a00 	vldr	s11, [r3]
 8002152:	4b61      	ldr	r3, [pc, #388]	@ (80022d8 <main+0x8a0>)
 8002154:	ed93 5a00 	vldr	s10, [r3]
 8002158:	4b3f      	ldr	r3, [pc, #252]	@ (8002258 <main+0x820>)
 800215a:	edd3 4a00 	vldr	s9, [r3]
 800215e:	eeb3 4a04 	vmov.f32	s8, #52	@ 0x41a00000  20.0
 8002162:	eef3 3a04 	vmov.f32	s7, #52	@ 0x41a00000  20.0
 8002166:	eeb0 3a64 	vmov.f32	s6, s9
 800216a:	eef0 2a45 	vmov.f32	s5, s10
 800216e:	eeb0 2a65 	vmov.f32	s4, s11
 8002172:	eef0 1a46 	vmov.f32	s3, s12
 8002176:	eeb0 1a66 	vmov.f32	s2, s13
 800217a:	eef0 0a47 	vmov.f32	s1, s14
 800217e:	eeb0 0a67 	vmov.f32	s0, s15
 8002182:	f7ff f8cd 	bl	8001320 <pid_equation>
                 PrevErrorRateRoll, PrevItermRateRoll, dt,
                 RATE_I_LIMIT, RATE_OUT_LIMIT); 
    InputRoll = PIDReturn[0]*0.1;
 8002186:	4b44      	ldr	r3, [pc, #272]	@ (8002298 <main+0x860>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4618      	mov	r0, r3
 800218c:	f7fe f9dc 	bl	8000548 <__aeabi_f2d>
 8002190:	a323      	add	r3, pc, #140	@ (adr r3, 8002220 <main+0x7e8>)
 8002192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002196:	f7fe fa2f 	bl	80005f8 <__aeabi_dmul>
 800219a:	4602      	mov	r2, r0
 800219c:	460b      	mov	r3, r1
 800219e:	4610      	mov	r0, r2
 80021a0:	4619      	mov	r1, r3
 80021a2:	f7fe fcf9 	bl	8000b98 <__aeabi_d2f>
 80021a6:	4603      	mov	r3, r0
 80021a8:	4a4c      	ldr	r2, [pc, #304]	@ (80022dc <main+0x8a4>)
 80021aa:	6013      	str	r3, [r2, #0]
    PrevErrorRateRoll = PIDReturn[1];
 80021ac:	4b3a      	ldr	r3, [pc, #232]	@ (8002298 <main+0x860>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	4a48      	ldr	r2, [pc, #288]	@ (80022d4 <main+0x89c>)
 80021b2:	6013      	str	r3, [r2, #0]
    PrevItermRateRoll = PIDReturn[2];
 80021b4:	4b38      	ldr	r3, [pc, #224]	@ (8002298 <main+0x860>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	4a47      	ldr	r2, [pc, #284]	@ (80022d8 <main+0x8a0>)
 80021ba:	6013      	str	r3, [r2, #0]

    pid_equation(ErrorRatePitch, PRatePitch, IRatePitch, DRatePitch,
 80021bc:	4b3f      	ldr	r3, [pc, #252]	@ (80022bc <main+0x884>)
 80021be:	edd3 7a00 	vldr	s15, [r3]
 80021c2:	4b47      	ldr	r3, [pc, #284]	@ (80022e0 <main+0x8a8>)
 80021c4:	ed93 7a00 	vldr	s14, [r3]
 80021c8:	4b46      	ldr	r3, [pc, #280]	@ (80022e4 <main+0x8ac>)
 80021ca:	edd3 6a00 	vldr	s13, [r3]
 80021ce:	4b46      	ldr	r3, [pc, #280]	@ (80022e8 <main+0x8b0>)
 80021d0:	ed93 6a00 	vldr	s12, [r3]
 80021d4:	4b45      	ldr	r3, [pc, #276]	@ (80022ec <main+0x8b4>)
 80021d6:	edd3 5a00 	vldr	s11, [r3]
 80021da:	4b45      	ldr	r3, [pc, #276]	@ (80022f0 <main+0x8b8>)
 80021dc:	ed93 5a00 	vldr	s10, [r3]
 80021e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002258 <main+0x820>)
 80021e2:	edd3 4a00 	vldr	s9, [r3]
 80021e6:	eeb3 4a04 	vmov.f32	s8, #52	@ 0x41a00000  20.0
 80021ea:	eef3 3a04 	vmov.f32	s7, #52	@ 0x41a00000  20.0
 80021ee:	eeb0 3a64 	vmov.f32	s6, s9
 80021f2:	eef0 2a45 	vmov.f32	s5, s10
 80021f6:	eeb0 2a65 	vmov.f32	s4, s11
 80021fa:	eef0 1a46 	vmov.f32	s3, s12
 80021fe:	eeb0 1a66 	vmov.f32	s2, s13
 8002202:	eef0 0a47 	vmov.f32	s1, s14
 8002206:	eeb0 0a67 	vmov.f32	s0, s15
 800220a:	f7ff f889 	bl	8001320 <pid_equation>
                 PrevErrorRatePitch, PrevItermRatePitch, dt,
                 RATE_I_LIMIT, RATE_OUT_LIMIT); 
    InputPitch = 0.05*PIDReturn[0];
 800220e:	4b22      	ldr	r3, [pc, #136]	@ (8002298 <main+0x860>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4618      	mov	r0, r3
 8002214:	f7fe f998 	bl	8000548 <__aeabi_f2d>
 8002218:	e06c      	b.n	80022f4 <main+0x8bc>
 800221a:	bf00      	nop
 800221c:	f3af 8000 	nop.w
 8002220:	9999999a 	.word	0x9999999a
 8002224:	3fb99999 	.word	0x3fb99999
 8002228:	2000044c 	.word	0x2000044c
 800222c:	20000454 	.word	0x20000454
 8002230:	20000460 	.word	0x20000460
 8002234:	20000450 	.word	0x20000450
 8002238:	2000045c 	.word	0x2000045c
 800223c:	20000458 	.word	0x20000458
 8002240:	20000464 	.word	0x20000464
 8002244:	20000472 	.word	0x20000472
 8002248:	20000484 	.word	0x20000484
 800224c:	2000048c 	.word	0x2000048c
 8002250:	20000480 	.word	0x20000480
 8002254:	20000488 	.word	0x20000488
 8002258:	20000000 	.word	0x20000000
 800225c:	20000004 	.word	0x20000004
 8002260:	20000490 	.word	0x20000490
 8002264:	20000008 	.word	0x20000008
 8002268:	20000494 	.word	0x20000494
 800226c:	200004f8 	.word	0x200004f8
 8002270:	20000500 	.word	0x20000500
 8002274:	200004fc 	.word	0x200004fc
 8002278:	20000504 	.word	0x20000504
 800227c:	20000018 	.word	0x20000018
 8002280:	20000518 	.word	0x20000518
 8002284:	20000520 	.word	0x20000520
 8002288:	20000508 	.word	0x20000508
 800228c:	20000510 	.word	0x20000510
 8002290:	437a0000 	.word	0x437a0000
 8002294:	42c80000 	.word	0x42c80000
 8002298:	20000498 	.word	0x20000498
 800229c:	200004a4 	.word	0x200004a4
 80022a0:	2000001c 	.word	0x2000001c
 80022a4:	2000051c 	.word	0x2000051c
 80022a8:	20000524 	.word	0x20000524
 80022ac:	2000050c 	.word	0x2000050c
 80022b0:	20000514 	.word	0x20000514
 80022b4:	200004a8 	.word	0x200004a8
 80022b8:	200004b0 	.word	0x200004b0
 80022bc:	200004b4 	.word	0x200004b4
 80022c0:	200004ac 	.word	0x200004ac
 80022c4:	200004b8 	.word	0x200004b8
 80022c8:	2000000c 	.word	0x2000000c
 80022cc:	200004e0 	.word	0x200004e0
 80022d0:	200004ec 	.word	0x200004ec
 80022d4:	200004c8 	.word	0x200004c8
 80022d8:	200004d4 	.word	0x200004d4
 80022dc:	200004bc 	.word	0x200004bc
 80022e0:	20000010 	.word	0x20000010
 80022e4:	200004e4 	.word	0x200004e4
 80022e8:	200004f0 	.word	0x200004f0
 80022ec:	200004cc 	.word	0x200004cc
 80022f0:	200004d8 	.word	0x200004d8
 80022f4:	a385      	add	r3, pc, #532	@ (adr r3, 800250c <main+0xad4>)
 80022f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022fa:	f7fe f97d 	bl	80005f8 <__aeabi_dmul>
 80022fe:	4602      	mov	r2, r0
 8002300:	460b      	mov	r3, r1
 8002302:	4610      	mov	r0, r2
 8002304:	4619      	mov	r1, r3
 8002306:	f7fe fc47 	bl	8000b98 <__aeabi_d2f>
 800230a:	4603      	mov	r3, r0
 800230c:	4a6c      	ldr	r2, [pc, #432]	@ (80024c0 <main+0xa88>)
 800230e:	6013      	str	r3, [r2, #0]
    PrevErrorRatePitch = PIDReturn[1];
 8002310:	4b6c      	ldr	r3, [pc, #432]	@ (80024c4 <main+0xa8c>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	4a6c      	ldr	r2, [pc, #432]	@ (80024c8 <main+0xa90>)
 8002316:	6013      	str	r3, [r2, #0]
    PrevItermRatePitch = PIDReturn[2];
 8002318:	4b6a      	ldr	r3, [pc, #424]	@ (80024c4 <main+0xa8c>)
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	4a6b      	ldr	r2, [pc, #428]	@ (80024cc <main+0xa94>)
 800231e:	6013      	str	r3, [r2, #0]

    pid_equation(ErrorRateYaw, PRateYaw, IRateYaw, DRateYaw,
 8002320:	4b6b      	ldr	r3, [pc, #428]	@ (80024d0 <main+0xa98>)
 8002322:	edd3 7a00 	vldr	s15, [r3]
 8002326:	4b6b      	ldr	r3, [pc, #428]	@ (80024d4 <main+0xa9c>)
 8002328:	ed93 7a00 	vldr	s14, [r3]
 800232c:	4b6a      	ldr	r3, [pc, #424]	@ (80024d8 <main+0xaa0>)
 800232e:	edd3 6a00 	vldr	s13, [r3]
 8002332:	4b6a      	ldr	r3, [pc, #424]	@ (80024dc <main+0xaa4>)
 8002334:	ed93 6a00 	vldr	s12, [r3]
 8002338:	4b69      	ldr	r3, [pc, #420]	@ (80024e0 <main+0xaa8>)
 800233a:	edd3 5a00 	vldr	s11, [r3]
 800233e:	4b69      	ldr	r3, [pc, #420]	@ (80024e4 <main+0xaac>)
 8002340:	ed93 5a00 	vldr	s10, [r3]
 8002344:	4b68      	ldr	r3, [pc, #416]	@ (80024e8 <main+0xab0>)
 8002346:	edd3 4a00 	vldr	s9, [r3]
 800234a:	eeb3 4a04 	vmov.f32	s8, #52	@ 0x41a00000  20.0
 800234e:	eef3 3a04 	vmov.f32	s7, #52	@ 0x41a00000  20.0
 8002352:	eeb0 3a64 	vmov.f32	s6, s9
 8002356:	eef0 2a45 	vmov.f32	s5, s10
 800235a:	eeb0 2a65 	vmov.f32	s4, s11
 800235e:	eef0 1a46 	vmov.f32	s3, s12
 8002362:	eeb0 1a66 	vmov.f32	s2, s13
 8002366:	eef0 0a47 	vmov.f32	s1, s14
 800236a:	eeb0 0a67 	vmov.f32	s0, s15
 800236e:	f7fe ffd7 	bl	8001320 <pid_equation>
                 PrevErrorRateYaw, PrevItermRateYaw, dt,
                 RATE_I_LIMIT, RATE_OUT_LIMIT); 
    InputYaw = PIDReturn[0];
 8002372:	4b54      	ldr	r3, [pc, #336]	@ (80024c4 <main+0xa8c>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a5d      	ldr	r2, [pc, #372]	@ (80024ec <main+0xab4>)
 8002378:	6013      	str	r3, [r2, #0]
    PrevErrorRateYaw = PIDReturn[1];
 800237a:	4b52      	ldr	r3, [pc, #328]	@ (80024c4 <main+0xa8c>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	4a58      	ldr	r2, [pc, #352]	@ (80024e0 <main+0xaa8>)
 8002380:	6013      	str	r3, [r2, #0]
    PrevItermRateYaw = PIDReturn[2];
 8002382:	4b50      	ldr	r3, [pc, #320]	@ (80024c4 <main+0xa8c>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	4a57      	ldr	r2, [pc, #348]	@ (80024e4 <main+0xaac>)
 8002388:	6013      	str	r3, [r2, #0]
//    throttle_channel_value = 60;
    m1 = pulse_saturate((uint16_t)(throttle_channel_value - InputRoll - InputPitch - InputYaw));
 800238a:	4b59      	ldr	r3, [pc, #356]	@ (80024f0 <main+0xab8>)
 800238c:	881b      	ldrh	r3, [r3, #0]
 800238e:	b29b      	uxth	r3, r3
 8002390:	ee07 3a90 	vmov	s15, r3
 8002394:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002398:	4b56      	ldr	r3, [pc, #344]	@ (80024f4 <main+0xabc>)
 800239a:	edd3 7a00 	vldr	s15, [r3]
 800239e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023a2:	4b47      	ldr	r3, [pc, #284]	@ (80024c0 <main+0xa88>)
 80023a4:	edd3 7a00 	vldr	s15, [r3]
 80023a8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023ac:	4b4f      	ldr	r3, [pc, #316]	@ (80024ec <main+0xab4>)
 80023ae:	edd3 7a00 	vldr	s15, [r3]
 80023b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023ba:	ee17 3a90 	vmov	r3, s15
 80023be:	b29b      	uxth	r3, r3
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff f8ed 	bl	80015a0 <pulse_saturate>
 80023c6:	4603      	mov	r3, r0
 80023c8:	b2da      	uxtb	r2, r3
 80023ca:	4b4b      	ldr	r3, [pc, #300]	@ (80024f8 <main+0xac0>)
 80023cc:	701a      	strb	r2, [r3, #0]
    m2 = pulse_saturate((uint16_t)(throttle_channel_value - InputRoll + InputPitch + InputYaw));
 80023ce:	4b48      	ldr	r3, [pc, #288]	@ (80024f0 <main+0xab8>)
 80023d0:	881b      	ldrh	r3, [r3, #0]
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	ee07 3a90 	vmov	s15, r3
 80023d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023dc:	4b45      	ldr	r3, [pc, #276]	@ (80024f4 <main+0xabc>)
 80023de:	edd3 7a00 	vldr	s15, [r3]
 80023e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023e6:	4b36      	ldr	r3, [pc, #216]	@ (80024c0 <main+0xa88>)
 80023e8:	edd3 7a00 	vldr	s15, [r3]
 80023ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023f0:	4b3e      	ldr	r3, [pc, #248]	@ (80024ec <main+0xab4>)
 80023f2:	edd3 7a00 	vldr	s15, [r3]
 80023f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023fe:	ee17 3a90 	vmov	r3, s15
 8002402:	b29b      	uxth	r3, r3
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff f8cb 	bl	80015a0 <pulse_saturate>
 800240a:	4603      	mov	r3, r0
 800240c:	b2da      	uxtb	r2, r3
 800240e:	4b3b      	ldr	r3, [pc, #236]	@ (80024fc <main+0xac4>)
 8002410:	701a      	strb	r2, [r3, #0]
    m3 = pulse_saturate((uint16_t)(throttle_channel_value + InputRoll + InputPitch - InputYaw));
 8002412:	4b37      	ldr	r3, [pc, #220]	@ (80024f0 <main+0xab8>)
 8002414:	881b      	ldrh	r3, [r3, #0]
 8002416:	b29b      	uxth	r3, r3
 8002418:	ee07 3a90 	vmov	s15, r3
 800241c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002420:	4b34      	ldr	r3, [pc, #208]	@ (80024f4 <main+0xabc>)
 8002422:	edd3 7a00 	vldr	s15, [r3]
 8002426:	ee37 7a27 	vadd.f32	s14, s14, s15
 800242a:	4b25      	ldr	r3, [pc, #148]	@ (80024c0 <main+0xa88>)
 800242c:	edd3 7a00 	vldr	s15, [r3]
 8002430:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002434:	4b2d      	ldr	r3, [pc, #180]	@ (80024ec <main+0xab4>)
 8002436:	edd3 7a00 	vldr	s15, [r3]
 800243a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800243e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002442:	ee17 3a90 	vmov	r3, s15
 8002446:	b29b      	uxth	r3, r3
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff f8a9 	bl	80015a0 <pulse_saturate>
 800244e:	4603      	mov	r3, r0
 8002450:	b2da      	uxtb	r2, r3
 8002452:	4b2b      	ldr	r3, [pc, #172]	@ (8002500 <main+0xac8>)
 8002454:	701a      	strb	r2, [r3, #0]
    m4 = pulse_saturate((uint16_t)(throttle_channel_value + InputRoll - InputPitch + InputYaw));
 8002456:	4b26      	ldr	r3, [pc, #152]	@ (80024f0 <main+0xab8>)
 8002458:	881b      	ldrh	r3, [r3, #0]
 800245a:	b29b      	uxth	r3, r3
 800245c:	ee07 3a90 	vmov	s15, r3
 8002460:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002464:	4b23      	ldr	r3, [pc, #140]	@ (80024f4 <main+0xabc>)
 8002466:	edd3 7a00 	vldr	s15, [r3]
 800246a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800246e:	4b14      	ldr	r3, [pc, #80]	@ (80024c0 <main+0xa88>)
 8002470:	edd3 7a00 	vldr	s15, [r3]
 8002474:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002478:	4b1c      	ldr	r3, [pc, #112]	@ (80024ec <main+0xab4>)
 800247a:	edd3 7a00 	vldr	s15, [r3]
 800247e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002482:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002486:	ee17 3a90 	vmov	r3, s15
 800248a:	b29b      	uxth	r3, r3
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff f887 	bl	80015a0 <pulse_saturate>
 8002492:	4603      	mov	r3, r0
 8002494:	b2da      	uxtb	r2, r3
 8002496:	4b1b      	ldr	r3, [pc, #108]	@ (8002504 <main+0xacc>)
 8002498:	701a      	strb	r2, [r3, #0]

    // //gui cho dong co power (us)
     TIM3->CCR1 = m1;
 800249a:	4b17      	ldr	r3, [pc, #92]	@ (80024f8 <main+0xac0>)
 800249c:	781a      	ldrb	r2, [r3, #0]
 800249e:	4b1a      	ldr	r3, [pc, #104]	@ (8002508 <main+0xad0>)
 80024a0:	635a      	str	r2, [r3, #52]	@ 0x34
     TIM3->CCR2 = m2;
 80024a2:	4b16      	ldr	r3, [pc, #88]	@ (80024fc <main+0xac4>)
 80024a4:	781a      	ldrb	r2, [r3, #0]
 80024a6:	4b18      	ldr	r3, [pc, #96]	@ (8002508 <main+0xad0>)
 80024a8:	639a      	str	r2, [r3, #56]	@ 0x38
     TIM3->CCR3 = m3;
 80024aa:	4b15      	ldr	r3, [pc, #84]	@ (8002500 <main+0xac8>)
 80024ac:	781a      	ldrb	r2, [r3, #0]
 80024ae:	4b16      	ldr	r3, [pc, #88]	@ (8002508 <main+0xad0>)
 80024b0:	63da      	str	r2, [r3, #60]	@ 0x3c
     TIM3->CCR4 = m4;
 80024b2:	4b14      	ldr	r3, [pc, #80]	@ (8002504 <main+0xacc>)
 80024b4:	781a      	ldrb	r2, [r3, #0]
 80024b6:	4b14      	ldr	r3, [pc, #80]	@ (8002508 <main+0xad0>)
 80024b8:	641a      	str	r2, [r3, #64]	@ 0x40
  {
 80024ba:	f7ff bbfa 	b.w	8001cb2 <main+0x27a>
 80024be:	bf00      	nop
 80024c0:	200004c0 	.word	0x200004c0
 80024c4:	20000498 	.word	0x20000498
 80024c8:	200004cc 	.word	0x200004cc
 80024cc:	200004d8 	.word	0x200004d8
 80024d0:	200004b8 	.word	0x200004b8
 80024d4:	20000014 	.word	0x20000014
 80024d8:	200004e8 	.word	0x200004e8
 80024dc:	200004f4 	.word	0x200004f4
 80024e0:	200004d0 	.word	0x200004d0
 80024e4:	200004dc 	.word	0x200004dc
 80024e8:	20000000 	.word	0x20000000
 80024ec:	200004c4 	.word	0x200004c4
 80024f0:	2000056a 	.word	0x2000056a
 80024f4:	200004bc 	.word	0x200004bc
 80024f8:	20000528 	.word	0x20000528
 80024fc:	20000529 	.word	0x20000529
 8002500:	2000052a 	.word	0x2000052a
 8002504:	2000052b 	.word	0x2000052b
 8002508:	40000400 	.word	0x40000400
 800250c:	9999999a 	.word	0x9999999a
 8002510:	3fa99999 	.word	0x3fa99999

08002514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b094      	sub	sp, #80	@ 0x50
 8002518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800251a:	f107 0320 	add.w	r3, r7, #32
 800251e:	2230      	movs	r2, #48	@ 0x30
 8002520:	2100      	movs	r1, #0
 8002522:	4618      	mov	r0, r3
 8002524:	f005 fbd3 	bl	8007cce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002528:	f107 030c 	add.w	r3, r7, #12
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	605a      	str	r2, [r3, #4]
 8002532:	609a      	str	r2, [r3, #8]
 8002534:	60da      	str	r2, [r3, #12]
 8002536:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002538:	2300      	movs	r3, #0
 800253a:	60bb      	str	r3, [r7, #8]
 800253c:	4b27      	ldr	r3, [pc, #156]	@ (80025dc <SystemClock_Config+0xc8>)
 800253e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002540:	4a26      	ldr	r2, [pc, #152]	@ (80025dc <SystemClock_Config+0xc8>)
 8002542:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002546:	6413      	str	r3, [r2, #64]	@ 0x40
 8002548:	4b24      	ldr	r3, [pc, #144]	@ (80025dc <SystemClock_Config+0xc8>)
 800254a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800254c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002550:	60bb      	str	r3, [r7, #8]
 8002552:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002554:	2300      	movs	r3, #0
 8002556:	607b      	str	r3, [r7, #4]
 8002558:	4b21      	ldr	r3, [pc, #132]	@ (80025e0 <SystemClock_Config+0xcc>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a20      	ldr	r2, [pc, #128]	@ (80025e0 <SystemClock_Config+0xcc>)
 800255e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002562:	6013      	str	r3, [r2, #0]
 8002564:	4b1e      	ldr	r3, [pc, #120]	@ (80025e0 <SystemClock_Config+0xcc>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800256c:	607b      	str	r3, [r7, #4]
 800256e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002570:	2302      	movs	r3, #2
 8002572:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002574:	2301      	movs	r3, #1
 8002576:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002578:	2310      	movs	r3, #16
 800257a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800257c:	2302      	movs	r3, #2
 800257e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002580:	2300      	movs	r3, #0
 8002582:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002584:	2308      	movs	r3, #8
 8002586:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002588:	2364      	movs	r3, #100	@ 0x64
 800258a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800258c:	2302      	movs	r3, #2
 800258e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002590:	2304      	movs	r3, #4
 8002592:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002594:	f107 0320 	add.w	r3, r7, #32
 8002598:	4618      	mov	r0, r3
 800259a:	f002 fc8f 	bl	8004ebc <HAL_RCC_OscConfig>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80025a4:	f000 f9c4 	bl	8002930 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025a8:	230f      	movs	r3, #15
 80025aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025ac:	2302      	movs	r3, #2
 80025ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025b0:	2300      	movs	r3, #0
 80025b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80025b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025ba:	2300      	movs	r3, #0
 80025bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80025be:	f107 030c 	add.w	r3, r7, #12
 80025c2:	2103      	movs	r1, #3
 80025c4:	4618      	mov	r0, r3
 80025c6:	f002 fef1 	bl	80053ac <HAL_RCC_ClockConfig>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80025d0:	f000 f9ae 	bl	8002930 <Error_Handler>
  }
}
 80025d4:	bf00      	nop
 80025d6:	3750      	adds	r7, #80	@ 0x50
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	40023800 	.word	0x40023800
 80025e0:	40007000 	.word	0x40007000

080025e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80025e8:	4b12      	ldr	r3, [pc, #72]	@ (8002634 <MX_I2C1_Init+0x50>)
 80025ea:	4a13      	ldr	r2, [pc, #76]	@ (8002638 <MX_I2C1_Init+0x54>)
 80025ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80025ee:	4b11      	ldr	r3, [pc, #68]	@ (8002634 <MX_I2C1_Init+0x50>)
 80025f0:	4a12      	ldr	r2, [pc, #72]	@ (800263c <MX_I2C1_Init+0x58>)
 80025f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80025f4:	4b0f      	ldr	r3, [pc, #60]	@ (8002634 <MX_I2C1_Init+0x50>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80025fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002634 <MX_I2C1_Init+0x50>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002600:	4b0c      	ldr	r3, [pc, #48]	@ (8002634 <MX_I2C1_Init+0x50>)
 8002602:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002606:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002608:	4b0a      	ldr	r3, [pc, #40]	@ (8002634 <MX_I2C1_Init+0x50>)
 800260a:	2200      	movs	r2, #0
 800260c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800260e:	4b09      	ldr	r3, [pc, #36]	@ (8002634 <MX_I2C1_Init+0x50>)
 8002610:	2200      	movs	r2, #0
 8002612:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002614:	4b07      	ldr	r3, [pc, #28]	@ (8002634 <MX_I2C1_Init+0x50>)
 8002616:	2200      	movs	r2, #0
 8002618:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800261a:	4b06      	ldr	r3, [pc, #24]	@ (8002634 <MX_I2C1_Init+0x50>)
 800261c:	2200      	movs	r2, #0
 800261e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002620:	4804      	ldr	r0, [pc, #16]	@ (8002634 <MX_I2C1_Init+0x50>)
 8002622:	f001 fc27 	bl	8003e74 <HAL_I2C_Init>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800262c:	f000 f980 	bl	8002930 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002630:	bf00      	nop
 8002632:	bd80      	pop	{r7, pc}
 8002634:	20000214 	.word	0x20000214
 8002638:	40005400 	.word	0x40005400
 800263c:	000186a0 	.word	0x000186a0

08002640 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b08e      	sub	sp, #56	@ 0x38
 8002644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002646:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800264a:	2200      	movs	r2, #0
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	605a      	str	r2, [r3, #4]
 8002650:	609a      	str	r2, [r3, #8]
 8002652:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002654:	f107 0320 	add.w	r3, r7, #32
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800265e:	1d3b      	adds	r3, r7, #4
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	605a      	str	r2, [r3, #4]
 8002666:	609a      	str	r2, [r3, #8]
 8002668:	60da      	str	r2, [r3, #12]
 800266a:	611a      	str	r2, [r3, #16]
 800266c:	615a      	str	r2, [r3, #20]
 800266e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002670:	4b3d      	ldr	r3, [pc, #244]	@ (8002768 <MX_TIM3_Init+0x128>)
 8002672:	4a3e      	ldr	r2, [pc, #248]	@ (800276c <MX_TIM3_Init+0x12c>)
 8002674:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2000-1;
 8002676:	4b3c      	ldr	r3, [pc, #240]	@ (8002768 <MX_TIM3_Init+0x128>)
 8002678:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 800267c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800267e:	4b3a      	ldr	r3, [pc, #232]	@ (8002768 <MX_TIM3_Init+0x128>)
 8002680:	2200      	movs	r2, #0
 8002682:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8002684:	4b38      	ldr	r3, [pc, #224]	@ (8002768 <MX_TIM3_Init+0x128>)
 8002686:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800268a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800268c:	4b36      	ldr	r3, [pc, #216]	@ (8002768 <MX_TIM3_Init+0x128>)
 800268e:	2200      	movs	r2, #0
 8002690:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002692:	4b35      	ldr	r3, [pc, #212]	@ (8002768 <MX_TIM3_Init+0x128>)
 8002694:	2200      	movs	r2, #0
 8002696:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002698:	4833      	ldr	r0, [pc, #204]	@ (8002768 <MX_TIM3_Init+0x128>)
 800269a:	f003 f867 	bl	800576c <HAL_TIM_Base_Init>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80026a4:	f000 f944 	bl	8002930 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80026ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80026b2:	4619      	mov	r1, r3
 80026b4:	482c      	ldr	r0, [pc, #176]	@ (8002768 <MX_TIM3_Init+0x128>)
 80026b6:	f003 fa73 	bl	8005ba0 <HAL_TIM_ConfigClockSource>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80026c0:	f000 f936 	bl	8002930 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80026c4:	4828      	ldr	r0, [pc, #160]	@ (8002768 <MX_TIM3_Init+0x128>)
 80026c6:	f003 f8a0 	bl	800580a <HAL_TIM_PWM_Init>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80026d0:	f000 f92e 	bl	8002930 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026d4:	2300      	movs	r3, #0
 80026d6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026d8:	2300      	movs	r3, #0
 80026da:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80026dc:	f107 0320 	add.w	r3, r7, #32
 80026e0:	4619      	mov	r1, r3
 80026e2:	4821      	ldr	r0, [pc, #132]	@ (8002768 <MX_TIM3_Init+0x128>)
 80026e4:	f003 fdf6 	bl	80062d4 <HAL_TIMEx_MasterConfigSynchronization>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80026ee:	f000 f91f 	bl	8002930 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026f2:	2360      	movs	r3, #96	@ 0x60
 80026f4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 80026f6:	2332      	movs	r3, #50	@ 0x32
 80026f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026fa:	2300      	movs	r3, #0
 80026fc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026fe:	2300      	movs	r3, #0
 8002700:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002702:	1d3b      	adds	r3, r7, #4
 8002704:	2200      	movs	r2, #0
 8002706:	4619      	mov	r1, r3
 8002708:	4817      	ldr	r0, [pc, #92]	@ (8002768 <MX_TIM3_Init+0x128>)
 800270a:	f003 f987 	bl	8005a1c <HAL_TIM_PWM_ConfigChannel>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d001      	beq.n	8002718 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002714:	f000 f90c 	bl	8002930 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002718:	1d3b      	adds	r3, r7, #4
 800271a:	2204      	movs	r2, #4
 800271c:	4619      	mov	r1, r3
 800271e:	4812      	ldr	r0, [pc, #72]	@ (8002768 <MX_TIM3_Init+0x128>)
 8002720:	f003 f97c 	bl	8005a1c <HAL_TIM_PWM_ConfigChannel>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800272a:	f000 f901 	bl	8002930 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800272e:	1d3b      	adds	r3, r7, #4
 8002730:	2208      	movs	r2, #8
 8002732:	4619      	mov	r1, r3
 8002734:	480c      	ldr	r0, [pc, #48]	@ (8002768 <MX_TIM3_Init+0x128>)
 8002736:	f003 f971 	bl	8005a1c <HAL_TIM_PWM_ConfigChannel>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8002740:	f000 f8f6 	bl	8002930 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002744:	1d3b      	adds	r3, r7, #4
 8002746:	220c      	movs	r2, #12
 8002748:	4619      	mov	r1, r3
 800274a:	4807      	ldr	r0, [pc, #28]	@ (8002768 <MX_TIM3_Init+0x128>)
 800274c:	f003 f966 	bl	8005a1c <HAL_TIM_PWM_ConfigChannel>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8002756:	f000 f8eb 	bl	8002930 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800275a:	4803      	ldr	r0, [pc, #12]	@ (8002768 <MX_TIM3_Init+0x128>)
 800275c:	f000 f980 	bl	8002a60 <HAL_TIM_MspPostInit>

}
 8002760:	bf00      	nop
 8002762:	3738      	adds	r7, #56	@ 0x38
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	20000268 	.word	0x20000268
 800276c:	40000400 	.word	0x40000400

08002770 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002774:	4b11      	ldr	r3, [pc, #68]	@ (80027bc <MX_USART1_UART_Init+0x4c>)
 8002776:	4a12      	ldr	r2, [pc, #72]	@ (80027c0 <MX_USART1_UART_Init+0x50>)
 8002778:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 800277a:	4b10      	ldr	r3, [pc, #64]	@ (80027bc <MX_USART1_UART_Init+0x4c>)
 800277c:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8002780:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002782:	4b0e      	ldr	r3, [pc, #56]	@ (80027bc <MX_USART1_UART_Init+0x4c>)
 8002784:	2200      	movs	r2, #0
 8002786:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002788:	4b0c      	ldr	r3, [pc, #48]	@ (80027bc <MX_USART1_UART_Init+0x4c>)
 800278a:	2200      	movs	r2, #0
 800278c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800278e:	4b0b      	ldr	r3, [pc, #44]	@ (80027bc <MX_USART1_UART_Init+0x4c>)
 8002790:	2200      	movs	r2, #0
 8002792:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002794:	4b09      	ldr	r3, [pc, #36]	@ (80027bc <MX_USART1_UART_Init+0x4c>)
 8002796:	220c      	movs	r2, #12
 8002798:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800279a:	4b08      	ldr	r3, [pc, #32]	@ (80027bc <MX_USART1_UART_Init+0x4c>)
 800279c:	2200      	movs	r2, #0
 800279e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80027a0:	4b06      	ldr	r3, [pc, #24]	@ (80027bc <MX_USART1_UART_Init+0x4c>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80027a6:	4805      	ldr	r0, [pc, #20]	@ (80027bc <MX_USART1_UART_Init+0x4c>)
 80027a8:	f003 fe02 	bl	80063b0 <HAL_UART_Init>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80027b2:	f000 f8bd 	bl	8002930 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80027b6:	bf00      	nop
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	200002b0 	.word	0x200002b0
 80027c0:	40011000 	.word	0x40011000

080027c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80027c8:	4b12      	ldr	r3, [pc, #72]	@ (8002814 <MX_USART2_UART_Init+0x50>)
 80027ca:	4a13      	ldr	r2, [pc, #76]	@ (8002818 <MX_USART2_UART_Init+0x54>)
 80027cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 100000;
 80027ce:	4b11      	ldr	r3, [pc, #68]	@ (8002814 <MX_USART2_UART_Init+0x50>)
 80027d0:	4a12      	ldr	r2, [pc, #72]	@ (800281c <MX_USART2_UART_Init+0x58>)
 80027d2:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80027d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002814 <MX_USART2_UART_Init+0x50>)
 80027d6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80027da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 80027dc:	4b0d      	ldr	r3, [pc, #52]	@ (8002814 <MX_USART2_UART_Init+0x50>)
 80027de:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80027e2:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80027e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002814 <MX_USART2_UART_Init+0x50>)
 80027e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80027ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80027ec:	4b09      	ldr	r3, [pc, #36]	@ (8002814 <MX_USART2_UART_Init+0x50>)
 80027ee:	220c      	movs	r2, #12
 80027f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027f2:	4b08      	ldr	r3, [pc, #32]	@ (8002814 <MX_USART2_UART_Init+0x50>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80027f8:	4b06      	ldr	r3, [pc, #24]	@ (8002814 <MX_USART2_UART_Init+0x50>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80027fe:	4805      	ldr	r0, [pc, #20]	@ (8002814 <MX_USART2_UART_Init+0x50>)
 8002800:	f003 fdd6 	bl	80063b0 <HAL_UART_Init>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 800280a:	f000 f891 	bl	8002930 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800280e:	bf00      	nop
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	200002f8 	.word	0x200002f8
 8002818:	40004400 	.word	0x40004400
 800281c:	000186a0 	.word	0x000186a0

08002820 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002824:	4b11      	ldr	r3, [pc, #68]	@ (800286c <MX_USART6_UART_Init+0x4c>)
 8002826:	4a12      	ldr	r2, [pc, #72]	@ (8002870 <MX_USART6_UART_Init+0x50>)
 8002828:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800282a:	4b10      	ldr	r3, [pc, #64]	@ (800286c <MX_USART6_UART_Init+0x4c>)
 800282c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002830:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002832:	4b0e      	ldr	r3, [pc, #56]	@ (800286c <MX_USART6_UART_Init+0x4c>)
 8002834:	2200      	movs	r2, #0
 8002836:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002838:	4b0c      	ldr	r3, [pc, #48]	@ (800286c <MX_USART6_UART_Init+0x4c>)
 800283a:	2200      	movs	r2, #0
 800283c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800283e:	4b0b      	ldr	r3, [pc, #44]	@ (800286c <MX_USART6_UART_Init+0x4c>)
 8002840:	2200      	movs	r2, #0
 8002842:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002844:	4b09      	ldr	r3, [pc, #36]	@ (800286c <MX_USART6_UART_Init+0x4c>)
 8002846:	220c      	movs	r2, #12
 8002848:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800284a:	4b08      	ldr	r3, [pc, #32]	@ (800286c <MX_USART6_UART_Init+0x4c>)
 800284c:	2200      	movs	r2, #0
 800284e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002850:	4b06      	ldr	r3, [pc, #24]	@ (800286c <MX_USART6_UART_Init+0x4c>)
 8002852:	2200      	movs	r2, #0
 8002854:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002856:	4805      	ldr	r0, [pc, #20]	@ (800286c <MX_USART6_UART_Init+0x4c>)
 8002858:	f003 fdaa 	bl	80063b0 <HAL_UART_Init>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002862:	f000 f865 	bl	8002930 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002866:	bf00      	nop
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	20000340 	.word	0x20000340
 8002870:	40011400 	.word	0x40011400

08002874 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800287a:	2300      	movs	r3, #0
 800287c:	607b      	str	r3, [r7, #4]
 800287e:	4b17      	ldr	r3, [pc, #92]	@ (80028dc <MX_DMA_Init+0x68>)
 8002880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002882:	4a16      	ldr	r2, [pc, #88]	@ (80028dc <MX_DMA_Init+0x68>)
 8002884:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002888:	6313      	str	r3, [r2, #48]	@ 0x30
 800288a:	4b14      	ldr	r3, [pc, #80]	@ (80028dc <MX_DMA_Init+0x68>)
 800288c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800288e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002892:	607b      	str	r3, [r7, #4]
 8002894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002896:	2300      	movs	r3, #0
 8002898:	603b      	str	r3, [r7, #0]
 800289a:	4b10      	ldr	r3, [pc, #64]	@ (80028dc <MX_DMA_Init+0x68>)
 800289c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800289e:	4a0f      	ldr	r2, [pc, #60]	@ (80028dc <MX_DMA_Init+0x68>)
 80028a0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80028a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80028a6:	4b0d      	ldr	r3, [pc, #52]	@ (80028dc <MX_DMA_Init+0x68>)
 80028a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028ae:	603b      	str	r3, [r7, #0]
 80028b0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80028b2:	2200      	movs	r2, #0
 80028b4:	2100      	movs	r1, #0
 80028b6:	2010      	movs	r0, #16
 80028b8:	f000 fd1f 	bl	80032fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80028bc:	2010      	movs	r0, #16
 80028be:	f000 fd38 	bl	8003332 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80028c2:	2200      	movs	r2, #0
 80028c4:	2100      	movs	r1, #0
 80028c6:	203a      	movs	r0, #58	@ 0x3a
 80028c8:	f000 fd17 	bl	80032fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80028cc:	203a      	movs	r0, #58	@ 0x3a
 80028ce:	f000 fd30 	bl	8003332 <HAL_NVIC_EnableIRQ>

}
 80028d2:	bf00      	nop
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	40023800 	.word	0x40023800

080028e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028e6:	2300      	movs	r3, #0
 80028e8:	607b      	str	r3, [r7, #4]
 80028ea:	4b10      	ldr	r3, [pc, #64]	@ (800292c <MX_GPIO_Init+0x4c>)
 80028ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ee:	4a0f      	ldr	r2, [pc, #60]	@ (800292c <MX_GPIO_Init+0x4c>)
 80028f0:	f043 0301 	orr.w	r3, r3, #1
 80028f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80028f6:	4b0d      	ldr	r3, [pc, #52]	@ (800292c <MX_GPIO_Init+0x4c>)
 80028f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	607b      	str	r3, [r7, #4]
 8002900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002902:	2300      	movs	r3, #0
 8002904:	603b      	str	r3, [r7, #0]
 8002906:	4b09      	ldr	r3, [pc, #36]	@ (800292c <MX_GPIO_Init+0x4c>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800290a:	4a08      	ldr	r2, [pc, #32]	@ (800292c <MX_GPIO_Init+0x4c>)
 800290c:	f043 0302 	orr.w	r3, r3, #2
 8002910:	6313      	str	r3, [r2, #48]	@ 0x30
 8002912:	4b06      	ldr	r3, [pc, #24]	@ (800292c <MX_GPIO_Init+0x4c>)
 8002914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	603b      	str	r3, [r7, #0]
 800291c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800291e:	bf00      	nop
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	40023800 	.word	0x40023800

08002930 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002934:	b672      	cpsid	i
}
 8002936:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002938:	bf00      	nop
 800293a:	e7fd      	b.n	8002938 <Error_Handler+0x8>

0800293c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002942:	2300      	movs	r3, #0
 8002944:	607b      	str	r3, [r7, #4]
 8002946:	4b10      	ldr	r3, [pc, #64]	@ (8002988 <HAL_MspInit+0x4c>)
 8002948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800294a:	4a0f      	ldr	r2, [pc, #60]	@ (8002988 <HAL_MspInit+0x4c>)
 800294c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002950:	6453      	str	r3, [r2, #68]	@ 0x44
 8002952:	4b0d      	ldr	r3, [pc, #52]	@ (8002988 <HAL_MspInit+0x4c>)
 8002954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002956:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800295a:	607b      	str	r3, [r7, #4]
 800295c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800295e:	2300      	movs	r3, #0
 8002960:	603b      	str	r3, [r7, #0]
 8002962:	4b09      	ldr	r3, [pc, #36]	@ (8002988 <HAL_MspInit+0x4c>)
 8002964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002966:	4a08      	ldr	r2, [pc, #32]	@ (8002988 <HAL_MspInit+0x4c>)
 8002968:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800296c:	6413      	str	r3, [r2, #64]	@ 0x40
 800296e:	4b06      	ldr	r3, [pc, #24]	@ (8002988 <HAL_MspInit+0x4c>)
 8002970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002972:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002976:	603b      	str	r3, [r7, #0]
 8002978:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800297a:	bf00      	nop
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	40023800 	.word	0x40023800

0800298c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b08a      	sub	sp, #40	@ 0x28
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002994:	f107 0314 	add.w	r3, r7, #20
 8002998:	2200      	movs	r2, #0
 800299a:	601a      	str	r2, [r3, #0]
 800299c:	605a      	str	r2, [r3, #4]
 800299e:	609a      	str	r2, [r3, #8]
 80029a0:	60da      	str	r2, [r3, #12]
 80029a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a19      	ldr	r2, [pc, #100]	@ (8002a10 <HAL_I2C_MspInit+0x84>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d12b      	bne.n	8002a06 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ae:	2300      	movs	r3, #0
 80029b0:	613b      	str	r3, [r7, #16]
 80029b2:	4b18      	ldr	r3, [pc, #96]	@ (8002a14 <HAL_I2C_MspInit+0x88>)
 80029b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b6:	4a17      	ldr	r2, [pc, #92]	@ (8002a14 <HAL_I2C_MspInit+0x88>)
 80029b8:	f043 0302 	orr.w	r3, r3, #2
 80029bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80029be:	4b15      	ldr	r3, [pc, #84]	@ (8002a14 <HAL_I2C_MspInit+0x88>)
 80029c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	613b      	str	r3, [r7, #16]
 80029c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80029ca:	23c0      	movs	r3, #192	@ 0xc0
 80029cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029ce:	2312      	movs	r3, #18
 80029d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d2:	2300      	movs	r3, #0
 80029d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029d6:	2303      	movs	r3, #3
 80029d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80029da:	2304      	movs	r3, #4
 80029dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029de:	f107 0314 	add.w	r3, r7, #20
 80029e2:	4619      	mov	r1, r3
 80029e4:	480c      	ldr	r0, [pc, #48]	@ (8002a18 <HAL_I2C_MspInit+0x8c>)
 80029e6:	f001 f8c1 	bl	8003b6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80029ea:	2300      	movs	r3, #0
 80029ec:	60fb      	str	r3, [r7, #12]
 80029ee:	4b09      	ldr	r3, [pc, #36]	@ (8002a14 <HAL_I2C_MspInit+0x88>)
 80029f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f2:	4a08      	ldr	r2, [pc, #32]	@ (8002a14 <HAL_I2C_MspInit+0x88>)
 80029f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80029f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80029fa:	4b06      	ldr	r3, [pc, #24]	@ (8002a14 <HAL_I2C_MspInit+0x88>)
 80029fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a02:	60fb      	str	r3, [r7, #12]
 8002a04:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002a06:	bf00      	nop
 8002a08:	3728      	adds	r7, #40	@ 0x28
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	40005400 	.word	0x40005400
 8002a14:	40023800 	.word	0x40023800
 8002a18:	40020400 	.word	0x40020400

08002a1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a0b      	ldr	r2, [pc, #44]	@ (8002a58 <HAL_TIM_Base_MspInit+0x3c>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d10d      	bne.n	8002a4a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a2e:	2300      	movs	r3, #0
 8002a30:	60fb      	str	r3, [r7, #12]
 8002a32:	4b0a      	ldr	r3, [pc, #40]	@ (8002a5c <HAL_TIM_Base_MspInit+0x40>)
 8002a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a36:	4a09      	ldr	r2, [pc, #36]	@ (8002a5c <HAL_TIM_Base_MspInit+0x40>)
 8002a38:	f043 0302 	orr.w	r3, r3, #2
 8002a3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a3e:	4b07      	ldr	r3, [pc, #28]	@ (8002a5c <HAL_TIM_Base_MspInit+0x40>)
 8002a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	60fb      	str	r3, [r7, #12]
 8002a48:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002a4a:	bf00      	nop
 8002a4c:	3714      	adds	r7, #20
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	40000400 	.word	0x40000400
 8002a5c:	40023800 	.word	0x40023800

08002a60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b08a      	sub	sp, #40	@ 0x28
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a68:	f107 0314 	add.w	r3, r7, #20
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	605a      	str	r2, [r3, #4]
 8002a72:	609a      	str	r2, [r3, #8]
 8002a74:	60da      	str	r2, [r3, #12]
 8002a76:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a21      	ldr	r2, [pc, #132]	@ (8002b04 <HAL_TIM_MspPostInit+0xa4>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d13b      	bne.n	8002afa <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a82:	2300      	movs	r3, #0
 8002a84:	613b      	str	r3, [r7, #16]
 8002a86:	4b20      	ldr	r3, [pc, #128]	@ (8002b08 <HAL_TIM_MspPostInit+0xa8>)
 8002a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a8a:	4a1f      	ldr	r2, [pc, #124]	@ (8002b08 <HAL_TIM_MspPostInit+0xa8>)
 8002a8c:	f043 0301 	orr.w	r3, r3, #1
 8002a90:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a92:	4b1d      	ldr	r3, [pc, #116]	@ (8002b08 <HAL_TIM_MspPostInit+0xa8>)
 8002a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	613b      	str	r3, [r7, #16]
 8002a9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	60fb      	str	r3, [r7, #12]
 8002aa2:	4b19      	ldr	r3, [pc, #100]	@ (8002b08 <HAL_TIM_MspPostInit+0xa8>)
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa6:	4a18      	ldr	r2, [pc, #96]	@ (8002b08 <HAL_TIM_MspPostInit+0xa8>)
 8002aa8:	f043 0302 	orr.w	r3, r3, #2
 8002aac:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aae:	4b16      	ldr	r3, [pc, #88]	@ (8002b08 <HAL_TIM_MspPostInit+0xa8>)
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002aba:	23c0      	movs	r3, #192	@ 0xc0
 8002abc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002abe:	2302      	movs	r3, #2
 8002ac0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002aca:	2302      	movs	r3, #2
 8002acc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ace:	f107 0314 	add.w	r3, r7, #20
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	480d      	ldr	r0, [pc, #52]	@ (8002b0c <HAL_TIM_MspPostInit+0xac>)
 8002ad6:	f001 f849 	bl	8003b6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002ada:	2303      	movs	r3, #3
 8002adc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ade:	2302      	movs	r3, #2
 8002ae0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002aea:	2302      	movs	r3, #2
 8002aec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aee:	f107 0314 	add.w	r3, r7, #20
 8002af2:	4619      	mov	r1, r3
 8002af4:	4806      	ldr	r0, [pc, #24]	@ (8002b10 <HAL_TIM_MspPostInit+0xb0>)
 8002af6:	f001 f839 	bl	8003b6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002afa:	bf00      	nop
 8002afc:	3728      	adds	r7, #40	@ 0x28
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	40000400 	.word	0x40000400
 8002b08:	40023800 	.word	0x40023800
 8002b0c:	40020000 	.word	0x40020000
 8002b10:	40020400 	.word	0x40020400

08002b14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b08e      	sub	sp, #56	@ 0x38
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b20:	2200      	movs	r2, #0
 8002b22:	601a      	str	r2, [r3, #0]
 8002b24:	605a      	str	r2, [r3, #4]
 8002b26:	609a      	str	r2, [r3, #8]
 8002b28:	60da      	str	r2, [r3, #12]
 8002b2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a83      	ldr	r2, [pc, #524]	@ (8002d40 <HAL_UART_MspInit+0x22c>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d164      	bne.n	8002c00 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b36:	2300      	movs	r3, #0
 8002b38:	623b      	str	r3, [r7, #32]
 8002b3a:	4b82      	ldr	r3, [pc, #520]	@ (8002d44 <HAL_UART_MspInit+0x230>)
 8002b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b3e:	4a81      	ldr	r2, [pc, #516]	@ (8002d44 <HAL_UART_MspInit+0x230>)
 8002b40:	f043 0310 	orr.w	r3, r3, #16
 8002b44:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b46:	4b7f      	ldr	r3, [pc, #508]	@ (8002d44 <HAL_UART_MspInit+0x230>)
 8002b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b4a:	f003 0310 	and.w	r3, r3, #16
 8002b4e:	623b      	str	r3, [r7, #32]
 8002b50:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b52:	2300      	movs	r3, #0
 8002b54:	61fb      	str	r3, [r7, #28]
 8002b56:	4b7b      	ldr	r3, [pc, #492]	@ (8002d44 <HAL_UART_MspInit+0x230>)
 8002b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b5a:	4a7a      	ldr	r2, [pc, #488]	@ (8002d44 <HAL_UART_MspInit+0x230>)
 8002b5c:	f043 0301 	orr.w	r3, r3, #1
 8002b60:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b62:	4b78      	ldr	r3, [pc, #480]	@ (8002d44 <HAL_UART_MspInit+0x230>)
 8002b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	61fb      	str	r3, [r7, #28]
 8002b6c:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002b6e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002b72:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b74:	2302      	movs	r3, #2
 8002b76:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b80:	2307      	movs	r3, #7
 8002b82:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b88:	4619      	mov	r1, r3
 8002b8a:	486f      	ldr	r0, [pc, #444]	@ (8002d48 <HAL_UART_MspInit+0x234>)
 8002b8c:	f000 ffee 	bl	8003b6c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002b90:	4b6e      	ldr	r3, [pc, #440]	@ (8002d4c <HAL_UART_MspInit+0x238>)
 8002b92:	4a6f      	ldr	r2, [pc, #444]	@ (8002d50 <HAL_UART_MspInit+0x23c>)
 8002b94:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002b96:	4b6d      	ldr	r3, [pc, #436]	@ (8002d4c <HAL_UART_MspInit+0x238>)
 8002b98:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002b9c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b9e:	4b6b      	ldr	r3, [pc, #428]	@ (8002d4c <HAL_UART_MspInit+0x238>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ba4:	4b69      	ldr	r3, [pc, #420]	@ (8002d4c <HAL_UART_MspInit+0x238>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002baa:	4b68      	ldr	r3, [pc, #416]	@ (8002d4c <HAL_UART_MspInit+0x238>)
 8002bac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002bb0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002bb2:	4b66      	ldr	r3, [pc, #408]	@ (8002d4c <HAL_UART_MspInit+0x238>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bb8:	4b64      	ldr	r3, [pc, #400]	@ (8002d4c <HAL_UART_MspInit+0x238>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002bbe:	4b63      	ldr	r3, [pc, #396]	@ (8002d4c <HAL_UART_MspInit+0x238>)
 8002bc0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002bc4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002bc6:	4b61      	ldr	r3, [pc, #388]	@ (8002d4c <HAL_UART_MspInit+0x238>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002bcc:	4b5f      	ldr	r3, [pc, #380]	@ (8002d4c <HAL_UART_MspInit+0x238>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002bd2:	485e      	ldr	r0, [pc, #376]	@ (8002d4c <HAL_UART_MspInit+0x238>)
 8002bd4:	f000 fbc8 	bl	8003368 <HAL_DMA_Init>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002bde:	f7ff fea7 	bl	8002930 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a59      	ldr	r2, [pc, #356]	@ (8002d4c <HAL_UART_MspInit+0x238>)
 8002be6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002be8:	4a58      	ldr	r2, [pc, #352]	@ (8002d4c <HAL_UART_MspInit+0x238>)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8002bee:	2200      	movs	r2, #0
 8002bf0:	2102      	movs	r1, #2
 8002bf2:	2025      	movs	r0, #37	@ 0x25
 8002bf4:	f000 fb81 	bl	80032fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002bf8:	2025      	movs	r0, #37	@ 0x25
 8002bfa:	f000 fb9a 	bl	8003332 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002bfe:	e09a      	b.n	8002d36 <HAL_UART_MspInit+0x222>
  else if(huart->Instance==USART2)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a53      	ldr	r2, [pc, #332]	@ (8002d54 <HAL_UART_MspInit+0x240>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d163      	bne.n	8002cd2 <HAL_UART_MspInit+0x1be>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	61bb      	str	r3, [r7, #24]
 8002c0e:	4b4d      	ldr	r3, [pc, #308]	@ (8002d44 <HAL_UART_MspInit+0x230>)
 8002c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c12:	4a4c      	ldr	r2, [pc, #304]	@ (8002d44 <HAL_UART_MspInit+0x230>)
 8002c14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c18:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c1a:	4b4a      	ldr	r3, [pc, #296]	@ (8002d44 <HAL_UART_MspInit+0x230>)
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c22:	61bb      	str	r3, [r7, #24]
 8002c24:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c26:	2300      	movs	r3, #0
 8002c28:	617b      	str	r3, [r7, #20]
 8002c2a:	4b46      	ldr	r3, [pc, #280]	@ (8002d44 <HAL_UART_MspInit+0x230>)
 8002c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c2e:	4a45      	ldr	r2, [pc, #276]	@ (8002d44 <HAL_UART_MspInit+0x230>)
 8002c30:	f043 0301 	orr.w	r3, r3, #1
 8002c34:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c36:	4b43      	ldr	r3, [pc, #268]	@ (8002d44 <HAL_UART_MspInit+0x230>)
 8002c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	617b      	str	r3, [r7, #20]
 8002c40:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002c42:	230c      	movs	r3, #12
 8002c44:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c46:	2302      	movs	r3, #2
 8002c48:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c52:	2307      	movs	r3, #7
 8002c54:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	483a      	ldr	r0, [pc, #232]	@ (8002d48 <HAL_UART_MspInit+0x234>)
 8002c5e:	f000 ff85 	bl	8003b6c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002c62:	4b3d      	ldr	r3, [pc, #244]	@ (8002d58 <HAL_UART_MspInit+0x244>)
 8002c64:	4a3d      	ldr	r2, [pc, #244]	@ (8002d5c <HAL_UART_MspInit+0x248>)
 8002c66:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002c68:	4b3b      	ldr	r3, [pc, #236]	@ (8002d58 <HAL_UART_MspInit+0x244>)
 8002c6a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002c6e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c70:	4b39      	ldr	r3, [pc, #228]	@ (8002d58 <HAL_UART_MspInit+0x244>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c76:	4b38      	ldr	r3, [pc, #224]	@ (8002d58 <HAL_UART_MspInit+0x244>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c7c:	4b36      	ldr	r3, [pc, #216]	@ (8002d58 <HAL_UART_MspInit+0x244>)
 8002c7e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c82:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c84:	4b34      	ldr	r3, [pc, #208]	@ (8002d58 <HAL_UART_MspInit+0x244>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c8a:	4b33      	ldr	r3, [pc, #204]	@ (8002d58 <HAL_UART_MspInit+0x244>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002c90:	4b31      	ldr	r3, [pc, #196]	@ (8002d58 <HAL_UART_MspInit+0x244>)
 8002c92:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c96:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002c98:	4b2f      	ldr	r3, [pc, #188]	@ (8002d58 <HAL_UART_MspInit+0x244>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c9e:	4b2e      	ldr	r3, [pc, #184]	@ (8002d58 <HAL_UART_MspInit+0x244>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002ca4:	482c      	ldr	r0, [pc, #176]	@ (8002d58 <HAL_UART_MspInit+0x244>)
 8002ca6:	f000 fb5f 	bl	8003368 <HAL_DMA_Init>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 8002cb0:	f7ff fe3e 	bl	8002930 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a28      	ldr	r2, [pc, #160]	@ (8002d58 <HAL_UART_MspInit+0x244>)
 8002cb8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002cba:	4a27      	ldr	r2, [pc, #156]	@ (8002d58 <HAL_UART_MspInit+0x244>)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	2101      	movs	r1, #1
 8002cc4:	2026      	movs	r0, #38	@ 0x26
 8002cc6:	f000 fb18 	bl	80032fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002cca:	2026      	movs	r0, #38	@ 0x26
 8002ccc:	f000 fb31 	bl	8003332 <HAL_NVIC_EnableIRQ>
}
 8002cd0:	e031      	b.n	8002d36 <HAL_UART_MspInit+0x222>
  else if(huart->Instance==USART6)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a22      	ldr	r2, [pc, #136]	@ (8002d60 <HAL_UART_MspInit+0x24c>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d12c      	bne.n	8002d36 <HAL_UART_MspInit+0x222>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002cdc:	2300      	movs	r3, #0
 8002cde:	613b      	str	r3, [r7, #16]
 8002ce0:	4b18      	ldr	r3, [pc, #96]	@ (8002d44 <HAL_UART_MspInit+0x230>)
 8002ce2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ce4:	4a17      	ldr	r2, [pc, #92]	@ (8002d44 <HAL_UART_MspInit+0x230>)
 8002ce6:	f043 0320 	orr.w	r3, r3, #32
 8002cea:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cec:	4b15      	ldr	r3, [pc, #84]	@ (8002d44 <HAL_UART_MspInit+0x230>)
 8002cee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cf0:	f003 0320 	and.w	r3, r3, #32
 8002cf4:	613b      	str	r3, [r7, #16]
 8002cf6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	60fb      	str	r3, [r7, #12]
 8002cfc:	4b11      	ldr	r3, [pc, #68]	@ (8002d44 <HAL_UART_MspInit+0x230>)
 8002cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d00:	4a10      	ldr	r2, [pc, #64]	@ (8002d44 <HAL_UART_MspInit+0x230>)
 8002d02:	f043 0301 	orr.w	r3, r3, #1
 8002d06:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d08:	4b0e      	ldr	r3, [pc, #56]	@ (8002d44 <HAL_UART_MspInit+0x230>)
 8002d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d0c:	f003 0301 	and.w	r3, r3, #1
 8002d10:	60fb      	str	r3, [r7, #12]
 8002d12:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002d14:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002d18:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d22:	2303      	movs	r3, #3
 8002d24:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002d26:	2308      	movs	r3, #8
 8002d28:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d2e:	4619      	mov	r1, r3
 8002d30:	4805      	ldr	r0, [pc, #20]	@ (8002d48 <HAL_UART_MspInit+0x234>)
 8002d32:	f000 ff1b 	bl	8003b6c <HAL_GPIO_Init>
}
 8002d36:	bf00      	nop
 8002d38:	3738      	adds	r7, #56	@ 0x38
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	40011000 	.word	0x40011000
 8002d44:	40023800 	.word	0x40023800
 8002d48:	40020000 	.word	0x40020000
 8002d4c:	20000388 	.word	0x20000388
 8002d50:	40026440 	.word	0x40026440
 8002d54:	40004400 	.word	0x40004400
 8002d58:	200003e8 	.word	0x200003e8
 8002d5c:	40026088 	.word	0x40026088
 8002d60:	40011400 	.word	0x40011400

08002d64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d68:	bf00      	nop
 8002d6a:	e7fd      	b.n	8002d68 <NMI_Handler+0x4>

08002d6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d70:	bf00      	nop
 8002d72:	e7fd      	b.n	8002d70 <HardFault_Handler+0x4>

08002d74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d78:	bf00      	nop
 8002d7a:	e7fd      	b.n	8002d78 <MemManage_Handler+0x4>

08002d7c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d80:	bf00      	nop
 8002d82:	e7fd      	b.n	8002d80 <BusFault_Handler+0x4>

08002d84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d88:	bf00      	nop
 8002d8a:	e7fd      	b.n	8002d88 <UsageFault_Handler+0x4>

08002d8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d90:	bf00      	nop
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr

08002d9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d9e:	bf00      	nop
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002dac:	bf00      	nop
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr

08002db6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002dba:	f000 f97f 	bl	80030bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002dbe:	bf00      	nop
 8002dc0:	bd80      	pop	{r7, pc}
	...

08002dc4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002dc8:	4802      	ldr	r0, [pc, #8]	@ (8002dd4 <DMA1_Stream5_IRQHandler+0x10>)
 8002dca:	f000 fc65 	bl	8003698 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002dce:	bf00      	nop
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	200003e8 	.word	0x200003e8

08002dd8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002ddc:	4802      	ldr	r0, [pc, #8]	@ (8002de8 <USART1_IRQHandler+0x10>)
 8002dde:	f003 fb91 	bl	8006504 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002de2:	bf00      	nop
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	200002b0 	.word	0x200002b0

08002dec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002df0:	4802      	ldr	r0, [pc, #8]	@ (8002dfc <USART2_IRQHandler+0x10>)
 8002df2:	f003 fb87 	bl	8006504 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002df6:	bf00      	nop
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	200002f8 	.word	0x200002f8

08002e00 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002e04:	4802      	ldr	r0, [pc, #8]	@ (8002e10 <DMA2_Stream2_IRQHandler+0x10>)
 8002e06:	f000 fc47 	bl	8003698 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002e0a:	bf00      	nop
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	20000388 	.word	0x20000388

08002e14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  return 1;
 8002e18:	2301      	movs	r3, #1
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <_kill>:

int _kill(int pid, int sig)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002e2e:	f004 ff9d 	bl	8007d6c <__errno>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2216      	movs	r2, #22
 8002e36:	601a      	str	r2, [r3, #0]
  return -1;
 8002e38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3708      	adds	r7, #8
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <_exit>:

void _exit (int status)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f7ff ffe7 	bl	8002e24 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002e56:	bf00      	nop
 8002e58:	e7fd      	b.n	8002e56 <_exit+0x12>

08002e5a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b086      	sub	sp, #24
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	60f8      	str	r0, [r7, #12]
 8002e62:	60b9      	str	r1, [r7, #8]
 8002e64:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e66:	2300      	movs	r3, #0
 8002e68:	617b      	str	r3, [r7, #20]
 8002e6a:	e00a      	b.n	8002e82 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002e6c:	f3af 8000 	nop.w
 8002e70:	4601      	mov	r1, r0
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	1c5a      	adds	r2, r3, #1
 8002e76:	60ba      	str	r2, [r7, #8]
 8002e78:	b2ca      	uxtb	r2, r1
 8002e7a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	3301      	adds	r3, #1
 8002e80:	617b      	str	r3, [r7, #20]
 8002e82:	697a      	ldr	r2, [r7, #20]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	dbf0      	blt.n	8002e6c <_read+0x12>
  }

  return len;
 8002e8a:	687b      	ldr	r3, [r7, #4]
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3718      	adds	r7, #24
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	617b      	str	r3, [r7, #20]
 8002ea4:	e009      	b.n	8002eba <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	1c5a      	adds	r2, r3, #1
 8002eaa:	60ba      	str	r2, [r7, #8]
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	617b      	str	r3, [r7, #20]
 8002eba:	697a      	ldr	r2, [r7, #20]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	dbf1      	blt.n	8002ea6 <_write+0x12>
  }
  return len;
 8002ec2:	687b      	ldr	r3, [r7, #4]
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3718      	adds	r7, #24
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <_close>:

int _close(int file)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ed4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ef4:	605a      	str	r2, [r3, #4]
  return 0;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <_isatty>:

int _isatty(int file)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002f0c:	2301      	movs	r3, #1
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr

08002f1a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	b085      	sub	sp, #20
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	60f8      	str	r0, [r7, #12]
 8002f22:	60b9      	str	r1, [r7, #8]
 8002f24:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3714      	adds	r7, #20
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b086      	sub	sp, #24
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f3c:	4a14      	ldr	r2, [pc, #80]	@ (8002f90 <_sbrk+0x5c>)
 8002f3e:	4b15      	ldr	r3, [pc, #84]	@ (8002f94 <_sbrk+0x60>)
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f48:	4b13      	ldr	r3, [pc, #76]	@ (8002f98 <_sbrk+0x64>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d102      	bne.n	8002f56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f50:	4b11      	ldr	r3, [pc, #68]	@ (8002f98 <_sbrk+0x64>)
 8002f52:	4a12      	ldr	r2, [pc, #72]	@ (8002f9c <_sbrk+0x68>)
 8002f54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f56:	4b10      	ldr	r3, [pc, #64]	@ (8002f98 <_sbrk+0x64>)
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d207      	bcs.n	8002f74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f64:	f004 ff02 	bl	8007d6c <__errno>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	220c      	movs	r2, #12
 8002f6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f72:	e009      	b.n	8002f88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f74:	4b08      	ldr	r3, [pc, #32]	@ (8002f98 <_sbrk+0x64>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f7a:	4b07      	ldr	r3, [pc, #28]	@ (8002f98 <_sbrk+0x64>)
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4413      	add	r3, r2
 8002f82:	4a05      	ldr	r2, [pc, #20]	@ (8002f98 <_sbrk+0x64>)
 8002f84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f86:	68fb      	ldr	r3, [r7, #12]
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3718      	adds	r7, #24
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	20020000 	.word	0x20020000
 8002f94:	00000400 	.word	0x00000400
 8002f98:	20000570 	.word	0x20000570
 8002f9c:	200006c8 	.word	0x200006c8

08002fa0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002fa4:	4b06      	ldr	r3, [pc, #24]	@ (8002fc0 <SystemInit+0x20>)
 8002fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002faa:	4a05      	ldr	r2, [pc, #20]	@ (8002fc0 <SystemInit+0x20>)
 8002fac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002fb0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fb4:	bf00      	nop
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	e000ed00 	.word	0xe000ed00

08002fc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002fc4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ffc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002fc8:	f7ff ffea 	bl	8002fa0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002fcc:	480c      	ldr	r0, [pc, #48]	@ (8003000 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002fce:	490d      	ldr	r1, [pc, #52]	@ (8003004 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002fd0:	4a0d      	ldr	r2, [pc, #52]	@ (8003008 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002fd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fd4:	e002      	b.n	8002fdc <LoopCopyDataInit>

08002fd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fda:	3304      	adds	r3, #4

08002fdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fe0:	d3f9      	bcc.n	8002fd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fe2:	4a0a      	ldr	r2, [pc, #40]	@ (800300c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002fe4:	4c0a      	ldr	r4, [pc, #40]	@ (8003010 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002fe6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fe8:	e001      	b.n	8002fee <LoopFillZerobss>

08002fea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fec:	3204      	adds	r2, #4

08002fee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ff0:	d3fb      	bcc.n	8002fea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ff2:	f004 fec1 	bl	8007d78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ff6:	f7fe fd1f 	bl	8001a38 <main>
  bx  lr    
 8002ffa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ffc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003000:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003004:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8003008:	0800b124 	.word	0x0800b124
  ldr r2, =_sbss
 800300c:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8003010:	200006c4 	.word	0x200006c4

08003014 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003014:	e7fe      	b.n	8003014 <ADC_IRQHandler>
	...

08003018 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800301c:	4b0e      	ldr	r3, [pc, #56]	@ (8003058 <HAL_Init+0x40>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a0d      	ldr	r2, [pc, #52]	@ (8003058 <HAL_Init+0x40>)
 8003022:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003026:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003028:	4b0b      	ldr	r3, [pc, #44]	@ (8003058 <HAL_Init+0x40>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a0a      	ldr	r2, [pc, #40]	@ (8003058 <HAL_Init+0x40>)
 800302e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003032:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003034:	4b08      	ldr	r3, [pc, #32]	@ (8003058 <HAL_Init+0x40>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a07      	ldr	r2, [pc, #28]	@ (8003058 <HAL_Init+0x40>)
 800303a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800303e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003040:	2003      	movs	r0, #3
 8003042:	f000 f94f 	bl	80032e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003046:	200f      	movs	r0, #15
 8003048:	f000 f808 	bl	800305c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800304c:	f7ff fc76 	bl	800293c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	40023c00 	.word	0x40023c00

0800305c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003064:	4b12      	ldr	r3, [pc, #72]	@ (80030b0 <HAL_InitTick+0x54>)
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	4b12      	ldr	r3, [pc, #72]	@ (80030b4 <HAL_InitTick+0x58>)
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	4619      	mov	r1, r3
 800306e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003072:	fbb3 f3f1 	udiv	r3, r3, r1
 8003076:	fbb2 f3f3 	udiv	r3, r2, r3
 800307a:	4618      	mov	r0, r3
 800307c:	f000 f967 	bl	800334e <HAL_SYSTICK_Config>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e00e      	b.n	80030a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2b0f      	cmp	r3, #15
 800308e:	d80a      	bhi.n	80030a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003090:	2200      	movs	r2, #0
 8003092:	6879      	ldr	r1, [r7, #4]
 8003094:	f04f 30ff 	mov.w	r0, #4294967295
 8003098:	f000 f92f 	bl	80032fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800309c:	4a06      	ldr	r2, [pc, #24]	@ (80030b8 <HAL_InitTick+0x5c>)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030a2:	2300      	movs	r3, #0
 80030a4:	e000      	b.n	80030a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3708      	adds	r7, #8
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	20000024 	.word	0x20000024
 80030b4:	2000002c 	.word	0x2000002c
 80030b8:	20000028 	.word	0x20000028

080030bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030c0:	4b06      	ldr	r3, [pc, #24]	@ (80030dc <HAL_IncTick+0x20>)
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	461a      	mov	r2, r3
 80030c6:	4b06      	ldr	r3, [pc, #24]	@ (80030e0 <HAL_IncTick+0x24>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4413      	add	r3, r2
 80030cc:	4a04      	ldr	r2, [pc, #16]	@ (80030e0 <HAL_IncTick+0x24>)
 80030ce:	6013      	str	r3, [r2, #0]
}
 80030d0:	bf00      	nop
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	2000002c 	.word	0x2000002c
 80030e0:	20000574 	.word	0x20000574

080030e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
  return uwTick;
 80030e8:	4b03      	ldr	r3, [pc, #12]	@ (80030f8 <HAL_GetTick+0x14>)
 80030ea:	681b      	ldr	r3, [r3, #0]
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	20000574 	.word	0x20000574

080030fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003104:	f7ff ffee 	bl	80030e4 <HAL_GetTick>
 8003108:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003114:	d005      	beq.n	8003122 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003116:	4b0a      	ldr	r3, [pc, #40]	@ (8003140 <HAL_Delay+0x44>)
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	461a      	mov	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	4413      	add	r3, r2
 8003120:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003122:	bf00      	nop
 8003124:	f7ff ffde 	bl	80030e4 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	429a      	cmp	r2, r3
 8003132:	d8f7      	bhi.n	8003124 <HAL_Delay+0x28>
  {
  }
}
 8003134:	bf00      	nop
 8003136:	bf00      	nop
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	2000002c 	.word	0x2000002c

08003144 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f003 0307 	and.w	r3, r3, #7
 8003152:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003154:	4b0c      	ldr	r3, [pc, #48]	@ (8003188 <__NVIC_SetPriorityGrouping+0x44>)
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800315a:	68ba      	ldr	r2, [r7, #8]
 800315c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003160:	4013      	ands	r3, r2
 8003162:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800316c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003170:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003174:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003176:	4a04      	ldr	r2, [pc, #16]	@ (8003188 <__NVIC_SetPriorityGrouping+0x44>)
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	60d3      	str	r3, [r2, #12]
}
 800317c:	bf00      	nop
 800317e:	3714      	adds	r7, #20
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr
 8003188:	e000ed00 	.word	0xe000ed00

0800318c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003190:	4b04      	ldr	r3, [pc, #16]	@ (80031a4 <__NVIC_GetPriorityGrouping+0x18>)
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	0a1b      	lsrs	r3, r3, #8
 8003196:	f003 0307 	and.w	r3, r3, #7
}
 800319a:	4618      	mov	r0, r3
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr
 80031a4:	e000ed00 	.word	0xe000ed00

080031a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	4603      	mov	r3, r0
 80031b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	db0b      	blt.n	80031d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031ba:	79fb      	ldrb	r3, [r7, #7]
 80031bc:	f003 021f 	and.w	r2, r3, #31
 80031c0:	4907      	ldr	r1, [pc, #28]	@ (80031e0 <__NVIC_EnableIRQ+0x38>)
 80031c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c6:	095b      	lsrs	r3, r3, #5
 80031c8:	2001      	movs	r0, #1
 80031ca:	fa00 f202 	lsl.w	r2, r0, r2
 80031ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80031d2:	bf00      	nop
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	e000e100 	.word	0xe000e100

080031e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	4603      	mov	r3, r0
 80031ec:	6039      	str	r1, [r7, #0]
 80031ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	db0a      	blt.n	800320e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	b2da      	uxtb	r2, r3
 80031fc:	490c      	ldr	r1, [pc, #48]	@ (8003230 <__NVIC_SetPriority+0x4c>)
 80031fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003202:	0112      	lsls	r2, r2, #4
 8003204:	b2d2      	uxtb	r2, r2
 8003206:	440b      	add	r3, r1
 8003208:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800320c:	e00a      	b.n	8003224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	b2da      	uxtb	r2, r3
 8003212:	4908      	ldr	r1, [pc, #32]	@ (8003234 <__NVIC_SetPriority+0x50>)
 8003214:	79fb      	ldrb	r3, [r7, #7]
 8003216:	f003 030f 	and.w	r3, r3, #15
 800321a:	3b04      	subs	r3, #4
 800321c:	0112      	lsls	r2, r2, #4
 800321e:	b2d2      	uxtb	r2, r2
 8003220:	440b      	add	r3, r1
 8003222:	761a      	strb	r2, [r3, #24]
}
 8003224:	bf00      	nop
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr
 8003230:	e000e100 	.word	0xe000e100
 8003234:	e000ed00 	.word	0xe000ed00

08003238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003238:	b480      	push	{r7}
 800323a:	b089      	sub	sp, #36	@ 0x24
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f003 0307 	and.w	r3, r3, #7
 800324a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	f1c3 0307 	rsb	r3, r3, #7
 8003252:	2b04      	cmp	r3, #4
 8003254:	bf28      	it	cs
 8003256:	2304      	movcs	r3, #4
 8003258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	3304      	adds	r3, #4
 800325e:	2b06      	cmp	r3, #6
 8003260:	d902      	bls.n	8003268 <NVIC_EncodePriority+0x30>
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	3b03      	subs	r3, #3
 8003266:	e000      	b.n	800326a <NVIC_EncodePriority+0x32>
 8003268:	2300      	movs	r3, #0
 800326a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800326c:	f04f 32ff 	mov.w	r2, #4294967295
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	fa02 f303 	lsl.w	r3, r2, r3
 8003276:	43da      	mvns	r2, r3
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	401a      	ands	r2, r3
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003280:	f04f 31ff 	mov.w	r1, #4294967295
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	fa01 f303 	lsl.w	r3, r1, r3
 800328a:	43d9      	mvns	r1, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003290:	4313      	orrs	r3, r2
         );
}
 8003292:	4618      	mov	r0, r3
 8003294:	3724      	adds	r7, #36	@ 0x24
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
	...

080032a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	3b01      	subs	r3, #1
 80032ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032b0:	d301      	bcc.n	80032b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032b2:	2301      	movs	r3, #1
 80032b4:	e00f      	b.n	80032d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032b6:	4a0a      	ldr	r2, [pc, #40]	@ (80032e0 <SysTick_Config+0x40>)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	3b01      	subs	r3, #1
 80032bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032be:	210f      	movs	r1, #15
 80032c0:	f04f 30ff 	mov.w	r0, #4294967295
 80032c4:	f7ff ff8e 	bl	80031e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032c8:	4b05      	ldr	r3, [pc, #20]	@ (80032e0 <SysTick_Config+0x40>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032ce:	4b04      	ldr	r3, [pc, #16]	@ (80032e0 <SysTick_Config+0x40>)
 80032d0:	2207      	movs	r2, #7
 80032d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3708      	adds	r7, #8
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	e000e010 	.word	0xe000e010

080032e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f7ff ff29 	bl	8003144 <__NVIC_SetPriorityGrouping>
}
 80032f2:	bf00      	nop
 80032f4:	3708      	adds	r7, #8
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b086      	sub	sp, #24
 80032fe:	af00      	add	r7, sp, #0
 8003300:	4603      	mov	r3, r0
 8003302:	60b9      	str	r1, [r7, #8]
 8003304:	607a      	str	r2, [r7, #4]
 8003306:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003308:	2300      	movs	r3, #0
 800330a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800330c:	f7ff ff3e 	bl	800318c <__NVIC_GetPriorityGrouping>
 8003310:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	68b9      	ldr	r1, [r7, #8]
 8003316:	6978      	ldr	r0, [r7, #20]
 8003318:	f7ff ff8e 	bl	8003238 <NVIC_EncodePriority>
 800331c:	4602      	mov	r2, r0
 800331e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003322:	4611      	mov	r1, r2
 8003324:	4618      	mov	r0, r3
 8003326:	f7ff ff5d 	bl	80031e4 <__NVIC_SetPriority>
}
 800332a:	bf00      	nop
 800332c:	3718      	adds	r7, #24
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b082      	sub	sp, #8
 8003336:	af00      	add	r7, sp, #0
 8003338:	4603      	mov	r3, r0
 800333a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800333c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003340:	4618      	mov	r0, r3
 8003342:	f7ff ff31 	bl	80031a8 <__NVIC_EnableIRQ>
}
 8003346:	bf00      	nop
 8003348:	3708      	adds	r7, #8
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800334e:	b580      	push	{r7, lr}
 8003350:	b082      	sub	sp, #8
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f7ff ffa2 	bl	80032a0 <SysTick_Config>
 800335c:	4603      	mov	r3, r0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3708      	adds	r7, #8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
	...

08003368 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b086      	sub	sp, #24
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003370:	2300      	movs	r3, #0
 8003372:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003374:	f7ff feb6 	bl	80030e4 <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d101      	bne.n	8003384 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e099      	b.n	80034b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2202      	movs	r2, #2
 8003388:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f022 0201 	bic.w	r2, r2, #1
 80033a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033a4:	e00f      	b.n	80033c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033a6:	f7ff fe9d 	bl	80030e4 <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	2b05      	cmp	r3, #5
 80033b2:	d908      	bls.n	80033c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2220      	movs	r2, #32
 80033b8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2203      	movs	r2, #3
 80033be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e078      	b.n	80034b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d1e8      	bne.n	80033a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80033dc:	697a      	ldr	r2, [r7, #20]
 80033de:	4b38      	ldr	r3, [pc, #224]	@ (80034c0 <HAL_DMA_Init+0x158>)
 80033e0:	4013      	ands	r3, r2
 80033e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685a      	ldr	r2, [r3, #4]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800340a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a1b      	ldr	r3, [r3, #32]
 8003410:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003412:	697a      	ldr	r2, [r7, #20]
 8003414:	4313      	orrs	r3, r2
 8003416:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341c:	2b04      	cmp	r3, #4
 800341e:	d107      	bne.n	8003430 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003428:	4313      	orrs	r3, r2
 800342a:	697a      	ldr	r2, [r7, #20]
 800342c:	4313      	orrs	r3, r2
 800342e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	697a      	ldr	r2, [r7, #20]
 8003436:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	f023 0307 	bic.w	r3, r3, #7
 8003446:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800344c:	697a      	ldr	r2, [r7, #20]
 800344e:	4313      	orrs	r3, r2
 8003450:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003456:	2b04      	cmp	r3, #4
 8003458:	d117      	bne.n	800348a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	4313      	orrs	r3, r2
 8003462:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003468:	2b00      	cmp	r3, #0
 800346a:	d00e      	beq.n	800348a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f000 fb01 	bl	8003a74 <DMA_CheckFifoParam>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d008      	beq.n	800348a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2240      	movs	r2, #64	@ 0x40
 800347c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003486:	2301      	movs	r3, #1
 8003488:	e016      	b.n	80034b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	697a      	ldr	r2, [r7, #20]
 8003490:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 fab8 	bl	8003a08 <DMA_CalcBaseAndBitshift>
 8003498:	4603      	mov	r3, r0
 800349a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034a0:	223f      	movs	r2, #63	@ 0x3f
 80034a2:	409a      	lsls	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2201      	movs	r2, #1
 80034b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3718      	adds	r7, #24
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	f010803f 	.word	0xf010803f

080034c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
 80034d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034d2:	2300      	movs	r3, #0
 80034d4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034da:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d101      	bne.n	80034ea <HAL_DMA_Start_IT+0x26>
 80034e6:	2302      	movs	r3, #2
 80034e8:	e040      	b.n	800356c <HAL_DMA_Start_IT+0xa8>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d12f      	bne.n	800355e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2202      	movs	r2, #2
 8003502:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	68b9      	ldr	r1, [r7, #8]
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	f000 fa4a 	bl	80039ac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800351c:	223f      	movs	r2, #63	@ 0x3f
 800351e:	409a      	lsls	r2, r3
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f042 0216 	orr.w	r2, r2, #22
 8003532:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003538:	2b00      	cmp	r3, #0
 800353a:	d007      	beq.n	800354c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f042 0208 	orr.w	r2, r2, #8
 800354a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f042 0201 	orr.w	r2, r2, #1
 800355a:	601a      	str	r2, [r3, #0]
 800355c:	e005      	b.n	800356a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003566:	2302      	movs	r3, #2
 8003568:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800356a:	7dfb      	ldrb	r3, [r7, #23]
}
 800356c:	4618      	mov	r0, r3
 800356e:	3718      	adds	r7, #24
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003580:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003582:	f7ff fdaf 	bl	80030e4 <HAL_GetTick>
 8003586:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800358e:	b2db      	uxtb	r3, r3
 8003590:	2b02      	cmp	r3, #2
 8003592:	d008      	beq.n	80035a6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2280      	movs	r2, #128	@ 0x80
 8003598:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e052      	b.n	800364c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 0216 	bic.w	r2, r2, #22
 80035b4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	695a      	ldr	r2, [r3, #20]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80035c4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d103      	bne.n	80035d6 <HAL_DMA_Abort+0x62>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d007      	beq.n	80035e6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f022 0208 	bic.w	r2, r2, #8
 80035e4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 0201 	bic.w	r2, r2, #1
 80035f4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035f6:	e013      	b.n	8003620 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035f8:	f7ff fd74 	bl	80030e4 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b05      	cmp	r3, #5
 8003604:	d90c      	bls.n	8003620 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2220      	movs	r2, #32
 800360a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2203      	movs	r2, #3
 8003610:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e015      	b.n	800364c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1e4      	bne.n	80035f8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003632:	223f      	movs	r2, #63	@ 0x3f
 8003634:	409a      	lsls	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2201      	movs	r2, #1
 800363e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	3710      	adds	r7, #16
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003662:	b2db      	uxtb	r3, r3
 8003664:	2b02      	cmp	r3, #2
 8003666:	d004      	beq.n	8003672 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2280      	movs	r2, #128	@ 0x80
 800366c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e00c      	b.n	800368c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2205      	movs	r2, #5
 8003676:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f022 0201 	bic.w	r2, r2, #1
 8003688:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b086      	sub	sp, #24
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80036a0:	2300      	movs	r3, #0
 80036a2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80036a4:	4b8e      	ldr	r3, [pc, #568]	@ (80038e0 <HAL_DMA_IRQHandler+0x248>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a8e      	ldr	r2, [pc, #568]	@ (80038e4 <HAL_DMA_IRQHandler+0x24c>)
 80036aa:	fba2 2303 	umull	r2, r3, r2, r3
 80036ae:	0a9b      	lsrs	r3, r3, #10
 80036b0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036b6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036c2:	2208      	movs	r2, #8
 80036c4:	409a      	lsls	r2, r3
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	4013      	ands	r3, r2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d01a      	beq.n	8003704 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0304 	and.w	r3, r3, #4
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d013      	beq.n	8003704 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f022 0204 	bic.w	r2, r2, #4
 80036ea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036f0:	2208      	movs	r2, #8
 80036f2:	409a      	lsls	r2, r3
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036fc:	f043 0201 	orr.w	r2, r3, #1
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003708:	2201      	movs	r2, #1
 800370a:	409a      	lsls	r2, r3
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	4013      	ands	r3, r2
 8003710:	2b00      	cmp	r3, #0
 8003712:	d012      	beq.n	800373a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00b      	beq.n	800373a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003726:	2201      	movs	r2, #1
 8003728:	409a      	lsls	r2, r3
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003732:	f043 0202 	orr.w	r2, r3, #2
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800373e:	2204      	movs	r2, #4
 8003740:	409a      	lsls	r2, r3
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	4013      	ands	r3, r2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d012      	beq.n	8003770 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00b      	beq.n	8003770 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800375c:	2204      	movs	r2, #4
 800375e:	409a      	lsls	r2, r3
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003768:	f043 0204 	orr.w	r2, r3, #4
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003774:	2210      	movs	r2, #16
 8003776:	409a      	lsls	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	4013      	ands	r3, r2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d043      	beq.n	8003808 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0308 	and.w	r3, r3, #8
 800378a:	2b00      	cmp	r3, #0
 800378c:	d03c      	beq.n	8003808 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003792:	2210      	movs	r2, #16
 8003794:	409a      	lsls	r2, r3
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d018      	beq.n	80037da <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d108      	bne.n	80037c8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d024      	beq.n	8003808 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	4798      	blx	r3
 80037c6:	e01f      	b.n	8003808 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d01b      	beq.n	8003808 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	4798      	blx	r3
 80037d8:	e016      	b.n	8003808 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d107      	bne.n	80037f8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f022 0208 	bic.w	r2, r2, #8
 80037f6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d003      	beq.n	8003808 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800380c:	2220      	movs	r2, #32
 800380e:	409a      	lsls	r2, r3
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	4013      	ands	r3, r2
 8003814:	2b00      	cmp	r3, #0
 8003816:	f000 808f 	beq.w	8003938 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0310 	and.w	r3, r3, #16
 8003824:	2b00      	cmp	r3, #0
 8003826:	f000 8087 	beq.w	8003938 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800382e:	2220      	movs	r2, #32
 8003830:	409a      	lsls	r2, r3
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b05      	cmp	r3, #5
 8003840:	d136      	bne.n	80038b0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 0216 	bic.w	r2, r2, #22
 8003850:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	695a      	ldr	r2, [r3, #20]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003860:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003866:	2b00      	cmp	r3, #0
 8003868:	d103      	bne.n	8003872 <HAL_DMA_IRQHandler+0x1da>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800386e:	2b00      	cmp	r3, #0
 8003870:	d007      	beq.n	8003882 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f022 0208 	bic.w	r2, r2, #8
 8003880:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003886:	223f      	movs	r2, #63	@ 0x3f
 8003888:	409a      	lsls	r2, r3
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2201      	movs	r2, #1
 8003892:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d07e      	beq.n	80039a4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	4798      	blx	r3
        }
        return;
 80038ae:	e079      	b.n	80039a4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d01d      	beq.n	80038fa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d10d      	bne.n	80038e8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d031      	beq.n	8003938 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	4798      	blx	r3
 80038dc:	e02c      	b.n	8003938 <HAL_DMA_IRQHandler+0x2a0>
 80038de:	bf00      	nop
 80038e0:	20000024 	.word	0x20000024
 80038e4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d023      	beq.n	8003938 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	4798      	blx	r3
 80038f8:	e01e      	b.n	8003938 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003904:	2b00      	cmp	r3, #0
 8003906:	d10f      	bne.n	8003928 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f022 0210 	bic.w	r2, r2, #16
 8003916:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800392c:	2b00      	cmp	r3, #0
 800392e:	d003      	beq.n	8003938 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800393c:	2b00      	cmp	r3, #0
 800393e:	d032      	beq.n	80039a6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003944:	f003 0301 	and.w	r3, r3, #1
 8003948:	2b00      	cmp	r3, #0
 800394a:	d022      	beq.n	8003992 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2205      	movs	r2, #5
 8003950:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f022 0201 	bic.w	r2, r2, #1
 8003962:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	3301      	adds	r3, #1
 8003968:	60bb      	str	r3, [r7, #8]
 800396a:	697a      	ldr	r2, [r7, #20]
 800396c:	429a      	cmp	r2, r3
 800396e:	d307      	bcc.n	8003980 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1f2      	bne.n	8003964 <HAL_DMA_IRQHandler+0x2cc>
 800397e:	e000      	b.n	8003982 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003980:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003996:	2b00      	cmp	r3, #0
 8003998:	d005      	beq.n	80039a6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	4798      	blx	r3
 80039a2:	e000      	b.n	80039a6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80039a4:	bf00      	nop
    }
  }
}
 80039a6:	3718      	adds	r7, #24
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
 80039b8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80039c8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	683a      	ldr	r2, [r7, #0]
 80039d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	2b40      	cmp	r3, #64	@ 0x40
 80039d8:	d108      	bne.n	80039ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68ba      	ldr	r2, [r7, #8]
 80039e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80039ea:	e007      	b.n	80039fc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68ba      	ldr	r2, [r7, #8]
 80039f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	60da      	str	r2, [r3, #12]
}
 80039fc:	bf00      	nop
 80039fe:	3714      	adds	r7, #20
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	3b10      	subs	r3, #16
 8003a18:	4a14      	ldr	r2, [pc, #80]	@ (8003a6c <DMA_CalcBaseAndBitshift+0x64>)
 8003a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a1e:	091b      	lsrs	r3, r3, #4
 8003a20:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003a22:	4a13      	ldr	r2, [pc, #76]	@ (8003a70 <DMA_CalcBaseAndBitshift+0x68>)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	4413      	add	r3, r2
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2b03      	cmp	r3, #3
 8003a34:	d909      	bls.n	8003a4a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003a3e:	f023 0303 	bic.w	r3, r3, #3
 8003a42:	1d1a      	adds	r2, r3, #4
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	659a      	str	r2, [r3, #88]	@ 0x58
 8003a48:	e007      	b.n	8003a5a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003a52:	f023 0303 	bic.w	r3, r3, #3
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3714      	adds	r7, #20
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	aaaaaaab 	.word	0xaaaaaaab
 8003a70:	0800ad28 	.word	0x0800ad28

08003a74 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b085      	sub	sp, #20
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a84:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d11f      	bne.n	8003ace <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	2b03      	cmp	r3, #3
 8003a92:	d856      	bhi.n	8003b42 <DMA_CheckFifoParam+0xce>
 8003a94:	a201      	add	r2, pc, #4	@ (adr r2, 8003a9c <DMA_CheckFifoParam+0x28>)
 8003a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a9a:	bf00      	nop
 8003a9c:	08003aad 	.word	0x08003aad
 8003aa0:	08003abf 	.word	0x08003abf
 8003aa4:	08003aad 	.word	0x08003aad
 8003aa8:	08003b43 	.word	0x08003b43
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ab0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d046      	beq.n	8003b46 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003abc:	e043      	b.n	8003b46 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003ac6:	d140      	bne.n	8003b4a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003acc:	e03d      	b.n	8003b4a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ad6:	d121      	bne.n	8003b1c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	2b03      	cmp	r3, #3
 8003adc:	d837      	bhi.n	8003b4e <DMA_CheckFifoParam+0xda>
 8003ade:	a201      	add	r2, pc, #4	@ (adr r2, 8003ae4 <DMA_CheckFifoParam+0x70>)
 8003ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae4:	08003af5 	.word	0x08003af5
 8003ae8:	08003afb 	.word	0x08003afb
 8003aec:	08003af5 	.word	0x08003af5
 8003af0:	08003b0d 	.word	0x08003b0d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	73fb      	strb	r3, [r7, #15]
      break;
 8003af8:	e030      	b.n	8003b5c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003afe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d025      	beq.n	8003b52 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b0a:	e022      	b.n	8003b52 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b10:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003b14:	d11f      	bne.n	8003b56 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003b1a:	e01c      	b.n	8003b56 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d903      	bls.n	8003b2a <DMA_CheckFifoParam+0xb6>
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	2b03      	cmp	r3, #3
 8003b26:	d003      	beq.n	8003b30 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003b28:	e018      	b.n	8003b5c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	73fb      	strb	r3, [r7, #15]
      break;
 8003b2e:	e015      	b.n	8003b5c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b34:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d00e      	beq.n	8003b5a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	73fb      	strb	r3, [r7, #15]
      break;
 8003b40:	e00b      	b.n	8003b5a <DMA_CheckFifoParam+0xe6>
      break;
 8003b42:	bf00      	nop
 8003b44:	e00a      	b.n	8003b5c <DMA_CheckFifoParam+0xe8>
      break;
 8003b46:	bf00      	nop
 8003b48:	e008      	b.n	8003b5c <DMA_CheckFifoParam+0xe8>
      break;
 8003b4a:	bf00      	nop
 8003b4c:	e006      	b.n	8003b5c <DMA_CheckFifoParam+0xe8>
      break;
 8003b4e:	bf00      	nop
 8003b50:	e004      	b.n	8003b5c <DMA_CheckFifoParam+0xe8>
      break;
 8003b52:	bf00      	nop
 8003b54:	e002      	b.n	8003b5c <DMA_CheckFifoParam+0xe8>
      break;   
 8003b56:	bf00      	nop
 8003b58:	e000      	b.n	8003b5c <DMA_CheckFifoParam+0xe8>
      break;
 8003b5a:	bf00      	nop
    }
  } 
  
  return status; 
 8003b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3714      	adds	r7, #20
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop

08003b6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b089      	sub	sp, #36	@ 0x24
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b76:	2300      	movs	r3, #0
 8003b78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b82:	2300      	movs	r3, #0
 8003b84:	61fb      	str	r3, [r7, #28]
 8003b86:	e159      	b.n	8003e3c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b88:	2201      	movs	r2, #1
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	697a      	ldr	r2, [r7, #20]
 8003b98:	4013      	ands	r3, r2
 8003b9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b9c:	693a      	ldr	r2, [r7, #16]
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	f040 8148 	bne.w	8003e36 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f003 0303 	and.w	r3, r3, #3
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d005      	beq.n	8003bbe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d130      	bne.n	8003c20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	005b      	lsls	r3, r3, #1
 8003bc8:	2203      	movs	r2, #3
 8003bca:	fa02 f303 	lsl.w	r3, r2, r3
 8003bce:	43db      	mvns	r3, r3
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	68da      	ldr	r2, [r3, #12]
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	005b      	lsls	r3, r3, #1
 8003bde:	fa02 f303 	lsl.w	r3, r2, r3
 8003be2:	69ba      	ldr	r2, [r7, #24]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	69ba      	ldr	r2, [r7, #24]
 8003bec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfc:	43db      	mvns	r3, r3
 8003bfe:	69ba      	ldr	r2, [r7, #24]
 8003c00:	4013      	ands	r3, r2
 8003c02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	091b      	lsrs	r3, r3, #4
 8003c0a:	f003 0201 	and.w	r2, r3, #1
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	fa02 f303 	lsl.w	r3, r2, r3
 8003c14:	69ba      	ldr	r2, [r7, #24]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	69ba      	ldr	r2, [r7, #24]
 8003c1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f003 0303 	and.w	r3, r3, #3
 8003c28:	2b03      	cmp	r3, #3
 8003c2a:	d017      	beq.n	8003c5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	005b      	lsls	r3, r3, #1
 8003c36:	2203      	movs	r2, #3
 8003c38:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3c:	43db      	mvns	r3, r3
 8003c3e:	69ba      	ldr	r2, [r7, #24]
 8003c40:	4013      	ands	r3, r2
 8003c42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	689a      	ldr	r2, [r3, #8]
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	005b      	lsls	r3, r3, #1
 8003c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	69ba      	ldr	r2, [r7, #24]
 8003c5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f003 0303 	and.w	r3, r3, #3
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d123      	bne.n	8003cb0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	08da      	lsrs	r2, r3, #3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	3208      	adds	r2, #8
 8003c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	f003 0307 	and.w	r3, r3, #7
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	220f      	movs	r2, #15
 8003c80:	fa02 f303 	lsl.w	r3, r2, r3
 8003c84:	43db      	mvns	r3, r3
 8003c86:	69ba      	ldr	r2, [r7, #24]
 8003c88:	4013      	ands	r3, r2
 8003c8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	691a      	ldr	r2, [r3, #16]
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	f003 0307 	and.w	r3, r3, #7
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9c:	69ba      	ldr	r2, [r7, #24]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	08da      	lsrs	r2, r3, #3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	3208      	adds	r2, #8
 8003caa:	69b9      	ldr	r1, [r7, #24]
 8003cac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	005b      	lsls	r3, r3, #1
 8003cba:	2203      	movs	r2, #3
 8003cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc0:	43db      	mvns	r3, r3
 8003cc2:	69ba      	ldr	r2, [r7, #24]
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f003 0203 	and.w	r2, r3, #3
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	005b      	lsls	r3, r3, #1
 8003cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd8:	69ba      	ldr	r2, [r7, #24]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	69ba      	ldr	r2, [r7, #24]
 8003ce2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	f000 80a2 	beq.w	8003e36 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	60fb      	str	r3, [r7, #12]
 8003cf6:	4b57      	ldr	r3, [pc, #348]	@ (8003e54 <HAL_GPIO_Init+0x2e8>)
 8003cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cfa:	4a56      	ldr	r2, [pc, #344]	@ (8003e54 <HAL_GPIO_Init+0x2e8>)
 8003cfc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d00:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d02:	4b54      	ldr	r3, [pc, #336]	@ (8003e54 <HAL_GPIO_Init+0x2e8>)
 8003d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d0a:	60fb      	str	r3, [r7, #12]
 8003d0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d0e:	4a52      	ldr	r2, [pc, #328]	@ (8003e58 <HAL_GPIO_Init+0x2ec>)
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	089b      	lsrs	r3, r3, #2
 8003d14:	3302      	adds	r3, #2
 8003d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	f003 0303 	and.w	r3, r3, #3
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	220f      	movs	r2, #15
 8003d26:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2a:	43db      	mvns	r3, r3
 8003d2c:	69ba      	ldr	r2, [r7, #24]
 8003d2e:	4013      	ands	r3, r2
 8003d30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a49      	ldr	r2, [pc, #292]	@ (8003e5c <HAL_GPIO_Init+0x2f0>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d019      	beq.n	8003d6e <HAL_GPIO_Init+0x202>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a48      	ldr	r2, [pc, #288]	@ (8003e60 <HAL_GPIO_Init+0x2f4>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d013      	beq.n	8003d6a <HAL_GPIO_Init+0x1fe>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a47      	ldr	r2, [pc, #284]	@ (8003e64 <HAL_GPIO_Init+0x2f8>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d00d      	beq.n	8003d66 <HAL_GPIO_Init+0x1fa>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a46      	ldr	r2, [pc, #280]	@ (8003e68 <HAL_GPIO_Init+0x2fc>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d007      	beq.n	8003d62 <HAL_GPIO_Init+0x1f6>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a45      	ldr	r2, [pc, #276]	@ (8003e6c <HAL_GPIO_Init+0x300>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d101      	bne.n	8003d5e <HAL_GPIO_Init+0x1f2>
 8003d5a:	2304      	movs	r3, #4
 8003d5c:	e008      	b.n	8003d70 <HAL_GPIO_Init+0x204>
 8003d5e:	2307      	movs	r3, #7
 8003d60:	e006      	b.n	8003d70 <HAL_GPIO_Init+0x204>
 8003d62:	2303      	movs	r3, #3
 8003d64:	e004      	b.n	8003d70 <HAL_GPIO_Init+0x204>
 8003d66:	2302      	movs	r3, #2
 8003d68:	e002      	b.n	8003d70 <HAL_GPIO_Init+0x204>
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e000      	b.n	8003d70 <HAL_GPIO_Init+0x204>
 8003d6e:	2300      	movs	r3, #0
 8003d70:	69fa      	ldr	r2, [r7, #28]
 8003d72:	f002 0203 	and.w	r2, r2, #3
 8003d76:	0092      	lsls	r2, r2, #2
 8003d78:	4093      	lsls	r3, r2
 8003d7a:	69ba      	ldr	r2, [r7, #24]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d80:	4935      	ldr	r1, [pc, #212]	@ (8003e58 <HAL_GPIO_Init+0x2ec>)
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	089b      	lsrs	r3, r3, #2
 8003d86:	3302      	adds	r3, #2
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d8e:	4b38      	ldr	r3, [pc, #224]	@ (8003e70 <HAL_GPIO_Init+0x304>)
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	43db      	mvns	r3, r3
 8003d98:	69ba      	ldr	r2, [r7, #24]
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d003      	beq.n	8003db2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003daa:	69ba      	ldr	r2, [r7, #24]
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003db2:	4a2f      	ldr	r2, [pc, #188]	@ (8003e70 <HAL_GPIO_Init+0x304>)
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003db8:	4b2d      	ldr	r3, [pc, #180]	@ (8003e70 <HAL_GPIO_Init+0x304>)
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	43db      	mvns	r3, r3
 8003dc2:	69ba      	ldr	r2, [r7, #24]
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d003      	beq.n	8003ddc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003dd4:	69ba      	ldr	r2, [r7, #24]
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ddc:	4a24      	ldr	r2, [pc, #144]	@ (8003e70 <HAL_GPIO_Init+0x304>)
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003de2:	4b23      	ldr	r3, [pc, #140]	@ (8003e70 <HAL_GPIO_Init+0x304>)
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	43db      	mvns	r3, r3
 8003dec:	69ba      	ldr	r2, [r7, #24]
 8003dee:	4013      	ands	r3, r2
 8003df0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d003      	beq.n	8003e06 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003dfe:	69ba      	ldr	r2, [r7, #24]
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e06:	4a1a      	ldr	r2, [pc, #104]	@ (8003e70 <HAL_GPIO_Init+0x304>)
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e0c:	4b18      	ldr	r3, [pc, #96]	@ (8003e70 <HAL_GPIO_Init+0x304>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	43db      	mvns	r3, r3
 8003e16:	69ba      	ldr	r2, [r7, #24]
 8003e18:	4013      	ands	r3, r2
 8003e1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d003      	beq.n	8003e30 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003e28:	69ba      	ldr	r2, [r7, #24]
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e30:	4a0f      	ldr	r2, [pc, #60]	@ (8003e70 <HAL_GPIO_Init+0x304>)
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	3301      	adds	r3, #1
 8003e3a:	61fb      	str	r3, [r7, #28]
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	2b0f      	cmp	r3, #15
 8003e40:	f67f aea2 	bls.w	8003b88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e44:	bf00      	nop
 8003e46:	bf00      	nop
 8003e48:	3724      	adds	r7, #36	@ 0x24
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	40023800 	.word	0x40023800
 8003e58:	40013800 	.word	0x40013800
 8003e5c:	40020000 	.word	0x40020000
 8003e60:	40020400 	.word	0x40020400
 8003e64:	40020800 	.word	0x40020800
 8003e68:	40020c00 	.word	0x40020c00
 8003e6c:	40021000 	.word	0x40021000
 8003e70:	40013c00 	.word	0x40013c00

08003e74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d101      	bne.n	8003e86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e12b      	b.n	80040de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d106      	bne.n	8003ea0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f7fe fd76 	bl	800298c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2224      	movs	r2, #36	@ 0x24
 8003ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f022 0201 	bic.w	r2, r2, #1
 8003eb6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ec6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ed6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ed8:	f001 fc20 	bl	800571c <HAL_RCC_GetPCLK1Freq>
 8003edc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	4a81      	ldr	r2, [pc, #516]	@ (80040e8 <HAL_I2C_Init+0x274>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d807      	bhi.n	8003ef8 <HAL_I2C_Init+0x84>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	4a80      	ldr	r2, [pc, #512]	@ (80040ec <HAL_I2C_Init+0x278>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	bf94      	ite	ls
 8003ef0:	2301      	movls	r3, #1
 8003ef2:	2300      	movhi	r3, #0
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	e006      	b.n	8003f06 <HAL_I2C_Init+0x92>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	4a7d      	ldr	r2, [pc, #500]	@ (80040f0 <HAL_I2C_Init+0x27c>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	bf94      	ite	ls
 8003f00:	2301      	movls	r3, #1
 8003f02:	2300      	movhi	r3, #0
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d001      	beq.n	8003f0e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e0e7      	b.n	80040de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	4a78      	ldr	r2, [pc, #480]	@ (80040f4 <HAL_I2C_Init+0x280>)
 8003f12:	fba2 2303 	umull	r2, r3, r2, r3
 8003f16:	0c9b      	lsrs	r3, r3, #18
 8003f18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68ba      	ldr	r2, [r7, #8]
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	6a1b      	ldr	r3, [r3, #32]
 8003f34:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	4a6a      	ldr	r2, [pc, #424]	@ (80040e8 <HAL_I2C_Init+0x274>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d802      	bhi.n	8003f48 <HAL_I2C_Init+0xd4>
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	3301      	adds	r3, #1
 8003f46:	e009      	b.n	8003f5c <HAL_I2C_Init+0xe8>
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003f4e:	fb02 f303 	mul.w	r3, r2, r3
 8003f52:	4a69      	ldr	r2, [pc, #420]	@ (80040f8 <HAL_I2C_Init+0x284>)
 8003f54:	fba2 2303 	umull	r2, r3, r2, r3
 8003f58:	099b      	lsrs	r3, r3, #6
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	6812      	ldr	r2, [r2, #0]
 8003f60:	430b      	orrs	r3, r1
 8003f62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	69db      	ldr	r3, [r3, #28]
 8003f6a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003f6e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	495c      	ldr	r1, [pc, #368]	@ (80040e8 <HAL_I2C_Init+0x274>)
 8003f78:	428b      	cmp	r3, r1
 8003f7a:	d819      	bhi.n	8003fb0 <HAL_I2C_Init+0x13c>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	1e59      	subs	r1, r3, #1
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	005b      	lsls	r3, r3, #1
 8003f86:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f8a:	1c59      	adds	r1, r3, #1
 8003f8c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003f90:	400b      	ands	r3, r1
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00a      	beq.n	8003fac <HAL_I2C_Init+0x138>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	1e59      	subs	r1, r3, #1
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	005b      	lsls	r3, r3, #1
 8003fa0:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003faa:	e051      	b.n	8004050 <HAL_I2C_Init+0x1dc>
 8003fac:	2304      	movs	r3, #4
 8003fae:	e04f      	b.n	8004050 <HAL_I2C_Init+0x1dc>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d111      	bne.n	8003fdc <HAL_I2C_Init+0x168>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	1e58      	subs	r0, r3, #1
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6859      	ldr	r1, [r3, #4]
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	005b      	lsls	r3, r3, #1
 8003fc4:	440b      	add	r3, r1
 8003fc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fca:	3301      	adds	r3, #1
 8003fcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	bf0c      	ite	eq
 8003fd4:	2301      	moveq	r3, #1
 8003fd6:	2300      	movne	r3, #0
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	e012      	b.n	8004002 <HAL_I2C_Init+0x18e>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	1e58      	subs	r0, r3, #1
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6859      	ldr	r1, [r3, #4]
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	440b      	add	r3, r1
 8003fea:	0099      	lsls	r1, r3, #2
 8003fec:	440b      	add	r3, r1
 8003fee:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	bf0c      	ite	eq
 8003ffc:	2301      	moveq	r3, #1
 8003ffe:	2300      	movne	r3, #0
 8004000:	b2db      	uxtb	r3, r3
 8004002:	2b00      	cmp	r3, #0
 8004004:	d001      	beq.n	800400a <HAL_I2C_Init+0x196>
 8004006:	2301      	movs	r3, #1
 8004008:	e022      	b.n	8004050 <HAL_I2C_Init+0x1dc>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10e      	bne.n	8004030 <HAL_I2C_Init+0x1bc>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	1e58      	subs	r0, r3, #1
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6859      	ldr	r1, [r3, #4]
 800401a:	460b      	mov	r3, r1
 800401c:	005b      	lsls	r3, r3, #1
 800401e:	440b      	add	r3, r1
 8004020:	fbb0 f3f3 	udiv	r3, r0, r3
 8004024:	3301      	adds	r3, #1
 8004026:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800402a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800402e:	e00f      	b.n	8004050 <HAL_I2C_Init+0x1dc>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	1e58      	subs	r0, r3, #1
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6859      	ldr	r1, [r3, #4]
 8004038:	460b      	mov	r3, r1
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	440b      	add	r3, r1
 800403e:	0099      	lsls	r1, r3, #2
 8004040:	440b      	add	r3, r1
 8004042:	fbb0 f3f3 	udiv	r3, r0, r3
 8004046:	3301      	adds	r3, #1
 8004048:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800404c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004050:	6879      	ldr	r1, [r7, #4]
 8004052:	6809      	ldr	r1, [r1, #0]
 8004054:	4313      	orrs	r3, r2
 8004056:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	69da      	ldr	r2, [r3, #28]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a1b      	ldr	r3, [r3, #32]
 800406a:	431a      	orrs	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	430a      	orrs	r2, r1
 8004072:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800407e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	6911      	ldr	r1, [r2, #16]
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	68d2      	ldr	r2, [r2, #12]
 800408a:	4311      	orrs	r1, r2
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	6812      	ldr	r2, [r2, #0]
 8004090:	430b      	orrs	r3, r1
 8004092:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	695a      	ldr	r2, [r3, #20]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	431a      	orrs	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	430a      	orrs	r2, r1
 80040ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f042 0201 	orr.w	r2, r2, #1
 80040be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2220      	movs	r2, #32
 80040ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3710      	adds	r7, #16
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	000186a0 	.word	0x000186a0
 80040ec:	001e847f 	.word	0x001e847f
 80040f0:	003d08ff 	.word	0x003d08ff
 80040f4:	431bde83 	.word	0x431bde83
 80040f8:	10624dd3 	.word	0x10624dd3

080040fc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b088      	sub	sp, #32
 8004100:	af02      	add	r7, sp, #8
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	4608      	mov	r0, r1
 8004106:	4611      	mov	r1, r2
 8004108:	461a      	mov	r2, r3
 800410a:	4603      	mov	r3, r0
 800410c:	817b      	strh	r3, [r7, #10]
 800410e:	460b      	mov	r3, r1
 8004110:	813b      	strh	r3, [r7, #8]
 8004112:	4613      	mov	r3, r2
 8004114:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004116:	f7fe ffe5 	bl	80030e4 <HAL_GetTick>
 800411a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004122:	b2db      	uxtb	r3, r3
 8004124:	2b20      	cmp	r3, #32
 8004126:	f040 80d9 	bne.w	80042dc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	9300      	str	r3, [sp, #0]
 800412e:	2319      	movs	r3, #25
 8004130:	2201      	movs	r2, #1
 8004132:	496d      	ldr	r1, [pc, #436]	@ (80042e8 <HAL_I2C_Mem_Write+0x1ec>)
 8004134:	68f8      	ldr	r0, [r7, #12]
 8004136:	f000 fc8b 	bl	8004a50 <I2C_WaitOnFlagUntilTimeout>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d001      	beq.n	8004144 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004140:	2302      	movs	r3, #2
 8004142:	e0cc      	b.n	80042de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800414a:	2b01      	cmp	r3, #1
 800414c:	d101      	bne.n	8004152 <HAL_I2C_Mem_Write+0x56>
 800414e:	2302      	movs	r3, #2
 8004150:	e0c5      	b.n	80042de <HAL_I2C_Mem_Write+0x1e2>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2201      	movs	r2, #1
 8004156:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0301 	and.w	r3, r3, #1
 8004164:	2b01      	cmp	r3, #1
 8004166:	d007      	beq.n	8004178 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f042 0201 	orr.w	r2, r2, #1
 8004176:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004186:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2221      	movs	r2, #33	@ 0x21
 800418c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2240      	movs	r2, #64	@ 0x40
 8004194:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6a3a      	ldr	r2, [r7, #32]
 80041a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80041a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041ae:	b29a      	uxth	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	4a4d      	ldr	r2, [pc, #308]	@ (80042ec <HAL_I2C_Mem_Write+0x1f0>)
 80041b8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80041ba:	88f8      	ldrh	r0, [r7, #6]
 80041bc:	893a      	ldrh	r2, [r7, #8]
 80041be:	8979      	ldrh	r1, [r7, #10]
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	9301      	str	r3, [sp, #4]
 80041c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041c6:	9300      	str	r3, [sp, #0]
 80041c8:	4603      	mov	r3, r0
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	f000 fac2 	bl	8004754 <I2C_RequestMemoryWrite>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d052      	beq.n	800427c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e081      	b.n	80042de <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041da:	697a      	ldr	r2, [r7, #20]
 80041dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041de:	68f8      	ldr	r0, [r7, #12]
 80041e0:	f000 fd50 	bl	8004c84 <I2C_WaitOnTXEFlagUntilTimeout>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00d      	beq.n	8004206 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ee:	2b04      	cmp	r3, #4
 80041f0:	d107      	bne.n	8004202 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004200:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e06b      	b.n	80042de <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420a:	781a      	ldrb	r2, [r3, #0]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004216:	1c5a      	adds	r2, r3, #1
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004220:	3b01      	subs	r3, #1
 8004222:	b29a      	uxth	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800422c:	b29b      	uxth	r3, r3
 800422e:	3b01      	subs	r3, #1
 8004230:	b29a      	uxth	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	695b      	ldr	r3, [r3, #20]
 800423c:	f003 0304 	and.w	r3, r3, #4
 8004240:	2b04      	cmp	r3, #4
 8004242:	d11b      	bne.n	800427c <HAL_I2C_Mem_Write+0x180>
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004248:	2b00      	cmp	r3, #0
 800424a:	d017      	beq.n	800427c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004250:	781a      	ldrb	r2, [r3, #0]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800425c:	1c5a      	adds	r2, r3, #1
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004266:	3b01      	subs	r3, #1
 8004268:	b29a      	uxth	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004272:	b29b      	uxth	r3, r3
 8004274:	3b01      	subs	r3, #1
 8004276:	b29a      	uxth	r2, r3
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004280:	2b00      	cmp	r3, #0
 8004282:	d1aa      	bne.n	80041da <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004284:	697a      	ldr	r2, [r7, #20]
 8004286:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004288:	68f8      	ldr	r0, [r7, #12]
 800428a:	f000 fd43 	bl	8004d14 <I2C_WaitOnBTFFlagUntilTimeout>
 800428e:	4603      	mov	r3, r0
 8004290:	2b00      	cmp	r3, #0
 8004292:	d00d      	beq.n	80042b0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004298:	2b04      	cmp	r3, #4
 800429a:	d107      	bne.n	80042ac <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042aa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e016      	b.n	80042de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2220      	movs	r2, #32
 80042c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80042d8:	2300      	movs	r3, #0
 80042da:	e000      	b.n	80042de <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80042dc:	2302      	movs	r3, #2
  }
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3718      	adds	r7, #24
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	00100002 	.word	0x00100002
 80042ec:	ffff0000 	.word	0xffff0000

080042f0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b08c      	sub	sp, #48	@ 0x30
 80042f4:	af02      	add	r7, sp, #8
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	4608      	mov	r0, r1
 80042fa:	4611      	mov	r1, r2
 80042fc:	461a      	mov	r2, r3
 80042fe:	4603      	mov	r3, r0
 8004300:	817b      	strh	r3, [r7, #10]
 8004302:	460b      	mov	r3, r1
 8004304:	813b      	strh	r3, [r7, #8]
 8004306:	4613      	mov	r3, r2
 8004308:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800430a:	f7fe feeb 	bl	80030e4 <HAL_GetTick>
 800430e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004316:	b2db      	uxtb	r3, r3
 8004318:	2b20      	cmp	r3, #32
 800431a:	f040 8214 	bne.w	8004746 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800431e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004320:	9300      	str	r3, [sp, #0]
 8004322:	2319      	movs	r3, #25
 8004324:	2201      	movs	r2, #1
 8004326:	497b      	ldr	r1, [pc, #492]	@ (8004514 <HAL_I2C_Mem_Read+0x224>)
 8004328:	68f8      	ldr	r0, [r7, #12]
 800432a:	f000 fb91 	bl	8004a50 <I2C_WaitOnFlagUntilTimeout>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d001      	beq.n	8004338 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004334:	2302      	movs	r3, #2
 8004336:	e207      	b.n	8004748 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800433e:	2b01      	cmp	r3, #1
 8004340:	d101      	bne.n	8004346 <HAL_I2C_Mem_Read+0x56>
 8004342:	2302      	movs	r3, #2
 8004344:	e200      	b.n	8004748 <HAL_I2C_Mem_Read+0x458>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2201      	movs	r2, #1
 800434a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0301 	and.w	r3, r3, #1
 8004358:	2b01      	cmp	r3, #1
 800435a:	d007      	beq.n	800436c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f042 0201 	orr.w	r2, r2, #1
 800436a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800437a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2222      	movs	r2, #34	@ 0x22
 8004380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2240      	movs	r2, #64	@ 0x40
 8004388:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2200      	movs	r2, #0
 8004390:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004396:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800439c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043a2:	b29a      	uxth	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	4a5b      	ldr	r2, [pc, #364]	@ (8004518 <HAL_I2C_Mem_Read+0x228>)
 80043ac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80043ae:	88f8      	ldrh	r0, [r7, #6]
 80043b0:	893a      	ldrh	r2, [r7, #8]
 80043b2:	8979      	ldrh	r1, [r7, #10]
 80043b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b6:	9301      	str	r3, [sp, #4]
 80043b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043ba:	9300      	str	r3, [sp, #0]
 80043bc:	4603      	mov	r3, r0
 80043be:	68f8      	ldr	r0, [r7, #12]
 80043c0:	f000 fa5e 	bl	8004880 <I2C_RequestMemoryRead>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d001      	beq.n	80043ce <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e1bc      	b.n	8004748 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d113      	bne.n	80043fe <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043d6:	2300      	movs	r3, #0
 80043d8:	623b      	str	r3, [r7, #32]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	695b      	ldr	r3, [r3, #20]
 80043e0:	623b      	str	r3, [r7, #32]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	623b      	str	r3, [r7, #32]
 80043ea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043fa:	601a      	str	r2, [r3, #0]
 80043fc:	e190      	b.n	8004720 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004402:	2b01      	cmp	r3, #1
 8004404:	d11b      	bne.n	800443e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004414:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004416:	2300      	movs	r3, #0
 8004418:	61fb      	str	r3, [r7, #28]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	695b      	ldr	r3, [r3, #20]
 8004420:	61fb      	str	r3, [r7, #28]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	699b      	ldr	r3, [r3, #24]
 8004428:	61fb      	str	r3, [r7, #28]
 800442a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800443a:	601a      	str	r2, [r3, #0]
 800443c:	e170      	b.n	8004720 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004442:	2b02      	cmp	r3, #2
 8004444:	d11b      	bne.n	800447e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004454:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004464:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004466:	2300      	movs	r3, #0
 8004468:	61bb      	str	r3, [r7, #24]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	695b      	ldr	r3, [r3, #20]
 8004470:	61bb      	str	r3, [r7, #24]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	61bb      	str	r3, [r7, #24]
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	e150      	b.n	8004720 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800447e:	2300      	movs	r3, #0
 8004480:	617b      	str	r3, [r7, #20]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	695b      	ldr	r3, [r3, #20]
 8004488:	617b      	str	r3, [r7, #20]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	617b      	str	r3, [r7, #20]
 8004492:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004494:	e144      	b.n	8004720 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800449a:	2b03      	cmp	r3, #3
 800449c:	f200 80f1 	bhi.w	8004682 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d123      	bne.n	80044f0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044aa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80044ac:	68f8      	ldr	r0, [r7, #12]
 80044ae:	f000 fc79 	bl	8004da4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d001      	beq.n	80044bc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e145      	b.n	8004748 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	691a      	ldr	r2, [r3, #16]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c6:	b2d2      	uxtb	r2, r2
 80044c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ce:	1c5a      	adds	r2, r3, #1
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044d8:	3b01      	subs	r3, #1
 80044da:	b29a      	uxth	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	3b01      	subs	r3, #1
 80044e8:	b29a      	uxth	r2, r3
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80044ee:	e117      	b.n	8004720 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d14e      	bne.n	8004596 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044fa:	9300      	str	r3, [sp, #0]
 80044fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044fe:	2200      	movs	r2, #0
 8004500:	4906      	ldr	r1, [pc, #24]	@ (800451c <HAL_I2C_Mem_Read+0x22c>)
 8004502:	68f8      	ldr	r0, [r7, #12]
 8004504:	f000 faa4 	bl	8004a50 <I2C_WaitOnFlagUntilTimeout>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d008      	beq.n	8004520 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e11a      	b.n	8004748 <HAL_I2C_Mem_Read+0x458>
 8004512:	bf00      	nop
 8004514:	00100002 	.word	0x00100002
 8004518:	ffff0000 	.word	0xffff0000
 800451c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800452e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	691a      	ldr	r2, [r3, #16]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800453a:	b2d2      	uxtb	r2, r2
 800453c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004542:	1c5a      	adds	r2, r3, #1
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800454c:	3b01      	subs	r3, #1
 800454e:	b29a      	uxth	r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004558:	b29b      	uxth	r3, r3
 800455a:	3b01      	subs	r3, #1
 800455c:	b29a      	uxth	r2, r3
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	691a      	ldr	r2, [r3, #16]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800456c:	b2d2      	uxtb	r2, r2
 800456e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004574:	1c5a      	adds	r2, r3, #1
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800457e:	3b01      	subs	r3, #1
 8004580:	b29a      	uxth	r2, r3
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800458a:	b29b      	uxth	r3, r3
 800458c:	3b01      	subs	r3, #1
 800458e:	b29a      	uxth	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004594:	e0c4      	b.n	8004720 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004598:	9300      	str	r3, [sp, #0]
 800459a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800459c:	2200      	movs	r2, #0
 800459e:	496c      	ldr	r1, [pc, #432]	@ (8004750 <HAL_I2C_Mem_Read+0x460>)
 80045a0:	68f8      	ldr	r0, [r7, #12]
 80045a2:	f000 fa55 	bl	8004a50 <I2C_WaitOnFlagUntilTimeout>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d001      	beq.n	80045b0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e0cb      	b.n	8004748 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	691a      	ldr	r2, [r3, #16]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ca:	b2d2      	uxtb	r2, r2
 80045cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d2:	1c5a      	adds	r2, r3, #1
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045dc:	3b01      	subs	r3, #1
 80045de:	b29a      	uxth	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	3b01      	subs	r3, #1
 80045ec:	b29a      	uxth	r2, r3
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f4:	9300      	str	r3, [sp, #0]
 80045f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045f8:	2200      	movs	r2, #0
 80045fa:	4955      	ldr	r1, [pc, #340]	@ (8004750 <HAL_I2C_Mem_Read+0x460>)
 80045fc:	68f8      	ldr	r0, [r7, #12]
 80045fe:	f000 fa27 	bl	8004a50 <I2C_WaitOnFlagUntilTimeout>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d001      	beq.n	800460c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e09d      	b.n	8004748 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800461a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	691a      	ldr	r2, [r3, #16]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004626:	b2d2      	uxtb	r2, r2
 8004628:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800462e:	1c5a      	adds	r2, r3, #1
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004638:	3b01      	subs	r3, #1
 800463a:	b29a      	uxth	r2, r3
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004644:	b29b      	uxth	r3, r3
 8004646:	3b01      	subs	r3, #1
 8004648:	b29a      	uxth	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	691a      	ldr	r2, [r3, #16]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004658:	b2d2      	uxtb	r2, r2
 800465a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004660:	1c5a      	adds	r2, r3, #1
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800466a:	3b01      	subs	r3, #1
 800466c:	b29a      	uxth	r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004676:	b29b      	uxth	r3, r3
 8004678:	3b01      	subs	r3, #1
 800467a:	b29a      	uxth	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004680:	e04e      	b.n	8004720 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004682:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004684:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004686:	68f8      	ldr	r0, [r7, #12]
 8004688:	f000 fb8c 	bl	8004da4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d001      	beq.n	8004696 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e058      	b.n	8004748 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	691a      	ldr	r2, [r3, #16]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a0:	b2d2      	uxtb	r2, r2
 80046a2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a8:	1c5a      	adds	r2, r3, #1
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046b2:	3b01      	subs	r3, #1
 80046b4:	b29a      	uxth	r2, r3
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046be:	b29b      	uxth	r3, r3
 80046c0:	3b01      	subs	r3, #1
 80046c2:	b29a      	uxth	r2, r3
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	f003 0304 	and.w	r3, r3, #4
 80046d2:	2b04      	cmp	r3, #4
 80046d4:	d124      	bne.n	8004720 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046da:	2b03      	cmp	r3, #3
 80046dc:	d107      	bne.n	80046ee <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046ec:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	691a      	ldr	r2, [r3, #16]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f8:	b2d2      	uxtb	r2, r2
 80046fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004700:	1c5a      	adds	r2, r3, #1
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800470a:	3b01      	subs	r3, #1
 800470c:	b29a      	uxth	r2, r3
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004716:	b29b      	uxth	r3, r3
 8004718:	3b01      	subs	r3, #1
 800471a:	b29a      	uxth	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004724:	2b00      	cmp	r3, #0
 8004726:	f47f aeb6 	bne.w	8004496 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2220      	movs	r2, #32
 800472e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004742:	2300      	movs	r3, #0
 8004744:	e000      	b.n	8004748 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004746:	2302      	movs	r3, #2
  }
}
 8004748:	4618      	mov	r0, r3
 800474a:	3728      	adds	r7, #40	@ 0x28
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	00010004 	.word	0x00010004

08004754 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b088      	sub	sp, #32
 8004758:	af02      	add	r7, sp, #8
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	4608      	mov	r0, r1
 800475e:	4611      	mov	r1, r2
 8004760:	461a      	mov	r2, r3
 8004762:	4603      	mov	r3, r0
 8004764:	817b      	strh	r3, [r7, #10]
 8004766:	460b      	mov	r3, r1
 8004768:	813b      	strh	r3, [r7, #8]
 800476a:	4613      	mov	r3, r2
 800476c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800477c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800477e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004780:	9300      	str	r3, [sp, #0]
 8004782:	6a3b      	ldr	r3, [r7, #32]
 8004784:	2200      	movs	r2, #0
 8004786:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	f000 f960 	bl	8004a50 <I2C_WaitOnFlagUntilTimeout>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00d      	beq.n	80047b2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047a4:	d103      	bne.n	80047ae <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047ac:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e05f      	b.n	8004872 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80047b2:	897b      	ldrh	r3, [r7, #10]
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	461a      	mov	r2, r3
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80047c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c4:	6a3a      	ldr	r2, [r7, #32]
 80047c6:	492d      	ldr	r1, [pc, #180]	@ (800487c <I2C_RequestMemoryWrite+0x128>)
 80047c8:	68f8      	ldr	r0, [r7, #12]
 80047ca:	f000 f9bb 	bl	8004b44 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d001      	beq.n	80047d8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e04c      	b.n	8004872 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047d8:	2300      	movs	r3, #0
 80047da:	617b      	str	r3, [r7, #20]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	695b      	ldr	r3, [r3, #20]
 80047e2:	617b      	str	r3, [r7, #20]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	617b      	str	r3, [r7, #20]
 80047ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047f0:	6a39      	ldr	r1, [r7, #32]
 80047f2:	68f8      	ldr	r0, [r7, #12]
 80047f4:	f000 fa46 	bl	8004c84 <I2C_WaitOnTXEFlagUntilTimeout>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00d      	beq.n	800481a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004802:	2b04      	cmp	r3, #4
 8004804:	d107      	bne.n	8004816 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004814:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e02b      	b.n	8004872 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800481a:	88fb      	ldrh	r3, [r7, #6]
 800481c:	2b01      	cmp	r3, #1
 800481e:	d105      	bne.n	800482c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004820:	893b      	ldrh	r3, [r7, #8]
 8004822:	b2da      	uxtb	r2, r3
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	611a      	str	r2, [r3, #16]
 800482a:	e021      	b.n	8004870 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800482c:	893b      	ldrh	r3, [r7, #8]
 800482e:	0a1b      	lsrs	r3, r3, #8
 8004830:	b29b      	uxth	r3, r3
 8004832:	b2da      	uxtb	r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800483a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800483c:	6a39      	ldr	r1, [r7, #32]
 800483e:	68f8      	ldr	r0, [r7, #12]
 8004840:	f000 fa20 	bl	8004c84 <I2C_WaitOnTXEFlagUntilTimeout>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00d      	beq.n	8004866 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800484e:	2b04      	cmp	r3, #4
 8004850:	d107      	bne.n	8004862 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004860:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e005      	b.n	8004872 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004866:	893b      	ldrh	r3, [r7, #8]
 8004868:	b2da      	uxtb	r2, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	3718      	adds	r7, #24
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	00010002 	.word	0x00010002

08004880 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b088      	sub	sp, #32
 8004884:	af02      	add	r7, sp, #8
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	4608      	mov	r0, r1
 800488a:	4611      	mov	r1, r2
 800488c:	461a      	mov	r2, r3
 800488e:	4603      	mov	r3, r0
 8004890:	817b      	strh	r3, [r7, #10]
 8004892:	460b      	mov	r3, r1
 8004894:	813b      	strh	r3, [r7, #8]
 8004896:	4613      	mov	r3, r2
 8004898:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80048a8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048bc:	9300      	str	r3, [sp, #0]
 80048be:	6a3b      	ldr	r3, [r7, #32]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80048c6:	68f8      	ldr	r0, [r7, #12]
 80048c8:	f000 f8c2 	bl	8004a50 <I2C_WaitOnFlagUntilTimeout>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00d      	beq.n	80048ee <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048e0:	d103      	bne.n	80048ea <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048e8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e0aa      	b.n	8004a44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80048ee:	897b      	ldrh	r3, [r7, #10]
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	461a      	mov	r2, r3
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80048fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004900:	6a3a      	ldr	r2, [r7, #32]
 8004902:	4952      	ldr	r1, [pc, #328]	@ (8004a4c <I2C_RequestMemoryRead+0x1cc>)
 8004904:	68f8      	ldr	r0, [r7, #12]
 8004906:	f000 f91d 	bl	8004b44 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d001      	beq.n	8004914 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e097      	b.n	8004a44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004914:	2300      	movs	r3, #0
 8004916:	617b      	str	r3, [r7, #20]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	695b      	ldr	r3, [r3, #20]
 800491e:	617b      	str	r3, [r7, #20]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	617b      	str	r3, [r7, #20]
 8004928:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800492a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800492c:	6a39      	ldr	r1, [r7, #32]
 800492e:	68f8      	ldr	r0, [r7, #12]
 8004930:	f000 f9a8 	bl	8004c84 <I2C_WaitOnTXEFlagUntilTimeout>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00d      	beq.n	8004956 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800493e:	2b04      	cmp	r3, #4
 8004940:	d107      	bne.n	8004952 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004950:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e076      	b.n	8004a44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004956:	88fb      	ldrh	r3, [r7, #6]
 8004958:	2b01      	cmp	r3, #1
 800495a:	d105      	bne.n	8004968 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800495c:	893b      	ldrh	r3, [r7, #8]
 800495e:	b2da      	uxtb	r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	611a      	str	r2, [r3, #16]
 8004966:	e021      	b.n	80049ac <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004968:	893b      	ldrh	r3, [r7, #8]
 800496a:	0a1b      	lsrs	r3, r3, #8
 800496c:	b29b      	uxth	r3, r3
 800496e:	b2da      	uxtb	r2, r3
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004976:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004978:	6a39      	ldr	r1, [r7, #32]
 800497a:	68f8      	ldr	r0, [r7, #12]
 800497c:	f000 f982 	bl	8004c84 <I2C_WaitOnTXEFlagUntilTimeout>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00d      	beq.n	80049a2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800498a:	2b04      	cmp	r3, #4
 800498c:	d107      	bne.n	800499e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800499c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e050      	b.n	8004a44 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80049a2:	893b      	ldrh	r3, [r7, #8]
 80049a4:	b2da      	uxtb	r2, r3
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049ae:	6a39      	ldr	r1, [r7, #32]
 80049b0:	68f8      	ldr	r0, [r7, #12]
 80049b2:	f000 f967 	bl	8004c84 <I2C_WaitOnTXEFlagUntilTimeout>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d00d      	beq.n	80049d8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049c0:	2b04      	cmp	r3, #4
 80049c2:	d107      	bne.n	80049d4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049d2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e035      	b.n	8004a44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049e6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ea:	9300      	str	r3, [sp, #0]
 80049ec:	6a3b      	ldr	r3, [r7, #32]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80049f4:	68f8      	ldr	r0, [r7, #12]
 80049f6:	f000 f82b 	bl	8004a50 <I2C_WaitOnFlagUntilTimeout>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00d      	beq.n	8004a1c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a0e:	d103      	bne.n	8004a18 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a16:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e013      	b.n	8004a44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004a1c:	897b      	ldrh	r3, [r7, #10]
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	f043 0301 	orr.w	r3, r3, #1
 8004a24:	b2da      	uxtb	r2, r3
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a2e:	6a3a      	ldr	r2, [r7, #32]
 8004a30:	4906      	ldr	r1, [pc, #24]	@ (8004a4c <I2C_RequestMemoryRead+0x1cc>)
 8004a32:	68f8      	ldr	r0, [r7, #12]
 8004a34:	f000 f886 	bl	8004b44 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d001      	beq.n	8004a42 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e000      	b.n	8004a44 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004a42:	2300      	movs	r3, #0
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3718      	adds	r7, #24
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	00010002 	.word	0x00010002

08004a50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	603b      	str	r3, [r7, #0]
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a60:	e048      	b.n	8004af4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a68:	d044      	beq.n	8004af4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a6a:	f7fe fb3b 	bl	80030e4 <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	683a      	ldr	r2, [r7, #0]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d302      	bcc.n	8004a80 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d139      	bne.n	8004af4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	0c1b      	lsrs	r3, r3, #16
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d10d      	bne.n	8004aa6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	695b      	ldr	r3, [r3, #20]
 8004a90:	43da      	mvns	r2, r3
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	4013      	ands	r3, r2
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	bf0c      	ite	eq
 8004a9c:	2301      	moveq	r3, #1
 8004a9e:	2300      	movne	r3, #0
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	e00c      	b.n	8004ac0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	43da      	mvns	r2, r3
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	bf0c      	ite	eq
 8004ab8:	2301      	moveq	r3, #1
 8004aba:	2300      	movne	r3, #0
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	461a      	mov	r2, r3
 8004ac0:	79fb      	ldrb	r3, [r7, #7]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d116      	bne.n	8004af4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2220      	movs	r2, #32
 8004ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae0:	f043 0220 	orr.w	r2, r3, #32
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e023      	b.n	8004b3c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	0c1b      	lsrs	r3, r3, #16
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d10d      	bne.n	8004b1a <I2C_WaitOnFlagUntilTimeout+0xca>
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	695b      	ldr	r3, [r3, #20]
 8004b04:	43da      	mvns	r2, r3
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	4013      	ands	r3, r2
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	bf0c      	ite	eq
 8004b10:	2301      	moveq	r3, #1
 8004b12:	2300      	movne	r3, #0
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	461a      	mov	r2, r3
 8004b18:	e00c      	b.n	8004b34 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	699b      	ldr	r3, [r3, #24]
 8004b20:	43da      	mvns	r2, r3
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	4013      	ands	r3, r2
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	bf0c      	ite	eq
 8004b2c:	2301      	moveq	r3, #1
 8004b2e:	2300      	movne	r3, #0
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	461a      	mov	r2, r3
 8004b34:	79fb      	ldrb	r3, [r7, #7]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d093      	beq.n	8004a62 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3710      	adds	r7, #16
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
 8004b50:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b52:	e071      	b.n	8004c38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	695b      	ldr	r3, [r3, #20]
 8004b5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b62:	d123      	bne.n	8004bac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b72:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004b7c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2200      	movs	r2, #0
 8004b82:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2220      	movs	r2, #32
 8004b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b98:	f043 0204 	orr.w	r2, r3, #4
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e067      	b.n	8004c7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bb2:	d041      	beq.n	8004c38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bb4:	f7fe fa96 	bl	80030e4 <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d302      	bcc.n	8004bca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d136      	bne.n	8004c38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	0c1b      	lsrs	r3, r3, #16
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d10c      	bne.n	8004bee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	43da      	mvns	r2, r3
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	4013      	ands	r3, r2
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	bf14      	ite	ne
 8004be6:	2301      	movne	r3, #1
 8004be8:	2300      	moveq	r3, #0
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	e00b      	b.n	8004c06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	699b      	ldr	r3, [r3, #24]
 8004bf4:	43da      	mvns	r2, r3
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	bf14      	ite	ne
 8004c00:	2301      	movne	r3, #1
 8004c02:	2300      	moveq	r3, #0
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d016      	beq.n	8004c38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2220      	movs	r2, #32
 8004c14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c24:	f043 0220 	orr.w	r2, r3, #32
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e021      	b.n	8004c7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	0c1b      	lsrs	r3, r3, #16
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d10c      	bne.n	8004c5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	695b      	ldr	r3, [r3, #20]
 8004c48:	43da      	mvns	r2, r3
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	bf14      	ite	ne
 8004c54:	2301      	movne	r3, #1
 8004c56:	2300      	moveq	r3, #0
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	e00b      	b.n	8004c74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	699b      	ldr	r3, [r3, #24]
 8004c62:	43da      	mvns	r2, r3
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	4013      	ands	r3, r2
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	bf14      	ite	ne
 8004c6e:	2301      	movne	r3, #1
 8004c70:	2300      	moveq	r3, #0
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	f47f af6d 	bne.w	8004b54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004c7a:	2300      	movs	r3, #0
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3710      	adds	r7, #16
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b084      	sub	sp, #16
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c90:	e034      	b.n	8004cfc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c92:	68f8      	ldr	r0, [r7, #12]
 8004c94:	f000 f8e3 	bl	8004e5e <I2C_IsAcknowledgeFailed>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d001      	beq.n	8004ca2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e034      	b.n	8004d0c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca8:	d028      	beq.n	8004cfc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004caa:	f7fe fa1b 	bl	80030e4 <HAL_GetTick>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	68ba      	ldr	r2, [r7, #8]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d302      	bcc.n	8004cc0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d11d      	bne.n	8004cfc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	695b      	ldr	r3, [r3, #20]
 8004cc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cca:	2b80      	cmp	r3, #128	@ 0x80
 8004ccc:	d016      	beq.n	8004cfc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2220      	movs	r2, #32
 8004cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ce8:	f043 0220 	orr.w	r2, r3, #32
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e007      	b.n	8004d0c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	695b      	ldr	r3, [r3, #20]
 8004d02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d06:	2b80      	cmp	r3, #128	@ 0x80
 8004d08:	d1c3      	bne.n	8004c92 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004d0a:	2300      	movs	r3, #0
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3710      	adds	r7, #16
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d20:	e034      	b.n	8004d8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d22:	68f8      	ldr	r0, [r7, #12]
 8004d24:	f000 f89b 	bl	8004e5e <I2C_IsAcknowledgeFailed>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d001      	beq.n	8004d32 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e034      	b.n	8004d9c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d38:	d028      	beq.n	8004d8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d3a:	f7fe f9d3 	bl	80030e4 <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	68ba      	ldr	r2, [r7, #8]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d302      	bcc.n	8004d50 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d11d      	bne.n	8004d8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	695b      	ldr	r3, [r3, #20]
 8004d56:	f003 0304 	and.w	r3, r3, #4
 8004d5a:	2b04      	cmp	r3, #4
 8004d5c:	d016      	beq.n	8004d8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2200      	movs	r2, #0
 8004d62:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2220      	movs	r2, #32
 8004d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d78:	f043 0220 	orr.w	r2, r3, #32
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e007      	b.n	8004d9c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	695b      	ldr	r3, [r3, #20]
 8004d92:	f003 0304 	and.w	r3, r3, #4
 8004d96:	2b04      	cmp	r3, #4
 8004d98:	d1c3      	bne.n	8004d22 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004d9a:	2300      	movs	r3, #0
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3710      	adds	r7, #16
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	60b9      	str	r1, [r7, #8]
 8004dae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004db0:	e049      	b.n	8004e46 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	695b      	ldr	r3, [r3, #20]
 8004db8:	f003 0310 	and.w	r3, r3, #16
 8004dbc:	2b10      	cmp	r3, #16
 8004dbe:	d119      	bne.n	8004df4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f06f 0210 	mvn.w	r2, #16
 8004dc8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2220      	movs	r2, #32
 8004dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e030      	b.n	8004e56 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004df4:	f7fe f976 	bl	80030e4 <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	68ba      	ldr	r2, [r7, #8]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d302      	bcc.n	8004e0a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d11d      	bne.n	8004e46 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	695b      	ldr	r3, [r3, #20]
 8004e10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e14:	2b40      	cmp	r3, #64	@ 0x40
 8004e16:	d016      	beq.n	8004e46 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2220      	movs	r2, #32
 8004e22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e32:	f043 0220 	orr.w	r2, r3, #32
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e007      	b.n	8004e56 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	695b      	ldr	r3, [r3, #20]
 8004e4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e50:	2b40      	cmp	r3, #64	@ 0x40
 8004e52:	d1ae      	bne.n	8004db2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3710      	adds	r7, #16
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}

08004e5e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004e5e:	b480      	push	{r7}
 8004e60:	b083      	sub	sp, #12
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	695b      	ldr	r3, [r3, #20]
 8004e6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e74:	d11b      	bne.n	8004eae <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004e7e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2220      	movs	r2, #32
 8004e8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e9a:	f043 0204 	orr.w	r2, r3, #4
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e000      	b.n	8004eb0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004eae:	2300      	movs	r3, #0
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b086      	sub	sp, #24
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d101      	bne.n	8004ece <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e267      	b.n	800539e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 0301 	and.w	r3, r3, #1
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d075      	beq.n	8004fc6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004eda:	4b88      	ldr	r3, [pc, #544]	@ (80050fc <HAL_RCC_OscConfig+0x240>)
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	f003 030c 	and.w	r3, r3, #12
 8004ee2:	2b04      	cmp	r3, #4
 8004ee4:	d00c      	beq.n	8004f00 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ee6:	4b85      	ldr	r3, [pc, #532]	@ (80050fc <HAL_RCC_OscConfig+0x240>)
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004eee:	2b08      	cmp	r3, #8
 8004ef0:	d112      	bne.n	8004f18 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ef2:	4b82      	ldr	r3, [pc, #520]	@ (80050fc <HAL_RCC_OscConfig+0x240>)
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004efa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004efe:	d10b      	bne.n	8004f18 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f00:	4b7e      	ldr	r3, [pc, #504]	@ (80050fc <HAL_RCC_OscConfig+0x240>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d05b      	beq.n	8004fc4 <HAL_RCC_OscConfig+0x108>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d157      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e242      	b.n	800539e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f20:	d106      	bne.n	8004f30 <HAL_RCC_OscConfig+0x74>
 8004f22:	4b76      	ldr	r3, [pc, #472]	@ (80050fc <HAL_RCC_OscConfig+0x240>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a75      	ldr	r2, [pc, #468]	@ (80050fc <HAL_RCC_OscConfig+0x240>)
 8004f28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f2c:	6013      	str	r3, [r2, #0]
 8004f2e:	e01d      	b.n	8004f6c <HAL_RCC_OscConfig+0xb0>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f38:	d10c      	bne.n	8004f54 <HAL_RCC_OscConfig+0x98>
 8004f3a:	4b70      	ldr	r3, [pc, #448]	@ (80050fc <HAL_RCC_OscConfig+0x240>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a6f      	ldr	r2, [pc, #444]	@ (80050fc <HAL_RCC_OscConfig+0x240>)
 8004f40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f44:	6013      	str	r3, [r2, #0]
 8004f46:	4b6d      	ldr	r3, [pc, #436]	@ (80050fc <HAL_RCC_OscConfig+0x240>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a6c      	ldr	r2, [pc, #432]	@ (80050fc <HAL_RCC_OscConfig+0x240>)
 8004f4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f50:	6013      	str	r3, [r2, #0]
 8004f52:	e00b      	b.n	8004f6c <HAL_RCC_OscConfig+0xb0>
 8004f54:	4b69      	ldr	r3, [pc, #420]	@ (80050fc <HAL_RCC_OscConfig+0x240>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a68      	ldr	r2, [pc, #416]	@ (80050fc <HAL_RCC_OscConfig+0x240>)
 8004f5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f5e:	6013      	str	r3, [r2, #0]
 8004f60:	4b66      	ldr	r3, [pc, #408]	@ (80050fc <HAL_RCC_OscConfig+0x240>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a65      	ldr	r2, [pc, #404]	@ (80050fc <HAL_RCC_OscConfig+0x240>)
 8004f66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d013      	beq.n	8004f9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f74:	f7fe f8b6 	bl	80030e4 <HAL_GetTick>
 8004f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f7a:	e008      	b.n	8004f8e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f7c:	f7fe f8b2 	bl	80030e4 <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	2b64      	cmp	r3, #100	@ 0x64
 8004f88:	d901      	bls.n	8004f8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e207      	b.n	800539e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f8e:	4b5b      	ldr	r3, [pc, #364]	@ (80050fc <HAL_RCC_OscConfig+0x240>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d0f0      	beq.n	8004f7c <HAL_RCC_OscConfig+0xc0>
 8004f9a:	e014      	b.n	8004fc6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f9c:	f7fe f8a2 	bl	80030e4 <HAL_GetTick>
 8004fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fa2:	e008      	b.n	8004fb6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fa4:	f7fe f89e 	bl	80030e4 <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	2b64      	cmp	r3, #100	@ 0x64
 8004fb0:	d901      	bls.n	8004fb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e1f3      	b.n	800539e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fb6:	4b51      	ldr	r3, [pc, #324]	@ (80050fc <HAL_RCC_OscConfig+0x240>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d1f0      	bne.n	8004fa4 <HAL_RCC_OscConfig+0xe8>
 8004fc2:	e000      	b.n	8004fc6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0302 	and.w	r3, r3, #2
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d063      	beq.n	800509a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004fd2:	4b4a      	ldr	r3, [pc, #296]	@ (80050fc <HAL_RCC_OscConfig+0x240>)
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	f003 030c 	and.w	r3, r3, #12
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00b      	beq.n	8004ff6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fde:	4b47      	ldr	r3, [pc, #284]	@ (80050fc <HAL_RCC_OscConfig+0x240>)
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004fe6:	2b08      	cmp	r3, #8
 8004fe8:	d11c      	bne.n	8005024 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fea:	4b44      	ldr	r3, [pc, #272]	@ (80050fc <HAL_RCC_OscConfig+0x240>)
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d116      	bne.n	8005024 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ff6:	4b41      	ldr	r3, [pc, #260]	@ (80050fc <HAL_RCC_OscConfig+0x240>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 0302 	and.w	r3, r3, #2
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d005      	beq.n	800500e <HAL_RCC_OscConfig+0x152>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	2b01      	cmp	r3, #1
 8005008:	d001      	beq.n	800500e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e1c7      	b.n	800539e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800500e:	4b3b      	ldr	r3, [pc, #236]	@ (80050fc <HAL_RCC_OscConfig+0x240>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	00db      	lsls	r3, r3, #3
 800501c:	4937      	ldr	r1, [pc, #220]	@ (80050fc <HAL_RCC_OscConfig+0x240>)
 800501e:	4313      	orrs	r3, r2
 8005020:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005022:	e03a      	b.n	800509a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d020      	beq.n	800506e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800502c:	4b34      	ldr	r3, [pc, #208]	@ (8005100 <HAL_RCC_OscConfig+0x244>)
 800502e:	2201      	movs	r2, #1
 8005030:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005032:	f7fe f857 	bl	80030e4 <HAL_GetTick>
 8005036:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005038:	e008      	b.n	800504c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800503a:	f7fe f853 	bl	80030e4 <HAL_GetTick>
 800503e:	4602      	mov	r2, r0
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	1ad3      	subs	r3, r2, r3
 8005044:	2b02      	cmp	r3, #2
 8005046:	d901      	bls.n	800504c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005048:	2303      	movs	r3, #3
 800504a:	e1a8      	b.n	800539e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800504c:	4b2b      	ldr	r3, [pc, #172]	@ (80050fc <HAL_RCC_OscConfig+0x240>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0302 	and.w	r3, r3, #2
 8005054:	2b00      	cmp	r3, #0
 8005056:	d0f0      	beq.n	800503a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005058:	4b28      	ldr	r3, [pc, #160]	@ (80050fc <HAL_RCC_OscConfig+0x240>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	691b      	ldr	r3, [r3, #16]
 8005064:	00db      	lsls	r3, r3, #3
 8005066:	4925      	ldr	r1, [pc, #148]	@ (80050fc <HAL_RCC_OscConfig+0x240>)
 8005068:	4313      	orrs	r3, r2
 800506a:	600b      	str	r3, [r1, #0]
 800506c:	e015      	b.n	800509a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800506e:	4b24      	ldr	r3, [pc, #144]	@ (8005100 <HAL_RCC_OscConfig+0x244>)
 8005070:	2200      	movs	r2, #0
 8005072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005074:	f7fe f836 	bl	80030e4 <HAL_GetTick>
 8005078:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800507a:	e008      	b.n	800508e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800507c:	f7fe f832 	bl	80030e4 <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	2b02      	cmp	r3, #2
 8005088:	d901      	bls.n	800508e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e187      	b.n	800539e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800508e:	4b1b      	ldr	r3, [pc, #108]	@ (80050fc <HAL_RCC_OscConfig+0x240>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0302 	and.w	r3, r3, #2
 8005096:	2b00      	cmp	r3, #0
 8005098:	d1f0      	bne.n	800507c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0308 	and.w	r3, r3, #8
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d036      	beq.n	8005114 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d016      	beq.n	80050dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050ae:	4b15      	ldr	r3, [pc, #84]	@ (8005104 <HAL_RCC_OscConfig+0x248>)
 80050b0:	2201      	movs	r2, #1
 80050b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050b4:	f7fe f816 	bl	80030e4 <HAL_GetTick>
 80050b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050ba:	e008      	b.n	80050ce <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050bc:	f7fe f812 	bl	80030e4 <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d901      	bls.n	80050ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e167      	b.n	800539e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050ce:	4b0b      	ldr	r3, [pc, #44]	@ (80050fc <HAL_RCC_OscConfig+0x240>)
 80050d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050d2:	f003 0302 	and.w	r3, r3, #2
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d0f0      	beq.n	80050bc <HAL_RCC_OscConfig+0x200>
 80050da:	e01b      	b.n	8005114 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050dc:	4b09      	ldr	r3, [pc, #36]	@ (8005104 <HAL_RCC_OscConfig+0x248>)
 80050de:	2200      	movs	r2, #0
 80050e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050e2:	f7fd ffff 	bl	80030e4 <HAL_GetTick>
 80050e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050e8:	e00e      	b.n	8005108 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050ea:	f7fd fffb 	bl	80030e4 <HAL_GetTick>
 80050ee:	4602      	mov	r2, r0
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d907      	bls.n	8005108 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80050f8:	2303      	movs	r3, #3
 80050fa:	e150      	b.n	800539e <HAL_RCC_OscConfig+0x4e2>
 80050fc:	40023800 	.word	0x40023800
 8005100:	42470000 	.word	0x42470000
 8005104:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005108:	4b88      	ldr	r3, [pc, #544]	@ (800532c <HAL_RCC_OscConfig+0x470>)
 800510a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800510c:	f003 0302 	and.w	r3, r3, #2
 8005110:	2b00      	cmp	r3, #0
 8005112:	d1ea      	bne.n	80050ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 0304 	and.w	r3, r3, #4
 800511c:	2b00      	cmp	r3, #0
 800511e:	f000 8097 	beq.w	8005250 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005122:	2300      	movs	r3, #0
 8005124:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005126:	4b81      	ldr	r3, [pc, #516]	@ (800532c <HAL_RCC_OscConfig+0x470>)
 8005128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800512a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800512e:	2b00      	cmp	r3, #0
 8005130:	d10f      	bne.n	8005152 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005132:	2300      	movs	r3, #0
 8005134:	60bb      	str	r3, [r7, #8]
 8005136:	4b7d      	ldr	r3, [pc, #500]	@ (800532c <HAL_RCC_OscConfig+0x470>)
 8005138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800513a:	4a7c      	ldr	r2, [pc, #496]	@ (800532c <HAL_RCC_OscConfig+0x470>)
 800513c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005140:	6413      	str	r3, [r2, #64]	@ 0x40
 8005142:	4b7a      	ldr	r3, [pc, #488]	@ (800532c <HAL_RCC_OscConfig+0x470>)
 8005144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005146:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800514a:	60bb      	str	r3, [r7, #8]
 800514c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800514e:	2301      	movs	r3, #1
 8005150:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005152:	4b77      	ldr	r3, [pc, #476]	@ (8005330 <HAL_RCC_OscConfig+0x474>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800515a:	2b00      	cmp	r3, #0
 800515c:	d118      	bne.n	8005190 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800515e:	4b74      	ldr	r3, [pc, #464]	@ (8005330 <HAL_RCC_OscConfig+0x474>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a73      	ldr	r2, [pc, #460]	@ (8005330 <HAL_RCC_OscConfig+0x474>)
 8005164:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005168:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800516a:	f7fd ffbb 	bl	80030e4 <HAL_GetTick>
 800516e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005170:	e008      	b.n	8005184 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005172:	f7fd ffb7 	bl	80030e4 <HAL_GetTick>
 8005176:	4602      	mov	r2, r0
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	2b02      	cmp	r3, #2
 800517e:	d901      	bls.n	8005184 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	e10c      	b.n	800539e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005184:	4b6a      	ldr	r3, [pc, #424]	@ (8005330 <HAL_RCC_OscConfig+0x474>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800518c:	2b00      	cmp	r3, #0
 800518e:	d0f0      	beq.n	8005172 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	2b01      	cmp	r3, #1
 8005196:	d106      	bne.n	80051a6 <HAL_RCC_OscConfig+0x2ea>
 8005198:	4b64      	ldr	r3, [pc, #400]	@ (800532c <HAL_RCC_OscConfig+0x470>)
 800519a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800519c:	4a63      	ldr	r2, [pc, #396]	@ (800532c <HAL_RCC_OscConfig+0x470>)
 800519e:	f043 0301 	orr.w	r3, r3, #1
 80051a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80051a4:	e01c      	b.n	80051e0 <HAL_RCC_OscConfig+0x324>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	2b05      	cmp	r3, #5
 80051ac:	d10c      	bne.n	80051c8 <HAL_RCC_OscConfig+0x30c>
 80051ae:	4b5f      	ldr	r3, [pc, #380]	@ (800532c <HAL_RCC_OscConfig+0x470>)
 80051b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051b2:	4a5e      	ldr	r2, [pc, #376]	@ (800532c <HAL_RCC_OscConfig+0x470>)
 80051b4:	f043 0304 	orr.w	r3, r3, #4
 80051b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80051ba:	4b5c      	ldr	r3, [pc, #368]	@ (800532c <HAL_RCC_OscConfig+0x470>)
 80051bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051be:	4a5b      	ldr	r2, [pc, #364]	@ (800532c <HAL_RCC_OscConfig+0x470>)
 80051c0:	f043 0301 	orr.w	r3, r3, #1
 80051c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80051c6:	e00b      	b.n	80051e0 <HAL_RCC_OscConfig+0x324>
 80051c8:	4b58      	ldr	r3, [pc, #352]	@ (800532c <HAL_RCC_OscConfig+0x470>)
 80051ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051cc:	4a57      	ldr	r2, [pc, #348]	@ (800532c <HAL_RCC_OscConfig+0x470>)
 80051ce:	f023 0301 	bic.w	r3, r3, #1
 80051d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80051d4:	4b55      	ldr	r3, [pc, #340]	@ (800532c <HAL_RCC_OscConfig+0x470>)
 80051d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051d8:	4a54      	ldr	r2, [pc, #336]	@ (800532c <HAL_RCC_OscConfig+0x470>)
 80051da:	f023 0304 	bic.w	r3, r3, #4
 80051de:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d015      	beq.n	8005214 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051e8:	f7fd ff7c 	bl	80030e4 <HAL_GetTick>
 80051ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051ee:	e00a      	b.n	8005206 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051f0:	f7fd ff78 	bl	80030e4 <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051fe:	4293      	cmp	r3, r2
 8005200:	d901      	bls.n	8005206 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e0cb      	b.n	800539e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005206:	4b49      	ldr	r3, [pc, #292]	@ (800532c <HAL_RCC_OscConfig+0x470>)
 8005208:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800520a:	f003 0302 	and.w	r3, r3, #2
 800520e:	2b00      	cmp	r3, #0
 8005210:	d0ee      	beq.n	80051f0 <HAL_RCC_OscConfig+0x334>
 8005212:	e014      	b.n	800523e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005214:	f7fd ff66 	bl	80030e4 <HAL_GetTick>
 8005218:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800521a:	e00a      	b.n	8005232 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800521c:	f7fd ff62 	bl	80030e4 <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	f241 3288 	movw	r2, #5000	@ 0x1388
 800522a:	4293      	cmp	r3, r2
 800522c:	d901      	bls.n	8005232 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	e0b5      	b.n	800539e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005232:	4b3e      	ldr	r3, [pc, #248]	@ (800532c <HAL_RCC_OscConfig+0x470>)
 8005234:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005236:	f003 0302 	and.w	r3, r3, #2
 800523a:	2b00      	cmp	r3, #0
 800523c:	d1ee      	bne.n	800521c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800523e:	7dfb      	ldrb	r3, [r7, #23]
 8005240:	2b01      	cmp	r3, #1
 8005242:	d105      	bne.n	8005250 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005244:	4b39      	ldr	r3, [pc, #228]	@ (800532c <HAL_RCC_OscConfig+0x470>)
 8005246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005248:	4a38      	ldr	r2, [pc, #224]	@ (800532c <HAL_RCC_OscConfig+0x470>)
 800524a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800524e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	699b      	ldr	r3, [r3, #24]
 8005254:	2b00      	cmp	r3, #0
 8005256:	f000 80a1 	beq.w	800539c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800525a:	4b34      	ldr	r3, [pc, #208]	@ (800532c <HAL_RCC_OscConfig+0x470>)
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	f003 030c 	and.w	r3, r3, #12
 8005262:	2b08      	cmp	r3, #8
 8005264:	d05c      	beq.n	8005320 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	699b      	ldr	r3, [r3, #24]
 800526a:	2b02      	cmp	r3, #2
 800526c:	d141      	bne.n	80052f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800526e:	4b31      	ldr	r3, [pc, #196]	@ (8005334 <HAL_RCC_OscConfig+0x478>)
 8005270:	2200      	movs	r2, #0
 8005272:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005274:	f7fd ff36 	bl	80030e4 <HAL_GetTick>
 8005278:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800527a:	e008      	b.n	800528e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800527c:	f7fd ff32 	bl	80030e4 <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	2b02      	cmp	r3, #2
 8005288:	d901      	bls.n	800528e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800528a:	2303      	movs	r3, #3
 800528c:	e087      	b.n	800539e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800528e:	4b27      	ldr	r3, [pc, #156]	@ (800532c <HAL_RCC_OscConfig+0x470>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d1f0      	bne.n	800527c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	69da      	ldr	r2, [r3, #28]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a1b      	ldr	r3, [r3, #32]
 80052a2:	431a      	orrs	r2, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a8:	019b      	lsls	r3, r3, #6
 80052aa:	431a      	orrs	r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052b0:	085b      	lsrs	r3, r3, #1
 80052b2:	3b01      	subs	r3, #1
 80052b4:	041b      	lsls	r3, r3, #16
 80052b6:	431a      	orrs	r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052bc:	061b      	lsls	r3, r3, #24
 80052be:	491b      	ldr	r1, [pc, #108]	@ (800532c <HAL_RCC_OscConfig+0x470>)
 80052c0:	4313      	orrs	r3, r2
 80052c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052c4:	4b1b      	ldr	r3, [pc, #108]	@ (8005334 <HAL_RCC_OscConfig+0x478>)
 80052c6:	2201      	movs	r2, #1
 80052c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052ca:	f7fd ff0b 	bl	80030e4 <HAL_GetTick>
 80052ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052d0:	e008      	b.n	80052e4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052d2:	f7fd ff07 	bl	80030e4 <HAL_GetTick>
 80052d6:	4602      	mov	r2, r0
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	2b02      	cmp	r3, #2
 80052de:	d901      	bls.n	80052e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80052e0:	2303      	movs	r3, #3
 80052e2:	e05c      	b.n	800539e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052e4:	4b11      	ldr	r3, [pc, #68]	@ (800532c <HAL_RCC_OscConfig+0x470>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d0f0      	beq.n	80052d2 <HAL_RCC_OscConfig+0x416>
 80052f0:	e054      	b.n	800539c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052f2:	4b10      	ldr	r3, [pc, #64]	@ (8005334 <HAL_RCC_OscConfig+0x478>)
 80052f4:	2200      	movs	r2, #0
 80052f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052f8:	f7fd fef4 	bl	80030e4 <HAL_GetTick>
 80052fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052fe:	e008      	b.n	8005312 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005300:	f7fd fef0 	bl	80030e4 <HAL_GetTick>
 8005304:	4602      	mov	r2, r0
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	2b02      	cmp	r3, #2
 800530c:	d901      	bls.n	8005312 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e045      	b.n	800539e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005312:	4b06      	ldr	r3, [pc, #24]	@ (800532c <HAL_RCC_OscConfig+0x470>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d1f0      	bne.n	8005300 <HAL_RCC_OscConfig+0x444>
 800531e:	e03d      	b.n	800539c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	699b      	ldr	r3, [r3, #24]
 8005324:	2b01      	cmp	r3, #1
 8005326:	d107      	bne.n	8005338 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e038      	b.n	800539e <HAL_RCC_OscConfig+0x4e2>
 800532c:	40023800 	.word	0x40023800
 8005330:	40007000 	.word	0x40007000
 8005334:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005338:	4b1b      	ldr	r3, [pc, #108]	@ (80053a8 <HAL_RCC_OscConfig+0x4ec>)
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	699b      	ldr	r3, [r3, #24]
 8005342:	2b01      	cmp	r3, #1
 8005344:	d028      	beq.n	8005398 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005350:	429a      	cmp	r2, r3
 8005352:	d121      	bne.n	8005398 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800535e:	429a      	cmp	r2, r3
 8005360:	d11a      	bne.n	8005398 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005368:	4013      	ands	r3, r2
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800536e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005370:	4293      	cmp	r3, r2
 8005372:	d111      	bne.n	8005398 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800537e:	085b      	lsrs	r3, r3, #1
 8005380:	3b01      	subs	r3, #1
 8005382:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005384:	429a      	cmp	r2, r3
 8005386:	d107      	bne.n	8005398 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005392:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005394:	429a      	cmp	r2, r3
 8005396:	d001      	beq.n	800539c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	e000      	b.n	800539e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800539c:	2300      	movs	r3, #0
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3718      	adds	r7, #24
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	40023800 	.word	0x40023800

080053ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d101      	bne.n	80053c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e0cc      	b.n	800555a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80053c0:	4b68      	ldr	r3, [pc, #416]	@ (8005564 <HAL_RCC_ClockConfig+0x1b8>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0307 	and.w	r3, r3, #7
 80053c8:	683a      	ldr	r2, [r7, #0]
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d90c      	bls.n	80053e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053ce:	4b65      	ldr	r3, [pc, #404]	@ (8005564 <HAL_RCC_ClockConfig+0x1b8>)
 80053d0:	683a      	ldr	r2, [r7, #0]
 80053d2:	b2d2      	uxtb	r2, r2
 80053d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053d6:	4b63      	ldr	r3, [pc, #396]	@ (8005564 <HAL_RCC_ClockConfig+0x1b8>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 0307 	and.w	r3, r3, #7
 80053de:	683a      	ldr	r2, [r7, #0]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d001      	beq.n	80053e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e0b8      	b.n	800555a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 0302 	and.w	r3, r3, #2
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d020      	beq.n	8005436 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0304 	and.w	r3, r3, #4
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d005      	beq.n	800540c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005400:	4b59      	ldr	r3, [pc, #356]	@ (8005568 <HAL_RCC_ClockConfig+0x1bc>)
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	4a58      	ldr	r2, [pc, #352]	@ (8005568 <HAL_RCC_ClockConfig+0x1bc>)
 8005406:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800540a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0308 	and.w	r3, r3, #8
 8005414:	2b00      	cmp	r3, #0
 8005416:	d005      	beq.n	8005424 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005418:	4b53      	ldr	r3, [pc, #332]	@ (8005568 <HAL_RCC_ClockConfig+0x1bc>)
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	4a52      	ldr	r2, [pc, #328]	@ (8005568 <HAL_RCC_ClockConfig+0x1bc>)
 800541e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005422:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005424:	4b50      	ldr	r3, [pc, #320]	@ (8005568 <HAL_RCC_ClockConfig+0x1bc>)
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	494d      	ldr	r1, [pc, #308]	@ (8005568 <HAL_RCC_ClockConfig+0x1bc>)
 8005432:	4313      	orrs	r3, r2
 8005434:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0301 	and.w	r3, r3, #1
 800543e:	2b00      	cmp	r3, #0
 8005440:	d044      	beq.n	80054cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	2b01      	cmp	r3, #1
 8005448:	d107      	bne.n	800545a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800544a:	4b47      	ldr	r3, [pc, #284]	@ (8005568 <HAL_RCC_ClockConfig+0x1bc>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005452:	2b00      	cmp	r3, #0
 8005454:	d119      	bne.n	800548a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e07f      	b.n	800555a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	2b02      	cmp	r3, #2
 8005460:	d003      	beq.n	800546a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005466:	2b03      	cmp	r3, #3
 8005468:	d107      	bne.n	800547a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800546a:	4b3f      	ldr	r3, [pc, #252]	@ (8005568 <HAL_RCC_ClockConfig+0x1bc>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d109      	bne.n	800548a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e06f      	b.n	800555a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800547a:	4b3b      	ldr	r3, [pc, #236]	@ (8005568 <HAL_RCC_ClockConfig+0x1bc>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0302 	and.w	r3, r3, #2
 8005482:	2b00      	cmp	r3, #0
 8005484:	d101      	bne.n	800548a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e067      	b.n	800555a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800548a:	4b37      	ldr	r3, [pc, #220]	@ (8005568 <HAL_RCC_ClockConfig+0x1bc>)
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	f023 0203 	bic.w	r2, r3, #3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	4934      	ldr	r1, [pc, #208]	@ (8005568 <HAL_RCC_ClockConfig+0x1bc>)
 8005498:	4313      	orrs	r3, r2
 800549a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800549c:	f7fd fe22 	bl	80030e4 <HAL_GetTick>
 80054a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054a2:	e00a      	b.n	80054ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054a4:	f7fd fe1e 	bl	80030e4 <HAL_GetTick>
 80054a8:	4602      	mov	r2, r0
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d901      	bls.n	80054ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	e04f      	b.n	800555a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054ba:	4b2b      	ldr	r3, [pc, #172]	@ (8005568 <HAL_RCC_ClockConfig+0x1bc>)
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	f003 020c 	and.w	r2, r3, #12
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d1eb      	bne.n	80054a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80054cc:	4b25      	ldr	r3, [pc, #148]	@ (8005564 <HAL_RCC_ClockConfig+0x1b8>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 0307 	and.w	r3, r3, #7
 80054d4:	683a      	ldr	r2, [r7, #0]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d20c      	bcs.n	80054f4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054da:	4b22      	ldr	r3, [pc, #136]	@ (8005564 <HAL_RCC_ClockConfig+0x1b8>)
 80054dc:	683a      	ldr	r2, [r7, #0]
 80054de:	b2d2      	uxtb	r2, r2
 80054e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054e2:	4b20      	ldr	r3, [pc, #128]	@ (8005564 <HAL_RCC_ClockConfig+0x1b8>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 0307 	and.w	r3, r3, #7
 80054ea:	683a      	ldr	r2, [r7, #0]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d001      	beq.n	80054f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e032      	b.n	800555a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0304 	and.w	r3, r3, #4
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d008      	beq.n	8005512 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005500:	4b19      	ldr	r3, [pc, #100]	@ (8005568 <HAL_RCC_ClockConfig+0x1bc>)
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	4916      	ldr	r1, [pc, #88]	@ (8005568 <HAL_RCC_ClockConfig+0x1bc>)
 800550e:	4313      	orrs	r3, r2
 8005510:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 0308 	and.w	r3, r3, #8
 800551a:	2b00      	cmp	r3, #0
 800551c:	d009      	beq.n	8005532 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800551e:	4b12      	ldr	r3, [pc, #72]	@ (8005568 <HAL_RCC_ClockConfig+0x1bc>)
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	00db      	lsls	r3, r3, #3
 800552c:	490e      	ldr	r1, [pc, #56]	@ (8005568 <HAL_RCC_ClockConfig+0x1bc>)
 800552e:	4313      	orrs	r3, r2
 8005530:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005532:	f000 f821 	bl	8005578 <HAL_RCC_GetSysClockFreq>
 8005536:	4602      	mov	r2, r0
 8005538:	4b0b      	ldr	r3, [pc, #44]	@ (8005568 <HAL_RCC_ClockConfig+0x1bc>)
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	091b      	lsrs	r3, r3, #4
 800553e:	f003 030f 	and.w	r3, r3, #15
 8005542:	490a      	ldr	r1, [pc, #40]	@ (800556c <HAL_RCC_ClockConfig+0x1c0>)
 8005544:	5ccb      	ldrb	r3, [r1, r3]
 8005546:	fa22 f303 	lsr.w	r3, r2, r3
 800554a:	4a09      	ldr	r2, [pc, #36]	@ (8005570 <HAL_RCC_ClockConfig+0x1c4>)
 800554c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800554e:	4b09      	ldr	r3, [pc, #36]	@ (8005574 <HAL_RCC_ClockConfig+0x1c8>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4618      	mov	r0, r3
 8005554:	f7fd fd82 	bl	800305c <HAL_InitTick>

  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3710      	adds	r7, #16
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	40023c00 	.word	0x40023c00
 8005568:	40023800 	.word	0x40023800
 800556c:	0800ad10 	.word	0x0800ad10
 8005570:	20000024 	.word	0x20000024
 8005574:	20000028 	.word	0x20000028

08005578 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005578:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800557c:	b090      	sub	sp, #64	@ 0x40
 800557e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005580:	2300      	movs	r3, #0
 8005582:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005584:	2300      	movs	r3, #0
 8005586:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005588:	2300      	movs	r3, #0
 800558a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800558c:	2300      	movs	r3, #0
 800558e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005590:	4b59      	ldr	r3, [pc, #356]	@ (80056f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	f003 030c 	and.w	r3, r3, #12
 8005598:	2b08      	cmp	r3, #8
 800559a:	d00d      	beq.n	80055b8 <HAL_RCC_GetSysClockFreq+0x40>
 800559c:	2b08      	cmp	r3, #8
 800559e:	f200 80a1 	bhi.w	80056e4 <HAL_RCC_GetSysClockFreq+0x16c>
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d002      	beq.n	80055ac <HAL_RCC_GetSysClockFreq+0x34>
 80055a6:	2b04      	cmp	r3, #4
 80055a8:	d003      	beq.n	80055b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80055aa:	e09b      	b.n	80056e4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80055ac:	4b53      	ldr	r3, [pc, #332]	@ (80056fc <HAL_RCC_GetSysClockFreq+0x184>)
 80055ae:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80055b0:	e09b      	b.n	80056ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80055b2:	4b53      	ldr	r3, [pc, #332]	@ (8005700 <HAL_RCC_GetSysClockFreq+0x188>)
 80055b4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80055b6:	e098      	b.n	80056ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80055b8:	4b4f      	ldr	r3, [pc, #316]	@ (80056f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80055c0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80055c2:	4b4d      	ldr	r3, [pc, #308]	@ (80056f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d028      	beq.n	8005620 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055ce:	4b4a      	ldr	r3, [pc, #296]	@ (80056f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	099b      	lsrs	r3, r3, #6
 80055d4:	2200      	movs	r2, #0
 80055d6:	623b      	str	r3, [r7, #32]
 80055d8:	627a      	str	r2, [r7, #36]	@ 0x24
 80055da:	6a3b      	ldr	r3, [r7, #32]
 80055dc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80055e0:	2100      	movs	r1, #0
 80055e2:	4b47      	ldr	r3, [pc, #284]	@ (8005700 <HAL_RCC_GetSysClockFreq+0x188>)
 80055e4:	fb03 f201 	mul.w	r2, r3, r1
 80055e8:	2300      	movs	r3, #0
 80055ea:	fb00 f303 	mul.w	r3, r0, r3
 80055ee:	4413      	add	r3, r2
 80055f0:	4a43      	ldr	r2, [pc, #268]	@ (8005700 <HAL_RCC_GetSysClockFreq+0x188>)
 80055f2:	fba0 1202 	umull	r1, r2, r0, r2
 80055f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80055f8:	460a      	mov	r2, r1
 80055fa:	62ba      	str	r2, [r7, #40]	@ 0x28
 80055fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055fe:	4413      	add	r3, r2
 8005600:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005602:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005604:	2200      	movs	r2, #0
 8005606:	61bb      	str	r3, [r7, #24]
 8005608:	61fa      	str	r2, [r7, #28]
 800560a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800560e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005612:	f7fb fb11 	bl	8000c38 <__aeabi_uldivmod>
 8005616:	4602      	mov	r2, r0
 8005618:	460b      	mov	r3, r1
 800561a:	4613      	mov	r3, r2
 800561c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800561e:	e053      	b.n	80056c8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005620:	4b35      	ldr	r3, [pc, #212]	@ (80056f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	099b      	lsrs	r3, r3, #6
 8005626:	2200      	movs	r2, #0
 8005628:	613b      	str	r3, [r7, #16]
 800562a:	617a      	str	r2, [r7, #20]
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005632:	f04f 0b00 	mov.w	fp, #0
 8005636:	4652      	mov	r2, sl
 8005638:	465b      	mov	r3, fp
 800563a:	f04f 0000 	mov.w	r0, #0
 800563e:	f04f 0100 	mov.w	r1, #0
 8005642:	0159      	lsls	r1, r3, #5
 8005644:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005648:	0150      	lsls	r0, r2, #5
 800564a:	4602      	mov	r2, r0
 800564c:	460b      	mov	r3, r1
 800564e:	ebb2 080a 	subs.w	r8, r2, sl
 8005652:	eb63 090b 	sbc.w	r9, r3, fp
 8005656:	f04f 0200 	mov.w	r2, #0
 800565a:	f04f 0300 	mov.w	r3, #0
 800565e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005662:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005666:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800566a:	ebb2 0408 	subs.w	r4, r2, r8
 800566e:	eb63 0509 	sbc.w	r5, r3, r9
 8005672:	f04f 0200 	mov.w	r2, #0
 8005676:	f04f 0300 	mov.w	r3, #0
 800567a:	00eb      	lsls	r3, r5, #3
 800567c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005680:	00e2      	lsls	r2, r4, #3
 8005682:	4614      	mov	r4, r2
 8005684:	461d      	mov	r5, r3
 8005686:	eb14 030a 	adds.w	r3, r4, sl
 800568a:	603b      	str	r3, [r7, #0]
 800568c:	eb45 030b 	adc.w	r3, r5, fp
 8005690:	607b      	str	r3, [r7, #4]
 8005692:	f04f 0200 	mov.w	r2, #0
 8005696:	f04f 0300 	mov.w	r3, #0
 800569a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800569e:	4629      	mov	r1, r5
 80056a0:	028b      	lsls	r3, r1, #10
 80056a2:	4621      	mov	r1, r4
 80056a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80056a8:	4621      	mov	r1, r4
 80056aa:	028a      	lsls	r2, r1, #10
 80056ac:	4610      	mov	r0, r2
 80056ae:	4619      	mov	r1, r3
 80056b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056b2:	2200      	movs	r2, #0
 80056b4:	60bb      	str	r3, [r7, #8]
 80056b6:	60fa      	str	r2, [r7, #12]
 80056b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80056bc:	f7fb fabc 	bl	8000c38 <__aeabi_uldivmod>
 80056c0:	4602      	mov	r2, r0
 80056c2:	460b      	mov	r3, r1
 80056c4:	4613      	mov	r3, r2
 80056c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80056c8:	4b0b      	ldr	r3, [pc, #44]	@ (80056f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	0c1b      	lsrs	r3, r3, #16
 80056ce:	f003 0303 	and.w	r3, r3, #3
 80056d2:	3301      	adds	r3, #1
 80056d4:	005b      	lsls	r3, r3, #1
 80056d6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80056d8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80056da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80056e0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80056e2:	e002      	b.n	80056ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80056e4:	4b05      	ldr	r3, [pc, #20]	@ (80056fc <HAL_RCC_GetSysClockFreq+0x184>)
 80056e6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80056e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3740      	adds	r7, #64	@ 0x40
 80056f0:	46bd      	mov	sp, r7
 80056f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056f6:	bf00      	nop
 80056f8:	40023800 	.word	0x40023800
 80056fc:	00f42400 	.word	0x00f42400
 8005700:	017d7840 	.word	0x017d7840

08005704 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005704:	b480      	push	{r7}
 8005706:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005708:	4b03      	ldr	r3, [pc, #12]	@ (8005718 <HAL_RCC_GetHCLKFreq+0x14>)
 800570a:	681b      	ldr	r3, [r3, #0]
}
 800570c:	4618      	mov	r0, r3
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	20000024 	.word	0x20000024

0800571c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005720:	f7ff fff0 	bl	8005704 <HAL_RCC_GetHCLKFreq>
 8005724:	4602      	mov	r2, r0
 8005726:	4b05      	ldr	r3, [pc, #20]	@ (800573c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	0a9b      	lsrs	r3, r3, #10
 800572c:	f003 0307 	and.w	r3, r3, #7
 8005730:	4903      	ldr	r1, [pc, #12]	@ (8005740 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005732:	5ccb      	ldrb	r3, [r1, r3]
 8005734:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005738:	4618      	mov	r0, r3
 800573a:	bd80      	pop	{r7, pc}
 800573c:	40023800 	.word	0x40023800
 8005740:	0800ad20 	.word	0x0800ad20

08005744 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005748:	f7ff ffdc 	bl	8005704 <HAL_RCC_GetHCLKFreq>
 800574c:	4602      	mov	r2, r0
 800574e:	4b05      	ldr	r3, [pc, #20]	@ (8005764 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	0b5b      	lsrs	r3, r3, #13
 8005754:	f003 0307 	and.w	r3, r3, #7
 8005758:	4903      	ldr	r1, [pc, #12]	@ (8005768 <HAL_RCC_GetPCLK2Freq+0x24>)
 800575a:	5ccb      	ldrb	r3, [r1, r3]
 800575c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005760:	4618      	mov	r0, r3
 8005762:	bd80      	pop	{r7, pc}
 8005764:	40023800 	.word	0x40023800
 8005768:	0800ad20 	.word	0x0800ad20

0800576c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b082      	sub	sp, #8
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d101      	bne.n	800577e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e041      	b.n	8005802 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005784:	b2db      	uxtb	r3, r3
 8005786:	2b00      	cmp	r3, #0
 8005788:	d106      	bne.n	8005798 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f7fd f942 	bl	8002a1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2202      	movs	r2, #2
 800579c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	3304      	adds	r3, #4
 80057a8:	4619      	mov	r1, r3
 80057aa:	4610      	mov	r0, r2
 80057ac:	f000 fac0 	bl	8005d30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	3708      	adds	r7, #8
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}

0800580a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800580a:	b580      	push	{r7, lr}
 800580c:	b082      	sub	sp, #8
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d101      	bne.n	800581c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	e041      	b.n	80058a0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005822:	b2db      	uxtb	r3, r3
 8005824:	2b00      	cmp	r3, #0
 8005826:	d106      	bne.n	8005836 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 f839 	bl	80058a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2202      	movs	r2, #2
 800583a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	3304      	adds	r3, #4
 8005846:	4619      	mov	r1, r3
 8005848:	4610      	mov	r0, r2
 800584a:	f000 fa71 	bl	8005d30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2201      	movs	r2, #1
 8005852:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2201      	movs	r2, #1
 800585a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2201      	movs	r2, #1
 8005862:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2201      	movs	r2, #1
 800586a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2201      	movs	r2, #1
 8005872:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2201      	movs	r2, #1
 800587a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2201      	movs	r2, #1
 8005882:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2201      	movs	r2, #1
 800588a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2201      	movs	r2, #1
 8005892:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2201      	movs	r2, #1
 800589a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3708      	adds	r7, #8
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80058b0:	bf00      	nop
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d109      	bne.n	80058e0 <HAL_TIM_PWM_Start+0x24>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	bf14      	ite	ne
 80058d8:	2301      	movne	r3, #1
 80058da:	2300      	moveq	r3, #0
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	e022      	b.n	8005926 <HAL_TIM_PWM_Start+0x6a>
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	2b04      	cmp	r3, #4
 80058e4:	d109      	bne.n	80058fa <HAL_TIM_PWM_Start+0x3e>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	bf14      	ite	ne
 80058f2:	2301      	movne	r3, #1
 80058f4:	2300      	moveq	r3, #0
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	e015      	b.n	8005926 <HAL_TIM_PWM_Start+0x6a>
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	2b08      	cmp	r3, #8
 80058fe:	d109      	bne.n	8005914 <HAL_TIM_PWM_Start+0x58>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005906:	b2db      	uxtb	r3, r3
 8005908:	2b01      	cmp	r3, #1
 800590a:	bf14      	ite	ne
 800590c:	2301      	movne	r3, #1
 800590e:	2300      	moveq	r3, #0
 8005910:	b2db      	uxtb	r3, r3
 8005912:	e008      	b.n	8005926 <HAL_TIM_PWM_Start+0x6a>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800591a:	b2db      	uxtb	r3, r3
 800591c:	2b01      	cmp	r3, #1
 800591e:	bf14      	ite	ne
 8005920:	2301      	movne	r3, #1
 8005922:	2300      	moveq	r3, #0
 8005924:	b2db      	uxtb	r3, r3
 8005926:	2b00      	cmp	r3, #0
 8005928:	d001      	beq.n	800592e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e068      	b.n	8005a00 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d104      	bne.n	800593e <HAL_TIM_PWM_Start+0x82>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2202      	movs	r2, #2
 8005938:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800593c:	e013      	b.n	8005966 <HAL_TIM_PWM_Start+0xaa>
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	2b04      	cmp	r3, #4
 8005942:	d104      	bne.n	800594e <HAL_TIM_PWM_Start+0x92>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2202      	movs	r2, #2
 8005948:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800594c:	e00b      	b.n	8005966 <HAL_TIM_PWM_Start+0xaa>
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	2b08      	cmp	r3, #8
 8005952:	d104      	bne.n	800595e <HAL_TIM_PWM_Start+0xa2>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2202      	movs	r2, #2
 8005958:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800595c:	e003      	b.n	8005966 <HAL_TIM_PWM_Start+0xaa>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2202      	movs	r2, #2
 8005962:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	2201      	movs	r2, #1
 800596c:	6839      	ldr	r1, [r7, #0]
 800596e:	4618      	mov	r0, r3
 8005970:	f000 fc8a 	bl	8006288 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a23      	ldr	r2, [pc, #140]	@ (8005a08 <HAL_TIM_PWM_Start+0x14c>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d107      	bne.n	800598e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800598c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a1d      	ldr	r2, [pc, #116]	@ (8005a08 <HAL_TIM_PWM_Start+0x14c>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d018      	beq.n	80059ca <HAL_TIM_PWM_Start+0x10e>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059a0:	d013      	beq.n	80059ca <HAL_TIM_PWM_Start+0x10e>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a19      	ldr	r2, [pc, #100]	@ (8005a0c <HAL_TIM_PWM_Start+0x150>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d00e      	beq.n	80059ca <HAL_TIM_PWM_Start+0x10e>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a17      	ldr	r2, [pc, #92]	@ (8005a10 <HAL_TIM_PWM_Start+0x154>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d009      	beq.n	80059ca <HAL_TIM_PWM_Start+0x10e>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a16      	ldr	r2, [pc, #88]	@ (8005a14 <HAL_TIM_PWM_Start+0x158>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d004      	beq.n	80059ca <HAL_TIM_PWM_Start+0x10e>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a14      	ldr	r2, [pc, #80]	@ (8005a18 <HAL_TIM_PWM_Start+0x15c>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d111      	bne.n	80059ee <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	f003 0307 	and.w	r3, r3, #7
 80059d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2b06      	cmp	r3, #6
 80059da:	d010      	beq.n	80059fe <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f042 0201 	orr.w	r2, r2, #1
 80059ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059ec:	e007      	b.n	80059fe <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f042 0201 	orr.w	r2, r2, #1
 80059fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3710      	adds	r7, #16
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	40010000 	.word	0x40010000
 8005a0c:	40000400 	.word	0x40000400
 8005a10:	40000800 	.word	0x40000800
 8005a14:	40000c00 	.word	0x40000c00
 8005a18:	40014000 	.word	0x40014000

08005a1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b086      	sub	sp, #24
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	60b9      	str	r1, [r7, #8]
 8005a26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d101      	bne.n	8005a3a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005a36:	2302      	movs	r3, #2
 8005a38:	e0ae      	b.n	8005b98 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2b0c      	cmp	r3, #12
 8005a46:	f200 809f 	bhi.w	8005b88 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005a4a:	a201      	add	r2, pc, #4	@ (adr r2, 8005a50 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a50:	08005a85 	.word	0x08005a85
 8005a54:	08005b89 	.word	0x08005b89
 8005a58:	08005b89 	.word	0x08005b89
 8005a5c:	08005b89 	.word	0x08005b89
 8005a60:	08005ac5 	.word	0x08005ac5
 8005a64:	08005b89 	.word	0x08005b89
 8005a68:	08005b89 	.word	0x08005b89
 8005a6c:	08005b89 	.word	0x08005b89
 8005a70:	08005b07 	.word	0x08005b07
 8005a74:	08005b89 	.word	0x08005b89
 8005a78:	08005b89 	.word	0x08005b89
 8005a7c:	08005b89 	.word	0x08005b89
 8005a80:	08005b47 	.word	0x08005b47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	68b9      	ldr	r1, [r7, #8]
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f000 f9d6 	bl	8005e3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	699a      	ldr	r2, [r3, #24]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f042 0208 	orr.w	r2, r2, #8
 8005a9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	699a      	ldr	r2, [r3, #24]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f022 0204 	bic.w	r2, r2, #4
 8005aae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	6999      	ldr	r1, [r3, #24]
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	691a      	ldr	r2, [r3, #16]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	430a      	orrs	r2, r1
 8005ac0:	619a      	str	r2, [r3, #24]
      break;
 8005ac2:	e064      	b.n	8005b8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	68b9      	ldr	r1, [r7, #8]
 8005aca:	4618      	mov	r0, r3
 8005acc:	f000 fa1c 	bl	8005f08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	699a      	ldr	r2, [r3, #24]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ade:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	699a      	ldr	r2, [r3, #24]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005aee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	6999      	ldr	r1, [r3, #24]
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	021a      	lsls	r2, r3, #8
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	430a      	orrs	r2, r1
 8005b02:	619a      	str	r2, [r3, #24]
      break;
 8005b04:	e043      	b.n	8005b8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	68b9      	ldr	r1, [r7, #8]
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f000 fa67 	bl	8005fe0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	69da      	ldr	r2, [r3, #28]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f042 0208 	orr.w	r2, r2, #8
 8005b20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	69da      	ldr	r2, [r3, #28]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f022 0204 	bic.w	r2, r2, #4
 8005b30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	69d9      	ldr	r1, [r3, #28]
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	691a      	ldr	r2, [r3, #16]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	430a      	orrs	r2, r1
 8005b42:	61da      	str	r2, [r3, #28]
      break;
 8005b44:	e023      	b.n	8005b8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	68b9      	ldr	r1, [r7, #8]
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f000 fab1 	bl	80060b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	69da      	ldr	r2, [r3, #28]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	69da      	ldr	r2, [r3, #28]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	69d9      	ldr	r1, [r3, #28]
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	691b      	ldr	r3, [r3, #16]
 8005b7c:	021a      	lsls	r2, r3, #8
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	430a      	orrs	r2, r1
 8005b84:	61da      	str	r2, [r3, #28]
      break;
 8005b86:	e002      	b.n	8005b8e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	75fb      	strb	r3, [r7, #23]
      break;
 8005b8c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005b96:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3718      	adds	r7, #24
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005baa:	2300      	movs	r3, #0
 8005bac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d101      	bne.n	8005bbc <HAL_TIM_ConfigClockSource+0x1c>
 8005bb8:	2302      	movs	r3, #2
 8005bba:	e0b4      	b.n	8005d26 <HAL_TIM_ConfigClockSource+0x186>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2202      	movs	r2, #2
 8005bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005bda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005be2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68ba      	ldr	r2, [r7, #8]
 8005bea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bf4:	d03e      	beq.n	8005c74 <HAL_TIM_ConfigClockSource+0xd4>
 8005bf6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bfa:	f200 8087 	bhi.w	8005d0c <HAL_TIM_ConfigClockSource+0x16c>
 8005bfe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c02:	f000 8086 	beq.w	8005d12 <HAL_TIM_ConfigClockSource+0x172>
 8005c06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c0a:	d87f      	bhi.n	8005d0c <HAL_TIM_ConfigClockSource+0x16c>
 8005c0c:	2b70      	cmp	r3, #112	@ 0x70
 8005c0e:	d01a      	beq.n	8005c46 <HAL_TIM_ConfigClockSource+0xa6>
 8005c10:	2b70      	cmp	r3, #112	@ 0x70
 8005c12:	d87b      	bhi.n	8005d0c <HAL_TIM_ConfigClockSource+0x16c>
 8005c14:	2b60      	cmp	r3, #96	@ 0x60
 8005c16:	d050      	beq.n	8005cba <HAL_TIM_ConfigClockSource+0x11a>
 8005c18:	2b60      	cmp	r3, #96	@ 0x60
 8005c1a:	d877      	bhi.n	8005d0c <HAL_TIM_ConfigClockSource+0x16c>
 8005c1c:	2b50      	cmp	r3, #80	@ 0x50
 8005c1e:	d03c      	beq.n	8005c9a <HAL_TIM_ConfigClockSource+0xfa>
 8005c20:	2b50      	cmp	r3, #80	@ 0x50
 8005c22:	d873      	bhi.n	8005d0c <HAL_TIM_ConfigClockSource+0x16c>
 8005c24:	2b40      	cmp	r3, #64	@ 0x40
 8005c26:	d058      	beq.n	8005cda <HAL_TIM_ConfigClockSource+0x13a>
 8005c28:	2b40      	cmp	r3, #64	@ 0x40
 8005c2a:	d86f      	bhi.n	8005d0c <HAL_TIM_ConfigClockSource+0x16c>
 8005c2c:	2b30      	cmp	r3, #48	@ 0x30
 8005c2e:	d064      	beq.n	8005cfa <HAL_TIM_ConfigClockSource+0x15a>
 8005c30:	2b30      	cmp	r3, #48	@ 0x30
 8005c32:	d86b      	bhi.n	8005d0c <HAL_TIM_ConfigClockSource+0x16c>
 8005c34:	2b20      	cmp	r3, #32
 8005c36:	d060      	beq.n	8005cfa <HAL_TIM_ConfigClockSource+0x15a>
 8005c38:	2b20      	cmp	r3, #32
 8005c3a:	d867      	bhi.n	8005d0c <HAL_TIM_ConfigClockSource+0x16c>
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d05c      	beq.n	8005cfa <HAL_TIM_ConfigClockSource+0x15a>
 8005c40:	2b10      	cmp	r3, #16
 8005c42:	d05a      	beq.n	8005cfa <HAL_TIM_ConfigClockSource+0x15a>
 8005c44:	e062      	b.n	8005d0c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c56:	f000 faf7 	bl	8006248 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005c68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68ba      	ldr	r2, [r7, #8]
 8005c70:	609a      	str	r2, [r3, #8]
      break;
 8005c72:	e04f      	b.n	8005d14 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c84:	f000 fae0 	bl	8006248 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	689a      	ldr	r2, [r3, #8]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005c96:	609a      	str	r2, [r3, #8]
      break;
 8005c98:	e03c      	b.n	8005d14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	f000 fa54 	bl	8006154 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2150      	movs	r1, #80	@ 0x50
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f000 faad 	bl	8006212 <TIM_ITRx_SetConfig>
      break;
 8005cb8:	e02c      	b.n	8005d14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	f000 fa73 	bl	80061b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2160      	movs	r1, #96	@ 0x60
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f000 fa9d 	bl	8006212 <TIM_ITRx_SetConfig>
      break;
 8005cd8:	e01c      	b.n	8005d14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	f000 fa34 	bl	8006154 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2140      	movs	r1, #64	@ 0x40
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f000 fa8d 	bl	8006212 <TIM_ITRx_SetConfig>
      break;
 8005cf8:	e00c      	b.n	8005d14 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4619      	mov	r1, r3
 8005d04:	4610      	mov	r0, r2
 8005d06:	f000 fa84 	bl	8006212 <TIM_ITRx_SetConfig>
      break;
 8005d0a:	e003      	b.n	8005d14 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	73fb      	strb	r3, [r7, #15]
      break;
 8005d10:	e000      	b.n	8005d14 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005d12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3710      	adds	r7, #16
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
	...

08005d30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b085      	sub	sp, #20
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a37      	ldr	r2, [pc, #220]	@ (8005e20 <TIM_Base_SetConfig+0xf0>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d00f      	beq.n	8005d68 <TIM_Base_SetConfig+0x38>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d4e:	d00b      	beq.n	8005d68 <TIM_Base_SetConfig+0x38>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4a34      	ldr	r2, [pc, #208]	@ (8005e24 <TIM_Base_SetConfig+0xf4>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d007      	beq.n	8005d68 <TIM_Base_SetConfig+0x38>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4a33      	ldr	r2, [pc, #204]	@ (8005e28 <TIM_Base_SetConfig+0xf8>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d003      	beq.n	8005d68 <TIM_Base_SetConfig+0x38>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a32      	ldr	r2, [pc, #200]	@ (8005e2c <TIM_Base_SetConfig+0xfc>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d108      	bne.n	8005d7a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	68fa      	ldr	r2, [r7, #12]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4a28      	ldr	r2, [pc, #160]	@ (8005e20 <TIM_Base_SetConfig+0xf0>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d01b      	beq.n	8005dba <TIM_Base_SetConfig+0x8a>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d88:	d017      	beq.n	8005dba <TIM_Base_SetConfig+0x8a>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a25      	ldr	r2, [pc, #148]	@ (8005e24 <TIM_Base_SetConfig+0xf4>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d013      	beq.n	8005dba <TIM_Base_SetConfig+0x8a>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a24      	ldr	r2, [pc, #144]	@ (8005e28 <TIM_Base_SetConfig+0xf8>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d00f      	beq.n	8005dba <TIM_Base_SetConfig+0x8a>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a23      	ldr	r2, [pc, #140]	@ (8005e2c <TIM_Base_SetConfig+0xfc>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d00b      	beq.n	8005dba <TIM_Base_SetConfig+0x8a>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a22      	ldr	r2, [pc, #136]	@ (8005e30 <TIM_Base_SetConfig+0x100>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d007      	beq.n	8005dba <TIM_Base_SetConfig+0x8a>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a21      	ldr	r2, [pc, #132]	@ (8005e34 <TIM_Base_SetConfig+0x104>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d003      	beq.n	8005dba <TIM_Base_SetConfig+0x8a>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a20      	ldr	r2, [pc, #128]	@ (8005e38 <TIM_Base_SetConfig+0x108>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d108      	bne.n	8005dcc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005dc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	695b      	ldr	r3, [r3, #20]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	689a      	ldr	r2, [r3, #8]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a0c      	ldr	r2, [pc, #48]	@ (8005e20 <TIM_Base_SetConfig+0xf0>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d103      	bne.n	8005dfa <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	691a      	ldr	r2, [r3, #16]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f043 0204 	orr.w	r2, r3, #4
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	68fa      	ldr	r2, [r7, #12]
 8005e10:	601a      	str	r2, [r3, #0]
}
 8005e12:	bf00      	nop
 8005e14:	3714      	adds	r7, #20
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop
 8005e20:	40010000 	.word	0x40010000
 8005e24:	40000400 	.word	0x40000400
 8005e28:	40000800 	.word	0x40000800
 8005e2c:	40000c00 	.word	0x40000c00
 8005e30:	40014000 	.word	0x40014000
 8005e34:	40014400 	.word	0x40014400
 8005e38:	40014800 	.word	0x40014800

08005e3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b087      	sub	sp, #28
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a1b      	ldr	r3, [r3, #32]
 8005e4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a1b      	ldr	r3, [r3, #32]
 8005e50:	f023 0201 	bic.w	r2, r3, #1
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	699b      	ldr	r3, [r3, #24]
 8005e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f023 0303 	bic.w	r3, r3, #3
 8005e72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	68fa      	ldr	r2, [r7, #12]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	f023 0302 	bic.w	r3, r3, #2
 8005e84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	697a      	ldr	r2, [r7, #20]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	4a1c      	ldr	r2, [pc, #112]	@ (8005f04 <TIM_OC1_SetConfig+0xc8>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d10c      	bne.n	8005eb2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	f023 0308 	bic.w	r3, r3, #8
 8005e9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	697a      	ldr	r2, [r7, #20]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	f023 0304 	bic.w	r3, r3, #4
 8005eb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4a13      	ldr	r2, [pc, #76]	@ (8005f04 <TIM_OC1_SetConfig+0xc8>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d111      	bne.n	8005ede <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ec0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005ec8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	695b      	ldr	r3, [r3, #20]
 8005ece:	693a      	ldr	r2, [r7, #16]
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	699b      	ldr	r3, [r3, #24]
 8005ed8:	693a      	ldr	r2, [r7, #16]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	693a      	ldr	r2, [r7, #16]
 8005ee2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	685a      	ldr	r2, [r3, #4]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	697a      	ldr	r2, [r7, #20]
 8005ef6:	621a      	str	r2, [r3, #32]
}
 8005ef8:	bf00      	nop
 8005efa:	371c      	adds	r7, #28
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr
 8005f04:	40010000 	.word	0x40010000

08005f08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b087      	sub	sp, #28
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a1b      	ldr	r3, [r3, #32]
 8005f16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6a1b      	ldr	r3, [r3, #32]
 8005f1c:	f023 0210 	bic.w	r2, r3, #16
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	699b      	ldr	r3, [r3, #24]
 8005f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	021b      	lsls	r3, r3, #8
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	f023 0320 	bic.w	r3, r3, #32
 8005f52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	011b      	lsls	r3, r3, #4
 8005f5a:	697a      	ldr	r2, [r7, #20]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4a1e      	ldr	r2, [pc, #120]	@ (8005fdc <TIM_OC2_SetConfig+0xd4>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d10d      	bne.n	8005f84 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	011b      	lsls	r3, r3, #4
 8005f76:	697a      	ldr	r2, [r7, #20]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f82:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	4a15      	ldr	r2, [pc, #84]	@ (8005fdc <TIM_OC2_SetConfig+0xd4>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d113      	bne.n	8005fb4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005f92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005f9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	695b      	ldr	r3, [r3, #20]
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	693a      	ldr	r2, [r7, #16]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	699b      	ldr	r3, [r3, #24]
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	693a      	ldr	r2, [r7, #16]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	693a      	ldr	r2, [r7, #16]
 8005fb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	68fa      	ldr	r2, [r7, #12]
 8005fbe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	685a      	ldr	r2, [r3, #4]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	697a      	ldr	r2, [r7, #20]
 8005fcc:	621a      	str	r2, [r3, #32]
}
 8005fce:	bf00      	nop
 8005fd0:	371c      	adds	r7, #28
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr
 8005fda:	bf00      	nop
 8005fdc:	40010000 	.word	0x40010000

08005fe0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b087      	sub	sp, #28
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a1b      	ldr	r3, [r3, #32]
 8005fee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6a1b      	ldr	r3, [r3, #32]
 8005ff4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	69db      	ldr	r3, [r3, #28]
 8006006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800600e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f023 0303 	bic.w	r3, r3, #3
 8006016:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	4313      	orrs	r3, r2
 8006020:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006028:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	021b      	lsls	r3, r3, #8
 8006030:	697a      	ldr	r2, [r7, #20]
 8006032:	4313      	orrs	r3, r2
 8006034:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a1d      	ldr	r2, [pc, #116]	@ (80060b0 <TIM_OC3_SetConfig+0xd0>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d10d      	bne.n	800605a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006044:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	021b      	lsls	r3, r3, #8
 800604c:	697a      	ldr	r2, [r7, #20]
 800604e:	4313      	orrs	r3, r2
 8006050:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006058:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a14      	ldr	r2, [pc, #80]	@ (80060b0 <TIM_OC3_SetConfig+0xd0>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d113      	bne.n	800608a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006068:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006070:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	695b      	ldr	r3, [r3, #20]
 8006076:	011b      	lsls	r3, r3, #4
 8006078:	693a      	ldr	r2, [r7, #16]
 800607a:	4313      	orrs	r3, r2
 800607c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	699b      	ldr	r3, [r3, #24]
 8006082:	011b      	lsls	r3, r3, #4
 8006084:	693a      	ldr	r2, [r7, #16]
 8006086:	4313      	orrs	r3, r2
 8006088:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	693a      	ldr	r2, [r7, #16]
 800608e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	68fa      	ldr	r2, [r7, #12]
 8006094:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	685a      	ldr	r2, [r3, #4]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	697a      	ldr	r2, [r7, #20]
 80060a2:	621a      	str	r2, [r3, #32]
}
 80060a4:	bf00      	nop
 80060a6:	371c      	adds	r7, #28
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr
 80060b0:	40010000 	.word	0x40010000

080060b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b087      	sub	sp, #28
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6a1b      	ldr	r3, [r3, #32]
 80060c8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	69db      	ldr	r3, [r3, #28]
 80060da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	021b      	lsls	r3, r3, #8
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	4313      	orrs	r3, r2
 80060f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80060fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	031b      	lsls	r3, r3, #12
 8006106:	693a      	ldr	r2, [r7, #16]
 8006108:	4313      	orrs	r3, r2
 800610a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4a10      	ldr	r2, [pc, #64]	@ (8006150 <TIM_OC4_SetConfig+0x9c>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d109      	bne.n	8006128 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800611a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	695b      	ldr	r3, [r3, #20]
 8006120:	019b      	lsls	r3, r3, #6
 8006122:	697a      	ldr	r2, [r7, #20]
 8006124:	4313      	orrs	r3, r2
 8006126:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	697a      	ldr	r2, [r7, #20]
 800612c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	68fa      	ldr	r2, [r7, #12]
 8006132:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	685a      	ldr	r2, [r3, #4]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	693a      	ldr	r2, [r7, #16]
 8006140:	621a      	str	r2, [r3, #32]
}
 8006142:	bf00      	nop
 8006144:	371c      	adds	r7, #28
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop
 8006150:	40010000 	.word	0x40010000

08006154 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006154:	b480      	push	{r7}
 8006156:	b087      	sub	sp, #28
 8006158:	af00      	add	r7, sp, #0
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6a1b      	ldr	r3, [r3, #32]
 8006164:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6a1b      	ldr	r3, [r3, #32]
 800616a:	f023 0201 	bic.w	r2, r3, #1
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	699b      	ldr	r3, [r3, #24]
 8006176:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800617e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	011b      	lsls	r3, r3, #4
 8006184:	693a      	ldr	r2, [r7, #16]
 8006186:	4313      	orrs	r3, r2
 8006188:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	f023 030a 	bic.w	r3, r3, #10
 8006190:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006192:	697a      	ldr	r2, [r7, #20]
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	4313      	orrs	r3, r2
 8006198:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	693a      	ldr	r2, [r7, #16]
 800619e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	697a      	ldr	r2, [r7, #20]
 80061a4:	621a      	str	r2, [r3, #32]
}
 80061a6:	bf00      	nop
 80061a8:	371c      	adds	r7, #28
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr

080061b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061b2:	b480      	push	{r7}
 80061b4:	b087      	sub	sp, #28
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	60f8      	str	r0, [r7, #12]
 80061ba:	60b9      	str	r1, [r7, #8]
 80061bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	6a1b      	ldr	r3, [r3, #32]
 80061c2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6a1b      	ldr	r3, [r3, #32]
 80061c8:	f023 0210 	bic.w	r2, r3, #16
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	699b      	ldr	r3, [r3, #24]
 80061d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80061dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	031b      	lsls	r3, r3, #12
 80061e2:	693a      	ldr	r2, [r7, #16]
 80061e4:	4313      	orrs	r3, r2
 80061e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80061ee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	011b      	lsls	r3, r3, #4
 80061f4:	697a      	ldr	r2, [r7, #20]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	693a      	ldr	r2, [r7, #16]
 80061fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	697a      	ldr	r2, [r7, #20]
 8006204:	621a      	str	r2, [r3, #32]
}
 8006206:	bf00      	nop
 8006208:	371c      	adds	r7, #28
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr

08006212 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006212:	b480      	push	{r7}
 8006214:	b085      	sub	sp, #20
 8006216:	af00      	add	r7, sp, #0
 8006218:	6078      	str	r0, [r7, #4]
 800621a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006228:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800622a:	683a      	ldr	r2, [r7, #0]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	4313      	orrs	r3, r2
 8006230:	f043 0307 	orr.w	r3, r3, #7
 8006234:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	68fa      	ldr	r2, [r7, #12]
 800623a:	609a      	str	r2, [r3, #8]
}
 800623c:	bf00      	nop
 800623e:	3714      	adds	r7, #20
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006248:	b480      	push	{r7}
 800624a:	b087      	sub	sp, #28
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	607a      	str	r2, [r7, #4]
 8006254:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006262:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	021a      	lsls	r2, r3, #8
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	431a      	orrs	r2, r3
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	4313      	orrs	r3, r2
 8006270:	697a      	ldr	r2, [r7, #20]
 8006272:	4313      	orrs	r3, r2
 8006274:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	697a      	ldr	r2, [r7, #20]
 800627a:	609a      	str	r2, [r3, #8]
}
 800627c:	bf00      	nop
 800627e:	371c      	adds	r7, #28
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr

08006288 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006288:	b480      	push	{r7}
 800628a:	b087      	sub	sp, #28
 800628c:	af00      	add	r7, sp, #0
 800628e:	60f8      	str	r0, [r7, #12]
 8006290:	60b9      	str	r1, [r7, #8]
 8006292:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	f003 031f 	and.w	r3, r3, #31
 800629a:	2201      	movs	r2, #1
 800629c:	fa02 f303 	lsl.w	r3, r2, r3
 80062a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6a1a      	ldr	r2, [r3, #32]
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	43db      	mvns	r3, r3
 80062aa:	401a      	ands	r2, r3
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6a1a      	ldr	r2, [r3, #32]
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	f003 031f 	and.w	r3, r3, #31
 80062ba:	6879      	ldr	r1, [r7, #4]
 80062bc:	fa01 f303 	lsl.w	r3, r1, r3
 80062c0:	431a      	orrs	r2, r3
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	621a      	str	r2, [r3, #32]
}
 80062c6:	bf00      	nop
 80062c8:	371c      	adds	r7, #28
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr
	...

080062d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b085      	sub	sp, #20
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d101      	bne.n	80062ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062e8:	2302      	movs	r3, #2
 80062ea:	e050      	b.n	800638e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2202      	movs	r2, #2
 80062f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006312:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	4313      	orrs	r3, r2
 800631c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	68fa      	ldr	r2, [r7, #12]
 8006324:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a1c      	ldr	r2, [pc, #112]	@ (800639c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d018      	beq.n	8006362 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006338:	d013      	beq.n	8006362 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a18      	ldr	r2, [pc, #96]	@ (80063a0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d00e      	beq.n	8006362 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a16      	ldr	r2, [pc, #88]	@ (80063a4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d009      	beq.n	8006362 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a15      	ldr	r2, [pc, #84]	@ (80063a8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d004      	beq.n	8006362 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a13      	ldr	r2, [pc, #76]	@ (80063ac <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d10c      	bne.n	800637c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006368:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	68ba      	ldr	r2, [r7, #8]
 8006370:	4313      	orrs	r3, r2
 8006372:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	68ba      	ldr	r2, [r7, #8]
 800637a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3714      	adds	r7, #20
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr
 800639a:	bf00      	nop
 800639c:	40010000 	.word	0x40010000
 80063a0:	40000400 	.word	0x40000400
 80063a4:	40000800 	.word	0x40000800
 80063a8:	40000c00 	.word	0x40000c00
 80063ac:	40014000 	.word	0x40014000

080063b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b082      	sub	sp, #8
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d101      	bne.n	80063c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	e042      	b.n	8006448 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d106      	bne.n	80063dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f7fc fb9c 	bl	8002b14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2224      	movs	r2, #36	@ 0x24
 80063e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	68da      	ldr	r2, [r3, #12]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80063f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 febd 	bl	8007174 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	691a      	ldr	r2, [r3, #16]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006408:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	695a      	ldr	r2, [r3, #20]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006418:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	68da      	ldr	r2, [r3, #12]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006428:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2220      	movs	r2, #32
 8006434:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2220      	movs	r2, #32
 800643c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006446:	2300      	movs	r3, #0
}
 8006448:	4618      	mov	r0, r3
 800644a:	3708      	adds	r7, #8
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b08c      	sub	sp, #48	@ 0x30
 8006454:	af00      	add	r7, sp, #0
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	4613      	mov	r3, r2
 800645c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006464:	b2db      	uxtb	r3, r3
 8006466:	2b20      	cmp	r3, #32
 8006468:	d146      	bne.n	80064f8 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d002      	beq.n	8006476 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8006470:	88fb      	ldrh	r3, [r7, #6]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d101      	bne.n	800647a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	e03f      	b.n	80064fa <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2201      	movs	r2, #1
 800647e:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2200      	movs	r2, #0
 8006484:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006486:	88fb      	ldrh	r3, [r7, #6]
 8006488:	461a      	mov	r2, r3
 800648a:	68b9      	ldr	r1, [r7, #8]
 800648c:	68f8      	ldr	r0, [r7, #12]
 800648e:	f000 fc09 	bl	8006ca4 <UART_Start_Receive_DMA>
 8006492:	4603      	mov	r3, r0
 8006494:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800649c:	2b01      	cmp	r3, #1
 800649e:	d125      	bne.n	80064ec <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 80064a0:	2300      	movs	r3, #0
 80064a2:	613b      	str	r3, [r7, #16]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	613b      	str	r3, [r7, #16]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	613b      	str	r3, [r7, #16]
 80064b4:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	330c      	adds	r3, #12
 80064bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	e853 3f00 	ldrex	r3, [r3]
 80064c4:	617b      	str	r3, [r7, #20]
   return(result);
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	f043 0310 	orr.w	r3, r3, #16
 80064cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	330c      	adds	r3, #12
 80064d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80064d6:	627a      	str	r2, [r7, #36]	@ 0x24
 80064d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064da:	6a39      	ldr	r1, [r7, #32]
 80064dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064de:	e841 2300 	strex	r3, r2, [r1]
 80064e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d1e5      	bne.n	80064b6 <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 80064ea:	e002      	b.n	80064f2 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 80064f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80064f6:	e000      	b.n	80064fa <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 80064f8:	2302      	movs	r3, #2
  }
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3730      	adds	r7, #48	@ 0x30
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
	...

08006504 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b0ba      	sub	sp, #232	@ 0xe8
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	68db      	ldr	r3, [r3, #12]
 800651c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	695b      	ldr	r3, [r3, #20]
 8006526:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800652a:	2300      	movs	r3, #0
 800652c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006530:	2300      	movs	r3, #0
 8006532:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800653a:	f003 030f 	and.w	r3, r3, #15
 800653e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006542:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006546:	2b00      	cmp	r3, #0
 8006548:	d10f      	bne.n	800656a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800654a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800654e:	f003 0320 	and.w	r3, r3, #32
 8006552:	2b00      	cmp	r3, #0
 8006554:	d009      	beq.n	800656a <HAL_UART_IRQHandler+0x66>
 8006556:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800655a:	f003 0320 	and.w	r3, r3, #32
 800655e:	2b00      	cmp	r3, #0
 8006560:	d003      	beq.n	800656a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 fd48 	bl	8006ff8 <UART_Receive_IT>
      return;
 8006568:	e273      	b.n	8006a52 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800656a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800656e:	2b00      	cmp	r3, #0
 8006570:	f000 80de 	beq.w	8006730 <HAL_UART_IRQHandler+0x22c>
 8006574:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006578:	f003 0301 	and.w	r3, r3, #1
 800657c:	2b00      	cmp	r3, #0
 800657e:	d106      	bne.n	800658e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006580:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006584:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006588:	2b00      	cmp	r3, #0
 800658a:	f000 80d1 	beq.w	8006730 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800658e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006592:	f003 0301 	and.w	r3, r3, #1
 8006596:	2b00      	cmp	r3, #0
 8006598:	d00b      	beq.n	80065b2 <HAL_UART_IRQHandler+0xae>
 800659a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800659e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d005      	beq.n	80065b2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065aa:	f043 0201 	orr.w	r2, r3, #1
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80065b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065b6:	f003 0304 	and.w	r3, r3, #4
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00b      	beq.n	80065d6 <HAL_UART_IRQHandler+0xd2>
 80065be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065c2:	f003 0301 	and.w	r3, r3, #1
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d005      	beq.n	80065d6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065ce:	f043 0202 	orr.w	r2, r3, #2
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80065d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065da:	f003 0302 	and.w	r3, r3, #2
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d00b      	beq.n	80065fa <HAL_UART_IRQHandler+0xf6>
 80065e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065e6:	f003 0301 	and.w	r3, r3, #1
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d005      	beq.n	80065fa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065f2:	f043 0204 	orr.w	r2, r3, #4
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80065fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065fe:	f003 0308 	and.w	r3, r3, #8
 8006602:	2b00      	cmp	r3, #0
 8006604:	d011      	beq.n	800662a <HAL_UART_IRQHandler+0x126>
 8006606:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800660a:	f003 0320 	and.w	r3, r3, #32
 800660e:	2b00      	cmp	r3, #0
 8006610:	d105      	bne.n	800661e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006612:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006616:	f003 0301 	and.w	r3, r3, #1
 800661a:	2b00      	cmp	r3, #0
 800661c:	d005      	beq.n	800662a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006622:	f043 0208 	orr.w	r2, r3, #8
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800662e:	2b00      	cmp	r3, #0
 8006630:	f000 820a 	beq.w	8006a48 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006638:	f003 0320 	and.w	r3, r3, #32
 800663c:	2b00      	cmp	r3, #0
 800663e:	d008      	beq.n	8006652 <HAL_UART_IRQHandler+0x14e>
 8006640:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006644:	f003 0320 	and.w	r3, r3, #32
 8006648:	2b00      	cmp	r3, #0
 800664a:	d002      	beq.n	8006652 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f000 fcd3 	bl	8006ff8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	695b      	ldr	r3, [r3, #20]
 8006658:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800665c:	2b40      	cmp	r3, #64	@ 0x40
 800665e:	bf0c      	ite	eq
 8006660:	2301      	moveq	r3, #1
 8006662:	2300      	movne	r3, #0
 8006664:	b2db      	uxtb	r3, r3
 8006666:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800666e:	f003 0308 	and.w	r3, r3, #8
 8006672:	2b00      	cmp	r3, #0
 8006674:	d103      	bne.n	800667e <HAL_UART_IRQHandler+0x17a>
 8006676:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800667a:	2b00      	cmp	r3, #0
 800667c:	d04f      	beq.n	800671e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 fbde 	bl	8006e40 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	695b      	ldr	r3, [r3, #20]
 800668a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800668e:	2b40      	cmp	r3, #64	@ 0x40
 8006690:	d141      	bne.n	8006716 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	3314      	adds	r3, #20
 8006698:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80066a0:	e853 3f00 	ldrex	r3, [r3]
 80066a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80066a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80066ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	3314      	adds	r3, #20
 80066ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80066be:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80066c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80066ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80066ce:	e841 2300 	strex	r3, r2, [r1]
 80066d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80066d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d1d9      	bne.n	8006692 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d013      	beq.n	800670e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066ea:	4a8a      	ldr	r2, [pc, #552]	@ (8006914 <HAL_UART_IRQHandler+0x410>)
 80066ec:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066f2:	4618      	mov	r0, r3
 80066f4:	f7fc ffae 	bl	8003654 <HAL_DMA_Abort_IT>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d016      	beq.n	800672c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006702:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006708:	4610      	mov	r0, r2
 800670a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800670c:	e00e      	b.n	800672c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 f9c0 	bl	8006a94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006714:	e00a      	b.n	800672c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 f9bc 	bl	8006a94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800671c:	e006      	b.n	800672c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 f9b8 	bl	8006a94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800672a:	e18d      	b.n	8006a48 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800672c:	bf00      	nop
    return;
 800672e:	e18b      	b.n	8006a48 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006734:	2b01      	cmp	r3, #1
 8006736:	f040 8167 	bne.w	8006a08 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800673a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800673e:	f003 0310 	and.w	r3, r3, #16
 8006742:	2b00      	cmp	r3, #0
 8006744:	f000 8160 	beq.w	8006a08 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8006748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800674c:	f003 0310 	and.w	r3, r3, #16
 8006750:	2b00      	cmp	r3, #0
 8006752:	f000 8159 	beq.w	8006a08 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006756:	2300      	movs	r3, #0
 8006758:	60bb      	str	r3, [r7, #8]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	60bb      	str	r3, [r7, #8]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	60bb      	str	r3, [r7, #8]
 800676a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	695b      	ldr	r3, [r3, #20]
 8006772:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006776:	2b40      	cmp	r3, #64	@ 0x40
 8006778:	f040 80ce 	bne.w	8006918 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006788:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800678c:	2b00      	cmp	r3, #0
 800678e:	f000 80a9 	beq.w	80068e4 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006796:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800679a:	429a      	cmp	r2, r3
 800679c:	f080 80a2 	bcs.w	80068e4 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80067a6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067ac:	69db      	ldr	r3, [r3, #28]
 80067ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067b2:	f000 8088 	beq.w	80068c6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	330c      	adds	r3, #12
 80067bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80067c4:	e853 3f00 	ldrex	r3, [r3]
 80067c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80067cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80067d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80067d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	330c      	adds	r3, #12
 80067de:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80067e2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80067e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80067ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80067f2:	e841 2300 	strex	r3, r2, [r1]
 80067f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80067fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d1d9      	bne.n	80067b6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	3314      	adds	r3, #20
 8006808:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800680a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800680c:	e853 3f00 	ldrex	r3, [r3]
 8006810:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006812:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006814:	f023 0301 	bic.w	r3, r3, #1
 8006818:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	3314      	adds	r3, #20
 8006822:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006826:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800682a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800682c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800682e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006832:	e841 2300 	strex	r3, r2, [r1]
 8006836:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006838:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800683a:	2b00      	cmp	r3, #0
 800683c:	d1e1      	bne.n	8006802 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	3314      	adds	r3, #20
 8006844:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006846:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006848:	e853 3f00 	ldrex	r3, [r3]
 800684c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800684e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006850:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006854:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	3314      	adds	r3, #20
 800685e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006862:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006864:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006866:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006868:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800686a:	e841 2300 	strex	r3, r2, [r1]
 800686e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006870:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006872:	2b00      	cmp	r3, #0
 8006874:	d1e3      	bne.n	800683e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2220      	movs	r2, #32
 800687a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	330c      	adds	r3, #12
 800688a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800688c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800688e:	e853 3f00 	ldrex	r3, [r3]
 8006892:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006894:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006896:	f023 0310 	bic.w	r3, r3, #16
 800689a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	330c      	adds	r3, #12
 80068a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80068a8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80068aa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80068ae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80068b0:	e841 2300 	strex	r3, r2, [r1]
 80068b4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80068b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d1e3      	bne.n	8006884 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068c0:	4618      	mov	r0, r3
 80068c2:	f7fc fe57 	bl	8003574 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2202      	movs	r2, #2
 80068ca:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	1ad3      	subs	r3, r2, r3
 80068d8:	b29b      	uxth	r3, r3
 80068da:	4619      	mov	r1, r3
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f7fb f80f 	bl	8001900 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80068e2:	e0b3      	b.n	8006a4c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80068e8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80068ec:	429a      	cmp	r2, r3
 80068ee:	f040 80ad 	bne.w	8006a4c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068f6:	69db      	ldr	r3, [r3, #28]
 80068f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068fc:	f040 80a6 	bne.w	8006a4c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2202      	movs	r2, #2
 8006904:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800690a:	4619      	mov	r1, r3
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f7fa fff7 	bl	8001900 <HAL_UARTEx_RxEventCallback>
      return;
 8006912:	e09b      	b.n	8006a4c <HAL_UART_IRQHandler+0x548>
 8006914:	08006f07 	.word	0x08006f07
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006920:	b29b      	uxth	r3, r3
 8006922:	1ad3      	subs	r3, r2, r3
 8006924:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800692c:	b29b      	uxth	r3, r3
 800692e:	2b00      	cmp	r3, #0
 8006930:	f000 808e 	beq.w	8006a50 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8006934:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006938:	2b00      	cmp	r3, #0
 800693a:	f000 8089 	beq.w	8006a50 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	330c      	adds	r3, #12
 8006944:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006948:	e853 3f00 	ldrex	r3, [r3]
 800694c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800694e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006950:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006954:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	330c      	adds	r3, #12
 800695e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006962:	647a      	str	r2, [r7, #68]	@ 0x44
 8006964:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006966:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006968:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800696a:	e841 2300 	strex	r3, r2, [r1]
 800696e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006970:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006972:	2b00      	cmp	r3, #0
 8006974:	d1e3      	bne.n	800693e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	3314      	adds	r3, #20
 800697c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800697e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006980:	e853 3f00 	ldrex	r3, [r3]
 8006984:	623b      	str	r3, [r7, #32]
   return(result);
 8006986:	6a3b      	ldr	r3, [r7, #32]
 8006988:	f023 0301 	bic.w	r3, r3, #1
 800698c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	3314      	adds	r3, #20
 8006996:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800699a:	633a      	str	r2, [r7, #48]	@ 0x30
 800699c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800699e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80069a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069a2:	e841 2300 	strex	r3, r2, [r1]
 80069a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80069a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d1e3      	bne.n	8006976 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2220      	movs	r2, #32
 80069b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	330c      	adds	r3, #12
 80069c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	e853 3f00 	ldrex	r3, [r3]
 80069ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f023 0310 	bic.w	r3, r3, #16
 80069d2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	330c      	adds	r3, #12
 80069dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80069e0:	61fa      	str	r2, [r7, #28]
 80069e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e4:	69b9      	ldr	r1, [r7, #24]
 80069e6:	69fa      	ldr	r2, [r7, #28]
 80069e8:	e841 2300 	strex	r3, r2, [r1]
 80069ec:	617b      	str	r3, [r7, #20]
   return(result);
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d1e3      	bne.n	80069bc <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2202      	movs	r2, #2
 80069f8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80069fa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80069fe:	4619      	mov	r1, r3
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f7fa ff7d 	bl	8001900 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006a06:	e023      	b.n	8006a50 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006a08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d009      	beq.n	8006a28 <HAL_UART_IRQHandler+0x524>
 8006a14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d003      	beq.n	8006a28 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f000 fa81 	bl	8006f28 <UART_Transmit_IT>
    return;
 8006a26:	e014      	b.n	8006a52 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006a28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d00e      	beq.n	8006a52 <HAL_UART_IRQHandler+0x54e>
 8006a34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d008      	beq.n	8006a52 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f000 fac1 	bl	8006fc8 <UART_EndTransmit_IT>
    return;
 8006a46:	e004      	b.n	8006a52 <HAL_UART_IRQHandler+0x54e>
    return;
 8006a48:	bf00      	nop
 8006a4a:	e002      	b.n	8006a52 <HAL_UART_IRQHandler+0x54e>
      return;
 8006a4c:	bf00      	nop
 8006a4e:	e000      	b.n	8006a52 <HAL_UART_IRQHandler+0x54e>
      return;
 8006a50:	bf00      	nop
  }
}
 8006a52:	37e8      	adds	r7, #232	@ 0xe8
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006a60:	bf00      	nop
 8006a62:	370c      	adds	r7, #12
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006a74:	bf00      	nop
 8006a76:	370c      	adds	r7, #12
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr

08006a80 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b083      	sub	sp, #12
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006a88:	bf00      	nop
 8006a8a:	370c      	adds	r7, #12
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006a9c:	bf00      	nop
 8006a9e:	370c      	adds	r7, #12
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr

08006aa8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b09c      	sub	sp, #112	@ 0x70
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ab4:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d172      	bne.n	8006baa <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006ac4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006aca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	330c      	adds	r3, #12
 8006ad0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ad4:	e853 3f00 	ldrex	r3, [r3]
 8006ad8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006ada:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006adc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ae0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006ae2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	330c      	adds	r3, #12
 8006ae8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006aea:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006aec:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006af0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006af2:	e841 2300 	strex	r3, r2, [r1]
 8006af6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006af8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d1e5      	bne.n	8006aca <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006afe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	3314      	adds	r3, #20
 8006b04:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b08:	e853 3f00 	ldrex	r3, [r3]
 8006b0c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006b0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b10:	f023 0301 	bic.w	r3, r3, #1
 8006b14:	667b      	str	r3, [r7, #100]	@ 0x64
 8006b16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	3314      	adds	r3, #20
 8006b1c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006b1e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006b20:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b22:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b24:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b26:	e841 2300 	strex	r3, r2, [r1]
 8006b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d1e5      	bne.n	8006afe <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	3314      	adds	r3, #20
 8006b38:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b3c:	e853 3f00 	ldrex	r3, [r3]
 8006b40:	623b      	str	r3, [r7, #32]
   return(result);
 8006b42:	6a3b      	ldr	r3, [r7, #32]
 8006b44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b48:	663b      	str	r3, [r7, #96]	@ 0x60
 8006b4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	3314      	adds	r3, #20
 8006b50:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006b52:	633a      	str	r2, [r7, #48]	@ 0x30
 8006b54:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b5a:	e841 2300 	strex	r3, r2, [r1]
 8006b5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d1e5      	bne.n	8006b32 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006b66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b68:	2220      	movs	r2, #32
 8006b6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d119      	bne.n	8006baa <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	330c      	adds	r3, #12
 8006b7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	e853 3f00 	ldrex	r3, [r3]
 8006b84:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f023 0310 	bic.w	r3, r3, #16
 8006b8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	330c      	adds	r3, #12
 8006b94:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006b96:	61fa      	str	r2, [r7, #28]
 8006b98:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9a:	69b9      	ldr	r1, [r7, #24]
 8006b9c:	69fa      	ldr	r2, [r7, #28]
 8006b9e:	e841 2300 	strex	r3, r2, [r1]
 8006ba2:	617b      	str	r3, [r7, #20]
   return(result);
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d1e5      	bne.n	8006b76 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006baa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006bac:	2200      	movs	r2, #0
 8006bae:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d106      	bne.n	8006bc6 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006bb8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006bba:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006bc0:	f7fa fe9e 	bl	8001900 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006bc4:	e002      	b.n	8006bcc <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006bc6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006bc8:	f7ff ff50 	bl	8006a6c <HAL_UART_RxCpltCallback>
}
 8006bcc:	bf00      	nop
 8006bce:	3770      	adds	r7, #112	@ 0x70
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b084      	sub	sp, #16
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006be0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2201      	movs	r2, #1
 8006be6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d108      	bne.n	8006c02 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006bf4:	085b      	lsrs	r3, r3, #1
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	68f8      	ldr	r0, [r7, #12]
 8006bfc:	f7fa fe80 	bl	8001900 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006c00:	e002      	b.n	8006c08 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006c02:	68f8      	ldr	r0, [r7, #12]
 8006c04:	f7ff ff3c 	bl	8006a80 <HAL_UART_RxHalfCpltCallback>
}
 8006c08:	bf00      	nop
 8006c0a:	3710      	adds	r7, #16
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c20:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	695b      	ldr	r3, [r3, #20]
 8006c28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c2c:	2b80      	cmp	r3, #128	@ 0x80
 8006c2e:	bf0c      	ite	eq
 8006c30:	2301      	moveq	r3, #1
 8006c32:	2300      	movne	r3, #0
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c3e:	b2db      	uxtb	r3, r3
 8006c40:	2b21      	cmp	r3, #33	@ 0x21
 8006c42:	d108      	bne.n	8006c56 <UART_DMAError+0x46>
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d005      	beq.n	8006c56 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006c50:	68b8      	ldr	r0, [r7, #8]
 8006c52:	f000 f8cd 	bl	8006df0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	695b      	ldr	r3, [r3, #20]
 8006c5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c60:	2b40      	cmp	r3, #64	@ 0x40
 8006c62:	bf0c      	ite	eq
 8006c64:	2301      	moveq	r3, #1
 8006c66:	2300      	movne	r3, #0
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	2b22      	cmp	r3, #34	@ 0x22
 8006c76:	d108      	bne.n	8006c8a <UART_DMAError+0x7a>
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d005      	beq.n	8006c8a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	2200      	movs	r2, #0
 8006c82:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006c84:	68b8      	ldr	r0, [r7, #8]
 8006c86:	f000 f8db 	bl	8006e40 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c8e:	f043 0210 	orr.w	r2, r3, #16
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c96:	68b8      	ldr	r0, [r7, #8]
 8006c98:	f7ff fefc 	bl	8006a94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c9c:	bf00      	nop
 8006c9e:	3710      	adds	r7, #16
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b098      	sub	sp, #96	@ 0x60
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	60b9      	str	r1, [r7, #8]
 8006cae:	4613      	mov	r3, r2
 8006cb0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006cb2:	68ba      	ldr	r2, [r7, #8]
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	88fa      	ldrh	r2, [r7, #6]
 8006cbc:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2222      	movs	r2, #34	@ 0x22
 8006cc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cd0:	4a44      	ldr	r2, [pc, #272]	@ (8006de4 <UART_Start_Receive_DMA+0x140>)
 8006cd2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cd8:	4a43      	ldr	r2, [pc, #268]	@ (8006de8 <UART_Start_Receive_DMA+0x144>)
 8006cda:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ce0:	4a42      	ldr	r2, [pc, #264]	@ (8006dec <UART_Start_Receive_DMA+0x148>)
 8006ce2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ce8:	2200      	movs	r2, #0
 8006cea:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006cec:	f107 0308 	add.w	r3, r7, #8
 8006cf0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	3304      	adds	r3, #4
 8006cfc:	4619      	mov	r1, r3
 8006cfe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	88fb      	ldrh	r3, [r7, #6]
 8006d04:	f7fc fbde 	bl	80034c4 <HAL_DMA_Start_IT>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d008      	beq.n	8006d20 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2210      	movs	r2, #16
 8006d12:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2220      	movs	r2, #32
 8006d18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	e05d      	b.n	8006ddc <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006d20:	2300      	movs	r3, #0
 8006d22:	613b      	str	r3, [r7, #16]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	613b      	str	r3, [r7, #16]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	613b      	str	r3, [r7, #16]
 8006d34:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	691b      	ldr	r3, [r3, #16]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d019      	beq.n	8006d72 <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	330c      	adds	r3, #12
 8006d44:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d48:	e853 3f00 	ldrex	r3, [r3]
 8006d4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d54:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	330c      	adds	r3, #12
 8006d5c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006d5e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006d60:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d62:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006d64:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006d66:	e841 2300 	strex	r3, r2, [r1]
 8006d6a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006d6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d1e5      	bne.n	8006d3e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	3314      	adds	r3, #20
 8006d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d7c:	e853 3f00 	ldrex	r3, [r3]
 8006d80:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d84:	f043 0301 	orr.w	r3, r3, #1
 8006d88:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	3314      	adds	r3, #20
 8006d90:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006d92:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006d94:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d96:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006d98:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006d9a:	e841 2300 	strex	r3, r2, [r1]
 8006d9e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d1e5      	bne.n	8006d72 <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	3314      	adds	r3, #20
 8006dac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dae:	69bb      	ldr	r3, [r7, #24]
 8006db0:	e853 3f00 	ldrex	r3, [r3]
 8006db4:	617b      	str	r3, [r7, #20]
   return(result);
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006dbc:	653b      	str	r3, [r7, #80]	@ 0x50
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	3314      	adds	r3, #20
 8006dc4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006dc6:	627a      	str	r2, [r7, #36]	@ 0x24
 8006dc8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dca:	6a39      	ldr	r1, [r7, #32]
 8006dcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006dce:	e841 2300 	strex	r3, r2, [r1]
 8006dd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006dd4:	69fb      	ldr	r3, [r7, #28]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d1e5      	bne.n	8006da6 <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 8006dda:	2300      	movs	r3, #0
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3760      	adds	r7, #96	@ 0x60
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}
 8006de4:	08006aa9 	.word	0x08006aa9
 8006de8:	08006bd5 	.word	0x08006bd5
 8006dec:	08006c11 	.word	0x08006c11

08006df0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b089      	sub	sp, #36	@ 0x24
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	330c      	adds	r3, #12
 8006dfe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	e853 3f00 	ldrex	r3, [r3]
 8006e06:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006e0e:	61fb      	str	r3, [r7, #28]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	330c      	adds	r3, #12
 8006e16:	69fa      	ldr	r2, [r7, #28]
 8006e18:	61ba      	str	r2, [r7, #24]
 8006e1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e1c:	6979      	ldr	r1, [r7, #20]
 8006e1e:	69ba      	ldr	r2, [r7, #24]
 8006e20:	e841 2300 	strex	r3, r2, [r1]
 8006e24:	613b      	str	r3, [r7, #16]
   return(result);
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d1e5      	bne.n	8006df8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2220      	movs	r2, #32
 8006e30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006e34:	bf00      	nop
 8006e36:	3724      	adds	r7, #36	@ 0x24
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr

08006e40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b095      	sub	sp, #84	@ 0x54
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	330c      	adds	r3, #12
 8006e4e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e52:	e853 3f00 	ldrex	r3, [r3]
 8006e56:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e5a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	330c      	adds	r3, #12
 8006e66:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006e68:	643a      	str	r2, [r7, #64]	@ 0x40
 8006e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e6c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006e6e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e70:	e841 2300 	strex	r3, r2, [r1]
 8006e74:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d1e5      	bne.n	8006e48 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	3314      	adds	r3, #20
 8006e82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e84:	6a3b      	ldr	r3, [r7, #32]
 8006e86:	e853 3f00 	ldrex	r3, [r3]
 8006e8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e8c:	69fb      	ldr	r3, [r7, #28]
 8006e8e:	f023 0301 	bic.w	r3, r3, #1
 8006e92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	3314      	adds	r3, #20
 8006e9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e9c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ea2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ea4:	e841 2300 	strex	r3, r2, [r1]
 8006ea8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d1e5      	bne.n	8006e7c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d119      	bne.n	8006eec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	330c      	adds	r3, #12
 8006ebe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	e853 3f00 	ldrex	r3, [r3]
 8006ec6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	f023 0310 	bic.w	r3, r3, #16
 8006ece:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	330c      	adds	r3, #12
 8006ed6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ed8:	61ba      	str	r2, [r7, #24]
 8006eda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006edc:	6979      	ldr	r1, [r7, #20]
 8006ede:	69ba      	ldr	r2, [r7, #24]
 8006ee0:	e841 2300 	strex	r3, r2, [r1]
 8006ee4:	613b      	str	r3, [r7, #16]
   return(result);
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d1e5      	bne.n	8006eb8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2220      	movs	r2, #32
 8006ef0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006efa:	bf00      	nop
 8006efc:	3754      	adds	r7, #84	@ 0x54
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr

08006f06 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f06:	b580      	push	{r7, lr}
 8006f08:	b084      	sub	sp, #16
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f12:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2200      	movs	r2, #0
 8006f18:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f1a:	68f8      	ldr	r0, [r7, #12]
 8006f1c:	f7ff fdba 	bl	8006a94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f20:	bf00      	nop
 8006f22:	3710      	adds	r7, #16
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b085      	sub	sp, #20
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	2b21      	cmp	r3, #33	@ 0x21
 8006f3a:	d13e      	bne.n	8006fba <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f44:	d114      	bne.n	8006f70 <UART_Transmit_IT+0x48>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	691b      	ldr	r3, [r3, #16]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d110      	bne.n	8006f70 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a1b      	ldr	r3, [r3, #32]
 8006f52:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	881b      	ldrh	r3, [r3, #0]
 8006f58:	461a      	mov	r2, r3
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f62:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6a1b      	ldr	r3, [r3, #32]
 8006f68:	1c9a      	adds	r2, r3, #2
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	621a      	str	r2, [r3, #32]
 8006f6e:	e008      	b.n	8006f82 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6a1b      	ldr	r3, [r3, #32]
 8006f74:	1c59      	adds	r1, r3, #1
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	6211      	str	r1, [r2, #32]
 8006f7a:	781a      	ldrb	r2, [r3, #0]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	3b01      	subs	r3, #1
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	4619      	mov	r1, r3
 8006f90:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d10f      	bne.n	8006fb6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	68da      	ldr	r2, [r3, #12]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006fa4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	68da      	ldr	r2, [r3, #12]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006fb4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	e000      	b.n	8006fbc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006fba:	2302      	movs	r3, #2
  }
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3714      	adds	r7, #20
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b082      	sub	sp, #8
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	68da      	ldr	r2, [r3, #12]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006fde:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2220      	movs	r2, #32
 8006fe4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f7ff fd35 	bl	8006a58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006fee:	2300      	movs	r3, #0
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3708      	adds	r7, #8
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}

08006ff8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b08c      	sub	sp, #48	@ 0x30
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8007000:	2300      	movs	r3, #0
 8007002:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8007004:	2300      	movs	r3, #0
 8007006:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800700e:	b2db      	uxtb	r3, r3
 8007010:	2b22      	cmp	r3, #34	@ 0x22
 8007012:	f040 80aa 	bne.w	800716a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800701e:	d115      	bne.n	800704c <UART_Receive_IT+0x54>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	691b      	ldr	r3, [r3, #16]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d111      	bne.n	800704c <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800702c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	b29b      	uxth	r3, r3
 8007036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800703a:	b29a      	uxth	r2, r3
 800703c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800703e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007044:	1c9a      	adds	r2, r3, #2
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	629a      	str	r2, [r3, #40]	@ 0x28
 800704a:	e024      	b.n	8007096 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007050:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800705a:	d007      	beq.n	800706c <UART_Receive_IT+0x74>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d10a      	bne.n	800707a <UART_Receive_IT+0x82>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	691b      	ldr	r3, [r3, #16]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d106      	bne.n	800707a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	b2da      	uxtb	r2, r3
 8007074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007076:	701a      	strb	r2, [r3, #0]
 8007078:	e008      	b.n	800708c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	b2db      	uxtb	r3, r3
 8007082:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007086:	b2da      	uxtb	r2, r3
 8007088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800708a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007090:	1c5a      	adds	r2, r3, #1
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800709a:	b29b      	uxth	r3, r3
 800709c:	3b01      	subs	r3, #1
 800709e:	b29b      	uxth	r3, r3
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	4619      	mov	r1, r3
 80070a4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d15d      	bne.n	8007166 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	68da      	ldr	r2, [r3, #12]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f022 0220 	bic.w	r2, r2, #32
 80070b8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	68da      	ldr	r2, [r3, #12]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80070c8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	695a      	ldr	r2, [r3, #20]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f022 0201 	bic.w	r2, r2, #1
 80070d8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2220      	movs	r2, #32
 80070de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d135      	bne.n	800715c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	330c      	adds	r3, #12
 80070fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	e853 3f00 	ldrex	r3, [r3]
 8007104:	613b      	str	r3, [r7, #16]
   return(result);
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	f023 0310 	bic.w	r3, r3, #16
 800710c:	627b      	str	r3, [r7, #36]	@ 0x24
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	330c      	adds	r3, #12
 8007114:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007116:	623a      	str	r2, [r7, #32]
 8007118:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800711a:	69f9      	ldr	r1, [r7, #28]
 800711c:	6a3a      	ldr	r2, [r7, #32]
 800711e:	e841 2300 	strex	r3, r2, [r1]
 8007122:	61bb      	str	r3, [r7, #24]
   return(result);
 8007124:	69bb      	ldr	r3, [r7, #24]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d1e5      	bne.n	80070f6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f003 0310 	and.w	r3, r3, #16
 8007134:	2b10      	cmp	r3, #16
 8007136:	d10a      	bne.n	800714e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007138:	2300      	movs	r3, #0
 800713a:	60fb      	str	r3, [r7, #12]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	60fb      	str	r3, [r7, #12]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	60fb      	str	r3, [r7, #12]
 800714c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007152:	4619      	mov	r1, r3
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f7fa fbd3 	bl	8001900 <HAL_UARTEx_RxEventCallback>
 800715a:	e002      	b.n	8007162 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f7ff fc85 	bl	8006a6c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007162:	2300      	movs	r3, #0
 8007164:	e002      	b.n	800716c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007166:	2300      	movs	r3, #0
 8007168:	e000      	b.n	800716c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800716a:	2302      	movs	r3, #2
  }
}
 800716c:	4618      	mov	r0, r3
 800716e:	3730      	adds	r7, #48	@ 0x30
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}

08007174 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007174:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007178:	b0c0      	sub	sp, #256	@ 0x100
 800717a:	af00      	add	r7, sp, #0
 800717c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	691b      	ldr	r3, [r3, #16]
 8007188:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800718c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007190:	68d9      	ldr	r1, [r3, #12]
 8007192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	ea40 0301 	orr.w	r3, r0, r1
 800719c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800719e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071a2:	689a      	ldr	r2, [r3, #8]
 80071a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071a8:	691b      	ldr	r3, [r3, #16]
 80071aa:	431a      	orrs	r2, r3
 80071ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071b0:	695b      	ldr	r3, [r3, #20]
 80071b2:	431a      	orrs	r2, r3
 80071b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071b8:	69db      	ldr	r3, [r3, #28]
 80071ba:	4313      	orrs	r3, r2
 80071bc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80071c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80071cc:	f021 010c 	bic.w	r1, r1, #12
 80071d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071d4:	681a      	ldr	r2, [r3, #0]
 80071d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80071da:	430b      	orrs	r3, r1
 80071dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80071de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	695b      	ldr	r3, [r3, #20]
 80071e6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80071ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071ee:	6999      	ldr	r1, [r3, #24]
 80071f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071f4:	681a      	ldr	r2, [r3, #0]
 80071f6:	ea40 0301 	orr.w	r3, r0, r1
 80071fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80071fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007200:	681a      	ldr	r2, [r3, #0]
 8007202:	4b8f      	ldr	r3, [pc, #572]	@ (8007440 <UART_SetConfig+0x2cc>)
 8007204:	429a      	cmp	r2, r3
 8007206:	d005      	beq.n	8007214 <UART_SetConfig+0xa0>
 8007208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	4b8d      	ldr	r3, [pc, #564]	@ (8007444 <UART_SetConfig+0x2d0>)
 8007210:	429a      	cmp	r2, r3
 8007212:	d104      	bne.n	800721e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007214:	f7fe fa96 	bl	8005744 <HAL_RCC_GetPCLK2Freq>
 8007218:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800721c:	e003      	b.n	8007226 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800721e:	f7fe fa7d 	bl	800571c <HAL_RCC_GetPCLK1Freq>
 8007222:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800722a:	69db      	ldr	r3, [r3, #28]
 800722c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007230:	f040 810c 	bne.w	800744c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007234:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007238:	2200      	movs	r2, #0
 800723a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800723e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007242:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007246:	4622      	mov	r2, r4
 8007248:	462b      	mov	r3, r5
 800724a:	1891      	adds	r1, r2, r2
 800724c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800724e:	415b      	adcs	r3, r3
 8007250:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007252:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007256:	4621      	mov	r1, r4
 8007258:	eb12 0801 	adds.w	r8, r2, r1
 800725c:	4629      	mov	r1, r5
 800725e:	eb43 0901 	adc.w	r9, r3, r1
 8007262:	f04f 0200 	mov.w	r2, #0
 8007266:	f04f 0300 	mov.w	r3, #0
 800726a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800726e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007272:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007276:	4690      	mov	r8, r2
 8007278:	4699      	mov	r9, r3
 800727a:	4623      	mov	r3, r4
 800727c:	eb18 0303 	adds.w	r3, r8, r3
 8007280:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007284:	462b      	mov	r3, r5
 8007286:	eb49 0303 	adc.w	r3, r9, r3
 800728a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800728e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	2200      	movs	r2, #0
 8007296:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800729a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800729e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80072a2:	460b      	mov	r3, r1
 80072a4:	18db      	adds	r3, r3, r3
 80072a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80072a8:	4613      	mov	r3, r2
 80072aa:	eb42 0303 	adc.w	r3, r2, r3
 80072ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80072b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80072b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80072b8:	f7f9 fcbe 	bl	8000c38 <__aeabi_uldivmod>
 80072bc:	4602      	mov	r2, r0
 80072be:	460b      	mov	r3, r1
 80072c0:	4b61      	ldr	r3, [pc, #388]	@ (8007448 <UART_SetConfig+0x2d4>)
 80072c2:	fba3 2302 	umull	r2, r3, r3, r2
 80072c6:	095b      	lsrs	r3, r3, #5
 80072c8:	011c      	lsls	r4, r3, #4
 80072ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072ce:	2200      	movs	r2, #0
 80072d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80072d4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80072d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80072dc:	4642      	mov	r2, r8
 80072de:	464b      	mov	r3, r9
 80072e0:	1891      	adds	r1, r2, r2
 80072e2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80072e4:	415b      	adcs	r3, r3
 80072e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80072ec:	4641      	mov	r1, r8
 80072ee:	eb12 0a01 	adds.w	sl, r2, r1
 80072f2:	4649      	mov	r1, r9
 80072f4:	eb43 0b01 	adc.w	fp, r3, r1
 80072f8:	f04f 0200 	mov.w	r2, #0
 80072fc:	f04f 0300 	mov.w	r3, #0
 8007300:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007304:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007308:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800730c:	4692      	mov	sl, r2
 800730e:	469b      	mov	fp, r3
 8007310:	4643      	mov	r3, r8
 8007312:	eb1a 0303 	adds.w	r3, sl, r3
 8007316:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800731a:	464b      	mov	r3, r9
 800731c:	eb4b 0303 	adc.w	r3, fp, r3
 8007320:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	2200      	movs	r2, #0
 800732c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007330:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007334:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007338:	460b      	mov	r3, r1
 800733a:	18db      	adds	r3, r3, r3
 800733c:	643b      	str	r3, [r7, #64]	@ 0x40
 800733e:	4613      	mov	r3, r2
 8007340:	eb42 0303 	adc.w	r3, r2, r3
 8007344:	647b      	str	r3, [r7, #68]	@ 0x44
 8007346:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800734a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800734e:	f7f9 fc73 	bl	8000c38 <__aeabi_uldivmod>
 8007352:	4602      	mov	r2, r0
 8007354:	460b      	mov	r3, r1
 8007356:	4611      	mov	r1, r2
 8007358:	4b3b      	ldr	r3, [pc, #236]	@ (8007448 <UART_SetConfig+0x2d4>)
 800735a:	fba3 2301 	umull	r2, r3, r3, r1
 800735e:	095b      	lsrs	r3, r3, #5
 8007360:	2264      	movs	r2, #100	@ 0x64
 8007362:	fb02 f303 	mul.w	r3, r2, r3
 8007366:	1acb      	subs	r3, r1, r3
 8007368:	00db      	lsls	r3, r3, #3
 800736a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800736e:	4b36      	ldr	r3, [pc, #216]	@ (8007448 <UART_SetConfig+0x2d4>)
 8007370:	fba3 2302 	umull	r2, r3, r3, r2
 8007374:	095b      	lsrs	r3, r3, #5
 8007376:	005b      	lsls	r3, r3, #1
 8007378:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800737c:	441c      	add	r4, r3
 800737e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007382:	2200      	movs	r2, #0
 8007384:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007388:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800738c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007390:	4642      	mov	r2, r8
 8007392:	464b      	mov	r3, r9
 8007394:	1891      	adds	r1, r2, r2
 8007396:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007398:	415b      	adcs	r3, r3
 800739a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800739c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80073a0:	4641      	mov	r1, r8
 80073a2:	1851      	adds	r1, r2, r1
 80073a4:	6339      	str	r1, [r7, #48]	@ 0x30
 80073a6:	4649      	mov	r1, r9
 80073a8:	414b      	adcs	r3, r1
 80073aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80073ac:	f04f 0200 	mov.w	r2, #0
 80073b0:	f04f 0300 	mov.w	r3, #0
 80073b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80073b8:	4659      	mov	r1, fp
 80073ba:	00cb      	lsls	r3, r1, #3
 80073bc:	4651      	mov	r1, sl
 80073be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80073c2:	4651      	mov	r1, sl
 80073c4:	00ca      	lsls	r2, r1, #3
 80073c6:	4610      	mov	r0, r2
 80073c8:	4619      	mov	r1, r3
 80073ca:	4603      	mov	r3, r0
 80073cc:	4642      	mov	r2, r8
 80073ce:	189b      	adds	r3, r3, r2
 80073d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80073d4:	464b      	mov	r3, r9
 80073d6:	460a      	mov	r2, r1
 80073d8:	eb42 0303 	adc.w	r3, r2, r3
 80073dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80073e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	2200      	movs	r2, #0
 80073e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80073ec:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80073f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80073f4:	460b      	mov	r3, r1
 80073f6:	18db      	adds	r3, r3, r3
 80073f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073fa:	4613      	mov	r3, r2
 80073fc:	eb42 0303 	adc.w	r3, r2, r3
 8007400:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007402:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007406:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800740a:	f7f9 fc15 	bl	8000c38 <__aeabi_uldivmod>
 800740e:	4602      	mov	r2, r0
 8007410:	460b      	mov	r3, r1
 8007412:	4b0d      	ldr	r3, [pc, #52]	@ (8007448 <UART_SetConfig+0x2d4>)
 8007414:	fba3 1302 	umull	r1, r3, r3, r2
 8007418:	095b      	lsrs	r3, r3, #5
 800741a:	2164      	movs	r1, #100	@ 0x64
 800741c:	fb01 f303 	mul.w	r3, r1, r3
 8007420:	1ad3      	subs	r3, r2, r3
 8007422:	00db      	lsls	r3, r3, #3
 8007424:	3332      	adds	r3, #50	@ 0x32
 8007426:	4a08      	ldr	r2, [pc, #32]	@ (8007448 <UART_SetConfig+0x2d4>)
 8007428:	fba2 2303 	umull	r2, r3, r2, r3
 800742c:	095b      	lsrs	r3, r3, #5
 800742e:	f003 0207 	and.w	r2, r3, #7
 8007432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4422      	add	r2, r4
 800743a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800743c:	e106      	b.n	800764c <UART_SetConfig+0x4d8>
 800743e:	bf00      	nop
 8007440:	40011000 	.word	0x40011000
 8007444:	40011400 	.word	0x40011400
 8007448:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800744c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007450:	2200      	movs	r2, #0
 8007452:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007456:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800745a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800745e:	4642      	mov	r2, r8
 8007460:	464b      	mov	r3, r9
 8007462:	1891      	adds	r1, r2, r2
 8007464:	6239      	str	r1, [r7, #32]
 8007466:	415b      	adcs	r3, r3
 8007468:	627b      	str	r3, [r7, #36]	@ 0x24
 800746a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800746e:	4641      	mov	r1, r8
 8007470:	1854      	adds	r4, r2, r1
 8007472:	4649      	mov	r1, r9
 8007474:	eb43 0501 	adc.w	r5, r3, r1
 8007478:	f04f 0200 	mov.w	r2, #0
 800747c:	f04f 0300 	mov.w	r3, #0
 8007480:	00eb      	lsls	r3, r5, #3
 8007482:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007486:	00e2      	lsls	r2, r4, #3
 8007488:	4614      	mov	r4, r2
 800748a:	461d      	mov	r5, r3
 800748c:	4643      	mov	r3, r8
 800748e:	18e3      	adds	r3, r4, r3
 8007490:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007494:	464b      	mov	r3, r9
 8007496:	eb45 0303 	adc.w	r3, r5, r3
 800749a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800749e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80074aa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80074ae:	f04f 0200 	mov.w	r2, #0
 80074b2:	f04f 0300 	mov.w	r3, #0
 80074b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80074ba:	4629      	mov	r1, r5
 80074bc:	008b      	lsls	r3, r1, #2
 80074be:	4621      	mov	r1, r4
 80074c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80074c4:	4621      	mov	r1, r4
 80074c6:	008a      	lsls	r2, r1, #2
 80074c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80074cc:	f7f9 fbb4 	bl	8000c38 <__aeabi_uldivmod>
 80074d0:	4602      	mov	r2, r0
 80074d2:	460b      	mov	r3, r1
 80074d4:	4b60      	ldr	r3, [pc, #384]	@ (8007658 <UART_SetConfig+0x4e4>)
 80074d6:	fba3 2302 	umull	r2, r3, r3, r2
 80074da:	095b      	lsrs	r3, r3, #5
 80074dc:	011c      	lsls	r4, r3, #4
 80074de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074e2:	2200      	movs	r2, #0
 80074e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80074e8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80074ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80074f0:	4642      	mov	r2, r8
 80074f2:	464b      	mov	r3, r9
 80074f4:	1891      	adds	r1, r2, r2
 80074f6:	61b9      	str	r1, [r7, #24]
 80074f8:	415b      	adcs	r3, r3
 80074fa:	61fb      	str	r3, [r7, #28]
 80074fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007500:	4641      	mov	r1, r8
 8007502:	1851      	adds	r1, r2, r1
 8007504:	6139      	str	r1, [r7, #16]
 8007506:	4649      	mov	r1, r9
 8007508:	414b      	adcs	r3, r1
 800750a:	617b      	str	r3, [r7, #20]
 800750c:	f04f 0200 	mov.w	r2, #0
 8007510:	f04f 0300 	mov.w	r3, #0
 8007514:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007518:	4659      	mov	r1, fp
 800751a:	00cb      	lsls	r3, r1, #3
 800751c:	4651      	mov	r1, sl
 800751e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007522:	4651      	mov	r1, sl
 8007524:	00ca      	lsls	r2, r1, #3
 8007526:	4610      	mov	r0, r2
 8007528:	4619      	mov	r1, r3
 800752a:	4603      	mov	r3, r0
 800752c:	4642      	mov	r2, r8
 800752e:	189b      	adds	r3, r3, r2
 8007530:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007534:	464b      	mov	r3, r9
 8007536:	460a      	mov	r2, r1
 8007538:	eb42 0303 	adc.w	r3, r2, r3
 800753c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	67bb      	str	r3, [r7, #120]	@ 0x78
 800754a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800754c:	f04f 0200 	mov.w	r2, #0
 8007550:	f04f 0300 	mov.w	r3, #0
 8007554:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007558:	4649      	mov	r1, r9
 800755a:	008b      	lsls	r3, r1, #2
 800755c:	4641      	mov	r1, r8
 800755e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007562:	4641      	mov	r1, r8
 8007564:	008a      	lsls	r2, r1, #2
 8007566:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800756a:	f7f9 fb65 	bl	8000c38 <__aeabi_uldivmod>
 800756e:	4602      	mov	r2, r0
 8007570:	460b      	mov	r3, r1
 8007572:	4611      	mov	r1, r2
 8007574:	4b38      	ldr	r3, [pc, #224]	@ (8007658 <UART_SetConfig+0x4e4>)
 8007576:	fba3 2301 	umull	r2, r3, r3, r1
 800757a:	095b      	lsrs	r3, r3, #5
 800757c:	2264      	movs	r2, #100	@ 0x64
 800757e:	fb02 f303 	mul.w	r3, r2, r3
 8007582:	1acb      	subs	r3, r1, r3
 8007584:	011b      	lsls	r3, r3, #4
 8007586:	3332      	adds	r3, #50	@ 0x32
 8007588:	4a33      	ldr	r2, [pc, #204]	@ (8007658 <UART_SetConfig+0x4e4>)
 800758a:	fba2 2303 	umull	r2, r3, r2, r3
 800758e:	095b      	lsrs	r3, r3, #5
 8007590:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007594:	441c      	add	r4, r3
 8007596:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800759a:	2200      	movs	r2, #0
 800759c:	673b      	str	r3, [r7, #112]	@ 0x70
 800759e:	677a      	str	r2, [r7, #116]	@ 0x74
 80075a0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80075a4:	4642      	mov	r2, r8
 80075a6:	464b      	mov	r3, r9
 80075a8:	1891      	adds	r1, r2, r2
 80075aa:	60b9      	str	r1, [r7, #8]
 80075ac:	415b      	adcs	r3, r3
 80075ae:	60fb      	str	r3, [r7, #12]
 80075b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80075b4:	4641      	mov	r1, r8
 80075b6:	1851      	adds	r1, r2, r1
 80075b8:	6039      	str	r1, [r7, #0]
 80075ba:	4649      	mov	r1, r9
 80075bc:	414b      	adcs	r3, r1
 80075be:	607b      	str	r3, [r7, #4]
 80075c0:	f04f 0200 	mov.w	r2, #0
 80075c4:	f04f 0300 	mov.w	r3, #0
 80075c8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80075cc:	4659      	mov	r1, fp
 80075ce:	00cb      	lsls	r3, r1, #3
 80075d0:	4651      	mov	r1, sl
 80075d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075d6:	4651      	mov	r1, sl
 80075d8:	00ca      	lsls	r2, r1, #3
 80075da:	4610      	mov	r0, r2
 80075dc:	4619      	mov	r1, r3
 80075de:	4603      	mov	r3, r0
 80075e0:	4642      	mov	r2, r8
 80075e2:	189b      	adds	r3, r3, r2
 80075e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80075e6:	464b      	mov	r3, r9
 80075e8:	460a      	mov	r2, r1
 80075ea:	eb42 0303 	adc.w	r3, r2, r3
 80075ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80075f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	2200      	movs	r2, #0
 80075f8:	663b      	str	r3, [r7, #96]	@ 0x60
 80075fa:	667a      	str	r2, [r7, #100]	@ 0x64
 80075fc:	f04f 0200 	mov.w	r2, #0
 8007600:	f04f 0300 	mov.w	r3, #0
 8007604:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007608:	4649      	mov	r1, r9
 800760a:	008b      	lsls	r3, r1, #2
 800760c:	4641      	mov	r1, r8
 800760e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007612:	4641      	mov	r1, r8
 8007614:	008a      	lsls	r2, r1, #2
 8007616:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800761a:	f7f9 fb0d 	bl	8000c38 <__aeabi_uldivmod>
 800761e:	4602      	mov	r2, r0
 8007620:	460b      	mov	r3, r1
 8007622:	4b0d      	ldr	r3, [pc, #52]	@ (8007658 <UART_SetConfig+0x4e4>)
 8007624:	fba3 1302 	umull	r1, r3, r3, r2
 8007628:	095b      	lsrs	r3, r3, #5
 800762a:	2164      	movs	r1, #100	@ 0x64
 800762c:	fb01 f303 	mul.w	r3, r1, r3
 8007630:	1ad3      	subs	r3, r2, r3
 8007632:	011b      	lsls	r3, r3, #4
 8007634:	3332      	adds	r3, #50	@ 0x32
 8007636:	4a08      	ldr	r2, [pc, #32]	@ (8007658 <UART_SetConfig+0x4e4>)
 8007638:	fba2 2303 	umull	r2, r3, r2, r3
 800763c:	095b      	lsrs	r3, r3, #5
 800763e:	f003 020f 	and.w	r2, r3, #15
 8007642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4422      	add	r2, r4
 800764a:	609a      	str	r2, [r3, #8]
}
 800764c:	bf00      	nop
 800764e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007652:	46bd      	mov	sp, r7
 8007654:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007658:	51eb851f 	.word	0x51eb851f

0800765c <_scanf_float>:
 800765c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007660:	b087      	sub	sp, #28
 8007662:	4617      	mov	r7, r2
 8007664:	9303      	str	r3, [sp, #12]
 8007666:	688b      	ldr	r3, [r1, #8]
 8007668:	1e5a      	subs	r2, r3, #1
 800766a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800766e:	bf81      	itttt	hi
 8007670:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007674:	eb03 0b05 	addhi.w	fp, r3, r5
 8007678:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800767c:	608b      	strhi	r3, [r1, #8]
 800767e:	680b      	ldr	r3, [r1, #0]
 8007680:	460a      	mov	r2, r1
 8007682:	f04f 0500 	mov.w	r5, #0
 8007686:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800768a:	f842 3b1c 	str.w	r3, [r2], #28
 800768e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007692:	4680      	mov	r8, r0
 8007694:	460c      	mov	r4, r1
 8007696:	bf98      	it	ls
 8007698:	f04f 0b00 	movls.w	fp, #0
 800769c:	9201      	str	r2, [sp, #4]
 800769e:	4616      	mov	r6, r2
 80076a0:	46aa      	mov	sl, r5
 80076a2:	46a9      	mov	r9, r5
 80076a4:	9502      	str	r5, [sp, #8]
 80076a6:	68a2      	ldr	r2, [r4, #8]
 80076a8:	b152      	cbz	r2, 80076c0 <_scanf_float+0x64>
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	2b4e      	cmp	r3, #78	@ 0x4e
 80076b0:	d864      	bhi.n	800777c <_scanf_float+0x120>
 80076b2:	2b40      	cmp	r3, #64	@ 0x40
 80076b4:	d83c      	bhi.n	8007730 <_scanf_float+0xd4>
 80076b6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80076ba:	b2c8      	uxtb	r0, r1
 80076bc:	280e      	cmp	r0, #14
 80076be:	d93a      	bls.n	8007736 <_scanf_float+0xda>
 80076c0:	f1b9 0f00 	cmp.w	r9, #0
 80076c4:	d003      	beq.n	80076ce <_scanf_float+0x72>
 80076c6:	6823      	ldr	r3, [r4, #0]
 80076c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80076cc:	6023      	str	r3, [r4, #0]
 80076ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80076d2:	f1ba 0f01 	cmp.w	sl, #1
 80076d6:	f200 8117 	bhi.w	8007908 <_scanf_float+0x2ac>
 80076da:	9b01      	ldr	r3, [sp, #4]
 80076dc:	429e      	cmp	r6, r3
 80076de:	f200 8108 	bhi.w	80078f2 <_scanf_float+0x296>
 80076e2:	2001      	movs	r0, #1
 80076e4:	b007      	add	sp, #28
 80076e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076ea:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80076ee:	2a0d      	cmp	r2, #13
 80076f0:	d8e6      	bhi.n	80076c0 <_scanf_float+0x64>
 80076f2:	a101      	add	r1, pc, #4	@ (adr r1, 80076f8 <_scanf_float+0x9c>)
 80076f4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80076f8:	0800783f 	.word	0x0800783f
 80076fc:	080076c1 	.word	0x080076c1
 8007700:	080076c1 	.word	0x080076c1
 8007704:	080076c1 	.word	0x080076c1
 8007708:	0800789f 	.word	0x0800789f
 800770c:	08007877 	.word	0x08007877
 8007710:	080076c1 	.word	0x080076c1
 8007714:	080076c1 	.word	0x080076c1
 8007718:	0800784d 	.word	0x0800784d
 800771c:	080076c1 	.word	0x080076c1
 8007720:	080076c1 	.word	0x080076c1
 8007724:	080076c1 	.word	0x080076c1
 8007728:	080076c1 	.word	0x080076c1
 800772c:	08007805 	.word	0x08007805
 8007730:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007734:	e7db      	b.n	80076ee <_scanf_float+0x92>
 8007736:	290e      	cmp	r1, #14
 8007738:	d8c2      	bhi.n	80076c0 <_scanf_float+0x64>
 800773a:	a001      	add	r0, pc, #4	@ (adr r0, 8007740 <_scanf_float+0xe4>)
 800773c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007740:	080077f5 	.word	0x080077f5
 8007744:	080076c1 	.word	0x080076c1
 8007748:	080077f5 	.word	0x080077f5
 800774c:	0800788b 	.word	0x0800788b
 8007750:	080076c1 	.word	0x080076c1
 8007754:	0800779d 	.word	0x0800779d
 8007758:	080077db 	.word	0x080077db
 800775c:	080077db 	.word	0x080077db
 8007760:	080077db 	.word	0x080077db
 8007764:	080077db 	.word	0x080077db
 8007768:	080077db 	.word	0x080077db
 800776c:	080077db 	.word	0x080077db
 8007770:	080077db 	.word	0x080077db
 8007774:	080077db 	.word	0x080077db
 8007778:	080077db 	.word	0x080077db
 800777c:	2b6e      	cmp	r3, #110	@ 0x6e
 800777e:	d809      	bhi.n	8007794 <_scanf_float+0x138>
 8007780:	2b60      	cmp	r3, #96	@ 0x60
 8007782:	d8b2      	bhi.n	80076ea <_scanf_float+0x8e>
 8007784:	2b54      	cmp	r3, #84	@ 0x54
 8007786:	d07b      	beq.n	8007880 <_scanf_float+0x224>
 8007788:	2b59      	cmp	r3, #89	@ 0x59
 800778a:	d199      	bne.n	80076c0 <_scanf_float+0x64>
 800778c:	2d07      	cmp	r5, #7
 800778e:	d197      	bne.n	80076c0 <_scanf_float+0x64>
 8007790:	2508      	movs	r5, #8
 8007792:	e02c      	b.n	80077ee <_scanf_float+0x192>
 8007794:	2b74      	cmp	r3, #116	@ 0x74
 8007796:	d073      	beq.n	8007880 <_scanf_float+0x224>
 8007798:	2b79      	cmp	r3, #121	@ 0x79
 800779a:	e7f6      	b.n	800778a <_scanf_float+0x12e>
 800779c:	6821      	ldr	r1, [r4, #0]
 800779e:	05c8      	lsls	r0, r1, #23
 80077a0:	d51b      	bpl.n	80077da <_scanf_float+0x17e>
 80077a2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80077a6:	6021      	str	r1, [r4, #0]
 80077a8:	f109 0901 	add.w	r9, r9, #1
 80077ac:	f1bb 0f00 	cmp.w	fp, #0
 80077b0:	d003      	beq.n	80077ba <_scanf_float+0x15e>
 80077b2:	3201      	adds	r2, #1
 80077b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80077b8:	60a2      	str	r2, [r4, #8]
 80077ba:	68a3      	ldr	r3, [r4, #8]
 80077bc:	3b01      	subs	r3, #1
 80077be:	60a3      	str	r3, [r4, #8]
 80077c0:	6923      	ldr	r3, [r4, #16]
 80077c2:	3301      	adds	r3, #1
 80077c4:	6123      	str	r3, [r4, #16]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	3b01      	subs	r3, #1
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	607b      	str	r3, [r7, #4]
 80077ce:	f340 8087 	ble.w	80078e0 <_scanf_float+0x284>
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	3301      	adds	r3, #1
 80077d6:	603b      	str	r3, [r7, #0]
 80077d8:	e765      	b.n	80076a6 <_scanf_float+0x4a>
 80077da:	eb1a 0105 	adds.w	r1, sl, r5
 80077de:	f47f af6f 	bne.w	80076c0 <_scanf_float+0x64>
 80077e2:	6822      	ldr	r2, [r4, #0]
 80077e4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80077e8:	6022      	str	r2, [r4, #0]
 80077ea:	460d      	mov	r5, r1
 80077ec:	468a      	mov	sl, r1
 80077ee:	f806 3b01 	strb.w	r3, [r6], #1
 80077f2:	e7e2      	b.n	80077ba <_scanf_float+0x15e>
 80077f4:	6822      	ldr	r2, [r4, #0]
 80077f6:	0610      	lsls	r0, r2, #24
 80077f8:	f57f af62 	bpl.w	80076c0 <_scanf_float+0x64>
 80077fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007800:	6022      	str	r2, [r4, #0]
 8007802:	e7f4      	b.n	80077ee <_scanf_float+0x192>
 8007804:	f1ba 0f00 	cmp.w	sl, #0
 8007808:	d10e      	bne.n	8007828 <_scanf_float+0x1cc>
 800780a:	f1b9 0f00 	cmp.w	r9, #0
 800780e:	d10e      	bne.n	800782e <_scanf_float+0x1d2>
 8007810:	6822      	ldr	r2, [r4, #0]
 8007812:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007816:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800781a:	d108      	bne.n	800782e <_scanf_float+0x1d2>
 800781c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007820:	6022      	str	r2, [r4, #0]
 8007822:	f04f 0a01 	mov.w	sl, #1
 8007826:	e7e2      	b.n	80077ee <_scanf_float+0x192>
 8007828:	f1ba 0f02 	cmp.w	sl, #2
 800782c:	d055      	beq.n	80078da <_scanf_float+0x27e>
 800782e:	2d01      	cmp	r5, #1
 8007830:	d002      	beq.n	8007838 <_scanf_float+0x1dc>
 8007832:	2d04      	cmp	r5, #4
 8007834:	f47f af44 	bne.w	80076c0 <_scanf_float+0x64>
 8007838:	3501      	adds	r5, #1
 800783a:	b2ed      	uxtb	r5, r5
 800783c:	e7d7      	b.n	80077ee <_scanf_float+0x192>
 800783e:	f1ba 0f01 	cmp.w	sl, #1
 8007842:	f47f af3d 	bne.w	80076c0 <_scanf_float+0x64>
 8007846:	f04f 0a02 	mov.w	sl, #2
 800784a:	e7d0      	b.n	80077ee <_scanf_float+0x192>
 800784c:	b97d      	cbnz	r5, 800786e <_scanf_float+0x212>
 800784e:	f1b9 0f00 	cmp.w	r9, #0
 8007852:	f47f af38 	bne.w	80076c6 <_scanf_float+0x6a>
 8007856:	6822      	ldr	r2, [r4, #0]
 8007858:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800785c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007860:	f040 8108 	bne.w	8007a74 <_scanf_float+0x418>
 8007864:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007868:	6022      	str	r2, [r4, #0]
 800786a:	2501      	movs	r5, #1
 800786c:	e7bf      	b.n	80077ee <_scanf_float+0x192>
 800786e:	2d03      	cmp	r5, #3
 8007870:	d0e2      	beq.n	8007838 <_scanf_float+0x1dc>
 8007872:	2d05      	cmp	r5, #5
 8007874:	e7de      	b.n	8007834 <_scanf_float+0x1d8>
 8007876:	2d02      	cmp	r5, #2
 8007878:	f47f af22 	bne.w	80076c0 <_scanf_float+0x64>
 800787c:	2503      	movs	r5, #3
 800787e:	e7b6      	b.n	80077ee <_scanf_float+0x192>
 8007880:	2d06      	cmp	r5, #6
 8007882:	f47f af1d 	bne.w	80076c0 <_scanf_float+0x64>
 8007886:	2507      	movs	r5, #7
 8007888:	e7b1      	b.n	80077ee <_scanf_float+0x192>
 800788a:	6822      	ldr	r2, [r4, #0]
 800788c:	0591      	lsls	r1, r2, #22
 800788e:	f57f af17 	bpl.w	80076c0 <_scanf_float+0x64>
 8007892:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8007896:	6022      	str	r2, [r4, #0]
 8007898:	f8cd 9008 	str.w	r9, [sp, #8]
 800789c:	e7a7      	b.n	80077ee <_scanf_float+0x192>
 800789e:	6822      	ldr	r2, [r4, #0]
 80078a0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80078a4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80078a8:	d006      	beq.n	80078b8 <_scanf_float+0x25c>
 80078aa:	0550      	lsls	r0, r2, #21
 80078ac:	f57f af08 	bpl.w	80076c0 <_scanf_float+0x64>
 80078b0:	f1b9 0f00 	cmp.w	r9, #0
 80078b4:	f000 80de 	beq.w	8007a74 <_scanf_float+0x418>
 80078b8:	0591      	lsls	r1, r2, #22
 80078ba:	bf58      	it	pl
 80078bc:	9902      	ldrpl	r1, [sp, #8]
 80078be:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80078c2:	bf58      	it	pl
 80078c4:	eba9 0101 	subpl.w	r1, r9, r1
 80078c8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80078cc:	bf58      	it	pl
 80078ce:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80078d2:	6022      	str	r2, [r4, #0]
 80078d4:	f04f 0900 	mov.w	r9, #0
 80078d8:	e789      	b.n	80077ee <_scanf_float+0x192>
 80078da:	f04f 0a03 	mov.w	sl, #3
 80078de:	e786      	b.n	80077ee <_scanf_float+0x192>
 80078e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80078e4:	4639      	mov	r1, r7
 80078e6:	4640      	mov	r0, r8
 80078e8:	4798      	blx	r3
 80078ea:	2800      	cmp	r0, #0
 80078ec:	f43f aedb 	beq.w	80076a6 <_scanf_float+0x4a>
 80078f0:	e6e6      	b.n	80076c0 <_scanf_float+0x64>
 80078f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80078f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80078fa:	463a      	mov	r2, r7
 80078fc:	4640      	mov	r0, r8
 80078fe:	4798      	blx	r3
 8007900:	6923      	ldr	r3, [r4, #16]
 8007902:	3b01      	subs	r3, #1
 8007904:	6123      	str	r3, [r4, #16]
 8007906:	e6e8      	b.n	80076da <_scanf_float+0x7e>
 8007908:	1e6b      	subs	r3, r5, #1
 800790a:	2b06      	cmp	r3, #6
 800790c:	d824      	bhi.n	8007958 <_scanf_float+0x2fc>
 800790e:	2d02      	cmp	r5, #2
 8007910:	d836      	bhi.n	8007980 <_scanf_float+0x324>
 8007912:	9b01      	ldr	r3, [sp, #4]
 8007914:	429e      	cmp	r6, r3
 8007916:	f67f aee4 	bls.w	80076e2 <_scanf_float+0x86>
 800791a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800791e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007922:	463a      	mov	r2, r7
 8007924:	4640      	mov	r0, r8
 8007926:	4798      	blx	r3
 8007928:	6923      	ldr	r3, [r4, #16]
 800792a:	3b01      	subs	r3, #1
 800792c:	6123      	str	r3, [r4, #16]
 800792e:	e7f0      	b.n	8007912 <_scanf_float+0x2b6>
 8007930:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007934:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007938:	463a      	mov	r2, r7
 800793a:	4640      	mov	r0, r8
 800793c:	4798      	blx	r3
 800793e:	6923      	ldr	r3, [r4, #16]
 8007940:	3b01      	subs	r3, #1
 8007942:	6123      	str	r3, [r4, #16]
 8007944:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007948:	fa5f fa8a 	uxtb.w	sl, sl
 800794c:	f1ba 0f02 	cmp.w	sl, #2
 8007950:	d1ee      	bne.n	8007930 <_scanf_float+0x2d4>
 8007952:	3d03      	subs	r5, #3
 8007954:	b2ed      	uxtb	r5, r5
 8007956:	1b76      	subs	r6, r6, r5
 8007958:	6823      	ldr	r3, [r4, #0]
 800795a:	05da      	lsls	r2, r3, #23
 800795c:	d530      	bpl.n	80079c0 <_scanf_float+0x364>
 800795e:	055b      	lsls	r3, r3, #21
 8007960:	d511      	bpl.n	8007986 <_scanf_float+0x32a>
 8007962:	9b01      	ldr	r3, [sp, #4]
 8007964:	429e      	cmp	r6, r3
 8007966:	f67f aebc 	bls.w	80076e2 <_scanf_float+0x86>
 800796a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800796e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007972:	463a      	mov	r2, r7
 8007974:	4640      	mov	r0, r8
 8007976:	4798      	blx	r3
 8007978:	6923      	ldr	r3, [r4, #16]
 800797a:	3b01      	subs	r3, #1
 800797c:	6123      	str	r3, [r4, #16]
 800797e:	e7f0      	b.n	8007962 <_scanf_float+0x306>
 8007980:	46aa      	mov	sl, r5
 8007982:	46b3      	mov	fp, r6
 8007984:	e7de      	b.n	8007944 <_scanf_float+0x2e8>
 8007986:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800798a:	6923      	ldr	r3, [r4, #16]
 800798c:	2965      	cmp	r1, #101	@ 0x65
 800798e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007992:	f106 35ff 	add.w	r5, r6, #4294967295
 8007996:	6123      	str	r3, [r4, #16]
 8007998:	d00c      	beq.n	80079b4 <_scanf_float+0x358>
 800799a:	2945      	cmp	r1, #69	@ 0x45
 800799c:	d00a      	beq.n	80079b4 <_scanf_float+0x358>
 800799e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80079a2:	463a      	mov	r2, r7
 80079a4:	4640      	mov	r0, r8
 80079a6:	4798      	blx	r3
 80079a8:	6923      	ldr	r3, [r4, #16]
 80079aa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80079ae:	3b01      	subs	r3, #1
 80079b0:	1eb5      	subs	r5, r6, #2
 80079b2:	6123      	str	r3, [r4, #16]
 80079b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80079b8:	463a      	mov	r2, r7
 80079ba:	4640      	mov	r0, r8
 80079bc:	4798      	blx	r3
 80079be:	462e      	mov	r6, r5
 80079c0:	6822      	ldr	r2, [r4, #0]
 80079c2:	f012 0210 	ands.w	r2, r2, #16
 80079c6:	d001      	beq.n	80079cc <_scanf_float+0x370>
 80079c8:	2000      	movs	r0, #0
 80079ca:	e68b      	b.n	80076e4 <_scanf_float+0x88>
 80079cc:	7032      	strb	r2, [r6, #0]
 80079ce:	6823      	ldr	r3, [r4, #0]
 80079d0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80079d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079d8:	d11c      	bne.n	8007a14 <_scanf_float+0x3b8>
 80079da:	9b02      	ldr	r3, [sp, #8]
 80079dc:	454b      	cmp	r3, r9
 80079de:	eba3 0209 	sub.w	r2, r3, r9
 80079e2:	d123      	bne.n	8007a2c <_scanf_float+0x3d0>
 80079e4:	9901      	ldr	r1, [sp, #4]
 80079e6:	2200      	movs	r2, #0
 80079e8:	4640      	mov	r0, r8
 80079ea:	f001 f8ed 	bl	8008bc8 <_strtod_r>
 80079ee:	9b03      	ldr	r3, [sp, #12]
 80079f0:	6821      	ldr	r1, [r4, #0]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f011 0f02 	tst.w	r1, #2
 80079f8:	ec57 6b10 	vmov	r6, r7, d0
 80079fc:	f103 0204 	add.w	r2, r3, #4
 8007a00:	d01f      	beq.n	8007a42 <_scanf_float+0x3e6>
 8007a02:	9903      	ldr	r1, [sp, #12]
 8007a04:	600a      	str	r2, [r1, #0]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	e9c3 6700 	strd	r6, r7, [r3]
 8007a0c:	68e3      	ldr	r3, [r4, #12]
 8007a0e:	3301      	adds	r3, #1
 8007a10:	60e3      	str	r3, [r4, #12]
 8007a12:	e7d9      	b.n	80079c8 <_scanf_float+0x36c>
 8007a14:	9b04      	ldr	r3, [sp, #16]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d0e4      	beq.n	80079e4 <_scanf_float+0x388>
 8007a1a:	9905      	ldr	r1, [sp, #20]
 8007a1c:	230a      	movs	r3, #10
 8007a1e:	3101      	adds	r1, #1
 8007a20:	4640      	mov	r0, r8
 8007a22:	f001 f951 	bl	8008cc8 <_strtol_r>
 8007a26:	9b04      	ldr	r3, [sp, #16]
 8007a28:	9e05      	ldr	r6, [sp, #20]
 8007a2a:	1ac2      	subs	r2, r0, r3
 8007a2c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007a30:	429e      	cmp	r6, r3
 8007a32:	bf28      	it	cs
 8007a34:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007a38:	4910      	ldr	r1, [pc, #64]	@ (8007a7c <_scanf_float+0x420>)
 8007a3a:	4630      	mov	r0, r6
 8007a3c:	f000 f8e4 	bl	8007c08 <siprintf>
 8007a40:	e7d0      	b.n	80079e4 <_scanf_float+0x388>
 8007a42:	f011 0f04 	tst.w	r1, #4
 8007a46:	9903      	ldr	r1, [sp, #12]
 8007a48:	600a      	str	r2, [r1, #0]
 8007a4a:	d1dc      	bne.n	8007a06 <_scanf_float+0x3aa>
 8007a4c:	681d      	ldr	r5, [r3, #0]
 8007a4e:	4632      	mov	r2, r6
 8007a50:	463b      	mov	r3, r7
 8007a52:	4630      	mov	r0, r6
 8007a54:	4639      	mov	r1, r7
 8007a56:	f7f9 f869 	bl	8000b2c <__aeabi_dcmpun>
 8007a5a:	b128      	cbz	r0, 8007a68 <_scanf_float+0x40c>
 8007a5c:	4808      	ldr	r0, [pc, #32]	@ (8007a80 <_scanf_float+0x424>)
 8007a5e:	f000 f9b3 	bl	8007dc8 <nanf>
 8007a62:	ed85 0a00 	vstr	s0, [r5]
 8007a66:	e7d1      	b.n	8007a0c <_scanf_float+0x3b0>
 8007a68:	4630      	mov	r0, r6
 8007a6a:	4639      	mov	r1, r7
 8007a6c:	f7f9 f894 	bl	8000b98 <__aeabi_d2f>
 8007a70:	6028      	str	r0, [r5, #0]
 8007a72:	e7cb      	b.n	8007a0c <_scanf_float+0x3b0>
 8007a74:	f04f 0900 	mov.w	r9, #0
 8007a78:	e629      	b.n	80076ce <_scanf_float+0x72>
 8007a7a:	bf00      	nop
 8007a7c:	0800ad30 	.word	0x0800ad30
 8007a80:	0800b0f3 	.word	0x0800b0f3

08007a84 <std>:
 8007a84:	2300      	movs	r3, #0
 8007a86:	b510      	push	{r4, lr}
 8007a88:	4604      	mov	r4, r0
 8007a8a:	e9c0 3300 	strd	r3, r3, [r0]
 8007a8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007a92:	6083      	str	r3, [r0, #8]
 8007a94:	8181      	strh	r1, [r0, #12]
 8007a96:	6643      	str	r3, [r0, #100]	@ 0x64
 8007a98:	81c2      	strh	r2, [r0, #14]
 8007a9a:	6183      	str	r3, [r0, #24]
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	2208      	movs	r2, #8
 8007aa0:	305c      	adds	r0, #92	@ 0x5c
 8007aa2:	f000 f914 	bl	8007cce <memset>
 8007aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8007adc <std+0x58>)
 8007aa8:	6263      	str	r3, [r4, #36]	@ 0x24
 8007aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8007ae0 <std+0x5c>)
 8007aac:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007aae:	4b0d      	ldr	r3, [pc, #52]	@ (8007ae4 <std+0x60>)
 8007ab0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8007ae8 <std+0x64>)
 8007ab4:	6323      	str	r3, [r4, #48]	@ 0x30
 8007ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8007aec <std+0x68>)
 8007ab8:	6224      	str	r4, [r4, #32]
 8007aba:	429c      	cmp	r4, r3
 8007abc:	d006      	beq.n	8007acc <std+0x48>
 8007abe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007ac2:	4294      	cmp	r4, r2
 8007ac4:	d002      	beq.n	8007acc <std+0x48>
 8007ac6:	33d0      	adds	r3, #208	@ 0xd0
 8007ac8:	429c      	cmp	r4, r3
 8007aca:	d105      	bne.n	8007ad8 <std+0x54>
 8007acc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007ad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ad4:	f000 b974 	b.w	8007dc0 <__retarget_lock_init_recursive>
 8007ad8:	bd10      	pop	{r4, pc}
 8007ada:	bf00      	nop
 8007adc:	08007c49 	.word	0x08007c49
 8007ae0:	08007c6b 	.word	0x08007c6b
 8007ae4:	08007ca3 	.word	0x08007ca3
 8007ae8:	08007cc7 	.word	0x08007cc7
 8007aec:	20000578 	.word	0x20000578

08007af0 <stdio_exit_handler>:
 8007af0:	4a02      	ldr	r2, [pc, #8]	@ (8007afc <stdio_exit_handler+0xc>)
 8007af2:	4903      	ldr	r1, [pc, #12]	@ (8007b00 <stdio_exit_handler+0x10>)
 8007af4:	4803      	ldr	r0, [pc, #12]	@ (8007b04 <stdio_exit_handler+0x14>)
 8007af6:	f000 b869 	b.w	8007bcc <_fwalk_sglue>
 8007afa:	bf00      	nop
 8007afc:	20000030 	.word	0x20000030
 8007b00:	080093a1 	.word	0x080093a1
 8007b04:	20000040 	.word	0x20000040

08007b08 <cleanup_stdio>:
 8007b08:	6841      	ldr	r1, [r0, #4]
 8007b0a:	4b0c      	ldr	r3, [pc, #48]	@ (8007b3c <cleanup_stdio+0x34>)
 8007b0c:	4299      	cmp	r1, r3
 8007b0e:	b510      	push	{r4, lr}
 8007b10:	4604      	mov	r4, r0
 8007b12:	d001      	beq.n	8007b18 <cleanup_stdio+0x10>
 8007b14:	f001 fc44 	bl	80093a0 <_fflush_r>
 8007b18:	68a1      	ldr	r1, [r4, #8]
 8007b1a:	4b09      	ldr	r3, [pc, #36]	@ (8007b40 <cleanup_stdio+0x38>)
 8007b1c:	4299      	cmp	r1, r3
 8007b1e:	d002      	beq.n	8007b26 <cleanup_stdio+0x1e>
 8007b20:	4620      	mov	r0, r4
 8007b22:	f001 fc3d 	bl	80093a0 <_fflush_r>
 8007b26:	68e1      	ldr	r1, [r4, #12]
 8007b28:	4b06      	ldr	r3, [pc, #24]	@ (8007b44 <cleanup_stdio+0x3c>)
 8007b2a:	4299      	cmp	r1, r3
 8007b2c:	d004      	beq.n	8007b38 <cleanup_stdio+0x30>
 8007b2e:	4620      	mov	r0, r4
 8007b30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b34:	f001 bc34 	b.w	80093a0 <_fflush_r>
 8007b38:	bd10      	pop	{r4, pc}
 8007b3a:	bf00      	nop
 8007b3c:	20000578 	.word	0x20000578
 8007b40:	200005e0 	.word	0x200005e0
 8007b44:	20000648 	.word	0x20000648

08007b48 <global_stdio_init.part.0>:
 8007b48:	b510      	push	{r4, lr}
 8007b4a:	4b0b      	ldr	r3, [pc, #44]	@ (8007b78 <global_stdio_init.part.0+0x30>)
 8007b4c:	4c0b      	ldr	r4, [pc, #44]	@ (8007b7c <global_stdio_init.part.0+0x34>)
 8007b4e:	4a0c      	ldr	r2, [pc, #48]	@ (8007b80 <global_stdio_init.part.0+0x38>)
 8007b50:	601a      	str	r2, [r3, #0]
 8007b52:	4620      	mov	r0, r4
 8007b54:	2200      	movs	r2, #0
 8007b56:	2104      	movs	r1, #4
 8007b58:	f7ff ff94 	bl	8007a84 <std>
 8007b5c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007b60:	2201      	movs	r2, #1
 8007b62:	2109      	movs	r1, #9
 8007b64:	f7ff ff8e 	bl	8007a84 <std>
 8007b68:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007b6c:	2202      	movs	r2, #2
 8007b6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b72:	2112      	movs	r1, #18
 8007b74:	f7ff bf86 	b.w	8007a84 <std>
 8007b78:	200006b0 	.word	0x200006b0
 8007b7c:	20000578 	.word	0x20000578
 8007b80:	08007af1 	.word	0x08007af1

08007b84 <__sfp_lock_acquire>:
 8007b84:	4801      	ldr	r0, [pc, #4]	@ (8007b8c <__sfp_lock_acquire+0x8>)
 8007b86:	f000 b91c 	b.w	8007dc2 <__retarget_lock_acquire_recursive>
 8007b8a:	bf00      	nop
 8007b8c:	200006b9 	.word	0x200006b9

08007b90 <__sfp_lock_release>:
 8007b90:	4801      	ldr	r0, [pc, #4]	@ (8007b98 <__sfp_lock_release+0x8>)
 8007b92:	f000 b917 	b.w	8007dc4 <__retarget_lock_release_recursive>
 8007b96:	bf00      	nop
 8007b98:	200006b9 	.word	0x200006b9

08007b9c <__sinit>:
 8007b9c:	b510      	push	{r4, lr}
 8007b9e:	4604      	mov	r4, r0
 8007ba0:	f7ff fff0 	bl	8007b84 <__sfp_lock_acquire>
 8007ba4:	6a23      	ldr	r3, [r4, #32]
 8007ba6:	b11b      	cbz	r3, 8007bb0 <__sinit+0x14>
 8007ba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bac:	f7ff bff0 	b.w	8007b90 <__sfp_lock_release>
 8007bb0:	4b04      	ldr	r3, [pc, #16]	@ (8007bc4 <__sinit+0x28>)
 8007bb2:	6223      	str	r3, [r4, #32]
 8007bb4:	4b04      	ldr	r3, [pc, #16]	@ (8007bc8 <__sinit+0x2c>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d1f5      	bne.n	8007ba8 <__sinit+0xc>
 8007bbc:	f7ff ffc4 	bl	8007b48 <global_stdio_init.part.0>
 8007bc0:	e7f2      	b.n	8007ba8 <__sinit+0xc>
 8007bc2:	bf00      	nop
 8007bc4:	08007b09 	.word	0x08007b09
 8007bc8:	200006b0 	.word	0x200006b0

08007bcc <_fwalk_sglue>:
 8007bcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bd0:	4607      	mov	r7, r0
 8007bd2:	4688      	mov	r8, r1
 8007bd4:	4614      	mov	r4, r2
 8007bd6:	2600      	movs	r6, #0
 8007bd8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007bdc:	f1b9 0901 	subs.w	r9, r9, #1
 8007be0:	d505      	bpl.n	8007bee <_fwalk_sglue+0x22>
 8007be2:	6824      	ldr	r4, [r4, #0]
 8007be4:	2c00      	cmp	r4, #0
 8007be6:	d1f7      	bne.n	8007bd8 <_fwalk_sglue+0xc>
 8007be8:	4630      	mov	r0, r6
 8007bea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bee:	89ab      	ldrh	r3, [r5, #12]
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d907      	bls.n	8007c04 <_fwalk_sglue+0x38>
 8007bf4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	d003      	beq.n	8007c04 <_fwalk_sglue+0x38>
 8007bfc:	4629      	mov	r1, r5
 8007bfe:	4638      	mov	r0, r7
 8007c00:	47c0      	blx	r8
 8007c02:	4306      	orrs	r6, r0
 8007c04:	3568      	adds	r5, #104	@ 0x68
 8007c06:	e7e9      	b.n	8007bdc <_fwalk_sglue+0x10>

08007c08 <siprintf>:
 8007c08:	b40e      	push	{r1, r2, r3}
 8007c0a:	b500      	push	{lr}
 8007c0c:	b09c      	sub	sp, #112	@ 0x70
 8007c0e:	ab1d      	add	r3, sp, #116	@ 0x74
 8007c10:	9002      	str	r0, [sp, #8]
 8007c12:	9006      	str	r0, [sp, #24]
 8007c14:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007c18:	4809      	ldr	r0, [pc, #36]	@ (8007c40 <siprintf+0x38>)
 8007c1a:	9107      	str	r1, [sp, #28]
 8007c1c:	9104      	str	r1, [sp, #16]
 8007c1e:	4909      	ldr	r1, [pc, #36]	@ (8007c44 <siprintf+0x3c>)
 8007c20:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c24:	9105      	str	r1, [sp, #20]
 8007c26:	6800      	ldr	r0, [r0, #0]
 8007c28:	9301      	str	r3, [sp, #4]
 8007c2a:	a902      	add	r1, sp, #8
 8007c2c:	f001 f8aa 	bl	8008d84 <_svfiprintf_r>
 8007c30:	9b02      	ldr	r3, [sp, #8]
 8007c32:	2200      	movs	r2, #0
 8007c34:	701a      	strb	r2, [r3, #0]
 8007c36:	b01c      	add	sp, #112	@ 0x70
 8007c38:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c3c:	b003      	add	sp, #12
 8007c3e:	4770      	bx	lr
 8007c40:	2000003c 	.word	0x2000003c
 8007c44:	ffff0208 	.word	0xffff0208

08007c48 <__sread>:
 8007c48:	b510      	push	{r4, lr}
 8007c4a:	460c      	mov	r4, r1
 8007c4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c50:	f000 f868 	bl	8007d24 <_read_r>
 8007c54:	2800      	cmp	r0, #0
 8007c56:	bfab      	itete	ge
 8007c58:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007c5a:	89a3      	ldrhlt	r3, [r4, #12]
 8007c5c:	181b      	addge	r3, r3, r0
 8007c5e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007c62:	bfac      	ite	ge
 8007c64:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007c66:	81a3      	strhlt	r3, [r4, #12]
 8007c68:	bd10      	pop	{r4, pc}

08007c6a <__swrite>:
 8007c6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c6e:	461f      	mov	r7, r3
 8007c70:	898b      	ldrh	r3, [r1, #12]
 8007c72:	05db      	lsls	r3, r3, #23
 8007c74:	4605      	mov	r5, r0
 8007c76:	460c      	mov	r4, r1
 8007c78:	4616      	mov	r6, r2
 8007c7a:	d505      	bpl.n	8007c88 <__swrite+0x1e>
 8007c7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c80:	2302      	movs	r3, #2
 8007c82:	2200      	movs	r2, #0
 8007c84:	f000 f83c 	bl	8007d00 <_lseek_r>
 8007c88:	89a3      	ldrh	r3, [r4, #12]
 8007c8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c8e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007c92:	81a3      	strh	r3, [r4, #12]
 8007c94:	4632      	mov	r2, r6
 8007c96:	463b      	mov	r3, r7
 8007c98:	4628      	mov	r0, r5
 8007c9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c9e:	f000 b853 	b.w	8007d48 <_write_r>

08007ca2 <__sseek>:
 8007ca2:	b510      	push	{r4, lr}
 8007ca4:	460c      	mov	r4, r1
 8007ca6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007caa:	f000 f829 	bl	8007d00 <_lseek_r>
 8007cae:	1c43      	adds	r3, r0, #1
 8007cb0:	89a3      	ldrh	r3, [r4, #12]
 8007cb2:	bf15      	itete	ne
 8007cb4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007cb6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007cba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007cbe:	81a3      	strheq	r3, [r4, #12]
 8007cc0:	bf18      	it	ne
 8007cc2:	81a3      	strhne	r3, [r4, #12]
 8007cc4:	bd10      	pop	{r4, pc}

08007cc6 <__sclose>:
 8007cc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cca:	f000 b809 	b.w	8007ce0 <_close_r>

08007cce <memset>:
 8007cce:	4402      	add	r2, r0
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d100      	bne.n	8007cd8 <memset+0xa>
 8007cd6:	4770      	bx	lr
 8007cd8:	f803 1b01 	strb.w	r1, [r3], #1
 8007cdc:	e7f9      	b.n	8007cd2 <memset+0x4>
	...

08007ce0 <_close_r>:
 8007ce0:	b538      	push	{r3, r4, r5, lr}
 8007ce2:	4d06      	ldr	r5, [pc, #24]	@ (8007cfc <_close_r+0x1c>)
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	4604      	mov	r4, r0
 8007ce8:	4608      	mov	r0, r1
 8007cea:	602b      	str	r3, [r5, #0]
 8007cec:	f7fb f8ee 	bl	8002ecc <_close>
 8007cf0:	1c43      	adds	r3, r0, #1
 8007cf2:	d102      	bne.n	8007cfa <_close_r+0x1a>
 8007cf4:	682b      	ldr	r3, [r5, #0]
 8007cf6:	b103      	cbz	r3, 8007cfa <_close_r+0x1a>
 8007cf8:	6023      	str	r3, [r4, #0]
 8007cfa:	bd38      	pop	{r3, r4, r5, pc}
 8007cfc:	200006b4 	.word	0x200006b4

08007d00 <_lseek_r>:
 8007d00:	b538      	push	{r3, r4, r5, lr}
 8007d02:	4d07      	ldr	r5, [pc, #28]	@ (8007d20 <_lseek_r+0x20>)
 8007d04:	4604      	mov	r4, r0
 8007d06:	4608      	mov	r0, r1
 8007d08:	4611      	mov	r1, r2
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	602a      	str	r2, [r5, #0]
 8007d0e:	461a      	mov	r2, r3
 8007d10:	f7fb f903 	bl	8002f1a <_lseek>
 8007d14:	1c43      	adds	r3, r0, #1
 8007d16:	d102      	bne.n	8007d1e <_lseek_r+0x1e>
 8007d18:	682b      	ldr	r3, [r5, #0]
 8007d1a:	b103      	cbz	r3, 8007d1e <_lseek_r+0x1e>
 8007d1c:	6023      	str	r3, [r4, #0]
 8007d1e:	bd38      	pop	{r3, r4, r5, pc}
 8007d20:	200006b4 	.word	0x200006b4

08007d24 <_read_r>:
 8007d24:	b538      	push	{r3, r4, r5, lr}
 8007d26:	4d07      	ldr	r5, [pc, #28]	@ (8007d44 <_read_r+0x20>)
 8007d28:	4604      	mov	r4, r0
 8007d2a:	4608      	mov	r0, r1
 8007d2c:	4611      	mov	r1, r2
 8007d2e:	2200      	movs	r2, #0
 8007d30:	602a      	str	r2, [r5, #0]
 8007d32:	461a      	mov	r2, r3
 8007d34:	f7fb f891 	bl	8002e5a <_read>
 8007d38:	1c43      	adds	r3, r0, #1
 8007d3a:	d102      	bne.n	8007d42 <_read_r+0x1e>
 8007d3c:	682b      	ldr	r3, [r5, #0]
 8007d3e:	b103      	cbz	r3, 8007d42 <_read_r+0x1e>
 8007d40:	6023      	str	r3, [r4, #0]
 8007d42:	bd38      	pop	{r3, r4, r5, pc}
 8007d44:	200006b4 	.word	0x200006b4

08007d48 <_write_r>:
 8007d48:	b538      	push	{r3, r4, r5, lr}
 8007d4a:	4d07      	ldr	r5, [pc, #28]	@ (8007d68 <_write_r+0x20>)
 8007d4c:	4604      	mov	r4, r0
 8007d4e:	4608      	mov	r0, r1
 8007d50:	4611      	mov	r1, r2
 8007d52:	2200      	movs	r2, #0
 8007d54:	602a      	str	r2, [r5, #0]
 8007d56:	461a      	mov	r2, r3
 8007d58:	f7fb f89c 	bl	8002e94 <_write>
 8007d5c:	1c43      	adds	r3, r0, #1
 8007d5e:	d102      	bne.n	8007d66 <_write_r+0x1e>
 8007d60:	682b      	ldr	r3, [r5, #0]
 8007d62:	b103      	cbz	r3, 8007d66 <_write_r+0x1e>
 8007d64:	6023      	str	r3, [r4, #0]
 8007d66:	bd38      	pop	{r3, r4, r5, pc}
 8007d68:	200006b4 	.word	0x200006b4

08007d6c <__errno>:
 8007d6c:	4b01      	ldr	r3, [pc, #4]	@ (8007d74 <__errno+0x8>)
 8007d6e:	6818      	ldr	r0, [r3, #0]
 8007d70:	4770      	bx	lr
 8007d72:	bf00      	nop
 8007d74:	2000003c 	.word	0x2000003c

08007d78 <__libc_init_array>:
 8007d78:	b570      	push	{r4, r5, r6, lr}
 8007d7a:	4d0d      	ldr	r5, [pc, #52]	@ (8007db0 <__libc_init_array+0x38>)
 8007d7c:	4c0d      	ldr	r4, [pc, #52]	@ (8007db4 <__libc_init_array+0x3c>)
 8007d7e:	1b64      	subs	r4, r4, r5
 8007d80:	10a4      	asrs	r4, r4, #2
 8007d82:	2600      	movs	r6, #0
 8007d84:	42a6      	cmp	r6, r4
 8007d86:	d109      	bne.n	8007d9c <__libc_init_array+0x24>
 8007d88:	4d0b      	ldr	r5, [pc, #44]	@ (8007db8 <__libc_init_array+0x40>)
 8007d8a:	4c0c      	ldr	r4, [pc, #48]	@ (8007dbc <__libc_init_array+0x44>)
 8007d8c:	f002 ffb2 	bl	800acf4 <_init>
 8007d90:	1b64      	subs	r4, r4, r5
 8007d92:	10a4      	asrs	r4, r4, #2
 8007d94:	2600      	movs	r6, #0
 8007d96:	42a6      	cmp	r6, r4
 8007d98:	d105      	bne.n	8007da6 <__libc_init_array+0x2e>
 8007d9a:	bd70      	pop	{r4, r5, r6, pc}
 8007d9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007da0:	4798      	blx	r3
 8007da2:	3601      	adds	r6, #1
 8007da4:	e7ee      	b.n	8007d84 <__libc_init_array+0xc>
 8007da6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007daa:	4798      	blx	r3
 8007dac:	3601      	adds	r6, #1
 8007dae:	e7f2      	b.n	8007d96 <__libc_init_array+0x1e>
 8007db0:	0800b11c 	.word	0x0800b11c
 8007db4:	0800b11c 	.word	0x0800b11c
 8007db8:	0800b11c 	.word	0x0800b11c
 8007dbc:	0800b120 	.word	0x0800b120

08007dc0 <__retarget_lock_init_recursive>:
 8007dc0:	4770      	bx	lr

08007dc2 <__retarget_lock_acquire_recursive>:
 8007dc2:	4770      	bx	lr

08007dc4 <__retarget_lock_release_recursive>:
 8007dc4:	4770      	bx	lr
	...

08007dc8 <nanf>:
 8007dc8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007dd0 <nanf+0x8>
 8007dcc:	4770      	bx	lr
 8007dce:	bf00      	nop
 8007dd0:	7fc00000 	.word	0x7fc00000

08007dd4 <_free_r>:
 8007dd4:	b538      	push	{r3, r4, r5, lr}
 8007dd6:	4605      	mov	r5, r0
 8007dd8:	2900      	cmp	r1, #0
 8007dda:	d041      	beq.n	8007e60 <_free_r+0x8c>
 8007ddc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007de0:	1f0c      	subs	r4, r1, #4
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	bfb8      	it	lt
 8007de6:	18e4      	addlt	r4, r4, r3
 8007de8:	f000 f8e0 	bl	8007fac <__malloc_lock>
 8007dec:	4a1d      	ldr	r2, [pc, #116]	@ (8007e64 <_free_r+0x90>)
 8007dee:	6813      	ldr	r3, [r2, #0]
 8007df0:	b933      	cbnz	r3, 8007e00 <_free_r+0x2c>
 8007df2:	6063      	str	r3, [r4, #4]
 8007df4:	6014      	str	r4, [r2, #0]
 8007df6:	4628      	mov	r0, r5
 8007df8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007dfc:	f000 b8dc 	b.w	8007fb8 <__malloc_unlock>
 8007e00:	42a3      	cmp	r3, r4
 8007e02:	d908      	bls.n	8007e16 <_free_r+0x42>
 8007e04:	6820      	ldr	r0, [r4, #0]
 8007e06:	1821      	adds	r1, r4, r0
 8007e08:	428b      	cmp	r3, r1
 8007e0a:	bf01      	itttt	eq
 8007e0c:	6819      	ldreq	r1, [r3, #0]
 8007e0e:	685b      	ldreq	r3, [r3, #4]
 8007e10:	1809      	addeq	r1, r1, r0
 8007e12:	6021      	streq	r1, [r4, #0]
 8007e14:	e7ed      	b.n	8007df2 <_free_r+0x1e>
 8007e16:	461a      	mov	r2, r3
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	b10b      	cbz	r3, 8007e20 <_free_r+0x4c>
 8007e1c:	42a3      	cmp	r3, r4
 8007e1e:	d9fa      	bls.n	8007e16 <_free_r+0x42>
 8007e20:	6811      	ldr	r1, [r2, #0]
 8007e22:	1850      	adds	r0, r2, r1
 8007e24:	42a0      	cmp	r0, r4
 8007e26:	d10b      	bne.n	8007e40 <_free_r+0x6c>
 8007e28:	6820      	ldr	r0, [r4, #0]
 8007e2a:	4401      	add	r1, r0
 8007e2c:	1850      	adds	r0, r2, r1
 8007e2e:	4283      	cmp	r3, r0
 8007e30:	6011      	str	r1, [r2, #0]
 8007e32:	d1e0      	bne.n	8007df6 <_free_r+0x22>
 8007e34:	6818      	ldr	r0, [r3, #0]
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	6053      	str	r3, [r2, #4]
 8007e3a:	4408      	add	r0, r1
 8007e3c:	6010      	str	r0, [r2, #0]
 8007e3e:	e7da      	b.n	8007df6 <_free_r+0x22>
 8007e40:	d902      	bls.n	8007e48 <_free_r+0x74>
 8007e42:	230c      	movs	r3, #12
 8007e44:	602b      	str	r3, [r5, #0]
 8007e46:	e7d6      	b.n	8007df6 <_free_r+0x22>
 8007e48:	6820      	ldr	r0, [r4, #0]
 8007e4a:	1821      	adds	r1, r4, r0
 8007e4c:	428b      	cmp	r3, r1
 8007e4e:	bf04      	itt	eq
 8007e50:	6819      	ldreq	r1, [r3, #0]
 8007e52:	685b      	ldreq	r3, [r3, #4]
 8007e54:	6063      	str	r3, [r4, #4]
 8007e56:	bf04      	itt	eq
 8007e58:	1809      	addeq	r1, r1, r0
 8007e5a:	6021      	streq	r1, [r4, #0]
 8007e5c:	6054      	str	r4, [r2, #4]
 8007e5e:	e7ca      	b.n	8007df6 <_free_r+0x22>
 8007e60:	bd38      	pop	{r3, r4, r5, pc}
 8007e62:	bf00      	nop
 8007e64:	200006c0 	.word	0x200006c0

08007e68 <sbrk_aligned>:
 8007e68:	b570      	push	{r4, r5, r6, lr}
 8007e6a:	4e0f      	ldr	r6, [pc, #60]	@ (8007ea8 <sbrk_aligned+0x40>)
 8007e6c:	460c      	mov	r4, r1
 8007e6e:	6831      	ldr	r1, [r6, #0]
 8007e70:	4605      	mov	r5, r0
 8007e72:	b911      	cbnz	r1, 8007e7a <sbrk_aligned+0x12>
 8007e74:	f001 fae8 	bl	8009448 <_sbrk_r>
 8007e78:	6030      	str	r0, [r6, #0]
 8007e7a:	4621      	mov	r1, r4
 8007e7c:	4628      	mov	r0, r5
 8007e7e:	f001 fae3 	bl	8009448 <_sbrk_r>
 8007e82:	1c43      	adds	r3, r0, #1
 8007e84:	d103      	bne.n	8007e8e <sbrk_aligned+0x26>
 8007e86:	f04f 34ff 	mov.w	r4, #4294967295
 8007e8a:	4620      	mov	r0, r4
 8007e8c:	bd70      	pop	{r4, r5, r6, pc}
 8007e8e:	1cc4      	adds	r4, r0, #3
 8007e90:	f024 0403 	bic.w	r4, r4, #3
 8007e94:	42a0      	cmp	r0, r4
 8007e96:	d0f8      	beq.n	8007e8a <sbrk_aligned+0x22>
 8007e98:	1a21      	subs	r1, r4, r0
 8007e9a:	4628      	mov	r0, r5
 8007e9c:	f001 fad4 	bl	8009448 <_sbrk_r>
 8007ea0:	3001      	adds	r0, #1
 8007ea2:	d1f2      	bne.n	8007e8a <sbrk_aligned+0x22>
 8007ea4:	e7ef      	b.n	8007e86 <sbrk_aligned+0x1e>
 8007ea6:	bf00      	nop
 8007ea8:	200006bc 	.word	0x200006bc

08007eac <_malloc_r>:
 8007eac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007eb0:	1ccd      	adds	r5, r1, #3
 8007eb2:	f025 0503 	bic.w	r5, r5, #3
 8007eb6:	3508      	adds	r5, #8
 8007eb8:	2d0c      	cmp	r5, #12
 8007eba:	bf38      	it	cc
 8007ebc:	250c      	movcc	r5, #12
 8007ebe:	2d00      	cmp	r5, #0
 8007ec0:	4606      	mov	r6, r0
 8007ec2:	db01      	blt.n	8007ec8 <_malloc_r+0x1c>
 8007ec4:	42a9      	cmp	r1, r5
 8007ec6:	d904      	bls.n	8007ed2 <_malloc_r+0x26>
 8007ec8:	230c      	movs	r3, #12
 8007eca:	6033      	str	r3, [r6, #0]
 8007ecc:	2000      	movs	r0, #0
 8007ece:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ed2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007fa8 <_malloc_r+0xfc>
 8007ed6:	f000 f869 	bl	8007fac <__malloc_lock>
 8007eda:	f8d8 3000 	ldr.w	r3, [r8]
 8007ede:	461c      	mov	r4, r3
 8007ee0:	bb44      	cbnz	r4, 8007f34 <_malloc_r+0x88>
 8007ee2:	4629      	mov	r1, r5
 8007ee4:	4630      	mov	r0, r6
 8007ee6:	f7ff ffbf 	bl	8007e68 <sbrk_aligned>
 8007eea:	1c43      	adds	r3, r0, #1
 8007eec:	4604      	mov	r4, r0
 8007eee:	d158      	bne.n	8007fa2 <_malloc_r+0xf6>
 8007ef0:	f8d8 4000 	ldr.w	r4, [r8]
 8007ef4:	4627      	mov	r7, r4
 8007ef6:	2f00      	cmp	r7, #0
 8007ef8:	d143      	bne.n	8007f82 <_malloc_r+0xd6>
 8007efa:	2c00      	cmp	r4, #0
 8007efc:	d04b      	beq.n	8007f96 <_malloc_r+0xea>
 8007efe:	6823      	ldr	r3, [r4, #0]
 8007f00:	4639      	mov	r1, r7
 8007f02:	4630      	mov	r0, r6
 8007f04:	eb04 0903 	add.w	r9, r4, r3
 8007f08:	f001 fa9e 	bl	8009448 <_sbrk_r>
 8007f0c:	4581      	cmp	r9, r0
 8007f0e:	d142      	bne.n	8007f96 <_malloc_r+0xea>
 8007f10:	6821      	ldr	r1, [r4, #0]
 8007f12:	1a6d      	subs	r5, r5, r1
 8007f14:	4629      	mov	r1, r5
 8007f16:	4630      	mov	r0, r6
 8007f18:	f7ff ffa6 	bl	8007e68 <sbrk_aligned>
 8007f1c:	3001      	adds	r0, #1
 8007f1e:	d03a      	beq.n	8007f96 <_malloc_r+0xea>
 8007f20:	6823      	ldr	r3, [r4, #0]
 8007f22:	442b      	add	r3, r5
 8007f24:	6023      	str	r3, [r4, #0]
 8007f26:	f8d8 3000 	ldr.w	r3, [r8]
 8007f2a:	685a      	ldr	r2, [r3, #4]
 8007f2c:	bb62      	cbnz	r2, 8007f88 <_malloc_r+0xdc>
 8007f2e:	f8c8 7000 	str.w	r7, [r8]
 8007f32:	e00f      	b.n	8007f54 <_malloc_r+0xa8>
 8007f34:	6822      	ldr	r2, [r4, #0]
 8007f36:	1b52      	subs	r2, r2, r5
 8007f38:	d420      	bmi.n	8007f7c <_malloc_r+0xd0>
 8007f3a:	2a0b      	cmp	r2, #11
 8007f3c:	d917      	bls.n	8007f6e <_malloc_r+0xc2>
 8007f3e:	1961      	adds	r1, r4, r5
 8007f40:	42a3      	cmp	r3, r4
 8007f42:	6025      	str	r5, [r4, #0]
 8007f44:	bf18      	it	ne
 8007f46:	6059      	strne	r1, [r3, #4]
 8007f48:	6863      	ldr	r3, [r4, #4]
 8007f4a:	bf08      	it	eq
 8007f4c:	f8c8 1000 	streq.w	r1, [r8]
 8007f50:	5162      	str	r2, [r4, r5]
 8007f52:	604b      	str	r3, [r1, #4]
 8007f54:	4630      	mov	r0, r6
 8007f56:	f000 f82f 	bl	8007fb8 <__malloc_unlock>
 8007f5a:	f104 000b 	add.w	r0, r4, #11
 8007f5e:	1d23      	adds	r3, r4, #4
 8007f60:	f020 0007 	bic.w	r0, r0, #7
 8007f64:	1ac2      	subs	r2, r0, r3
 8007f66:	bf1c      	itt	ne
 8007f68:	1a1b      	subne	r3, r3, r0
 8007f6a:	50a3      	strne	r3, [r4, r2]
 8007f6c:	e7af      	b.n	8007ece <_malloc_r+0x22>
 8007f6e:	6862      	ldr	r2, [r4, #4]
 8007f70:	42a3      	cmp	r3, r4
 8007f72:	bf0c      	ite	eq
 8007f74:	f8c8 2000 	streq.w	r2, [r8]
 8007f78:	605a      	strne	r2, [r3, #4]
 8007f7a:	e7eb      	b.n	8007f54 <_malloc_r+0xa8>
 8007f7c:	4623      	mov	r3, r4
 8007f7e:	6864      	ldr	r4, [r4, #4]
 8007f80:	e7ae      	b.n	8007ee0 <_malloc_r+0x34>
 8007f82:	463c      	mov	r4, r7
 8007f84:	687f      	ldr	r7, [r7, #4]
 8007f86:	e7b6      	b.n	8007ef6 <_malloc_r+0x4a>
 8007f88:	461a      	mov	r2, r3
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	42a3      	cmp	r3, r4
 8007f8e:	d1fb      	bne.n	8007f88 <_malloc_r+0xdc>
 8007f90:	2300      	movs	r3, #0
 8007f92:	6053      	str	r3, [r2, #4]
 8007f94:	e7de      	b.n	8007f54 <_malloc_r+0xa8>
 8007f96:	230c      	movs	r3, #12
 8007f98:	6033      	str	r3, [r6, #0]
 8007f9a:	4630      	mov	r0, r6
 8007f9c:	f000 f80c 	bl	8007fb8 <__malloc_unlock>
 8007fa0:	e794      	b.n	8007ecc <_malloc_r+0x20>
 8007fa2:	6005      	str	r5, [r0, #0]
 8007fa4:	e7d6      	b.n	8007f54 <_malloc_r+0xa8>
 8007fa6:	bf00      	nop
 8007fa8:	200006c0 	.word	0x200006c0

08007fac <__malloc_lock>:
 8007fac:	4801      	ldr	r0, [pc, #4]	@ (8007fb4 <__malloc_lock+0x8>)
 8007fae:	f7ff bf08 	b.w	8007dc2 <__retarget_lock_acquire_recursive>
 8007fb2:	bf00      	nop
 8007fb4:	200006b8 	.word	0x200006b8

08007fb8 <__malloc_unlock>:
 8007fb8:	4801      	ldr	r0, [pc, #4]	@ (8007fc0 <__malloc_unlock+0x8>)
 8007fba:	f7ff bf03 	b.w	8007dc4 <__retarget_lock_release_recursive>
 8007fbe:	bf00      	nop
 8007fc0:	200006b8 	.word	0x200006b8

08007fc4 <sulp>:
 8007fc4:	b570      	push	{r4, r5, r6, lr}
 8007fc6:	4604      	mov	r4, r0
 8007fc8:	460d      	mov	r5, r1
 8007fca:	ec45 4b10 	vmov	d0, r4, r5
 8007fce:	4616      	mov	r6, r2
 8007fd0:	f002 f922 	bl	800a218 <__ulp>
 8007fd4:	ec51 0b10 	vmov	r0, r1, d0
 8007fd8:	b17e      	cbz	r6, 8007ffa <sulp+0x36>
 8007fda:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007fde:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	dd09      	ble.n	8007ffa <sulp+0x36>
 8007fe6:	051b      	lsls	r3, r3, #20
 8007fe8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007fec:	2400      	movs	r4, #0
 8007fee:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007ff2:	4622      	mov	r2, r4
 8007ff4:	462b      	mov	r3, r5
 8007ff6:	f7f8 faff 	bl	80005f8 <__aeabi_dmul>
 8007ffa:	ec41 0b10 	vmov	d0, r0, r1
 8007ffe:	bd70      	pop	{r4, r5, r6, pc}

08008000 <_strtod_l>:
 8008000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008004:	b09f      	sub	sp, #124	@ 0x7c
 8008006:	460c      	mov	r4, r1
 8008008:	9217      	str	r2, [sp, #92]	@ 0x5c
 800800a:	2200      	movs	r2, #0
 800800c:	921a      	str	r2, [sp, #104]	@ 0x68
 800800e:	9005      	str	r0, [sp, #20]
 8008010:	f04f 0a00 	mov.w	sl, #0
 8008014:	f04f 0b00 	mov.w	fp, #0
 8008018:	460a      	mov	r2, r1
 800801a:	9219      	str	r2, [sp, #100]	@ 0x64
 800801c:	7811      	ldrb	r1, [r2, #0]
 800801e:	292b      	cmp	r1, #43	@ 0x2b
 8008020:	d04a      	beq.n	80080b8 <_strtod_l+0xb8>
 8008022:	d838      	bhi.n	8008096 <_strtod_l+0x96>
 8008024:	290d      	cmp	r1, #13
 8008026:	d832      	bhi.n	800808e <_strtod_l+0x8e>
 8008028:	2908      	cmp	r1, #8
 800802a:	d832      	bhi.n	8008092 <_strtod_l+0x92>
 800802c:	2900      	cmp	r1, #0
 800802e:	d03b      	beq.n	80080a8 <_strtod_l+0xa8>
 8008030:	2200      	movs	r2, #0
 8008032:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008034:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008036:	782a      	ldrb	r2, [r5, #0]
 8008038:	2a30      	cmp	r2, #48	@ 0x30
 800803a:	f040 80b3 	bne.w	80081a4 <_strtod_l+0x1a4>
 800803e:	786a      	ldrb	r2, [r5, #1]
 8008040:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008044:	2a58      	cmp	r2, #88	@ 0x58
 8008046:	d16e      	bne.n	8008126 <_strtod_l+0x126>
 8008048:	9302      	str	r3, [sp, #8]
 800804a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800804c:	9301      	str	r3, [sp, #4]
 800804e:	ab1a      	add	r3, sp, #104	@ 0x68
 8008050:	9300      	str	r3, [sp, #0]
 8008052:	4a8e      	ldr	r2, [pc, #568]	@ (800828c <_strtod_l+0x28c>)
 8008054:	9805      	ldr	r0, [sp, #20]
 8008056:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008058:	a919      	add	r1, sp, #100	@ 0x64
 800805a:	f001 fa85 	bl	8009568 <__gethex>
 800805e:	f010 060f 	ands.w	r6, r0, #15
 8008062:	4604      	mov	r4, r0
 8008064:	d005      	beq.n	8008072 <_strtod_l+0x72>
 8008066:	2e06      	cmp	r6, #6
 8008068:	d128      	bne.n	80080bc <_strtod_l+0xbc>
 800806a:	3501      	adds	r5, #1
 800806c:	2300      	movs	r3, #0
 800806e:	9519      	str	r5, [sp, #100]	@ 0x64
 8008070:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008072:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008074:	2b00      	cmp	r3, #0
 8008076:	f040 858e 	bne.w	8008b96 <_strtod_l+0xb96>
 800807a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800807c:	b1cb      	cbz	r3, 80080b2 <_strtod_l+0xb2>
 800807e:	4652      	mov	r2, sl
 8008080:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008084:	ec43 2b10 	vmov	d0, r2, r3
 8008088:	b01f      	add	sp, #124	@ 0x7c
 800808a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800808e:	2920      	cmp	r1, #32
 8008090:	d1ce      	bne.n	8008030 <_strtod_l+0x30>
 8008092:	3201      	adds	r2, #1
 8008094:	e7c1      	b.n	800801a <_strtod_l+0x1a>
 8008096:	292d      	cmp	r1, #45	@ 0x2d
 8008098:	d1ca      	bne.n	8008030 <_strtod_l+0x30>
 800809a:	2101      	movs	r1, #1
 800809c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800809e:	1c51      	adds	r1, r2, #1
 80080a0:	9119      	str	r1, [sp, #100]	@ 0x64
 80080a2:	7852      	ldrb	r2, [r2, #1]
 80080a4:	2a00      	cmp	r2, #0
 80080a6:	d1c5      	bne.n	8008034 <_strtod_l+0x34>
 80080a8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80080aa:	9419      	str	r4, [sp, #100]	@ 0x64
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	f040 8570 	bne.w	8008b92 <_strtod_l+0xb92>
 80080b2:	4652      	mov	r2, sl
 80080b4:	465b      	mov	r3, fp
 80080b6:	e7e5      	b.n	8008084 <_strtod_l+0x84>
 80080b8:	2100      	movs	r1, #0
 80080ba:	e7ef      	b.n	800809c <_strtod_l+0x9c>
 80080bc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80080be:	b13a      	cbz	r2, 80080d0 <_strtod_l+0xd0>
 80080c0:	2135      	movs	r1, #53	@ 0x35
 80080c2:	a81c      	add	r0, sp, #112	@ 0x70
 80080c4:	f002 f9a2 	bl	800a40c <__copybits>
 80080c8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80080ca:	9805      	ldr	r0, [sp, #20]
 80080cc:	f001 fd70 	bl	8009bb0 <_Bfree>
 80080d0:	3e01      	subs	r6, #1
 80080d2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80080d4:	2e04      	cmp	r6, #4
 80080d6:	d806      	bhi.n	80080e6 <_strtod_l+0xe6>
 80080d8:	e8df f006 	tbb	[pc, r6]
 80080dc:	201d0314 	.word	0x201d0314
 80080e0:	14          	.byte	0x14
 80080e1:	00          	.byte	0x00
 80080e2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80080e6:	05e1      	lsls	r1, r4, #23
 80080e8:	bf48      	it	mi
 80080ea:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80080ee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80080f2:	0d1b      	lsrs	r3, r3, #20
 80080f4:	051b      	lsls	r3, r3, #20
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d1bb      	bne.n	8008072 <_strtod_l+0x72>
 80080fa:	f7ff fe37 	bl	8007d6c <__errno>
 80080fe:	2322      	movs	r3, #34	@ 0x22
 8008100:	6003      	str	r3, [r0, #0]
 8008102:	e7b6      	b.n	8008072 <_strtod_l+0x72>
 8008104:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008108:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800810c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008110:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008114:	e7e7      	b.n	80080e6 <_strtod_l+0xe6>
 8008116:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8008294 <_strtod_l+0x294>
 800811a:	e7e4      	b.n	80080e6 <_strtod_l+0xe6>
 800811c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008120:	f04f 3aff 	mov.w	sl, #4294967295
 8008124:	e7df      	b.n	80080e6 <_strtod_l+0xe6>
 8008126:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008128:	1c5a      	adds	r2, r3, #1
 800812a:	9219      	str	r2, [sp, #100]	@ 0x64
 800812c:	785b      	ldrb	r3, [r3, #1]
 800812e:	2b30      	cmp	r3, #48	@ 0x30
 8008130:	d0f9      	beq.n	8008126 <_strtod_l+0x126>
 8008132:	2b00      	cmp	r3, #0
 8008134:	d09d      	beq.n	8008072 <_strtod_l+0x72>
 8008136:	2301      	movs	r3, #1
 8008138:	9309      	str	r3, [sp, #36]	@ 0x24
 800813a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800813c:	930c      	str	r3, [sp, #48]	@ 0x30
 800813e:	2300      	movs	r3, #0
 8008140:	9308      	str	r3, [sp, #32]
 8008142:	930a      	str	r3, [sp, #40]	@ 0x28
 8008144:	461f      	mov	r7, r3
 8008146:	220a      	movs	r2, #10
 8008148:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800814a:	7805      	ldrb	r5, [r0, #0]
 800814c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008150:	b2d9      	uxtb	r1, r3
 8008152:	2909      	cmp	r1, #9
 8008154:	d928      	bls.n	80081a8 <_strtod_l+0x1a8>
 8008156:	494e      	ldr	r1, [pc, #312]	@ (8008290 <_strtod_l+0x290>)
 8008158:	2201      	movs	r2, #1
 800815a:	f001 f963 	bl	8009424 <strncmp>
 800815e:	2800      	cmp	r0, #0
 8008160:	d032      	beq.n	80081c8 <_strtod_l+0x1c8>
 8008162:	2000      	movs	r0, #0
 8008164:	462a      	mov	r2, r5
 8008166:	4681      	mov	r9, r0
 8008168:	463d      	mov	r5, r7
 800816a:	4603      	mov	r3, r0
 800816c:	2a65      	cmp	r2, #101	@ 0x65
 800816e:	d001      	beq.n	8008174 <_strtod_l+0x174>
 8008170:	2a45      	cmp	r2, #69	@ 0x45
 8008172:	d114      	bne.n	800819e <_strtod_l+0x19e>
 8008174:	b91d      	cbnz	r5, 800817e <_strtod_l+0x17e>
 8008176:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008178:	4302      	orrs	r2, r0
 800817a:	d095      	beq.n	80080a8 <_strtod_l+0xa8>
 800817c:	2500      	movs	r5, #0
 800817e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008180:	1c62      	adds	r2, r4, #1
 8008182:	9219      	str	r2, [sp, #100]	@ 0x64
 8008184:	7862      	ldrb	r2, [r4, #1]
 8008186:	2a2b      	cmp	r2, #43	@ 0x2b
 8008188:	d077      	beq.n	800827a <_strtod_l+0x27a>
 800818a:	2a2d      	cmp	r2, #45	@ 0x2d
 800818c:	d07b      	beq.n	8008286 <_strtod_l+0x286>
 800818e:	f04f 0c00 	mov.w	ip, #0
 8008192:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008196:	2909      	cmp	r1, #9
 8008198:	f240 8082 	bls.w	80082a0 <_strtod_l+0x2a0>
 800819c:	9419      	str	r4, [sp, #100]	@ 0x64
 800819e:	f04f 0800 	mov.w	r8, #0
 80081a2:	e0a2      	b.n	80082ea <_strtod_l+0x2ea>
 80081a4:	2300      	movs	r3, #0
 80081a6:	e7c7      	b.n	8008138 <_strtod_l+0x138>
 80081a8:	2f08      	cmp	r7, #8
 80081aa:	bfd5      	itete	le
 80081ac:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80081ae:	9908      	ldrgt	r1, [sp, #32]
 80081b0:	fb02 3301 	mlale	r3, r2, r1, r3
 80081b4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80081b8:	f100 0001 	add.w	r0, r0, #1
 80081bc:	bfd4      	ite	le
 80081be:	930a      	strle	r3, [sp, #40]	@ 0x28
 80081c0:	9308      	strgt	r3, [sp, #32]
 80081c2:	3701      	adds	r7, #1
 80081c4:	9019      	str	r0, [sp, #100]	@ 0x64
 80081c6:	e7bf      	b.n	8008148 <_strtod_l+0x148>
 80081c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80081ca:	1c5a      	adds	r2, r3, #1
 80081cc:	9219      	str	r2, [sp, #100]	@ 0x64
 80081ce:	785a      	ldrb	r2, [r3, #1]
 80081d0:	b37f      	cbz	r7, 8008232 <_strtod_l+0x232>
 80081d2:	4681      	mov	r9, r0
 80081d4:	463d      	mov	r5, r7
 80081d6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80081da:	2b09      	cmp	r3, #9
 80081dc:	d912      	bls.n	8008204 <_strtod_l+0x204>
 80081de:	2301      	movs	r3, #1
 80081e0:	e7c4      	b.n	800816c <_strtod_l+0x16c>
 80081e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80081e4:	1c5a      	adds	r2, r3, #1
 80081e6:	9219      	str	r2, [sp, #100]	@ 0x64
 80081e8:	785a      	ldrb	r2, [r3, #1]
 80081ea:	3001      	adds	r0, #1
 80081ec:	2a30      	cmp	r2, #48	@ 0x30
 80081ee:	d0f8      	beq.n	80081e2 <_strtod_l+0x1e2>
 80081f0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80081f4:	2b08      	cmp	r3, #8
 80081f6:	f200 84d3 	bhi.w	8008ba0 <_strtod_l+0xba0>
 80081fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80081fc:	930c      	str	r3, [sp, #48]	@ 0x30
 80081fe:	4681      	mov	r9, r0
 8008200:	2000      	movs	r0, #0
 8008202:	4605      	mov	r5, r0
 8008204:	3a30      	subs	r2, #48	@ 0x30
 8008206:	f100 0301 	add.w	r3, r0, #1
 800820a:	d02a      	beq.n	8008262 <_strtod_l+0x262>
 800820c:	4499      	add	r9, r3
 800820e:	eb00 0c05 	add.w	ip, r0, r5
 8008212:	462b      	mov	r3, r5
 8008214:	210a      	movs	r1, #10
 8008216:	4563      	cmp	r3, ip
 8008218:	d10d      	bne.n	8008236 <_strtod_l+0x236>
 800821a:	1c69      	adds	r1, r5, #1
 800821c:	4401      	add	r1, r0
 800821e:	4428      	add	r0, r5
 8008220:	2808      	cmp	r0, #8
 8008222:	dc16      	bgt.n	8008252 <_strtod_l+0x252>
 8008224:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008226:	230a      	movs	r3, #10
 8008228:	fb03 2300 	mla	r3, r3, r0, r2
 800822c:	930a      	str	r3, [sp, #40]	@ 0x28
 800822e:	2300      	movs	r3, #0
 8008230:	e018      	b.n	8008264 <_strtod_l+0x264>
 8008232:	4638      	mov	r0, r7
 8008234:	e7da      	b.n	80081ec <_strtod_l+0x1ec>
 8008236:	2b08      	cmp	r3, #8
 8008238:	f103 0301 	add.w	r3, r3, #1
 800823c:	dc03      	bgt.n	8008246 <_strtod_l+0x246>
 800823e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008240:	434e      	muls	r6, r1
 8008242:	960a      	str	r6, [sp, #40]	@ 0x28
 8008244:	e7e7      	b.n	8008216 <_strtod_l+0x216>
 8008246:	2b10      	cmp	r3, #16
 8008248:	bfde      	ittt	le
 800824a:	9e08      	ldrle	r6, [sp, #32]
 800824c:	434e      	mulle	r6, r1
 800824e:	9608      	strle	r6, [sp, #32]
 8008250:	e7e1      	b.n	8008216 <_strtod_l+0x216>
 8008252:	280f      	cmp	r0, #15
 8008254:	dceb      	bgt.n	800822e <_strtod_l+0x22e>
 8008256:	9808      	ldr	r0, [sp, #32]
 8008258:	230a      	movs	r3, #10
 800825a:	fb03 2300 	mla	r3, r3, r0, r2
 800825e:	9308      	str	r3, [sp, #32]
 8008260:	e7e5      	b.n	800822e <_strtod_l+0x22e>
 8008262:	4629      	mov	r1, r5
 8008264:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008266:	1c50      	adds	r0, r2, #1
 8008268:	9019      	str	r0, [sp, #100]	@ 0x64
 800826a:	7852      	ldrb	r2, [r2, #1]
 800826c:	4618      	mov	r0, r3
 800826e:	460d      	mov	r5, r1
 8008270:	e7b1      	b.n	80081d6 <_strtod_l+0x1d6>
 8008272:	f04f 0900 	mov.w	r9, #0
 8008276:	2301      	movs	r3, #1
 8008278:	e77d      	b.n	8008176 <_strtod_l+0x176>
 800827a:	f04f 0c00 	mov.w	ip, #0
 800827e:	1ca2      	adds	r2, r4, #2
 8008280:	9219      	str	r2, [sp, #100]	@ 0x64
 8008282:	78a2      	ldrb	r2, [r4, #2]
 8008284:	e785      	b.n	8008192 <_strtod_l+0x192>
 8008286:	f04f 0c01 	mov.w	ip, #1
 800828a:	e7f8      	b.n	800827e <_strtod_l+0x27e>
 800828c:	0800ad58 	.word	0x0800ad58
 8008290:	0800ad35 	.word	0x0800ad35
 8008294:	7ff00000 	.word	0x7ff00000
 8008298:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800829a:	1c51      	adds	r1, r2, #1
 800829c:	9119      	str	r1, [sp, #100]	@ 0x64
 800829e:	7852      	ldrb	r2, [r2, #1]
 80082a0:	2a30      	cmp	r2, #48	@ 0x30
 80082a2:	d0f9      	beq.n	8008298 <_strtod_l+0x298>
 80082a4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80082a8:	2908      	cmp	r1, #8
 80082aa:	f63f af78 	bhi.w	800819e <_strtod_l+0x19e>
 80082ae:	3a30      	subs	r2, #48	@ 0x30
 80082b0:	920e      	str	r2, [sp, #56]	@ 0x38
 80082b2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80082b4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80082b6:	f04f 080a 	mov.w	r8, #10
 80082ba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80082bc:	1c56      	adds	r6, r2, #1
 80082be:	9619      	str	r6, [sp, #100]	@ 0x64
 80082c0:	7852      	ldrb	r2, [r2, #1]
 80082c2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80082c6:	f1be 0f09 	cmp.w	lr, #9
 80082ca:	d939      	bls.n	8008340 <_strtod_l+0x340>
 80082cc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80082ce:	1a76      	subs	r6, r6, r1
 80082d0:	2e08      	cmp	r6, #8
 80082d2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80082d6:	dc03      	bgt.n	80082e0 <_strtod_l+0x2e0>
 80082d8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80082da:	4588      	cmp	r8, r1
 80082dc:	bfa8      	it	ge
 80082de:	4688      	movge	r8, r1
 80082e0:	f1bc 0f00 	cmp.w	ip, #0
 80082e4:	d001      	beq.n	80082ea <_strtod_l+0x2ea>
 80082e6:	f1c8 0800 	rsb	r8, r8, #0
 80082ea:	2d00      	cmp	r5, #0
 80082ec:	d14e      	bne.n	800838c <_strtod_l+0x38c>
 80082ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80082f0:	4308      	orrs	r0, r1
 80082f2:	f47f aebe 	bne.w	8008072 <_strtod_l+0x72>
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	f47f aed6 	bne.w	80080a8 <_strtod_l+0xa8>
 80082fc:	2a69      	cmp	r2, #105	@ 0x69
 80082fe:	d028      	beq.n	8008352 <_strtod_l+0x352>
 8008300:	dc25      	bgt.n	800834e <_strtod_l+0x34e>
 8008302:	2a49      	cmp	r2, #73	@ 0x49
 8008304:	d025      	beq.n	8008352 <_strtod_l+0x352>
 8008306:	2a4e      	cmp	r2, #78	@ 0x4e
 8008308:	f47f aece 	bne.w	80080a8 <_strtod_l+0xa8>
 800830c:	499b      	ldr	r1, [pc, #620]	@ (800857c <_strtod_l+0x57c>)
 800830e:	a819      	add	r0, sp, #100	@ 0x64
 8008310:	f001 fb4c 	bl	80099ac <__match>
 8008314:	2800      	cmp	r0, #0
 8008316:	f43f aec7 	beq.w	80080a8 <_strtod_l+0xa8>
 800831a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800831c:	781b      	ldrb	r3, [r3, #0]
 800831e:	2b28      	cmp	r3, #40	@ 0x28
 8008320:	d12e      	bne.n	8008380 <_strtod_l+0x380>
 8008322:	4997      	ldr	r1, [pc, #604]	@ (8008580 <_strtod_l+0x580>)
 8008324:	aa1c      	add	r2, sp, #112	@ 0x70
 8008326:	a819      	add	r0, sp, #100	@ 0x64
 8008328:	f001 fb54 	bl	80099d4 <__hexnan>
 800832c:	2805      	cmp	r0, #5
 800832e:	d127      	bne.n	8008380 <_strtod_l+0x380>
 8008330:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008332:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008336:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800833a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800833e:	e698      	b.n	8008072 <_strtod_l+0x72>
 8008340:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008342:	fb08 2101 	mla	r1, r8, r1, r2
 8008346:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800834a:	920e      	str	r2, [sp, #56]	@ 0x38
 800834c:	e7b5      	b.n	80082ba <_strtod_l+0x2ba>
 800834e:	2a6e      	cmp	r2, #110	@ 0x6e
 8008350:	e7da      	b.n	8008308 <_strtod_l+0x308>
 8008352:	498c      	ldr	r1, [pc, #560]	@ (8008584 <_strtod_l+0x584>)
 8008354:	a819      	add	r0, sp, #100	@ 0x64
 8008356:	f001 fb29 	bl	80099ac <__match>
 800835a:	2800      	cmp	r0, #0
 800835c:	f43f aea4 	beq.w	80080a8 <_strtod_l+0xa8>
 8008360:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008362:	4989      	ldr	r1, [pc, #548]	@ (8008588 <_strtod_l+0x588>)
 8008364:	3b01      	subs	r3, #1
 8008366:	a819      	add	r0, sp, #100	@ 0x64
 8008368:	9319      	str	r3, [sp, #100]	@ 0x64
 800836a:	f001 fb1f 	bl	80099ac <__match>
 800836e:	b910      	cbnz	r0, 8008376 <_strtod_l+0x376>
 8008370:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008372:	3301      	adds	r3, #1
 8008374:	9319      	str	r3, [sp, #100]	@ 0x64
 8008376:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8008598 <_strtod_l+0x598>
 800837a:	f04f 0a00 	mov.w	sl, #0
 800837e:	e678      	b.n	8008072 <_strtod_l+0x72>
 8008380:	4882      	ldr	r0, [pc, #520]	@ (800858c <_strtod_l+0x58c>)
 8008382:	f001 f881 	bl	8009488 <nan>
 8008386:	ec5b ab10 	vmov	sl, fp, d0
 800838a:	e672      	b.n	8008072 <_strtod_l+0x72>
 800838c:	eba8 0309 	sub.w	r3, r8, r9
 8008390:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008392:	9309      	str	r3, [sp, #36]	@ 0x24
 8008394:	2f00      	cmp	r7, #0
 8008396:	bf08      	it	eq
 8008398:	462f      	moveq	r7, r5
 800839a:	2d10      	cmp	r5, #16
 800839c:	462c      	mov	r4, r5
 800839e:	bfa8      	it	ge
 80083a0:	2410      	movge	r4, #16
 80083a2:	f7f8 f8af 	bl	8000504 <__aeabi_ui2d>
 80083a6:	2d09      	cmp	r5, #9
 80083a8:	4682      	mov	sl, r0
 80083aa:	468b      	mov	fp, r1
 80083ac:	dc13      	bgt.n	80083d6 <_strtod_l+0x3d6>
 80083ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	f43f ae5e 	beq.w	8008072 <_strtod_l+0x72>
 80083b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083b8:	dd78      	ble.n	80084ac <_strtod_l+0x4ac>
 80083ba:	2b16      	cmp	r3, #22
 80083bc:	dc5f      	bgt.n	800847e <_strtod_l+0x47e>
 80083be:	4974      	ldr	r1, [pc, #464]	@ (8008590 <_strtod_l+0x590>)
 80083c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80083c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083c8:	4652      	mov	r2, sl
 80083ca:	465b      	mov	r3, fp
 80083cc:	f7f8 f914 	bl	80005f8 <__aeabi_dmul>
 80083d0:	4682      	mov	sl, r0
 80083d2:	468b      	mov	fp, r1
 80083d4:	e64d      	b.n	8008072 <_strtod_l+0x72>
 80083d6:	4b6e      	ldr	r3, [pc, #440]	@ (8008590 <_strtod_l+0x590>)
 80083d8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80083dc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80083e0:	f7f8 f90a 	bl	80005f8 <__aeabi_dmul>
 80083e4:	4682      	mov	sl, r0
 80083e6:	9808      	ldr	r0, [sp, #32]
 80083e8:	468b      	mov	fp, r1
 80083ea:	f7f8 f88b 	bl	8000504 <__aeabi_ui2d>
 80083ee:	4602      	mov	r2, r0
 80083f0:	460b      	mov	r3, r1
 80083f2:	4650      	mov	r0, sl
 80083f4:	4659      	mov	r1, fp
 80083f6:	f7f7 ff49 	bl	800028c <__adddf3>
 80083fa:	2d0f      	cmp	r5, #15
 80083fc:	4682      	mov	sl, r0
 80083fe:	468b      	mov	fp, r1
 8008400:	ddd5      	ble.n	80083ae <_strtod_l+0x3ae>
 8008402:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008404:	1b2c      	subs	r4, r5, r4
 8008406:	441c      	add	r4, r3
 8008408:	2c00      	cmp	r4, #0
 800840a:	f340 8096 	ble.w	800853a <_strtod_l+0x53a>
 800840e:	f014 030f 	ands.w	r3, r4, #15
 8008412:	d00a      	beq.n	800842a <_strtod_l+0x42a>
 8008414:	495e      	ldr	r1, [pc, #376]	@ (8008590 <_strtod_l+0x590>)
 8008416:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800841a:	4652      	mov	r2, sl
 800841c:	465b      	mov	r3, fp
 800841e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008422:	f7f8 f8e9 	bl	80005f8 <__aeabi_dmul>
 8008426:	4682      	mov	sl, r0
 8008428:	468b      	mov	fp, r1
 800842a:	f034 040f 	bics.w	r4, r4, #15
 800842e:	d073      	beq.n	8008518 <_strtod_l+0x518>
 8008430:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008434:	dd48      	ble.n	80084c8 <_strtod_l+0x4c8>
 8008436:	2400      	movs	r4, #0
 8008438:	46a0      	mov	r8, r4
 800843a:	940a      	str	r4, [sp, #40]	@ 0x28
 800843c:	46a1      	mov	r9, r4
 800843e:	9a05      	ldr	r2, [sp, #20]
 8008440:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8008598 <_strtod_l+0x598>
 8008444:	2322      	movs	r3, #34	@ 0x22
 8008446:	6013      	str	r3, [r2, #0]
 8008448:	f04f 0a00 	mov.w	sl, #0
 800844c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800844e:	2b00      	cmp	r3, #0
 8008450:	f43f ae0f 	beq.w	8008072 <_strtod_l+0x72>
 8008454:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008456:	9805      	ldr	r0, [sp, #20]
 8008458:	f001 fbaa 	bl	8009bb0 <_Bfree>
 800845c:	9805      	ldr	r0, [sp, #20]
 800845e:	4649      	mov	r1, r9
 8008460:	f001 fba6 	bl	8009bb0 <_Bfree>
 8008464:	9805      	ldr	r0, [sp, #20]
 8008466:	4641      	mov	r1, r8
 8008468:	f001 fba2 	bl	8009bb0 <_Bfree>
 800846c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800846e:	9805      	ldr	r0, [sp, #20]
 8008470:	f001 fb9e 	bl	8009bb0 <_Bfree>
 8008474:	9805      	ldr	r0, [sp, #20]
 8008476:	4621      	mov	r1, r4
 8008478:	f001 fb9a 	bl	8009bb0 <_Bfree>
 800847c:	e5f9      	b.n	8008072 <_strtod_l+0x72>
 800847e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008480:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008484:	4293      	cmp	r3, r2
 8008486:	dbbc      	blt.n	8008402 <_strtod_l+0x402>
 8008488:	4c41      	ldr	r4, [pc, #260]	@ (8008590 <_strtod_l+0x590>)
 800848a:	f1c5 050f 	rsb	r5, r5, #15
 800848e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008492:	4652      	mov	r2, sl
 8008494:	465b      	mov	r3, fp
 8008496:	e9d1 0100 	ldrd	r0, r1, [r1]
 800849a:	f7f8 f8ad 	bl	80005f8 <__aeabi_dmul>
 800849e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084a0:	1b5d      	subs	r5, r3, r5
 80084a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80084a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80084aa:	e78f      	b.n	80083cc <_strtod_l+0x3cc>
 80084ac:	3316      	adds	r3, #22
 80084ae:	dba8      	blt.n	8008402 <_strtod_l+0x402>
 80084b0:	4b37      	ldr	r3, [pc, #220]	@ (8008590 <_strtod_l+0x590>)
 80084b2:	eba9 0808 	sub.w	r8, r9, r8
 80084b6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80084ba:	e9d8 2300 	ldrd	r2, r3, [r8]
 80084be:	4650      	mov	r0, sl
 80084c0:	4659      	mov	r1, fp
 80084c2:	f7f8 f9c3 	bl	800084c <__aeabi_ddiv>
 80084c6:	e783      	b.n	80083d0 <_strtod_l+0x3d0>
 80084c8:	4b32      	ldr	r3, [pc, #200]	@ (8008594 <_strtod_l+0x594>)
 80084ca:	9308      	str	r3, [sp, #32]
 80084cc:	2300      	movs	r3, #0
 80084ce:	1124      	asrs	r4, r4, #4
 80084d0:	4650      	mov	r0, sl
 80084d2:	4659      	mov	r1, fp
 80084d4:	461e      	mov	r6, r3
 80084d6:	2c01      	cmp	r4, #1
 80084d8:	dc21      	bgt.n	800851e <_strtod_l+0x51e>
 80084da:	b10b      	cbz	r3, 80084e0 <_strtod_l+0x4e0>
 80084dc:	4682      	mov	sl, r0
 80084de:	468b      	mov	fp, r1
 80084e0:	492c      	ldr	r1, [pc, #176]	@ (8008594 <_strtod_l+0x594>)
 80084e2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80084e6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80084ea:	4652      	mov	r2, sl
 80084ec:	465b      	mov	r3, fp
 80084ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084f2:	f7f8 f881 	bl	80005f8 <__aeabi_dmul>
 80084f6:	4b28      	ldr	r3, [pc, #160]	@ (8008598 <_strtod_l+0x598>)
 80084f8:	460a      	mov	r2, r1
 80084fa:	400b      	ands	r3, r1
 80084fc:	4927      	ldr	r1, [pc, #156]	@ (800859c <_strtod_l+0x59c>)
 80084fe:	428b      	cmp	r3, r1
 8008500:	4682      	mov	sl, r0
 8008502:	d898      	bhi.n	8008436 <_strtod_l+0x436>
 8008504:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008508:	428b      	cmp	r3, r1
 800850a:	bf86      	itte	hi
 800850c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80085a0 <_strtod_l+0x5a0>
 8008510:	f04f 3aff 	movhi.w	sl, #4294967295
 8008514:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008518:	2300      	movs	r3, #0
 800851a:	9308      	str	r3, [sp, #32]
 800851c:	e07a      	b.n	8008614 <_strtod_l+0x614>
 800851e:	07e2      	lsls	r2, r4, #31
 8008520:	d505      	bpl.n	800852e <_strtod_l+0x52e>
 8008522:	9b08      	ldr	r3, [sp, #32]
 8008524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008528:	f7f8 f866 	bl	80005f8 <__aeabi_dmul>
 800852c:	2301      	movs	r3, #1
 800852e:	9a08      	ldr	r2, [sp, #32]
 8008530:	3208      	adds	r2, #8
 8008532:	3601      	adds	r6, #1
 8008534:	1064      	asrs	r4, r4, #1
 8008536:	9208      	str	r2, [sp, #32]
 8008538:	e7cd      	b.n	80084d6 <_strtod_l+0x4d6>
 800853a:	d0ed      	beq.n	8008518 <_strtod_l+0x518>
 800853c:	4264      	negs	r4, r4
 800853e:	f014 020f 	ands.w	r2, r4, #15
 8008542:	d00a      	beq.n	800855a <_strtod_l+0x55a>
 8008544:	4b12      	ldr	r3, [pc, #72]	@ (8008590 <_strtod_l+0x590>)
 8008546:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800854a:	4650      	mov	r0, sl
 800854c:	4659      	mov	r1, fp
 800854e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008552:	f7f8 f97b 	bl	800084c <__aeabi_ddiv>
 8008556:	4682      	mov	sl, r0
 8008558:	468b      	mov	fp, r1
 800855a:	1124      	asrs	r4, r4, #4
 800855c:	d0dc      	beq.n	8008518 <_strtod_l+0x518>
 800855e:	2c1f      	cmp	r4, #31
 8008560:	dd20      	ble.n	80085a4 <_strtod_l+0x5a4>
 8008562:	2400      	movs	r4, #0
 8008564:	46a0      	mov	r8, r4
 8008566:	940a      	str	r4, [sp, #40]	@ 0x28
 8008568:	46a1      	mov	r9, r4
 800856a:	9a05      	ldr	r2, [sp, #20]
 800856c:	2322      	movs	r3, #34	@ 0x22
 800856e:	f04f 0a00 	mov.w	sl, #0
 8008572:	f04f 0b00 	mov.w	fp, #0
 8008576:	6013      	str	r3, [r2, #0]
 8008578:	e768      	b.n	800844c <_strtod_l+0x44c>
 800857a:	bf00      	nop
 800857c:	0800ad40 	.word	0x0800ad40
 8008580:	0800ad44 	.word	0x0800ad44
 8008584:	0800ad37 	.word	0x0800ad37
 8008588:	0800ad3a 	.word	0x0800ad3a
 800858c:	0800b0f3 	.word	0x0800b0f3
 8008590:	0800aff0 	.word	0x0800aff0
 8008594:	0800afc8 	.word	0x0800afc8
 8008598:	7ff00000 	.word	0x7ff00000
 800859c:	7ca00000 	.word	0x7ca00000
 80085a0:	7fefffff 	.word	0x7fefffff
 80085a4:	f014 0310 	ands.w	r3, r4, #16
 80085a8:	bf18      	it	ne
 80085aa:	236a      	movne	r3, #106	@ 0x6a
 80085ac:	4ea9      	ldr	r6, [pc, #676]	@ (8008854 <_strtod_l+0x854>)
 80085ae:	9308      	str	r3, [sp, #32]
 80085b0:	4650      	mov	r0, sl
 80085b2:	4659      	mov	r1, fp
 80085b4:	2300      	movs	r3, #0
 80085b6:	07e2      	lsls	r2, r4, #31
 80085b8:	d504      	bpl.n	80085c4 <_strtod_l+0x5c4>
 80085ba:	e9d6 2300 	ldrd	r2, r3, [r6]
 80085be:	f7f8 f81b 	bl	80005f8 <__aeabi_dmul>
 80085c2:	2301      	movs	r3, #1
 80085c4:	1064      	asrs	r4, r4, #1
 80085c6:	f106 0608 	add.w	r6, r6, #8
 80085ca:	d1f4      	bne.n	80085b6 <_strtod_l+0x5b6>
 80085cc:	b10b      	cbz	r3, 80085d2 <_strtod_l+0x5d2>
 80085ce:	4682      	mov	sl, r0
 80085d0:	468b      	mov	fp, r1
 80085d2:	9b08      	ldr	r3, [sp, #32]
 80085d4:	b1b3      	cbz	r3, 8008604 <_strtod_l+0x604>
 80085d6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80085da:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80085de:	2b00      	cmp	r3, #0
 80085e0:	4659      	mov	r1, fp
 80085e2:	dd0f      	ble.n	8008604 <_strtod_l+0x604>
 80085e4:	2b1f      	cmp	r3, #31
 80085e6:	dd55      	ble.n	8008694 <_strtod_l+0x694>
 80085e8:	2b34      	cmp	r3, #52	@ 0x34
 80085ea:	bfde      	ittt	le
 80085ec:	f04f 33ff 	movle.w	r3, #4294967295
 80085f0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80085f4:	4093      	lslle	r3, r2
 80085f6:	f04f 0a00 	mov.w	sl, #0
 80085fa:	bfcc      	ite	gt
 80085fc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008600:	ea03 0b01 	andle.w	fp, r3, r1
 8008604:	2200      	movs	r2, #0
 8008606:	2300      	movs	r3, #0
 8008608:	4650      	mov	r0, sl
 800860a:	4659      	mov	r1, fp
 800860c:	f7f8 fa5c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008610:	2800      	cmp	r0, #0
 8008612:	d1a6      	bne.n	8008562 <_strtod_l+0x562>
 8008614:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008616:	9300      	str	r3, [sp, #0]
 8008618:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800861a:	9805      	ldr	r0, [sp, #20]
 800861c:	462b      	mov	r3, r5
 800861e:	463a      	mov	r2, r7
 8008620:	f001 fb2e 	bl	8009c80 <__s2b>
 8008624:	900a      	str	r0, [sp, #40]	@ 0x28
 8008626:	2800      	cmp	r0, #0
 8008628:	f43f af05 	beq.w	8008436 <_strtod_l+0x436>
 800862c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800862e:	2a00      	cmp	r2, #0
 8008630:	eba9 0308 	sub.w	r3, r9, r8
 8008634:	bfa8      	it	ge
 8008636:	2300      	movge	r3, #0
 8008638:	9312      	str	r3, [sp, #72]	@ 0x48
 800863a:	2400      	movs	r4, #0
 800863c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008640:	9316      	str	r3, [sp, #88]	@ 0x58
 8008642:	46a0      	mov	r8, r4
 8008644:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008646:	9805      	ldr	r0, [sp, #20]
 8008648:	6859      	ldr	r1, [r3, #4]
 800864a:	f001 fa71 	bl	8009b30 <_Balloc>
 800864e:	4681      	mov	r9, r0
 8008650:	2800      	cmp	r0, #0
 8008652:	f43f aef4 	beq.w	800843e <_strtod_l+0x43e>
 8008656:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008658:	691a      	ldr	r2, [r3, #16]
 800865a:	3202      	adds	r2, #2
 800865c:	f103 010c 	add.w	r1, r3, #12
 8008660:	0092      	lsls	r2, r2, #2
 8008662:	300c      	adds	r0, #12
 8008664:	f000 ff00 	bl	8009468 <memcpy>
 8008668:	ec4b ab10 	vmov	d0, sl, fp
 800866c:	9805      	ldr	r0, [sp, #20]
 800866e:	aa1c      	add	r2, sp, #112	@ 0x70
 8008670:	a91b      	add	r1, sp, #108	@ 0x6c
 8008672:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008676:	f001 fe3f 	bl	800a2f8 <__d2b>
 800867a:	901a      	str	r0, [sp, #104]	@ 0x68
 800867c:	2800      	cmp	r0, #0
 800867e:	f43f aede 	beq.w	800843e <_strtod_l+0x43e>
 8008682:	9805      	ldr	r0, [sp, #20]
 8008684:	2101      	movs	r1, #1
 8008686:	f001 fb91 	bl	8009dac <__i2b>
 800868a:	4680      	mov	r8, r0
 800868c:	b948      	cbnz	r0, 80086a2 <_strtod_l+0x6a2>
 800868e:	f04f 0800 	mov.w	r8, #0
 8008692:	e6d4      	b.n	800843e <_strtod_l+0x43e>
 8008694:	f04f 32ff 	mov.w	r2, #4294967295
 8008698:	fa02 f303 	lsl.w	r3, r2, r3
 800869c:	ea03 0a0a 	and.w	sl, r3, sl
 80086a0:	e7b0      	b.n	8008604 <_strtod_l+0x604>
 80086a2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80086a4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80086a6:	2d00      	cmp	r5, #0
 80086a8:	bfab      	itete	ge
 80086aa:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80086ac:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80086ae:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80086b0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80086b2:	bfac      	ite	ge
 80086b4:	18ef      	addge	r7, r5, r3
 80086b6:	1b5e      	sublt	r6, r3, r5
 80086b8:	9b08      	ldr	r3, [sp, #32]
 80086ba:	1aed      	subs	r5, r5, r3
 80086bc:	4415      	add	r5, r2
 80086be:	4b66      	ldr	r3, [pc, #408]	@ (8008858 <_strtod_l+0x858>)
 80086c0:	3d01      	subs	r5, #1
 80086c2:	429d      	cmp	r5, r3
 80086c4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80086c8:	da50      	bge.n	800876c <_strtod_l+0x76c>
 80086ca:	1b5b      	subs	r3, r3, r5
 80086cc:	2b1f      	cmp	r3, #31
 80086ce:	eba2 0203 	sub.w	r2, r2, r3
 80086d2:	f04f 0101 	mov.w	r1, #1
 80086d6:	dc3d      	bgt.n	8008754 <_strtod_l+0x754>
 80086d8:	fa01 f303 	lsl.w	r3, r1, r3
 80086dc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80086de:	2300      	movs	r3, #0
 80086e0:	9310      	str	r3, [sp, #64]	@ 0x40
 80086e2:	18bd      	adds	r5, r7, r2
 80086e4:	9b08      	ldr	r3, [sp, #32]
 80086e6:	42af      	cmp	r7, r5
 80086e8:	4416      	add	r6, r2
 80086ea:	441e      	add	r6, r3
 80086ec:	463b      	mov	r3, r7
 80086ee:	bfa8      	it	ge
 80086f0:	462b      	movge	r3, r5
 80086f2:	42b3      	cmp	r3, r6
 80086f4:	bfa8      	it	ge
 80086f6:	4633      	movge	r3, r6
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	bfc2      	ittt	gt
 80086fc:	1aed      	subgt	r5, r5, r3
 80086fe:	1af6      	subgt	r6, r6, r3
 8008700:	1aff      	subgt	r7, r7, r3
 8008702:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008704:	2b00      	cmp	r3, #0
 8008706:	dd16      	ble.n	8008736 <_strtod_l+0x736>
 8008708:	4641      	mov	r1, r8
 800870a:	9805      	ldr	r0, [sp, #20]
 800870c:	461a      	mov	r2, r3
 800870e:	f001 fc0d 	bl	8009f2c <__pow5mult>
 8008712:	4680      	mov	r8, r0
 8008714:	2800      	cmp	r0, #0
 8008716:	d0ba      	beq.n	800868e <_strtod_l+0x68e>
 8008718:	4601      	mov	r1, r0
 800871a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800871c:	9805      	ldr	r0, [sp, #20]
 800871e:	f001 fb5b 	bl	8009dd8 <__multiply>
 8008722:	900e      	str	r0, [sp, #56]	@ 0x38
 8008724:	2800      	cmp	r0, #0
 8008726:	f43f ae8a 	beq.w	800843e <_strtod_l+0x43e>
 800872a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800872c:	9805      	ldr	r0, [sp, #20]
 800872e:	f001 fa3f 	bl	8009bb0 <_Bfree>
 8008732:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008734:	931a      	str	r3, [sp, #104]	@ 0x68
 8008736:	2d00      	cmp	r5, #0
 8008738:	dc1d      	bgt.n	8008776 <_strtod_l+0x776>
 800873a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800873c:	2b00      	cmp	r3, #0
 800873e:	dd23      	ble.n	8008788 <_strtod_l+0x788>
 8008740:	4649      	mov	r1, r9
 8008742:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008744:	9805      	ldr	r0, [sp, #20]
 8008746:	f001 fbf1 	bl	8009f2c <__pow5mult>
 800874a:	4681      	mov	r9, r0
 800874c:	b9e0      	cbnz	r0, 8008788 <_strtod_l+0x788>
 800874e:	f04f 0900 	mov.w	r9, #0
 8008752:	e674      	b.n	800843e <_strtod_l+0x43e>
 8008754:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008758:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800875c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008760:	35e2      	adds	r5, #226	@ 0xe2
 8008762:	fa01 f305 	lsl.w	r3, r1, r5
 8008766:	9310      	str	r3, [sp, #64]	@ 0x40
 8008768:	9113      	str	r1, [sp, #76]	@ 0x4c
 800876a:	e7ba      	b.n	80086e2 <_strtod_l+0x6e2>
 800876c:	2300      	movs	r3, #0
 800876e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008770:	2301      	movs	r3, #1
 8008772:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008774:	e7b5      	b.n	80086e2 <_strtod_l+0x6e2>
 8008776:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008778:	9805      	ldr	r0, [sp, #20]
 800877a:	462a      	mov	r2, r5
 800877c:	f001 fc30 	bl	8009fe0 <__lshift>
 8008780:	901a      	str	r0, [sp, #104]	@ 0x68
 8008782:	2800      	cmp	r0, #0
 8008784:	d1d9      	bne.n	800873a <_strtod_l+0x73a>
 8008786:	e65a      	b.n	800843e <_strtod_l+0x43e>
 8008788:	2e00      	cmp	r6, #0
 800878a:	dd07      	ble.n	800879c <_strtod_l+0x79c>
 800878c:	4649      	mov	r1, r9
 800878e:	9805      	ldr	r0, [sp, #20]
 8008790:	4632      	mov	r2, r6
 8008792:	f001 fc25 	bl	8009fe0 <__lshift>
 8008796:	4681      	mov	r9, r0
 8008798:	2800      	cmp	r0, #0
 800879a:	d0d8      	beq.n	800874e <_strtod_l+0x74e>
 800879c:	2f00      	cmp	r7, #0
 800879e:	dd08      	ble.n	80087b2 <_strtod_l+0x7b2>
 80087a0:	4641      	mov	r1, r8
 80087a2:	9805      	ldr	r0, [sp, #20]
 80087a4:	463a      	mov	r2, r7
 80087a6:	f001 fc1b 	bl	8009fe0 <__lshift>
 80087aa:	4680      	mov	r8, r0
 80087ac:	2800      	cmp	r0, #0
 80087ae:	f43f ae46 	beq.w	800843e <_strtod_l+0x43e>
 80087b2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80087b4:	9805      	ldr	r0, [sp, #20]
 80087b6:	464a      	mov	r2, r9
 80087b8:	f001 fc9a 	bl	800a0f0 <__mdiff>
 80087bc:	4604      	mov	r4, r0
 80087be:	2800      	cmp	r0, #0
 80087c0:	f43f ae3d 	beq.w	800843e <_strtod_l+0x43e>
 80087c4:	68c3      	ldr	r3, [r0, #12]
 80087c6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80087c8:	2300      	movs	r3, #0
 80087ca:	60c3      	str	r3, [r0, #12]
 80087cc:	4641      	mov	r1, r8
 80087ce:	f001 fc73 	bl	800a0b8 <__mcmp>
 80087d2:	2800      	cmp	r0, #0
 80087d4:	da46      	bge.n	8008864 <_strtod_l+0x864>
 80087d6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80087d8:	ea53 030a 	orrs.w	r3, r3, sl
 80087dc:	d16c      	bne.n	80088b8 <_strtod_l+0x8b8>
 80087de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d168      	bne.n	80088b8 <_strtod_l+0x8b8>
 80087e6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80087ea:	0d1b      	lsrs	r3, r3, #20
 80087ec:	051b      	lsls	r3, r3, #20
 80087ee:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80087f2:	d961      	bls.n	80088b8 <_strtod_l+0x8b8>
 80087f4:	6963      	ldr	r3, [r4, #20]
 80087f6:	b913      	cbnz	r3, 80087fe <_strtod_l+0x7fe>
 80087f8:	6923      	ldr	r3, [r4, #16]
 80087fa:	2b01      	cmp	r3, #1
 80087fc:	dd5c      	ble.n	80088b8 <_strtod_l+0x8b8>
 80087fe:	4621      	mov	r1, r4
 8008800:	2201      	movs	r2, #1
 8008802:	9805      	ldr	r0, [sp, #20]
 8008804:	f001 fbec 	bl	8009fe0 <__lshift>
 8008808:	4641      	mov	r1, r8
 800880a:	4604      	mov	r4, r0
 800880c:	f001 fc54 	bl	800a0b8 <__mcmp>
 8008810:	2800      	cmp	r0, #0
 8008812:	dd51      	ble.n	80088b8 <_strtod_l+0x8b8>
 8008814:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008818:	9a08      	ldr	r2, [sp, #32]
 800881a:	0d1b      	lsrs	r3, r3, #20
 800881c:	051b      	lsls	r3, r3, #20
 800881e:	2a00      	cmp	r2, #0
 8008820:	d06b      	beq.n	80088fa <_strtod_l+0x8fa>
 8008822:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008826:	d868      	bhi.n	80088fa <_strtod_l+0x8fa>
 8008828:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800882c:	f67f ae9d 	bls.w	800856a <_strtod_l+0x56a>
 8008830:	4b0a      	ldr	r3, [pc, #40]	@ (800885c <_strtod_l+0x85c>)
 8008832:	4650      	mov	r0, sl
 8008834:	4659      	mov	r1, fp
 8008836:	2200      	movs	r2, #0
 8008838:	f7f7 fede 	bl	80005f8 <__aeabi_dmul>
 800883c:	4b08      	ldr	r3, [pc, #32]	@ (8008860 <_strtod_l+0x860>)
 800883e:	400b      	ands	r3, r1
 8008840:	4682      	mov	sl, r0
 8008842:	468b      	mov	fp, r1
 8008844:	2b00      	cmp	r3, #0
 8008846:	f47f ae05 	bne.w	8008454 <_strtod_l+0x454>
 800884a:	9a05      	ldr	r2, [sp, #20]
 800884c:	2322      	movs	r3, #34	@ 0x22
 800884e:	6013      	str	r3, [r2, #0]
 8008850:	e600      	b.n	8008454 <_strtod_l+0x454>
 8008852:	bf00      	nop
 8008854:	0800ad70 	.word	0x0800ad70
 8008858:	fffffc02 	.word	0xfffffc02
 800885c:	39500000 	.word	0x39500000
 8008860:	7ff00000 	.word	0x7ff00000
 8008864:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008868:	d165      	bne.n	8008936 <_strtod_l+0x936>
 800886a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800886c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008870:	b35a      	cbz	r2, 80088ca <_strtod_l+0x8ca>
 8008872:	4a9f      	ldr	r2, [pc, #636]	@ (8008af0 <_strtod_l+0xaf0>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d12b      	bne.n	80088d0 <_strtod_l+0x8d0>
 8008878:	9b08      	ldr	r3, [sp, #32]
 800887a:	4651      	mov	r1, sl
 800887c:	b303      	cbz	r3, 80088c0 <_strtod_l+0x8c0>
 800887e:	4b9d      	ldr	r3, [pc, #628]	@ (8008af4 <_strtod_l+0xaf4>)
 8008880:	465a      	mov	r2, fp
 8008882:	4013      	ands	r3, r2
 8008884:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008888:	f04f 32ff 	mov.w	r2, #4294967295
 800888c:	d81b      	bhi.n	80088c6 <_strtod_l+0x8c6>
 800888e:	0d1b      	lsrs	r3, r3, #20
 8008890:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008894:	fa02 f303 	lsl.w	r3, r2, r3
 8008898:	4299      	cmp	r1, r3
 800889a:	d119      	bne.n	80088d0 <_strtod_l+0x8d0>
 800889c:	4b96      	ldr	r3, [pc, #600]	@ (8008af8 <_strtod_l+0xaf8>)
 800889e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d102      	bne.n	80088aa <_strtod_l+0x8aa>
 80088a4:	3101      	adds	r1, #1
 80088a6:	f43f adca 	beq.w	800843e <_strtod_l+0x43e>
 80088aa:	4b92      	ldr	r3, [pc, #584]	@ (8008af4 <_strtod_l+0xaf4>)
 80088ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80088ae:	401a      	ands	r2, r3
 80088b0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80088b4:	f04f 0a00 	mov.w	sl, #0
 80088b8:	9b08      	ldr	r3, [sp, #32]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d1b8      	bne.n	8008830 <_strtod_l+0x830>
 80088be:	e5c9      	b.n	8008454 <_strtod_l+0x454>
 80088c0:	f04f 33ff 	mov.w	r3, #4294967295
 80088c4:	e7e8      	b.n	8008898 <_strtod_l+0x898>
 80088c6:	4613      	mov	r3, r2
 80088c8:	e7e6      	b.n	8008898 <_strtod_l+0x898>
 80088ca:	ea53 030a 	orrs.w	r3, r3, sl
 80088ce:	d0a1      	beq.n	8008814 <_strtod_l+0x814>
 80088d0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80088d2:	b1db      	cbz	r3, 800890c <_strtod_l+0x90c>
 80088d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80088d6:	4213      	tst	r3, r2
 80088d8:	d0ee      	beq.n	80088b8 <_strtod_l+0x8b8>
 80088da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80088dc:	9a08      	ldr	r2, [sp, #32]
 80088de:	4650      	mov	r0, sl
 80088e0:	4659      	mov	r1, fp
 80088e2:	b1bb      	cbz	r3, 8008914 <_strtod_l+0x914>
 80088e4:	f7ff fb6e 	bl	8007fc4 <sulp>
 80088e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80088ec:	ec53 2b10 	vmov	r2, r3, d0
 80088f0:	f7f7 fccc 	bl	800028c <__adddf3>
 80088f4:	4682      	mov	sl, r0
 80088f6:	468b      	mov	fp, r1
 80088f8:	e7de      	b.n	80088b8 <_strtod_l+0x8b8>
 80088fa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80088fe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008902:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008906:	f04f 3aff 	mov.w	sl, #4294967295
 800890a:	e7d5      	b.n	80088b8 <_strtod_l+0x8b8>
 800890c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800890e:	ea13 0f0a 	tst.w	r3, sl
 8008912:	e7e1      	b.n	80088d8 <_strtod_l+0x8d8>
 8008914:	f7ff fb56 	bl	8007fc4 <sulp>
 8008918:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800891c:	ec53 2b10 	vmov	r2, r3, d0
 8008920:	f7f7 fcb2 	bl	8000288 <__aeabi_dsub>
 8008924:	2200      	movs	r2, #0
 8008926:	2300      	movs	r3, #0
 8008928:	4682      	mov	sl, r0
 800892a:	468b      	mov	fp, r1
 800892c:	f7f8 f8cc 	bl	8000ac8 <__aeabi_dcmpeq>
 8008930:	2800      	cmp	r0, #0
 8008932:	d0c1      	beq.n	80088b8 <_strtod_l+0x8b8>
 8008934:	e619      	b.n	800856a <_strtod_l+0x56a>
 8008936:	4641      	mov	r1, r8
 8008938:	4620      	mov	r0, r4
 800893a:	f001 fd35 	bl	800a3a8 <__ratio>
 800893e:	ec57 6b10 	vmov	r6, r7, d0
 8008942:	2200      	movs	r2, #0
 8008944:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008948:	4630      	mov	r0, r6
 800894a:	4639      	mov	r1, r7
 800894c:	f7f8 f8d0 	bl	8000af0 <__aeabi_dcmple>
 8008950:	2800      	cmp	r0, #0
 8008952:	d06f      	beq.n	8008a34 <_strtod_l+0xa34>
 8008954:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008956:	2b00      	cmp	r3, #0
 8008958:	d17a      	bne.n	8008a50 <_strtod_l+0xa50>
 800895a:	f1ba 0f00 	cmp.w	sl, #0
 800895e:	d158      	bne.n	8008a12 <_strtod_l+0xa12>
 8008960:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008962:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008966:	2b00      	cmp	r3, #0
 8008968:	d15a      	bne.n	8008a20 <_strtod_l+0xa20>
 800896a:	4b64      	ldr	r3, [pc, #400]	@ (8008afc <_strtod_l+0xafc>)
 800896c:	2200      	movs	r2, #0
 800896e:	4630      	mov	r0, r6
 8008970:	4639      	mov	r1, r7
 8008972:	f7f8 f8b3 	bl	8000adc <__aeabi_dcmplt>
 8008976:	2800      	cmp	r0, #0
 8008978:	d159      	bne.n	8008a2e <_strtod_l+0xa2e>
 800897a:	4630      	mov	r0, r6
 800897c:	4639      	mov	r1, r7
 800897e:	4b60      	ldr	r3, [pc, #384]	@ (8008b00 <_strtod_l+0xb00>)
 8008980:	2200      	movs	r2, #0
 8008982:	f7f7 fe39 	bl	80005f8 <__aeabi_dmul>
 8008986:	4606      	mov	r6, r0
 8008988:	460f      	mov	r7, r1
 800898a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800898e:	9606      	str	r6, [sp, #24]
 8008990:	9307      	str	r3, [sp, #28]
 8008992:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008996:	4d57      	ldr	r5, [pc, #348]	@ (8008af4 <_strtod_l+0xaf4>)
 8008998:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800899c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800899e:	401d      	ands	r5, r3
 80089a0:	4b58      	ldr	r3, [pc, #352]	@ (8008b04 <_strtod_l+0xb04>)
 80089a2:	429d      	cmp	r5, r3
 80089a4:	f040 80b2 	bne.w	8008b0c <_strtod_l+0xb0c>
 80089a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80089aa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80089ae:	ec4b ab10 	vmov	d0, sl, fp
 80089b2:	f001 fc31 	bl	800a218 <__ulp>
 80089b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80089ba:	ec51 0b10 	vmov	r0, r1, d0
 80089be:	f7f7 fe1b 	bl	80005f8 <__aeabi_dmul>
 80089c2:	4652      	mov	r2, sl
 80089c4:	465b      	mov	r3, fp
 80089c6:	f7f7 fc61 	bl	800028c <__adddf3>
 80089ca:	460b      	mov	r3, r1
 80089cc:	4949      	ldr	r1, [pc, #292]	@ (8008af4 <_strtod_l+0xaf4>)
 80089ce:	4a4e      	ldr	r2, [pc, #312]	@ (8008b08 <_strtod_l+0xb08>)
 80089d0:	4019      	ands	r1, r3
 80089d2:	4291      	cmp	r1, r2
 80089d4:	4682      	mov	sl, r0
 80089d6:	d942      	bls.n	8008a5e <_strtod_l+0xa5e>
 80089d8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80089da:	4b47      	ldr	r3, [pc, #284]	@ (8008af8 <_strtod_l+0xaf8>)
 80089dc:	429a      	cmp	r2, r3
 80089de:	d103      	bne.n	80089e8 <_strtod_l+0x9e8>
 80089e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80089e2:	3301      	adds	r3, #1
 80089e4:	f43f ad2b 	beq.w	800843e <_strtod_l+0x43e>
 80089e8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008af8 <_strtod_l+0xaf8>
 80089ec:	f04f 3aff 	mov.w	sl, #4294967295
 80089f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80089f2:	9805      	ldr	r0, [sp, #20]
 80089f4:	f001 f8dc 	bl	8009bb0 <_Bfree>
 80089f8:	9805      	ldr	r0, [sp, #20]
 80089fa:	4649      	mov	r1, r9
 80089fc:	f001 f8d8 	bl	8009bb0 <_Bfree>
 8008a00:	9805      	ldr	r0, [sp, #20]
 8008a02:	4641      	mov	r1, r8
 8008a04:	f001 f8d4 	bl	8009bb0 <_Bfree>
 8008a08:	9805      	ldr	r0, [sp, #20]
 8008a0a:	4621      	mov	r1, r4
 8008a0c:	f001 f8d0 	bl	8009bb0 <_Bfree>
 8008a10:	e618      	b.n	8008644 <_strtod_l+0x644>
 8008a12:	f1ba 0f01 	cmp.w	sl, #1
 8008a16:	d103      	bne.n	8008a20 <_strtod_l+0xa20>
 8008a18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	f43f ada5 	beq.w	800856a <_strtod_l+0x56a>
 8008a20:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008ad0 <_strtod_l+0xad0>
 8008a24:	4f35      	ldr	r7, [pc, #212]	@ (8008afc <_strtod_l+0xafc>)
 8008a26:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008a2a:	2600      	movs	r6, #0
 8008a2c:	e7b1      	b.n	8008992 <_strtod_l+0x992>
 8008a2e:	4f34      	ldr	r7, [pc, #208]	@ (8008b00 <_strtod_l+0xb00>)
 8008a30:	2600      	movs	r6, #0
 8008a32:	e7aa      	b.n	800898a <_strtod_l+0x98a>
 8008a34:	4b32      	ldr	r3, [pc, #200]	@ (8008b00 <_strtod_l+0xb00>)
 8008a36:	4630      	mov	r0, r6
 8008a38:	4639      	mov	r1, r7
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	f7f7 fddc 	bl	80005f8 <__aeabi_dmul>
 8008a40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a42:	4606      	mov	r6, r0
 8008a44:	460f      	mov	r7, r1
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d09f      	beq.n	800898a <_strtod_l+0x98a>
 8008a4a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008a4e:	e7a0      	b.n	8008992 <_strtod_l+0x992>
 8008a50:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008ad8 <_strtod_l+0xad8>
 8008a54:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008a58:	ec57 6b17 	vmov	r6, r7, d7
 8008a5c:	e799      	b.n	8008992 <_strtod_l+0x992>
 8008a5e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008a62:	9b08      	ldr	r3, [sp, #32]
 8008a64:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d1c1      	bne.n	80089f0 <_strtod_l+0x9f0>
 8008a6c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008a70:	0d1b      	lsrs	r3, r3, #20
 8008a72:	051b      	lsls	r3, r3, #20
 8008a74:	429d      	cmp	r5, r3
 8008a76:	d1bb      	bne.n	80089f0 <_strtod_l+0x9f0>
 8008a78:	4630      	mov	r0, r6
 8008a7a:	4639      	mov	r1, r7
 8008a7c:	f7f8 f8f4 	bl	8000c68 <__aeabi_d2lz>
 8008a80:	f7f7 fd8c 	bl	800059c <__aeabi_l2d>
 8008a84:	4602      	mov	r2, r0
 8008a86:	460b      	mov	r3, r1
 8008a88:	4630      	mov	r0, r6
 8008a8a:	4639      	mov	r1, r7
 8008a8c:	f7f7 fbfc 	bl	8000288 <__aeabi_dsub>
 8008a90:	460b      	mov	r3, r1
 8008a92:	4602      	mov	r2, r0
 8008a94:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008a98:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008a9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a9e:	ea46 060a 	orr.w	r6, r6, sl
 8008aa2:	431e      	orrs	r6, r3
 8008aa4:	d06f      	beq.n	8008b86 <_strtod_l+0xb86>
 8008aa6:	a30e      	add	r3, pc, #56	@ (adr r3, 8008ae0 <_strtod_l+0xae0>)
 8008aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aac:	f7f8 f816 	bl	8000adc <__aeabi_dcmplt>
 8008ab0:	2800      	cmp	r0, #0
 8008ab2:	f47f accf 	bne.w	8008454 <_strtod_l+0x454>
 8008ab6:	a30c      	add	r3, pc, #48	@ (adr r3, 8008ae8 <_strtod_l+0xae8>)
 8008ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008abc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008ac0:	f7f8 f82a 	bl	8000b18 <__aeabi_dcmpgt>
 8008ac4:	2800      	cmp	r0, #0
 8008ac6:	d093      	beq.n	80089f0 <_strtod_l+0x9f0>
 8008ac8:	e4c4      	b.n	8008454 <_strtod_l+0x454>
 8008aca:	bf00      	nop
 8008acc:	f3af 8000 	nop.w
 8008ad0:	00000000 	.word	0x00000000
 8008ad4:	bff00000 	.word	0xbff00000
 8008ad8:	00000000 	.word	0x00000000
 8008adc:	3ff00000 	.word	0x3ff00000
 8008ae0:	94a03595 	.word	0x94a03595
 8008ae4:	3fdfffff 	.word	0x3fdfffff
 8008ae8:	35afe535 	.word	0x35afe535
 8008aec:	3fe00000 	.word	0x3fe00000
 8008af0:	000fffff 	.word	0x000fffff
 8008af4:	7ff00000 	.word	0x7ff00000
 8008af8:	7fefffff 	.word	0x7fefffff
 8008afc:	3ff00000 	.word	0x3ff00000
 8008b00:	3fe00000 	.word	0x3fe00000
 8008b04:	7fe00000 	.word	0x7fe00000
 8008b08:	7c9fffff 	.word	0x7c9fffff
 8008b0c:	9b08      	ldr	r3, [sp, #32]
 8008b0e:	b323      	cbz	r3, 8008b5a <_strtod_l+0xb5a>
 8008b10:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008b14:	d821      	bhi.n	8008b5a <_strtod_l+0xb5a>
 8008b16:	a328      	add	r3, pc, #160	@ (adr r3, 8008bb8 <_strtod_l+0xbb8>)
 8008b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b1c:	4630      	mov	r0, r6
 8008b1e:	4639      	mov	r1, r7
 8008b20:	f7f7 ffe6 	bl	8000af0 <__aeabi_dcmple>
 8008b24:	b1a0      	cbz	r0, 8008b50 <_strtod_l+0xb50>
 8008b26:	4639      	mov	r1, r7
 8008b28:	4630      	mov	r0, r6
 8008b2a:	f7f8 f815 	bl	8000b58 <__aeabi_d2uiz>
 8008b2e:	2801      	cmp	r0, #1
 8008b30:	bf38      	it	cc
 8008b32:	2001      	movcc	r0, #1
 8008b34:	f7f7 fce6 	bl	8000504 <__aeabi_ui2d>
 8008b38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b3a:	4606      	mov	r6, r0
 8008b3c:	460f      	mov	r7, r1
 8008b3e:	b9fb      	cbnz	r3, 8008b80 <_strtod_l+0xb80>
 8008b40:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008b44:	9014      	str	r0, [sp, #80]	@ 0x50
 8008b46:	9315      	str	r3, [sp, #84]	@ 0x54
 8008b48:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008b4c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008b50:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008b52:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008b56:	1b5b      	subs	r3, r3, r5
 8008b58:	9311      	str	r3, [sp, #68]	@ 0x44
 8008b5a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008b5e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008b62:	f001 fb59 	bl	800a218 <__ulp>
 8008b66:	4650      	mov	r0, sl
 8008b68:	ec53 2b10 	vmov	r2, r3, d0
 8008b6c:	4659      	mov	r1, fp
 8008b6e:	f7f7 fd43 	bl	80005f8 <__aeabi_dmul>
 8008b72:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008b76:	f7f7 fb89 	bl	800028c <__adddf3>
 8008b7a:	4682      	mov	sl, r0
 8008b7c:	468b      	mov	fp, r1
 8008b7e:	e770      	b.n	8008a62 <_strtod_l+0xa62>
 8008b80:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008b84:	e7e0      	b.n	8008b48 <_strtod_l+0xb48>
 8008b86:	a30e      	add	r3, pc, #56	@ (adr r3, 8008bc0 <_strtod_l+0xbc0>)
 8008b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b8c:	f7f7 ffa6 	bl	8000adc <__aeabi_dcmplt>
 8008b90:	e798      	b.n	8008ac4 <_strtod_l+0xac4>
 8008b92:	2300      	movs	r3, #0
 8008b94:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008b96:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008b98:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b9a:	6013      	str	r3, [r2, #0]
 8008b9c:	f7ff ba6d 	b.w	800807a <_strtod_l+0x7a>
 8008ba0:	2a65      	cmp	r2, #101	@ 0x65
 8008ba2:	f43f ab66 	beq.w	8008272 <_strtod_l+0x272>
 8008ba6:	2a45      	cmp	r2, #69	@ 0x45
 8008ba8:	f43f ab63 	beq.w	8008272 <_strtod_l+0x272>
 8008bac:	2301      	movs	r3, #1
 8008bae:	f7ff bb9e 	b.w	80082ee <_strtod_l+0x2ee>
 8008bb2:	bf00      	nop
 8008bb4:	f3af 8000 	nop.w
 8008bb8:	ffc00000 	.word	0xffc00000
 8008bbc:	41dfffff 	.word	0x41dfffff
 8008bc0:	94a03595 	.word	0x94a03595
 8008bc4:	3fcfffff 	.word	0x3fcfffff

08008bc8 <_strtod_r>:
 8008bc8:	4b01      	ldr	r3, [pc, #4]	@ (8008bd0 <_strtod_r+0x8>)
 8008bca:	f7ff ba19 	b.w	8008000 <_strtod_l>
 8008bce:	bf00      	nop
 8008bd0:	2000008c 	.word	0x2000008c

08008bd4 <_strtol_l.constprop.0>:
 8008bd4:	2b24      	cmp	r3, #36	@ 0x24
 8008bd6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bda:	4686      	mov	lr, r0
 8008bdc:	4690      	mov	r8, r2
 8008bde:	d801      	bhi.n	8008be4 <_strtol_l.constprop.0+0x10>
 8008be0:	2b01      	cmp	r3, #1
 8008be2:	d106      	bne.n	8008bf2 <_strtol_l.constprop.0+0x1e>
 8008be4:	f7ff f8c2 	bl	8007d6c <__errno>
 8008be8:	2316      	movs	r3, #22
 8008bea:	6003      	str	r3, [r0, #0]
 8008bec:	2000      	movs	r0, #0
 8008bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bf2:	4834      	ldr	r0, [pc, #208]	@ (8008cc4 <_strtol_l.constprop.0+0xf0>)
 8008bf4:	460d      	mov	r5, r1
 8008bf6:	462a      	mov	r2, r5
 8008bf8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008bfc:	5d06      	ldrb	r6, [r0, r4]
 8008bfe:	f016 0608 	ands.w	r6, r6, #8
 8008c02:	d1f8      	bne.n	8008bf6 <_strtol_l.constprop.0+0x22>
 8008c04:	2c2d      	cmp	r4, #45	@ 0x2d
 8008c06:	d12d      	bne.n	8008c64 <_strtol_l.constprop.0+0x90>
 8008c08:	782c      	ldrb	r4, [r5, #0]
 8008c0a:	2601      	movs	r6, #1
 8008c0c:	1c95      	adds	r5, r2, #2
 8008c0e:	f033 0210 	bics.w	r2, r3, #16
 8008c12:	d109      	bne.n	8008c28 <_strtol_l.constprop.0+0x54>
 8008c14:	2c30      	cmp	r4, #48	@ 0x30
 8008c16:	d12a      	bne.n	8008c6e <_strtol_l.constprop.0+0x9a>
 8008c18:	782a      	ldrb	r2, [r5, #0]
 8008c1a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008c1e:	2a58      	cmp	r2, #88	@ 0x58
 8008c20:	d125      	bne.n	8008c6e <_strtol_l.constprop.0+0x9a>
 8008c22:	786c      	ldrb	r4, [r5, #1]
 8008c24:	2310      	movs	r3, #16
 8008c26:	3502      	adds	r5, #2
 8008c28:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008c2c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008c30:	2200      	movs	r2, #0
 8008c32:	fbbc f9f3 	udiv	r9, ip, r3
 8008c36:	4610      	mov	r0, r2
 8008c38:	fb03 ca19 	mls	sl, r3, r9, ip
 8008c3c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008c40:	2f09      	cmp	r7, #9
 8008c42:	d81b      	bhi.n	8008c7c <_strtol_l.constprop.0+0xa8>
 8008c44:	463c      	mov	r4, r7
 8008c46:	42a3      	cmp	r3, r4
 8008c48:	dd27      	ble.n	8008c9a <_strtol_l.constprop.0+0xc6>
 8008c4a:	1c57      	adds	r7, r2, #1
 8008c4c:	d007      	beq.n	8008c5e <_strtol_l.constprop.0+0x8a>
 8008c4e:	4581      	cmp	r9, r0
 8008c50:	d320      	bcc.n	8008c94 <_strtol_l.constprop.0+0xc0>
 8008c52:	d101      	bne.n	8008c58 <_strtol_l.constprop.0+0x84>
 8008c54:	45a2      	cmp	sl, r4
 8008c56:	db1d      	blt.n	8008c94 <_strtol_l.constprop.0+0xc0>
 8008c58:	fb00 4003 	mla	r0, r0, r3, r4
 8008c5c:	2201      	movs	r2, #1
 8008c5e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008c62:	e7eb      	b.n	8008c3c <_strtol_l.constprop.0+0x68>
 8008c64:	2c2b      	cmp	r4, #43	@ 0x2b
 8008c66:	bf04      	itt	eq
 8008c68:	782c      	ldrbeq	r4, [r5, #0]
 8008c6a:	1c95      	addeq	r5, r2, #2
 8008c6c:	e7cf      	b.n	8008c0e <_strtol_l.constprop.0+0x3a>
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d1da      	bne.n	8008c28 <_strtol_l.constprop.0+0x54>
 8008c72:	2c30      	cmp	r4, #48	@ 0x30
 8008c74:	bf0c      	ite	eq
 8008c76:	2308      	moveq	r3, #8
 8008c78:	230a      	movne	r3, #10
 8008c7a:	e7d5      	b.n	8008c28 <_strtol_l.constprop.0+0x54>
 8008c7c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008c80:	2f19      	cmp	r7, #25
 8008c82:	d801      	bhi.n	8008c88 <_strtol_l.constprop.0+0xb4>
 8008c84:	3c37      	subs	r4, #55	@ 0x37
 8008c86:	e7de      	b.n	8008c46 <_strtol_l.constprop.0+0x72>
 8008c88:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008c8c:	2f19      	cmp	r7, #25
 8008c8e:	d804      	bhi.n	8008c9a <_strtol_l.constprop.0+0xc6>
 8008c90:	3c57      	subs	r4, #87	@ 0x57
 8008c92:	e7d8      	b.n	8008c46 <_strtol_l.constprop.0+0x72>
 8008c94:	f04f 32ff 	mov.w	r2, #4294967295
 8008c98:	e7e1      	b.n	8008c5e <_strtol_l.constprop.0+0x8a>
 8008c9a:	1c53      	adds	r3, r2, #1
 8008c9c:	d108      	bne.n	8008cb0 <_strtol_l.constprop.0+0xdc>
 8008c9e:	2322      	movs	r3, #34	@ 0x22
 8008ca0:	f8ce 3000 	str.w	r3, [lr]
 8008ca4:	4660      	mov	r0, ip
 8008ca6:	f1b8 0f00 	cmp.w	r8, #0
 8008caa:	d0a0      	beq.n	8008bee <_strtol_l.constprop.0+0x1a>
 8008cac:	1e69      	subs	r1, r5, #1
 8008cae:	e006      	b.n	8008cbe <_strtol_l.constprop.0+0xea>
 8008cb0:	b106      	cbz	r6, 8008cb4 <_strtol_l.constprop.0+0xe0>
 8008cb2:	4240      	negs	r0, r0
 8008cb4:	f1b8 0f00 	cmp.w	r8, #0
 8008cb8:	d099      	beq.n	8008bee <_strtol_l.constprop.0+0x1a>
 8008cba:	2a00      	cmp	r2, #0
 8008cbc:	d1f6      	bne.n	8008cac <_strtol_l.constprop.0+0xd8>
 8008cbe:	f8c8 1000 	str.w	r1, [r8]
 8008cc2:	e794      	b.n	8008bee <_strtol_l.constprop.0+0x1a>
 8008cc4:	0800ad99 	.word	0x0800ad99

08008cc8 <_strtol_r>:
 8008cc8:	f7ff bf84 	b.w	8008bd4 <_strtol_l.constprop.0>

08008ccc <__ssputs_r>:
 8008ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cd0:	688e      	ldr	r6, [r1, #8]
 8008cd2:	461f      	mov	r7, r3
 8008cd4:	42be      	cmp	r6, r7
 8008cd6:	680b      	ldr	r3, [r1, #0]
 8008cd8:	4682      	mov	sl, r0
 8008cda:	460c      	mov	r4, r1
 8008cdc:	4690      	mov	r8, r2
 8008cde:	d82d      	bhi.n	8008d3c <__ssputs_r+0x70>
 8008ce0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008ce4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008ce8:	d026      	beq.n	8008d38 <__ssputs_r+0x6c>
 8008cea:	6965      	ldr	r5, [r4, #20]
 8008cec:	6909      	ldr	r1, [r1, #16]
 8008cee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008cf2:	eba3 0901 	sub.w	r9, r3, r1
 8008cf6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008cfa:	1c7b      	adds	r3, r7, #1
 8008cfc:	444b      	add	r3, r9
 8008cfe:	106d      	asrs	r5, r5, #1
 8008d00:	429d      	cmp	r5, r3
 8008d02:	bf38      	it	cc
 8008d04:	461d      	movcc	r5, r3
 8008d06:	0553      	lsls	r3, r2, #21
 8008d08:	d527      	bpl.n	8008d5a <__ssputs_r+0x8e>
 8008d0a:	4629      	mov	r1, r5
 8008d0c:	f7ff f8ce 	bl	8007eac <_malloc_r>
 8008d10:	4606      	mov	r6, r0
 8008d12:	b360      	cbz	r0, 8008d6e <__ssputs_r+0xa2>
 8008d14:	6921      	ldr	r1, [r4, #16]
 8008d16:	464a      	mov	r2, r9
 8008d18:	f000 fba6 	bl	8009468 <memcpy>
 8008d1c:	89a3      	ldrh	r3, [r4, #12]
 8008d1e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008d22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d26:	81a3      	strh	r3, [r4, #12]
 8008d28:	6126      	str	r6, [r4, #16]
 8008d2a:	6165      	str	r5, [r4, #20]
 8008d2c:	444e      	add	r6, r9
 8008d2e:	eba5 0509 	sub.w	r5, r5, r9
 8008d32:	6026      	str	r6, [r4, #0]
 8008d34:	60a5      	str	r5, [r4, #8]
 8008d36:	463e      	mov	r6, r7
 8008d38:	42be      	cmp	r6, r7
 8008d3a:	d900      	bls.n	8008d3e <__ssputs_r+0x72>
 8008d3c:	463e      	mov	r6, r7
 8008d3e:	6820      	ldr	r0, [r4, #0]
 8008d40:	4632      	mov	r2, r6
 8008d42:	4641      	mov	r1, r8
 8008d44:	f000 fb54 	bl	80093f0 <memmove>
 8008d48:	68a3      	ldr	r3, [r4, #8]
 8008d4a:	1b9b      	subs	r3, r3, r6
 8008d4c:	60a3      	str	r3, [r4, #8]
 8008d4e:	6823      	ldr	r3, [r4, #0]
 8008d50:	4433      	add	r3, r6
 8008d52:	6023      	str	r3, [r4, #0]
 8008d54:	2000      	movs	r0, #0
 8008d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d5a:	462a      	mov	r2, r5
 8008d5c:	f001 fb9a 	bl	800a494 <_realloc_r>
 8008d60:	4606      	mov	r6, r0
 8008d62:	2800      	cmp	r0, #0
 8008d64:	d1e0      	bne.n	8008d28 <__ssputs_r+0x5c>
 8008d66:	6921      	ldr	r1, [r4, #16]
 8008d68:	4650      	mov	r0, sl
 8008d6a:	f7ff f833 	bl	8007dd4 <_free_r>
 8008d6e:	230c      	movs	r3, #12
 8008d70:	f8ca 3000 	str.w	r3, [sl]
 8008d74:	89a3      	ldrh	r3, [r4, #12]
 8008d76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d7a:	81a3      	strh	r3, [r4, #12]
 8008d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d80:	e7e9      	b.n	8008d56 <__ssputs_r+0x8a>
	...

08008d84 <_svfiprintf_r>:
 8008d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d88:	4698      	mov	r8, r3
 8008d8a:	898b      	ldrh	r3, [r1, #12]
 8008d8c:	061b      	lsls	r3, r3, #24
 8008d8e:	b09d      	sub	sp, #116	@ 0x74
 8008d90:	4607      	mov	r7, r0
 8008d92:	460d      	mov	r5, r1
 8008d94:	4614      	mov	r4, r2
 8008d96:	d510      	bpl.n	8008dba <_svfiprintf_r+0x36>
 8008d98:	690b      	ldr	r3, [r1, #16]
 8008d9a:	b973      	cbnz	r3, 8008dba <_svfiprintf_r+0x36>
 8008d9c:	2140      	movs	r1, #64	@ 0x40
 8008d9e:	f7ff f885 	bl	8007eac <_malloc_r>
 8008da2:	6028      	str	r0, [r5, #0]
 8008da4:	6128      	str	r0, [r5, #16]
 8008da6:	b930      	cbnz	r0, 8008db6 <_svfiprintf_r+0x32>
 8008da8:	230c      	movs	r3, #12
 8008daa:	603b      	str	r3, [r7, #0]
 8008dac:	f04f 30ff 	mov.w	r0, #4294967295
 8008db0:	b01d      	add	sp, #116	@ 0x74
 8008db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008db6:	2340      	movs	r3, #64	@ 0x40
 8008db8:	616b      	str	r3, [r5, #20]
 8008dba:	2300      	movs	r3, #0
 8008dbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8008dbe:	2320      	movs	r3, #32
 8008dc0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008dc4:	f8cd 800c 	str.w	r8, [sp, #12]
 8008dc8:	2330      	movs	r3, #48	@ 0x30
 8008dca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008f68 <_svfiprintf_r+0x1e4>
 8008dce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008dd2:	f04f 0901 	mov.w	r9, #1
 8008dd6:	4623      	mov	r3, r4
 8008dd8:	469a      	mov	sl, r3
 8008dda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008dde:	b10a      	cbz	r2, 8008de4 <_svfiprintf_r+0x60>
 8008de0:	2a25      	cmp	r2, #37	@ 0x25
 8008de2:	d1f9      	bne.n	8008dd8 <_svfiprintf_r+0x54>
 8008de4:	ebba 0b04 	subs.w	fp, sl, r4
 8008de8:	d00b      	beq.n	8008e02 <_svfiprintf_r+0x7e>
 8008dea:	465b      	mov	r3, fp
 8008dec:	4622      	mov	r2, r4
 8008dee:	4629      	mov	r1, r5
 8008df0:	4638      	mov	r0, r7
 8008df2:	f7ff ff6b 	bl	8008ccc <__ssputs_r>
 8008df6:	3001      	adds	r0, #1
 8008df8:	f000 80a7 	beq.w	8008f4a <_svfiprintf_r+0x1c6>
 8008dfc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008dfe:	445a      	add	r2, fp
 8008e00:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e02:	f89a 3000 	ldrb.w	r3, [sl]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	f000 809f 	beq.w	8008f4a <_svfiprintf_r+0x1c6>
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	f04f 32ff 	mov.w	r2, #4294967295
 8008e12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e16:	f10a 0a01 	add.w	sl, sl, #1
 8008e1a:	9304      	str	r3, [sp, #16]
 8008e1c:	9307      	str	r3, [sp, #28]
 8008e1e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008e22:	931a      	str	r3, [sp, #104]	@ 0x68
 8008e24:	4654      	mov	r4, sl
 8008e26:	2205      	movs	r2, #5
 8008e28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e2c:	484e      	ldr	r0, [pc, #312]	@ (8008f68 <_svfiprintf_r+0x1e4>)
 8008e2e:	f7f7 f9d7 	bl	80001e0 <memchr>
 8008e32:	9a04      	ldr	r2, [sp, #16]
 8008e34:	b9d8      	cbnz	r0, 8008e6e <_svfiprintf_r+0xea>
 8008e36:	06d0      	lsls	r0, r2, #27
 8008e38:	bf44      	itt	mi
 8008e3a:	2320      	movmi	r3, #32
 8008e3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e40:	0711      	lsls	r1, r2, #28
 8008e42:	bf44      	itt	mi
 8008e44:	232b      	movmi	r3, #43	@ 0x2b
 8008e46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e4a:	f89a 3000 	ldrb.w	r3, [sl]
 8008e4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e50:	d015      	beq.n	8008e7e <_svfiprintf_r+0xfa>
 8008e52:	9a07      	ldr	r2, [sp, #28]
 8008e54:	4654      	mov	r4, sl
 8008e56:	2000      	movs	r0, #0
 8008e58:	f04f 0c0a 	mov.w	ip, #10
 8008e5c:	4621      	mov	r1, r4
 8008e5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e62:	3b30      	subs	r3, #48	@ 0x30
 8008e64:	2b09      	cmp	r3, #9
 8008e66:	d94b      	bls.n	8008f00 <_svfiprintf_r+0x17c>
 8008e68:	b1b0      	cbz	r0, 8008e98 <_svfiprintf_r+0x114>
 8008e6a:	9207      	str	r2, [sp, #28]
 8008e6c:	e014      	b.n	8008e98 <_svfiprintf_r+0x114>
 8008e6e:	eba0 0308 	sub.w	r3, r0, r8
 8008e72:	fa09 f303 	lsl.w	r3, r9, r3
 8008e76:	4313      	orrs	r3, r2
 8008e78:	9304      	str	r3, [sp, #16]
 8008e7a:	46a2      	mov	sl, r4
 8008e7c:	e7d2      	b.n	8008e24 <_svfiprintf_r+0xa0>
 8008e7e:	9b03      	ldr	r3, [sp, #12]
 8008e80:	1d19      	adds	r1, r3, #4
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	9103      	str	r1, [sp, #12]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	bfbb      	ittet	lt
 8008e8a:	425b      	neglt	r3, r3
 8008e8c:	f042 0202 	orrlt.w	r2, r2, #2
 8008e90:	9307      	strge	r3, [sp, #28]
 8008e92:	9307      	strlt	r3, [sp, #28]
 8008e94:	bfb8      	it	lt
 8008e96:	9204      	strlt	r2, [sp, #16]
 8008e98:	7823      	ldrb	r3, [r4, #0]
 8008e9a:	2b2e      	cmp	r3, #46	@ 0x2e
 8008e9c:	d10a      	bne.n	8008eb4 <_svfiprintf_r+0x130>
 8008e9e:	7863      	ldrb	r3, [r4, #1]
 8008ea0:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ea2:	d132      	bne.n	8008f0a <_svfiprintf_r+0x186>
 8008ea4:	9b03      	ldr	r3, [sp, #12]
 8008ea6:	1d1a      	adds	r2, r3, #4
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	9203      	str	r2, [sp, #12]
 8008eac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008eb0:	3402      	adds	r4, #2
 8008eb2:	9305      	str	r3, [sp, #20]
 8008eb4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008f78 <_svfiprintf_r+0x1f4>
 8008eb8:	7821      	ldrb	r1, [r4, #0]
 8008eba:	2203      	movs	r2, #3
 8008ebc:	4650      	mov	r0, sl
 8008ebe:	f7f7 f98f 	bl	80001e0 <memchr>
 8008ec2:	b138      	cbz	r0, 8008ed4 <_svfiprintf_r+0x150>
 8008ec4:	9b04      	ldr	r3, [sp, #16]
 8008ec6:	eba0 000a 	sub.w	r0, r0, sl
 8008eca:	2240      	movs	r2, #64	@ 0x40
 8008ecc:	4082      	lsls	r2, r0
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	3401      	adds	r4, #1
 8008ed2:	9304      	str	r3, [sp, #16]
 8008ed4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ed8:	4824      	ldr	r0, [pc, #144]	@ (8008f6c <_svfiprintf_r+0x1e8>)
 8008eda:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008ede:	2206      	movs	r2, #6
 8008ee0:	f7f7 f97e 	bl	80001e0 <memchr>
 8008ee4:	2800      	cmp	r0, #0
 8008ee6:	d036      	beq.n	8008f56 <_svfiprintf_r+0x1d2>
 8008ee8:	4b21      	ldr	r3, [pc, #132]	@ (8008f70 <_svfiprintf_r+0x1ec>)
 8008eea:	bb1b      	cbnz	r3, 8008f34 <_svfiprintf_r+0x1b0>
 8008eec:	9b03      	ldr	r3, [sp, #12]
 8008eee:	3307      	adds	r3, #7
 8008ef0:	f023 0307 	bic.w	r3, r3, #7
 8008ef4:	3308      	adds	r3, #8
 8008ef6:	9303      	str	r3, [sp, #12]
 8008ef8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008efa:	4433      	add	r3, r6
 8008efc:	9309      	str	r3, [sp, #36]	@ 0x24
 8008efe:	e76a      	b.n	8008dd6 <_svfiprintf_r+0x52>
 8008f00:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f04:	460c      	mov	r4, r1
 8008f06:	2001      	movs	r0, #1
 8008f08:	e7a8      	b.n	8008e5c <_svfiprintf_r+0xd8>
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	3401      	adds	r4, #1
 8008f0e:	9305      	str	r3, [sp, #20]
 8008f10:	4619      	mov	r1, r3
 8008f12:	f04f 0c0a 	mov.w	ip, #10
 8008f16:	4620      	mov	r0, r4
 8008f18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f1c:	3a30      	subs	r2, #48	@ 0x30
 8008f1e:	2a09      	cmp	r2, #9
 8008f20:	d903      	bls.n	8008f2a <_svfiprintf_r+0x1a6>
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d0c6      	beq.n	8008eb4 <_svfiprintf_r+0x130>
 8008f26:	9105      	str	r1, [sp, #20]
 8008f28:	e7c4      	b.n	8008eb4 <_svfiprintf_r+0x130>
 8008f2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f2e:	4604      	mov	r4, r0
 8008f30:	2301      	movs	r3, #1
 8008f32:	e7f0      	b.n	8008f16 <_svfiprintf_r+0x192>
 8008f34:	ab03      	add	r3, sp, #12
 8008f36:	9300      	str	r3, [sp, #0]
 8008f38:	462a      	mov	r2, r5
 8008f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8008f74 <_svfiprintf_r+0x1f0>)
 8008f3c:	a904      	add	r1, sp, #16
 8008f3e:	4638      	mov	r0, r7
 8008f40:	f3af 8000 	nop.w
 8008f44:	1c42      	adds	r2, r0, #1
 8008f46:	4606      	mov	r6, r0
 8008f48:	d1d6      	bne.n	8008ef8 <_svfiprintf_r+0x174>
 8008f4a:	89ab      	ldrh	r3, [r5, #12]
 8008f4c:	065b      	lsls	r3, r3, #25
 8008f4e:	f53f af2d 	bmi.w	8008dac <_svfiprintf_r+0x28>
 8008f52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008f54:	e72c      	b.n	8008db0 <_svfiprintf_r+0x2c>
 8008f56:	ab03      	add	r3, sp, #12
 8008f58:	9300      	str	r3, [sp, #0]
 8008f5a:	462a      	mov	r2, r5
 8008f5c:	4b05      	ldr	r3, [pc, #20]	@ (8008f74 <_svfiprintf_r+0x1f0>)
 8008f5e:	a904      	add	r1, sp, #16
 8008f60:	4638      	mov	r0, r7
 8008f62:	f000 f879 	bl	8009058 <_printf_i>
 8008f66:	e7ed      	b.n	8008f44 <_svfiprintf_r+0x1c0>
 8008f68:	0800ae99 	.word	0x0800ae99
 8008f6c:	0800aea3 	.word	0x0800aea3
 8008f70:	00000000 	.word	0x00000000
 8008f74:	08008ccd 	.word	0x08008ccd
 8008f78:	0800ae9f 	.word	0x0800ae9f

08008f7c <_printf_common>:
 8008f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f80:	4616      	mov	r6, r2
 8008f82:	4698      	mov	r8, r3
 8008f84:	688a      	ldr	r2, [r1, #8]
 8008f86:	690b      	ldr	r3, [r1, #16]
 8008f88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	bfb8      	it	lt
 8008f90:	4613      	movlt	r3, r2
 8008f92:	6033      	str	r3, [r6, #0]
 8008f94:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008f98:	4607      	mov	r7, r0
 8008f9a:	460c      	mov	r4, r1
 8008f9c:	b10a      	cbz	r2, 8008fa2 <_printf_common+0x26>
 8008f9e:	3301      	adds	r3, #1
 8008fa0:	6033      	str	r3, [r6, #0]
 8008fa2:	6823      	ldr	r3, [r4, #0]
 8008fa4:	0699      	lsls	r1, r3, #26
 8008fa6:	bf42      	ittt	mi
 8008fa8:	6833      	ldrmi	r3, [r6, #0]
 8008faa:	3302      	addmi	r3, #2
 8008fac:	6033      	strmi	r3, [r6, #0]
 8008fae:	6825      	ldr	r5, [r4, #0]
 8008fb0:	f015 0506 	ands.w	r5, r5, #6
 8008fb4:	d106      	bne.n	8008fc4 <_printf_common+0x48>
 8008fb6:	f104 0a19 	add.w	sl, r4, #25
 8008fba:	68e3      	ldr	r3, [r4, #12]
 8008fbc:	6832      	ldr	r2, [r6, #0]
 8008fbe:	1a9b      	subs	r3, r3, r2
 8008fc0:	42ab      	cmp	r3, r5
 8008fc2:	dc26      	bgt.n	8009012 <_printf_common+0x96>
 8008fc4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008fc8:	6822      	ldr	r2, [r4, #0]
 8008fca:	3b00      	subs	r3, #0
 8008fcc:	bf18      	it	ne
 8008fce:	2301      	movne	r3, #1
 8008fd0:	0692      	lsls	r2, r2, #26
 8008fd2:	d42b      	bmi.n	800902c <_printf_common+0xb0>
 8008fd4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008fd8:	4641      	mov	r1, r8
 8008fda:	4638      	mov	r0, r7
 8008fdc:	47c8      	blx	r9
 8008fde:	3001      	adds	r0, #1
 8008fe0:	d01e      	beq.n	8009020 <_printf_common+0xa4>
 8008fe2:	6823      	ldr	r3, [r4, #0]
 8008fe4:	6922      	ldr	r2, [r4, #16]
 8008fe6:	f003 0306 	and.w	r3, r3, #6
 8008fea:	2b04      	cmp	r3, #4
 8008fec:	bf02      	ittt	eq
 8008fee:	68e5      	ldreq	r5, [r4, #12]
 8008ff0:	6833      	ldreq	r3, [r6, #0]
 8008ff2:	1aed      	subeq	r5, r5, r3
 8008ff4:	68a3      	ldr	r3, [r4, #8]
 8008ff6:	bf0c      	ite	eq
 8008ff8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ffc:	2500      	movne	r5, #0
 8008ffe:	4293      	cmp	r3, r2
 8009000:	bfc4      	itt	gt
 8009002:	1a9b      	subgt	r3, r3, r2
 8009004:	18ed      	addgt	r5, r5, r3
 8009006:	2600      	movs	r6, #0
 8009008:	341a      	adds	r4, #26
 800900a:	42b5      	cmp	r5, r6
 800900c:	d11a      	bne.n	8009044 <_printf_common+0xc8>
 800900e:	2000      	movs	r0, #0
 8009010:	e008      	b.n	8009024 <_printf_common+0xa8>
 8009012:	2301      	movs	r3, #1
 8009014:	4652      	mov	r2, sl
 8009016:	4641      	mov	r1, r8
 8009018:	4638      	mov	r0, r7
 800901a:	47c8      	blx	r9
 800901c:	3001      	adds	r0, #1
 800901e:	d103      	bne.n	8009028 <_printf_common+0xac>
 8009020:	f04f 30ff 	mov.w	r0, #4294967295
 8009024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009028:	3501      	adds	r5, #1
 800902a:	e7c6      	b.n	8008fba <_printf_common+0x3e>
 800902c:	18e1      	adds	r1, r4, r3
 800902e:	1c5a      	adds	r2, r3, #1
 8009030:	2030      	movs	r0, #48	@ 0x30
 8009032:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009036:	4422      	add	r2, r4
 8009038:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800903c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009040:	3302      	adds	r3, #2
 8009042:	e7c7      	b.n	8008fd4 <_printf_common+0x58>
 8009044:	2301      	movs	r3, #1
 8009046:	4622      	mov	r2, r4
 8009048:	4641      	mov	r1, r8
 800904a:	4638      	mov	r0, r7
 800904c:	47c8      	blx	r9
 800904e:	3001      	adds	r0, #1
 8009050:	d0e6      	beq.n	8009020 <_printf_common+0xa4>
 8009052:	3601      	adds	r6, #1
 8009054:	e7d9      	b.n	800900a <_printf_common+0x8e>
	...

08009058 <_printf_i>:
 8009058:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800905c:	7e0f      	ldrb	r7, [r1, #24]
 800905e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009060:	2f78      	cmp	r7, #120	@ 0x78
 8009062:	4691      	mov	r9, r2
 8009064:	4680      	mov	r8, r0
 8009066:	460c      	mov	r4, r1
 8009068:	469a      	mov	sl, r3
 800906a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800906e:	d807      	bhi.n	8009080 <_printf_i+0x28>
 8009070:	2f62      	cmp	r7, #98	@ 0x62
 8009072:	d80a      	bhi.n	800908a <_printf_i+0x32>
 8009074:	2f00      	cmp	r7, #0
 8009076:	f000 80d2 	beq.w	800921e <_printf_i+0x1c6>
 800907a:	2f58      	cmp	r7, #88	@ 0x58
 800907c:	f000 80b9 	beq.w	80091f2 <_printf_i+0x19a>
 8009080:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009084:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009088:	e03a      	b.n	8009100 <_printf_i+0xa8>
 800908a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800908e:	2b15      	cmp	r3, #21
 8009090:	d8f6      	bhi.n	8009080 <_printf_i+0x28>
 8009092:	a101      	add	r1, pc, #4	@ (adr r1, 8009098 <_printf_i+0x40>)
 8009094:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009098:	080090f1 	.word	0x080090f1
 800909c:	08009105 	.word	0x08009105
 80090a0:	08009081 	.word	0x08009081
 80090a4:	08009081 	.word	0x08009081
 80090a8:	08009081 	.word	0x08009081
 80090ac:	08009081 	.word	0x08009081
 80090b0:	08009105 	.word	0x08009105
 80090b4:	08009081 	.word	0x08009081
 80090b8:	08009081 	.word	0x08009081
 80090bc:	08009081 	.word	0x08009081
 80090c0:	08009081 	.word	0x08009081
 80090c4:	08009205 	.word	0x08009205
 80090c8:	0800912f 	.word	0x0800912f
 80090cc:	080091bf 	.word	0x080091bf
 80090d0:	08009081 	.word	0x08009081
 80090d4:	08009081 	.word	0x08009081
 80090d8:	08009227 	.word	0x08009227
 80090dc:	08009081 	.word	0x08009081
 80090e0:	0800912f 	.word	0x0800912f
 80090e4:	08009081 	.word	0x08009081
 80090e8:	08009081 	.word	0x08009081
 80090ec:	080091c7 	.word	0x080091c7
 80090f0:	6833      	ldr	r3, [r6, #0]
 80090f2:	1d1a      	adds	r2, r3, #4
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	6032      	str	r2, [r6, #0]
 80090f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80090fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009100:	2301      	movs	r3, #1
 8009102:	e09d      	b.n	8009240 <_printf_i+0x1e8>
 8009104:	6833      	ldr	r3, [r6, #0]
 8009106:	6820      	ldr	r0, [r4, #0]
 8009108:	1d19      	adds	r1, r3, #4
 800910a:	6031      	str	r1, [r6, #0]
 800910c:	0606      	lsls	r6, r0, #24
 800910e:	d501      	bpl.n	8009114 <_printf_i+0xbc>
 8009110:	681d      	ldr	r5, [r3, #0]
 8009112:	e003      	b.n	800911c <_printf_i+0xc4>
 8009114:	0645      	lsls	r5, r0, #25
 8009116:	d5fb      	bpl.n	8009110 <_printf_i+0xb8>
 8009118:	f9b3 5000 	ldrsh.w	r5, [r3]
 800911c:	2d00      	cmp	r5, #0
 800911e:	da03      	bge.n	8009128 <_printf_i+0xd0>
 8009120:	232d      	movs	r3, #45	@ 0x2d
 8009122:	426d      	negs	r5, r5
 8009124:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009128:	4859      	ldr	r0, [pc, #356]	@ (8009290 <_printf_i+0x238>)
 800912a:	230a      	movs	r3, #10
 800912c:	e011      	b.n	8009152 <_printf_i+0xfa>
 800912e:	6821      	ldr	r1, [r4, #0]
 8009130:	6833      	ldr	r3, [r6, #0]
 8009132:	0608      	lsls	r0, r1, #24
 8009134:	f853 5b04 	ldr.w	r5, [r3], #4
 8009138:	d402      	bmi.n	8009140 <_printf_i+0xe8>
 800913a:	0649      	lsls	r1, r1, #25
 800913c:	bf48      	it	mi
 800913e:	b2ad      	uxthmi	r5, r5
 8009140:	2f6f      	cmp	r7, #111	@ 0x6f
 8009142:	4853      	ldr	r0, [pc, #332]	@ (8009290 <_printf_i+0x238>)
 8009144:	6033      	str	r3, [r6, #0]
 8009146:	bf14      	ite	ne
 8009148:	230a      	movne	r3, #10
 800914a:	2308      	moveq	r3, #8
 800914c:	2100      	movs	r1, #0
 800914e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009152:	6866      	ldr	r6, [r4, #4]
 8009154:	60a6      	str	r6, [r4, #8]
 8009156:	2e00      	cmp	r6, #0
 8009158:	bfa2      	ittt	ge
 800915a:	6821      	ldrge	r1, [r4, #0]
 800915c:	f021 0104 	bicge.w	r1, r1, #4
 8009160:	6021      	strge	r1, [r4, #0]
 8009162:	b90d      	cbnz	r5, 8009168 <_printf_i+0x110>
 8009164:	2e00      	cmp	r6, #0
 8009166:	d04b      	beq.n	8009200 <_printf_i+0x1a8>
 8009168:	4616      	mov	r6, r2
 800916a:	fbb5 f1f3 	udiv	r1, r5, r3
 800916e:	fb03 5711 	mls	r7, r3, r1, r5
 8009172:	5dc7      	ldrb	r7, [r0, r7]
 8009174:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009178:	462f      	mov	r7, r5
 800917a:	42bb      	cmp	r3, r7
 800917c:	460d      	mov	r5, r1
 800917e:	d9f4      	bls.n	800916a <_printf_i+0x112>
 8009180:	2b08      	cmp	r3, #8
 8009182:	d10b      	bne.n	800919c <_printf_i+0x144>
 8009184:	6823      	ldr	r3, [r4, #0]
 8009186:	07df      	lsls	r7, r3, #31
 8009188:	d508      	bpl.n	800919c <_printf_i+0x144>
 800918a:	6923      	ldr	r3, [r4, #16]
 800918c:	6861      	ldr	r1, [r4, #4]
 800918e:	4299      	cmp	r1, r3
 8009190:	bfde      	ittt	le
 8009192:	2330      	movle	r3, #48	@ 0x30
 8009194:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009198:	f106 36ff 	addle.w	r6, r6, #4294967295
 800919c:	1b92      	subs	r2, r2, r6
 800919e:	6122      	str	r2, [r4, #16]
 80091a0:	f8cd a000 	str.w	sl, [sp]
 80091a4:	464b      	mov	r3, r9
 80091a6:	aa03      	add	r2, sp, #12
 80091a8:	4621      	mov	r1, r4
 80091aa:	4640      	mov	r0, r8
 80091ac:	f7ff fee6 	bl	8008f7c <_printf_common>
 80091b0:	3001      	adds	r0, #1
 80091b2:	d14a      	bne.n	800924a <_printf_i+0x1f2>
 80091b4:	f04f 30ff 	mov.w	r0, #4294967295
 80091b8:	b004      	add	sp, #16
 80091ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091be:	6823      	ldr	r3, [r4, #0]
 80091c0:	f043 0320 	orr.w	r3, r3, #32
 80091c4:	6023      	str	r3, [r4, #0]
 80091c6:	4833      	ldr	r0, [pc, #204]	@ (8009294 <_printf_i+0x23c>)
 80091c8:	2778      	movs	r7, #120	@ 0x78
 80091ca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80091ce:	6823      	ldr	r3, [r4, #0]
 80091d0:	6831      	ldr	r1, [r6, #0]
 80091d2:	061f      	lsls	r7, r3, #24
 80091d4:	f851 5b04 	ldr.w	r5, [r1], #4
 80091d8:	d402      	bmi.n	80091e0 <_printf_i+0x188>
 80091da:	065f      	lsls	r7, r3, #25
 80091dc:	bf48      	it	mi
 80091de:	b2ad      	uxthmi	r5, r5
 80091e0:	6031      	str	r1, [r6, #0]
 80091e2:	07d9      	lsls	r1, r3, #31
 80091e4:	bf44      	itt	mi
 80091e6:	f043 0320 	orrmi.w	r3, r3, #32
 80091ea:	6023      	strmi	r3, [r4, #0]
 80091ec:	b11d      	cbz	r5, 80091f6 <_printf_i+0x19e>
 80091ee:	2310      	movs	r3, #16
 80091f0:	e7ac      	b.n	800914c <_printf_i+0xf4>
 80091f2:	4827      	ldr	r0, [pc, #156]	@ (8009290 <_printf_i+0x238>)
 80091f4:	e7e9      	b.n	80091ca <_printf_i+0x172>
 80091f6:	6823      	ldr	r3, [r4, #0]
 80091f8:	f023 0320 	bic.w	r3, r3, #32
 80091fc:	6023      	str	r3, [r4, #0]
 80091fe:	e7f6      	b.n	80091ee <_printf_i+0x196>
 8009200:	4616      	mov	r6, r2
 8009202:	e7bd      	b.n	8009180 <_printf_i+0x128>
 8009204:	6833      	ldr	r3, [r6, #0]
 8009206:	6825      	ldr	r5, [r4, #0]
 8009208:	6961      	ldr	r1, [r4, #20]
 800920a:	1d18      	adds	r0, r3, #4
 800920c:	6030      	str	r0, [r6, #0]
 800920e:	062e      	lsls	r6, r5, #24
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	d501      	bpl.n	8009218 <_printf_i+0x1c0>
 8009214:	6019      	str	r1, [r3, #0]
 8009216:	e002      	b.n	800921e <_printf_i+0x1c6>
 8009218:	0668      	lsls	r0, r5, #25
 800921a:	d5fb      	bpl.n	8009214 <_printf_i+0x1bc>
 800921c:	8019      	strh	r1, [r3, #0]
 800921e:	2300      	movs	r3, #0
 8009220:	6123      	str	r3, [r4, #16]
 8009222:	4616      	mov	r6, r2
 8009224:	e7bc      	b.n	80091a0 <_printf_i+0x148>
 8009226:	6833      	ldr	r3, [r6, #0]
 8009228:	1d1a      	adds	r2, r3, #4
 800922a:	6032      	str	r2, [r6, #0]
 800922c:	681e      	ldr	r6, [r3, #0]
 800922e:	6862      	ldr	r2, [r4, #4]
 8009230:	2100      	movs	r1, #0
 8009232:	4630      	mov	r0, r6
 8009234:	f7f6 ffd4 	bl	80001e0 <memchr>
 8009238:	b108      	cbz	r0, 800923e <_printf_i+0x1e6>
 800923a:	1b80      	subs	r0, r0, r6
 800923c:	6060      	str	r0, [r4, #4]
 800923e:	6863      	ldr	r3, [r4, #4]
 8009240:	6123      	str	r3, [r4, #16]
 8009242:	2300      	movs	r3, #0
 8009244:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009248:	e7aa      	b.n	80091a0 <_printf_i+0x148>
 800924a:	6923      	ldr	r3, [r4, #16]
 800924c:	4632      	mov	r2, r6
 800924e:	4649      	mov	r1, r9
 8009250:	4640      	mov	r0, r8
 8009252:	47d0      	blx	sl
 8009254:	3001      	adds	r0, #1
 8009256:	d0ad      	beq.n	80091b4 <_printf_i+0x15c>
 8009258:	6823      	ldr	r3, [r4, #0]
 800925a:	079b      	lsls	r3, r3, #30
 800925c:	d413      	bmi.n	8009286 <_printf_i+0x22e>
 800925e:	68e0      	ldr	r0, [r4, #12]
 8009260:	9b03      	ldr	r3, [sp, #12]
 8009262:	4298      	cmp	r0, r3
 8009264:	bfb8      	it	lt
 8009266:	4618      	movlt	r0, r3
 8009268:	e7a6      	b.n	80091b8 <_printf_i+0x160>
 800926a:	2301      	movs	r3, #1
 800926c:	4632      	mov	r2, r6
 800926e:	4649      	mov	r1, r9
 8009270:	4640      	mov	r0, r8
 8009272:	47d0      	blx	sl
 8009274:	3001      	adds	r0, #1
 8009276:	d09d      	beq.n	80091b4 <_printf_i+0x15c>
 8009278:	3501      	adds	r5, #1
 800927a:	68e3      	ldr	r3, [r4, #12]
 800927c:	9903      	ldr	r1, [sp, #12]
 800927e:	1a5b      	subs	r3, r3, r1
 8009280:	42ab      	cmp	r3, r5
 8009282:	dcf2      	bgt.n	800926a <_printf_i+0x212>
 8009284:	e7eb      	b.n	800925e <_printf_i+0x206>
 8009286:	2500      	movs	r5, #0
 8009288:	f104 0619 	add.w	r6, r4, #25
 800928c:	e7f5      	b.n	800927a <_printf_i+0x222>
 800928e:	bf00      	nop
 8009290:	0800aeaa 	.word	0x0800aeaa
 8009294:	0800aebb 	.word	0x0800aebb

08009298 <__sflush_r>:
 8009298:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800929c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092a0:	0716      	lsls	r6, r2, #28
 80092a2:	4605      	mov	r5, r0
 80092a4:	460c      	mov	r4, r1
 80092a6:	d454      	bmi.n	8009352 <__sflush_r+0xba>
 80092a8:	684b      	ldr	r3, [r1, #4]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	dc02      	bgt.n	80092b4 <__sflush_r+0x1c>
 80092ae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	dd48      	ble.n	8009346 <__sflush_r+0xae>
 80092b4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80092b6:	2e00      	cmp	r6, #0
 80092b8:	d045      	beq.n	8009346 <__sflush_r+0xae>
 80092ba:	2300      	movs	r3, #0
 80092bc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80092c0:	682f      	ldr	r7, [r5, #0]
 80092c2:	6a21      	ldr	r1, [r4, #32]
 80092c4:	602b      	str	r3, [r5, #0]
 80092c6:	d030      	beq.n	800932a <__sflush_r+0x92>
 80092c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80092ca:	89a3      	ldrh	r3, [r4, #12]
 80092cc:	0759      	lsls	r1, r3, #29
 80092ce:	d505      	bpl.n	80092dc <__sflush_r+0x44>
 80092d0:	6863      	ldr	r3, [r4, #4]
 80092d2:	1ad2      	subs	r2, r2, r3
 80092d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80092d6:	b10b      	cbz	r3, 80092dc <__sflush_r+0x44>
 80092d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80092da:	1ad2      	subs	r2, r2, r3
 80092dc:	2300      	movs	r3, #0
 80092de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80092e0:	6a21      	ldr	r1, [r4, #32]
 80092e2:	4628      	mov	r0, r5
 80092e4:	47b0      	blx	r6
 80092e6:	1c43      	adds	r3, r0, #1
 80092e8:	89a3      	ldrh	r3, [r4, #12]
 80092ea:	d106      	bne.n	80092fa <__sflush_r+0x62>
 80092ec:	6829      	ldr	r1, [r5, #0]
 80092ee:	291d      	cmp	r1, #29
 80092f0:	d82b      	bhi.n	800934a <__sflush_r+0xb2>
 80092f2:	4a2a      	ldr	r2, [pc, #168]	@ (800939c <__sflush_r+0x104>)
 80092f4:	410a      	asrs	r2, r1
 80092f6:	07d6      	lsls	r6, r2, #31
 80092f8:	d427      	bmi.n	800934a <__sflush_r+0xb2>
 80092fa:	2200      	movs	r2, #0
 80092fc:	6062      	str	r2, [r4, #4]
 80092fe:	04d9      	lsls	r1, r3, #19
 8009300:	6922      	ldr	r2, [r4, #16]
 8009302:	6022      	str	r2, [r4, #0]
 8009304:	d504      	bpl.n	8009310 <__sflush_r+0x78>
 8009306:	1c42      	adds	r2, r0, #1
 8009308:	d101      	bne.n	800930e <__sflush_r+0x76>
 800930a:	682b      	ldr	r3, [r5, #0]
 800930c:	b903      	cbnz	r3, 8009310 <__sflush_r+0x78>
 800930e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009310:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009312:	602f      	str	r7, [r5, #0]
 8009314:	b1b9      	cbz	r1, 8009346 <__sflush_r+0xae>
 8009316:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800931a:	4299      	cmp	r1, r3
 800931c:	d002      	beq.n	8009324 <__sflush_r+0x8c>
 800931e:	4628      	mov	r0, r5
 8009320:	f7fe fd58 	bl	8007dd4 <_free_r>
 8009324:	2300      	movs	r3, #0
 8009326:	6363      	str	r3, [r4, #52]	@ 0x34
 8009328:	e00d      	b.n	8009346 <__sflush_r+0xae>
 800932a:	2301      	movs	r3, #1
 800932c:	4628      	mov	r0, r5
 800932e:	47b0      	blx	r6
 8009330:	4602      	mov	r2, r0
 8009332:	1c50      	adds	r0, r2, #1
 8009334:	d1c9      	bne.n	80092ca <__sflush_r+0x32>
 8009336:	682b      	ldr	r3, [r5, #0]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d0c6      	beq.n	80092ca <__sflush_r+0x32>
 800933c:	2b1d      	cmp	r3, #29
 800933e:	d001      	beq.n	8009344 <__sflush_r+0xac>
 8009340:	2b16      	cmp	r3, #22
 8009342:	d11e      	bne.n	8009382 <__sflush_r+0xea>
 8009344:	602f      	str	r7, [r5, #0]
 8009346:	2000      	movs	r0, #0
 8009348:	e022      	b.n	8009390 <__sflush_r+0xf8>
 800934a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800934e:	b21b      	sxth	r3, r3
 8009350:	e01b      	b.n	800938a <__sflush_r+0xf2>
 8009352:	690f      	ldr	r7, [r1, #16]
 8009354:	2f00      	cmp	r7, #0
 8009356:	d0f6      	beq.n	8009346 <__sflush_r+0xae>
 8009358:	0793      	lsls	r3, r2, #30
 800935a:	680e      	ldr	r6, [r1, #0]
 800935c:	bf08      	it	eq
 800935e:	694b      	ldreq	r3, [r1, #20]
 8009360:	600f      	str	r7, [r1, #0]
 8009362:	bf18      	it	ne
 8009364:	2300      	movne	r3, #0
 8009366:	eba6 0807 	sub.w	r8, r6, r7
 800936a:	608b      	str	r3, [r1, #8]
 800936c:	f1b8 0f00 	cmp.w	r8, #0
 8009370:	dde9      	ble.n	8009346 <__sflush_r+0xae>
 8009372:	6a21      	ldr	r1, [r4, #32]
 8009374:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009376:	4643      	mov	r3, r8
 8009378:	463a      	mov	r2, r7
 800937a:	4628      	mov	r0, r5
 800937c:	47b0      	blx	r6
 800937e:	2800      	cmp	r0, #0
 8009380:	dc08      	bgt.n	8009394 <__sflush_r+0xfc>
 8009382:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009386:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800938a:	81a3      	strh	r3, [r4, #12]
 800938c:	f04f 30ff 	mov.w	r0, #4294967295
 8009390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009394:	4407      	add	r7, r0
 8009396:	eba8 0800 	sub.w	r8, r8, r0
 800939a:	e7e7      	b.n	800936c <__sflush_r+0xd4>
 800939c:	dfbffffe 	.word	0xdfbffffe

080093a0 <_fflush_r>:
 80093a0:	b538      	push	{r3, r4, r5, lr}
 80093a2:	690b      	ldr	r3, [r1, #16]
 80093a4:	4605      	mov	r5, r0
 80093a6:	460c      	mov	r4, r1
 80093a8:	b913      	cbnz	r3, 80093b0 <_fflush_r+0x10>
 80093aa:	2500      	movs	r5, #0
 80093ac:	4628      	mov	r0, r5
 80093ae:	bd38      	pop	{r3, r4, r5, pc}
 80093b0:	b118      	cbz	r0, 80093ba <_fflush_r+0x1a>
 80093b2:	6a03      	ldr	r3, [r0, #32]
 80093b4:	b90b      	cbnz	r3, 80093ba <_fflush_r+0x1a>
 80093b6:	f7fe fbf1 	bl	8007b9c <__sinit>
 80093ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d0f3      	beq.n	80093aa <_fflush_r+0xa>
 80093c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80093c4:	07d0      	lsls	r0, r2, #31
 80093c6:	d404      	bmi.n	80093d2 <_fflush_r+0x32>
 80093c8:	0599      	lsls	r1, r3, #22
 80093ca:	d402      	bmi.n	80093d2 <_fflush_r+0x32>
 80093cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80093ce:	f7fe fcf8 	bl	8007dc2 <__retarget_lock_acquire_recursive>
 80093d2:	4628      	mov	r0, r5
 80093d4:	4621      	mov	r1, r4
 80093d6:	f7ff ff5f 	bl	8009298 <__sflush_r>
 80093da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80093dc:	07da      	lsls	r2, r3, #31
 80093de:	4605      	mov	r5, r0
 80093e0:	d4e4      	bmi.n	80093ac <_fflush_r+0xc>
 80093e2:	89a3      	ldrh	r3, [r4, #12]
 80093e4:	059b      	lsls	r3, r3, #22
 80093e6:	d4e1      	bmi.n	80093ac <_fflush_r+0xc>
 80093e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80093ea:	f7fe fceb 	bl	8007dc4 <__retarget_lock_release_recursive>
 80093ee:	e7dd      	b.n	80093ac <_fflush_r+0xc>

080093f0 <memmove>:
 80093f0:	4288      	cmp	r0, r1
 80093f2:	b510      	push	{r4, lr}
 80093f4:	eb01 0402 	add.w	r4, r1, r2
 80093f8:	d902      	bls.n	8009400 <memmove+0x10>
 80093fa:	4284      	cmp	r4, r0
 80093fc:	4623      	mov	r3, r4
 80093fe:	d807      	bhi.n	8009410 <memmove+0x20>
 8009400:	1e43      	subs	r3, r0, #1
 8009402:	42a1      	cmp	r1, r4
 8009404:	d008      	beq.n	8009418 <memmove+0x28>
 8009406:	f811 2b01 	ldrb.w	r2, [r1], #1
 800940a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800940e:	e7f8      	b.n	8009402 <memmove+0x12>
 8009410:	4402      	add	r2, r0
 8009412:	4601      	mov	r1, r0
 8009414:	428a      	cmp	r2, r1
 8009416:	d100      	bne.n	800941a <memmove+0x2a>
 8009418:	bd10      	pop	{r4, pc}
 800941a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800941e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009422:	e7f7      	b.n	8009414 <memmove+0x24>

08009424 <strncmp>:
 8009424:	b510      	push	{r4, lr}
 8009426:	b16a      	cbz	r2, 8009444 <strncmp+0x20>
 8009428:	3901      	subs	r1, #1
 800942a:	1884      	adds	r4, r0, r2
 800942c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009430:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009434:	429a      	cmp	r2, r3
 8009436:	d103      	bne.n	8009440 <strncmp+0x1c>
 8009438:	42a0      	cmp	r0, r4
 800943a:	d001      	beq.n	8009440 <strncmp+0x1c>
 800943c:	2a00      	cmp	r2, #0
 800943e:	d1f5      	bne.n	800942c <strncmp+0x8>
 8009440:	1ad0      	subs	r0, r2, r3
 8009442:	bd10      	pop	{r4, pc}
 8009444:	4610      	mov	r0, r2
 8009446:	e7fc      	b.n	8009442 <strncmp+0x1e>

08009448 <_sbrk_r>:
 8009448:	b538      	push	{r3, r4, r5, lr}
 800944a:	4d06      	ldr	r5, [pc, #24]	@ (8009464 <_sbrk_r+0x1c>)
 800944c:	2300      	movs	r3, #0
 800944e:	4604      	mov	r4, r0
 8009450:	4608      	mov	r0, r1
 8009452:	602b      	str	r3, [r5, #0]
 8009454:	f7f9 fd6e 	bl	8002f34 <_sbrk>
 8009458:	1c43      	adds	r3, r0, #1
 800945a:	d102      	bne.n	8009462 <_sbrk_r+0x1a>
 800945c:	682b      	ldr	r3, [r5, #0]
 800945e:	b103      	cbz	r3, 8009462 <_sbrk_r+0x1a>
 8009460:	6023      	str	r3, [r4, #0]
 8009462:	bd38      	pop	{r3, r4, r5, pc}
 8009464:	200006b4 	.word	0x200006b4

08009468 <memcpy>:
 8009468:	440a      	add	r2, r1
 800946a:	4291      	cmp	r1, r2
 800946c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009470:	d100      	bne.n	8009474 <memcpy+0xc>
 8009472:	4770      	bx	lr
 8009474:	b510      	push	{r4, lr}
 8009476:	f811 4b01 	ldrb.w	r4, [r1], #1
 800947a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800947e:	4291      	cmp	r1, r2
 8009480:	d1f9      	bne.n	8009476 <memcpy+0xe>
 8009482:	bd10      	pop	{r4, pc}
 8009484:	0000      	movs	r0, r0
	...

08009488 <nan>:
 8009488:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009490 <nan+0x8>
 800948c:	4770      	bx	lr
 800948e:	bf00      	nop
 8009490:	00000000 	.word	0x00000000
 8009494:	7ff80000 	.word	0x7ff80000

08009498 <rshift>:
 8009498:	6903      	ldr	r3, [r0, #16]
 800949a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800949e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80094a2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80094a6:	f100 0414 	add.w	r4, r0, #20
 80094aa:	dd45      	ble.n	8009538 <rshift+0xa0>
 80094ac:	f011 011f 	ands.w	r1, r1, #31
 80094b0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80094b4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80094b8:	d10c      	bne.n	80094d4 <rshift+0x3c>
 80094ba:	f100 0710 	add.w	r7, r0, #16
 80094be:	4629      	mov	r1, r5
 80094c0:	42b1      	cmp	r1, r6
 80094c2:	d334      	bcc.n	800952e <rshift+0x96>
 80094c4:	1a9b      	subs	r3, r3, r2
 80094c6:	009b      	lsls	r3, r3, #2
 80094c8:	1eea      	subs	r2, r5, #3
 80094ca:	4296      	cmp	r6, r2
 80094cc:	bf38      	it	cc
 80094ce:	2300      	movcc	r3, #0
 80094d0:	4423      	add	r3, r4
 80094d2:	e015      	b.n	8009500 <rshift+0x68>
 80094d4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80094d8:	f1c1 0820 	rsb	r8, r1, #32
 80094dc:	40cf      	lsrs	r7, r1
 80094de:	f105 0e04 	add.w	lr, r5, #4
 80094e2:	46a1      	mov	r9, r4
 80094e4:	4576      	cmp	r6, lr
 80094e6:	46f4      	mov	ip, lr
 80094e8:	d815      	bhi.n	8009516 <rshift+0x7e>
 80094ea:	1a9a      	subs	r2, r3, r2
 80094ec:	0092      	lsls	r2, r2, #2
 80094ee:	3a04      	subs	r2, #4
 80094f0:	3501      	adds	r5, #1
 80094f2:	42ae      	cmp	r6, r5
 80094f4:	bf38      	it	cc
 80094f6:	2200      	movcc	r2, #0
 80094f8:	18a3      	adds	r3, r4, r2
 80094fa:	50a7      	str	r7, [r4, r2]
 80094fc:	b107      	cbz	r7, 8009500 <rshift+0x68>
 80094fe:	3304      	adds	r3, #4
 8009500:	1b1a      	subs	r2, r3, r4
 8009502:	42a3      	cmp	r3, r4
 8009504:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009508:	bf08      	it	eq
 800950a:	2300      	moveq	r3, #0
 800950c:	6102      	str	r2, [r0, #16]
 800950e:	bf08      	it	eq
 8009510:	6143      	streq	r3, [r0, #20]
 8009512:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009516:	f8dc c000 	ldr.w	ip, [ip]
 800951a:	fa0c fc08 	lsl.w	ip, ip, r8
 800951e:	ea4c 0707 	orr.w	r7, ip, r7
 8009522:	f849 7b04 	str.w	r7, [r9], #4
 8009526:	f85e 7b04 	ldr.w	r7, [lr], #4
 800952a:	40cf      	lsrs	r7, r1
 800952c:	e7da      	b.n	80094e4 <rshift+0x4c>
 800952e:	f851 cb04 	ldr.w	ip, [r1], #4
 8009532:	f847 cf04 	str.w	ip, [r7, #4]!
 8009536:	e7c3      	b.n	80094c0 <rshift+0x28>
 8009538:	4623      	mov	r3, r4
 800953a:	e7e1      	b.n	8009500 <rshift+0x68>

0800953c <__hexdig_fun>:
 800953c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009540:	2b09      	cmp	r3, #9
 8009542:	d802      	bhi.n	800954a <__hexdig_fun+0xe>
 8009544:	3820      	subs	r0, #32
 8009546:	b2c0      	uxtb	r0, r0
 8009548:	4770      	bx	lr
 800954a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800954e:	2b05      	cmp	r3, #5
 8009550:	d801      	bhi.n	8009556 <__hexdig_fun+0x1a>
 8009552:	3847      	subs	r0, #71	@ 0x47
 8009554:	e7f7      	b.n	8009546 <__hexdig_fun+0xa>
 8009556:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800955a:	2b05      	cmp	r3, #5
 800955c:	d801      	bhi.n	8009562 <__hexdig_fun+0x26>
 800955e:	3827      	subs	r0, #39	@ 0x27
 8009560:	e7f1      	b.n	8009546 <__hexdig_fun+0xa>
 8009562:	2000      	movs	r0, #0
 8009564:	4770      	bx	lr
	...

08009568 <__gethex>:
 8009568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800956c:	b085      	sub	sp, #20
 800956e:	468a      	mov	sl, r1
 8009570:	9302      	str	r3, [sp, #8]
 8009572:	680b      	ldr	r3, [r1, #0]
 8009574:	9001      	str	r0, [sp, #4]
 8009576:	4690      	mov	r8, r2
 8009578:	1c9c      	adds	r4, r3, #2
 800957a:	46a1      	mov	r9, r4
 800957c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009580:	2830      	cmp	r0, #48	@ 0x30
 8009582:	d0fa      	beq.n	800957a <__gethex+0x12>
 8009584:	eba9 0303 	sub.w	r3, r9, r3
 8009588:	f1a3 0b02 	sub.w	fp, r3, #2
 800958c:	f7ff ffd6 	bl	800953c <__hexdig_fun>
 8009590:	4605      	mov	r5, r0
 8009592:	2800      	cmp	r0, #0
 8009594:	d168      	bne.n	8009668 <__gethex+0x100>
 8009596:	49a0      	ldr	r1, [pc, #640]	@ (8009818 <__gethex+0x2b0>)
 8009598:	2201      	movs	r2, #1
 800959a:	4648      	mov	r0, r9
 800959c:	f7ff ff42 	bl	8009424 <strncmp>
 80095a0:	4607      	mov	r7, r0
 80095a2:	2800      	cmp	r0, #0
 80095a4:	d167      	bne.n	8009676 <__gethex+0x10e>
 80095a6:	f899 0001 	ldrb.w	r0, [r9, #1]
 80095aa:	4626      	mov	r6, r4
 80095ac:	f7ff ffc6 	bl	800953c <__hexdig_fun>
 80095b0:	2800      	cmp	r0, #0
 80095b2:	d062      	beq.n	800967a <__gethex+0x112>
 80095b4:	4623      	mov	r3, r4
 80095b6:	7818      	ldrb	r0, [r3, #0]
 80095b8:	2830      	cmp	r0, #48	@ 0x30
 80095ba:	4699      	mov	r9, r3
 80095bc:	f103 0301 	add.w	r3, r3, #1
 80095c0:	d0f9      	beq.n	80095b6 <__gethex+0x4e>
 80095c2:	f7ff ffbb 	bl	800953c <__hexdig_fun>
 80095c6:	fab0 f580 	clz	r5, r0
 80095ca:	096d      	lsrs	r5, r5, #5
 80095cc:	f04f 0b01 	mov.w	fp, #1
 80095d0:	464a      	mov	r2, r9
 80095d2:	4616      	mov	r6, r2
 80095d4:	3201      	adds	r2, #1
 80095d6:	7830      	ldrb	r0, [r6, #0]
 80095d8:	f7ff ffb0 	bl	800953c <__hexdig_fun>
 80095dc:	2800      	cmp	r0, #0
 80095de:	d1f8      	bne.n	80095d2 <__gethex+0x6a>
 80095e0:	498d      	ldr	r1, [pc, #564]	@ (8009818 <__gethex+0x2b0>)
 80095e2:	2201      	movs	r2, #1
 80095e4:	4630      	mov	r0, r6
 80095e6:	f7ff ff1d 	bl	8009424 <strncmp>
 80095ea:	2800      	cmp	r0, #0
 80095ec:	d13f      	bne.n	800966e <__gethex+0x106>
 80095ee:	b944      	cbnz	r4, 8009602 <__gethex+0x9a>
 80095f0:	1c74      	adds	r4, r6, #1
 80095f2:	4622      	mov	r2, r4
 80095f4:	4616      	mov	r6, r2
 80095f6:	3201      	adds	r2, #1
 80095f8:	7830      	ldrb	r0, [r6, #0]
 80095fa:	f7ff ff9f 	bl	800953c <__hexdig_fun>
 80095fe:	2800      	cmp	r0, #0
 8009600:	d1f8      	bne.n	80095f4 <__gethex+0x8c>
 8009602:	1ba4      	subs	r4, r4, r6
 8009604:	00a7      	lsls	r7, r4, #2
 8009606:	7833      	ldrb	r3, [r6, #0]
 8009608:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800960c:	2b50      	cmp	r3, #80	@ 0x50
 800960e:	d13e      	bne.n	800968e <__gethex+0x126>
 8009610:	7873      	ldrb	r3, [r6, #1]
 8009612:	2b2b      	cmp	r3, #43	@ 0x2b
 8009614:	d033      	beq.n	800967e <__gethex+0x116>
 8009616:	2b2d      	cmp	r3, #45	@ 0x2d
 8009618:	d034      	beq.n	8009684 <__gethex+0x11c>
 800961a:	1c71      	adds	r1, r6, #1
 800961c:	2400      	movs	r4, #0
 800961e:	7808      	ldrb	r0, [r1, #0]
 8009620:	f7ff ff8c 	bl	800953c <__hexdig_fun>
 8009624:	1e43      	subs	r3, r0, #1
 8009626:	b2db      	uxtb	r3, r3
 8009628:	2b18      	cmp	r3, #24
 800962a:	d830      	bhi.n	800968e <__gethex+0x126>
 800962c:	f1a0 0210 	sub.w	r2, r0, #16
 8009630:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009634:	f7ff ff82 	bl	800953c <__hexdig_fun>
 8009638:	f100 3cff 	add.w	ip, r0, #4294967295
 800963c:	fa5f fc8c 	uxtb.w	ip, ip
 8009640:	f1bc 0f18 	cmp.w	ip, #24
 8009644:	f04f 030a 	mov.w	r3, #10
 8009648:	d91e      	bls.n	8009688 <__gethex+0x120>
 800964a:	b104      	cbz	r4, 800964e <__gethex+0xe6>
 800964c:	4252      	negs	r2, r2
 800964e:	4417      	add	r7, r2
 8009650:	f8ca 1000 	str.w	r1, [sl]
 8009654:	b1ed      	cbz	r5, 8009692 <__gethex+0x12a>
 8009656:	f1bb 0f00 	cmp.w	fp, #0
 800965a:	bf0c      	ite	eq
 800965c:	2506      	moveq	r5, #6
 800965e:	2500      	movne	r5, #0
 8009660:	4628      	mov	r0, r5
 8009662:	b005      	add	sp, #20
 8009664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009668:	2500      	movs	r5, #0
 800966a:	462c      	mov	r4, r5
 800966c:	e7b0      	b.n	80095d0 <__gethex+0x68>
 800966e:	2c00      	cmp	r4, #0
 8009670:	d1c7      	bne.n	8009602 <__gethex+0x9a>
 8009672:	4627      	mov	r7, r4
 8009674:	e7c7      	b.n	8009606 <__gethex+0x9e>
 8009676:	464e      	mov	r6, r9
 8009678:	462f      	mov	r7, r5
 800967a:	2501      	movs	r5, #1
 800967c:	e7c3      	b.n	8009606 <__gethex+0x9e>
 800967e:	2400      	movs	r4, #0
 8009680:	1cb1      	adds	r1, r6, #2
 8009682:	e7cc      	b.n	800961e <__gethex+0xb6>
 8009684:	2401      	movs	r4, #1
 8009686:	e7fb      	b.n	8009680 <__gethex+0x118>
 8009688:	fb03 0002 	mla	r0, r3, r2, r0
 800968c:	e7ce      	b.n	800962c <__gethex+0xc4>
 800968e:	4631      	mov	r1, r6
 8009690:	e7de      	b.n	8009650 <__gethex+0xe8>
 8009692:	eba6 0309 	sub.w	r3, r6, r9
 8009696:	3b01      	subs	r3, #1
 8009698:	4629      	mov	r1, r5
 800969a:	2b07      	cmp	r3, #7
 800969c:	dc0a      	bgt.n	80096b4 <__gethex+0x14c>
 800969e:	9801      	ldr	r0, [sp, #4]
 80096a0:	f000 fa46 	bl	8009b30 <_Balloc>
 80096a4:	4604      	mov	r4, r0
 80096a6:	b940      	cbnz	r0, 80096ba <__gethex+0x152>
 80096a8:	4b5c      	ldr	r3, [pc, #368]	@ (800981c <__gethex+0x2b4>)
 80096aa:	4602      	mov	r2, r0
 80096ac:	21e4      	movs	r1, #228	@ 0xe4
 80096ae:	485c      	ldr	r0, [pc, #368]	@ (8009820 <__gethex+0x2b8>)
 80096b0:	f000 ff2c 	bl	800a50c <__assert_func>
 80096b4:	3101      	adds	r1, #1
 80096b6:	105b      	asrs	r3, r3, #1
 80096b8:	e7ef      	b.n	800969a <__gethex+0x132>
 80096ba:	f100 0a14 	add.w	sl, r0, #20
 80096be:	2300      	movs	r3, #0
 80096c0:	4655      	mov	r5, sl
 80096c2:	469b      	mov	fp, r3
 80096c4:	45b1      	cmp	r9, r6
 80096c6:	d337      	bcc.n	8009738 <__gethex+0x1d0>
 80096c8:	f845 bb04 	str.w	fp, [r5], #4
 80096cc:	eba5 050a 	sub.w	r5, r5, sl
 80096d0:	10ad      	asrs	r5, r5, #2
 80096d2:	6125      	str	r5, [r4, #16]
 80096d4:	4658      	mov	r0, fp
 80096d6:	f000 fb1d 	bl	8009d14 <__hi0bits>
 80096da:	016d      	lsls	r5, r5, #5
 80096dc:	f8d8 6000 	ldr.w	r6, [r8]
 80096e0:	1a2d      	subs	r5, r5, r0
 80096e2:	42b5      	cmp	r5, r6
 80096e4:	dd54      	ble.n	8009790 <__gethex+0x228>
 80096e6:	1bad      	subs	r5, r5, r6
 80096e8:	4629      	mov	r1, r5
 80096ea:	4620      	mov	r0, r4
 80096ec:	f000 feb1 	bl	800a452 <__any_on>
 80096f0:	4681      	mov	r9, r0
 80096f2:	b178      	cbz	r0, 8009714 <__gethex+0x1ac>
 80096f4:	1e6b      	subs	r3, r5, #1
 80096f6:	1159      	asrs	r1, r3, #5
 80096f8:	f003 021f 	and.w	r2, r3, #31
 80096fc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009700:	f04f 0901 	mov.w	r9, #1
 8009704:	fa09 f202 	lsl.w	r2, r9, r2
 8009708:	420a      	tst	r2, r1
 800970a:	d003      	beq.n	8009714 <__gethex+0x1ac>
 800970c:	454b      	cmp	r3, r9
 800970e:	dc36      	bgt.n	800977e <__gethex+0x216>
 8009710:	f04f 0902 	mov.w	r9, #2
 8009714:	4629      	mov	r1, r5
 8009716:	4620      	mov	r0, r4
 8009718:	f7ff febe 	bl	8009498 <rshift>
 800971c:	442f      	add	r7, r5
 800971e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009722:	42bb      	cmp	r3, r7
 8009724:	da42      	bge.n	80097ac <__gethex+0x244>
 8009726:	9801      	ldr	r0, [sp, #4]
 8009728:	4621      	mov	r1, r4
 800972a:	f000 fa41 	bl	8009bb0 <_Bfree>
 800972e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009730:	2300      	movs	r3, #0
 8009732:	6013      	str	r3, [r2, #0]
 8009734:	25a3      	movs	r5, #163	@ 0xa3
 8009736:	e793      	b.n	8009660 <__gethex+0xf8>
 8009738:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800973c:	2a2e      	cmp	r2, #46	@ 0x2e
 800973e:	d012      	beq.n	8009766 <__gethex+0x1fe>
 8009740:	2b20      	cmp	r3, #32
 8009742:	d104      	bne.n	800974e <__gethex+0x1e6>
 8009744:	f845 bb04 	str.w	fp, [r5], #4
 8009748:	f04f 0b00 	mov.w	fp, #0
 800974c:	465b      	mov	r3, fp
 800974e:	7830      	ldrb	r0, [r6, #0]
 8009750:	9303      	str	r3, [sp, #12]
 8009752:	f7ff fef3 	bl	800953c <__hexdig_fun>
 8009756:	9b03      	ldr	r3, [sp, #12]
 8009758:	f000 000f 	and.w	r0, r0, #15
 800975c:	4098      	lsls	r0, r3
 800975e:	ea4b 0b00 	orr.w	fp, fp, r0
 8009762:	3304      	adds	r3, #4
 8009764:	e7ae      	b.n	80096c4 <__gethex+0x15c>
 8009766:	45b1      	cmp	r9, r6
 8009768:	d8ea      	bhi.n	8009740 <__gethex+0x1d8>
 800976a:	492b      	ldr	r1, [pc, #172]	@ (8009818 <__gethex+0x2b0>)
 800976c:	9303      	str	r3, [sp, #12]
 800976e:	2201      	movs	r2, #1
 8009770:	4630      	mov	r0, r6
 8009772:	f7ff fe57 	bl	8009424 <strncmp>
 8009776:	9b03      	ldr	r3, [sp, #12]
 8009778:	2800      	cmp	r0, #0
 800977a:	d1e1      	bne.n	8009740 <__gethex+0x1d8>
 800977c:	e7a2      	b.n	80096c4 <__gethex+0x15c>
 800977e:	1ea9      	subs	r1, r5, #2
 8009780:	4620      	mov	r0, r4
 8009782:	f000 fe66 	bl	800a452 <__any_on>
 8009786:	2800      	cmp	r0, #0
 8009788:	d0c2      	beq.n	8009710 <__gethex+0x1a8>
 800978a:	f04f 0903 	mov.w	r9, #3
 800978e:	e7c1      	b.n	8009714 <__gethex+0x1ac>
 8009790:	da09      	bge.n	80097a6 <__gethex+0x23e>
 8009792:	1b75      	subs	r5, r6, r5
 8009794:	4621      	mov	r1, r4
 8009796:	9801      	ldr	r0, [sp, #4]
 8009798:	462a      	mov	r2, r5
 800979a:	f000 fc21 	bl	8009fe0 <__lshift>
 800979e:	1b7f      	subs	r7, r7, r5
 80097a0:	4604      	mov	r4, r0
 80097a2:	f100 0a14 	add.w	sl, r0, #20
 80097a6:	f04f 0900 	mov.w	r9, #0
 80097aa:	e7b8      	b.n	800971e <__gethex+0x1b6>
 80097ac:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80097b0:	42bd      	cmp	r5, r7
 80097b2:	dd6f      	ble.n	8009894 <__gethex+0x32c>
 80097b4:	1bed      	subs	r5, r5, r7
 80097b6:	42ae      	cmp	r6, r5
 80097b8:	dc34      	bgt.n	8009824 <__gethex+0x2bc>
 80097ba:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80097be:	2b02      	cmp	r3, #2
 80097c0:	d022      	beq.n	8009808 <__gethex+0x2a0>
 80097c2:	2b03      	cmp	r3, #3
 80097c4:	d024      	beq.n	8009810 <__gethex+0x2a8>
 80097c6:	2b01      	cmp	r3, #1
 80097c8:	d115      	bne.n	80097f6 <__gethex+0x28e>
 80097ca:	42ae      	cmp	r6, r5
 80097cc:	d113      	bne.n	80097f6 <__gethex+0x28e>
 80097ce:	2e01      	cmp	r6, #1
 80097d0:	d10b      	bne.n	80097ea <__gethex+0x282>
 80097d2:	9a02      	ldr	r2, [sp, #8]
 80097d4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80097d8:	6013      	str	r3, [r2, #0]
 80097da:	2301      	movs	r3, #1
 80097dc:	6123      	str	r3, [r4, #16]
 80097de:	f8ca 3000 	str.w	r3, [sl]
 80097e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80097e4:	2562      	movs	r5, #98	@ 0x62
 80097e6:	601c      	str	r4, [r3, #0]
 80097e8:	e73a      	b.n	8009660 <__gethex+0xf8>
 80097ea:	1e71      	subs	r1, r6, #1
 80097ec:	4620      	mov	r0, r4
 80097ee:	f000 fe30 	bl	800a452 <__any_on>
 80097f2:	2800      	cmp	r0, #0
 80097f4:	d1ed      	bne.n	80097d2 <__gethex+0x26a>
 80097f6:	9801      	ldr	r0, [sp, #4]
 80097f8:	4621      	mov	r1, r4
 80097fa:	f000 f9d9 	bl	8009bb0 <_Bfree>
 80097fe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009800:	2300      	movs	r3, #0
 8009802:	6013      	str	r3, [r2, #0]
 8009804:	2550      	movs	r5, #80	@ 0x50
 8009806:	e72b      	b.n	8009660 <__gethex+0xf8>
 8009808:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800980a:	2b00      	cmp	r3, #0
 800980c:	d1f3      	bne.n	80097f6 <__gethex+0x28e>
 800980e:	e7e0      	b.n	80097d2 <__gethex+0x26a>
 8009810:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009812:	2b00      	cmp	r3, #0
 8009814:	d1dd      	bne.n	80097d2 <__gethex+0x26a>
 8009816:	e7ee      	b.n	80097f6 <__gethex+0x28e>
 8009818:	0800ad35 	.word	0x0800ad35
 800981c:	0800aed4 	.word	0x0800aed4
 8009820:	0800aee5 	.word	0x0800aee5
 8009824:	1e6f      	subs	r7, r5, #1
 8009826:	f1b9 0f00 	cmp.w	r9, #0
 800982a:	d130      	bne.n	800988e <__gethex+0x326>
 800982c:	b127      	cbz	r7, 8009838 <__gethex+0x2d0>
 800982e:	4639      	mov	r1, r7
 8009830:	4620      	mov	r0, r4
 8009832:	f000 fe0e 	bl	800a452 <__any_on>
 8009836:	4681      	mov	r9, r0
 8009838:	117a      	asrs	r2, r7, #5
 800983a:	2301      	movs	r3, #1
 800983c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009840:	f007 071f 	and.w	r7, r7, #31
 8009844:	40bb      	lsls	r3, r7
 8009846:	4213      	tst	r3, r2
 8009848:	4629      	mov	r1, r5
 800984a:	4620      	mov	r0, r4
 800984c:	bf18      	it	ne
 800984e:	f049 0902 	orrne.w	r9, r9, #2
 8009852:	f7ff fe21 	bl	8009498 <rshift>
 8009856:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800985a:	1b76      	subs	r6, r6, r5
 800985c:	2502      	movs	r5, #2
 800985e:	f1b9 0f00 	cmp.w	r9, #0
 8009862:	d047      	beq.n	80098f4 <__gethex+0x38c>
 8009864:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009868:	2b02      	cmp	r3, #2
 800986a:	d015      	beq.n	8009898 <__gethex+0x330>
 800986c:	2b03      	cmp	r3, #3
 800986e:	d017      	beq.n	80098a0 <__gethex+0x338>
 8009870:	2b01      	cmp	r3, #1
 8009872:	d109      	bne.n	8009888 <__gethex+0x320>
 8009874:	f019 0f02 	tst.w	r9, #2
 8009878:	d006      	beq.n	8009888 <__gethex+0x320>
 800987a:	f8da 3000 	ldr.w	r3, [sl]
 800987e:	ea49 0903 	orr.w	r9, r9, r3
 8009882:	f019 0f01 	tst.w	r9, #1
 8009886:	d10e      	bne.n	80098a6 <__gethex+0x33e>
 8009888:	f045 0510 	orr.w	r5, r5, #16
 800988c:	e032      	b.n	80098f4 <__gethex+0x38c>
 800988e:	f04f 0901 	mov.w	r9, #1
 8009892:	e7d1      	b.n	8009838 <__gethex+0x2d0>
 8009894:	2501      	movs	r5, #1
 8009896:	e7e2      	b.n	800985e <__gethex+0x2f6>
 8009898:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800989a:	f1c3 0301 	rsb	r3, r3, #1
 800989e:	930f      	str	r3, [sp, #60]	@ 0x3c
 80098a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d0f0      	beq.n	8009888 <__gethex+0x320>
 80098a6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80098aa:	f104 0314 	add.w	r3, r4, #20
 80098ae:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80098b2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80098b6:	f04f 0c00 	mov.w	ip, #0
 80098ba:	4618      	mov	r0, r3
 80098bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80098c0:	f1b2 3fff 	cmp.w	r2, #4294967295
 80098c4:	d01b      	beq.n	80098fe <__gethex+0x396>
 80098c6:	3201      	adds	r2, #1
 80098c8:	6002      	str	r2, [r0, #0]
 80098ca:	2d02      	cmp	r5, #2
 80098cc:	f104 0314 	add.w	r3, r4, #20
 80098d0:	d13c      	bne.n	800994c <__gethex+0x3e4>
 80098d2:	f8d8 2000 	ldr.w	r2, [r8]
 80098d6:	3a01      	subs	r2, #1
 80098d8:	42b2      	cmp	r2, r6
 80098da:	d109      	bne.n	80098f0 <__gethex+0x388>
 80098dc:	1171      	asrs	r1, r6, #5
 80098de:	2201      	movs	r2, #1
 80098e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80098e4:	f006 061f 	and.w	r6, r6, #31
 80098e8:	fa02 f606 	lsl.w	r6, r2, r6
 80098ec:	421e      	tst	r6, r3
 80098ee:	d13a      	bne.n	8009966 <__gethex+0x3fe>
 80098f0:	f045 0520 	orr.w	r5, r5, #32
 80098f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80098f6:	601c      	str	r4, [r3, #0]
 80098f8:	9b02      	ldr	r3, [sp, #8]
 80098fa:	601f      	str	r7, [r3, #0]
 80098fc:	e6b0      	b.n	8009660 <__gethex+0xf8>
 80098fe:	4299      	cmp	r1, r3
 8009900:	f843 cc04 	str.w	ip, [r3, #-4]
 8009904:	d8d9      	bhi.n	80098ba <__gethex+0x352>
 8009906:	68a3      	ldr	r3, [r4, #8]
 8009908:	459b      	cmp	fp, r3
 800990a:	db17      	blt.n	800993c <__gethex+0x3d4>
 800990c:	6861      	ldr	r1, [r4, #4]
 800990e:	9801      	ldr	r0, [sp, #4]
 8009910:	3101      	adds	r1, #1
 8009912:	f000 f90d 	bl	8009b30 <_Balloc>
 8009916:	4681      	mov	r9, r0
 8009918:	b918      	cbnz	r0, 8009922 <__gethex+0x3ba>
 800991a:	4b1a      	ldr	r3, [pc, #104]	@ (8009984 <__gethex+0x41c>)
 800991c:	4602      	mov	r2, r0
 800991e:	2184      	movs	r1, #132	@ 0x84
 8009920:	e6c5      	b.n	80096ae <__gethex+0x146>
 8009922:	6922      	ldr	r2, [r4, #16]
 8009924:	3202      	adds	r2, #2
 8009926:	f104 010c 	add.w	r1, r4, #12
 800992a:	0092      	lsls	r2, r2, #2
 800992c:	300c      	adds	r0, #12
 800992e:	f7ff fd9b 	bl	8009468 <memcpy>
 8009932:	4621      	mov	r1, r4
 8009934:	9801      	ldr	r0, [sp, #4]
 8009936:	f000 f93b 	bl	8009bb0 <_Bfree>
 800993a:	464c      	mov	r4, r9
 800993c:	6923      	ldr	r3, [r4, #16]
 800993e:	1c5a      	adds	r2, r3, #1
 8009940:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009944:	6122      	str	r2, [r4, #16]
 8009946:	2201      	movs	r2, #1
 8009948:	615a      	str	r2, [r3, #20]
 800994a:	e7be      	b.n	80098ca <__gethex+0x362>
 800994c:	6922      	ldr	r2, [r4, #16]
 800994e:	455a      	cmp	r2, fp
 8009950:	dd0b      	ble.n	800996a <__gethex+0x402>
 8009952:	2101      	movs	r1, #1
 8009954:	4620      	mov	r0, r4
 8009956:	f7ff fd9f 	bl	8009498 <rshift>
 800995a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800995e:	3701      	adds	r7, #1
 8009960:	42bb      	cmp	r3, r7
 8009962:	f6ff aee0 	blt.w	8009726 <__gethex+0x1be>
 8009966:	2501      	movs	r5, #1
 8009968:	e7c2      	b.n	80098f0 <__gethex+0x388>
 800996a:	f016 061f 	ands.w	r6, r6, #31
 800996e:	d0fa      	beq.n	8009966 <__gethex+0x3fe>
 8009970:	4453      	add	r3, sl
 8009972:	f1c6 0620 	rsb	r6, r6, #32
 8009976:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800997a:	f000 f9cb 	bl	8009d14 <__hi0bits>
 800997e:	42b0      	cmp	r0, r6
 8009980:	dbe7      	blt.n	8009952 <__gethex+0x3ea>
 8009982:	e7f0      	b.n	8009966 <__gethex+0x3fe>
 8009984:	0800aed4 	.word	0x0800aed4

08009988 <L_shift>:
 8009988:	f1c2 0208 	rsb	r2, r2, #8
 800998c:	0092      	lsls	r2, r2, #2
 800998e:	b570      	push	{r4, r5, r6, lr}
 8009990:	f1c2 0620 	rsb	r6, r2, #32
 8009994:	6843      	ldr	r3, [r0, #4]
 8009996:	6804      	ldr	r4, [r0, #0]
 8009998:	fa03 f506 	lsl.w	r5, r3, r6
 800999c:	432c      	orrs	r4, r5
 800999e:	40d3      	lsrs	r3, r2
 80099a0:	6004      	str	r4, [r0, #0]
 80099a2:	f840 3f04 	str.w	r3, [r0, #4]!
 80099a6:	4288      	cmp	r0, r1
 80099a8:	d3f4      	bcc.n	8009994 <L_shift+0xc>
 80099aa:	bd70      	pop	{r4, r5, r6, pc}

080099ac <__match>:
 80099ac:	b530      	push	{r4, r5, lr}
 80099ae:	6803      	ldr	r3, [r0, #0]
 80099b0:	3301      	adds	r3, #1
 80099b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099b6:	b914      	cbnz	r4, 80099be <__match+0x12>
 80099b8:	6003      	str	r3, [r0, #0]
 80099ba:	2001      	movs	r0, #1
 80099bc:	bd30      	pop	{r4, r5, pc}
 80099be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099c2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80099c6:	2d19      	cmp	r5, #25
 80099c8:	bf98      	it	ls
 80099ca:	3220      	addls	r2, #32
 80099cc:	42a2      	cmp	r2, r4
 80099ce:	d0f0      	beq.n	80099b2 <__match+0x6>
 80099d0:	2000      	movs	r0, #0
 80099d2:	e7f3      	b.n	80099bc <__match+0x10>

080099d4 <__hexnan>:
 80099d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099d8:	680b      	ldr	r3, [r1, #0]
 80099da:	6801      	ldr	r1, [r0, #0]
 80099dc:	115e      	asrs	r6, r3, #5
 80099de:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80099e2:	f013 031f 	ands.w	r3, r3, #31
 80099e6:	b087      	sub	sp, #28
 80099e8:	bf18      	it	ne
 80099ea:	3604      	addne	r6, #4
 80099ec:	2500      	movs	r5, #0
 80099ee:	1f37      	subs	r7, r6, #4
 80099f0:	4682      	mov	sl, r0
 80099f2:	4690      	mov	r8, r2
 80099f4:	9301      	str	r3, [sp, #4]
 80099f6:	f846 5c04 	str.w	r5, [r6, #-4]
 80099fa:	46b9      	mov	r9, r7
 80099fc:	463c      	mov	r4, r7
 80099fe:	9502      	str	r5, [sp, #8]
 8009a00:	46ab      	mov	fp, r5
 8009a02:	784a      	ldrb	r2, [r1, #1]
 8009a04:	1c4b      	adds	r3, r1, #1
 8009a06:	9303      	str	r3, [sp, #12]
 8009a08:	b342      	cbz	r2, 8009a5c <__hexnan+0x88>
 8009a0a:	4610      	mov	r0, r2
 8009a0c:	9105      	str	r1, [sp, #20]
 8009a0e:	9204      	str	r2, [sp, #16]
 8009a10:	f7ff fd94 	bl	800953c <__hexdig_fun>
 8009a14:	2800      	cmp	r0, #0
 8009a16:	d151      	bne.n	8009abc <__hexnan+0xe8>
 8009a18:	9a04      	ldr	r2, [sp, #16]
 8009a1a:	9905      	ldr	r1, [sp, #20]
 8009a1c:	2a20      	cmp	r2, #32
 8009a1e:	d818      	bhi.n	8009a52 <__hexnan+0x7e>
 8009a20:	9b02      	ldr	r3, [sp, #8]
 8009a22:	459b      	cmp	fp, r3
 8009a24:	dd13      	ble.n	8009a4e <__hexnan+0x7a>
 8009a26:	454c      	cmp	r4, r9
 8009a28:	d206      	bcs.n	8009a38 <__hexnan+0x64>
 8009a2a:	2d07      	cmp	r5, #7
 8009a2c:	dc04      	bgt.n	8009a38 <__hexnan+0x64>
 8009a2e:	462a      	mov	r2, r5
 8009a30:	4649      	mov	r1, r9
 8009a32:	4620      	mov	r0, r4
 8009a34:	f7ff ffa8 	bl	8009988 <L_shift>
 8009a38:	4544      	cmp	r4, r8
 8009a3a:	d952      	bls.n	8009ae2 <__hexnan+0x10e>
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	f1a4 0904 	sub.w	r9, r4, #4
 8009a42:	f844 3c04 	str.w	r3, [r4, #-4]
 8009a46:	f8cd b008 	str.w	fp, [sp, #8]
 8009a4a:	464c      	mov	r4, r9
 8009a4c:	461d      	mov	r5, r3
 8009a4e:	9903      	ldr	r1, [sp, #12]
 8009a50:	e7d7      	b.n	8009a02 <__hexnan+0x2e>
 8009a52:	2a29      	cmp	r2, #41	@ 0x29
 8009a54:	d157      	bne.n	8009b06 <__hexnan+0x132>
 8009a56:	3102      	adds	r1, #2
 8009a58:	f8ca 1000 	str.w	r1, [sl]
 8009a5c:	f1bb 0f00 	cmp.w	fp, #0
 8009a60:	d051      	beq.n	8009b06 <__hexnan+0x132>
 8009a62:	454c      	cmp	r4, r9
 8009a64:	d206      	bcs.n	8009a74 <__hexnan+0xa0>
 8009a66:	2d07      	cmp	r5, #7
 8009a68:	dc04      	bgt.n	8009a74 <__hexnan+0xa0>
 8009a6a:	462a      	mov	r2, r5
 8009a6c:	4649      	mov	r1, r9
 8009a6e:	4620      	mov	r0, r4
 8009a70:	f7ff ff8a 	bl	8009988 <L_shift>
 8009a74:	4544      	cmp	r4, r8
 8009a76:	d936      	bls.n	8009ae6 <__hexnan+0x112>
 8009a78:	f1a8 0204 	sub.w	r2, r8, #4
 8009a7c:	4623      	mov	r3, r4
 8009a7e:	f853 1b04 	ldr.w	r1, [r3], #4
 8009a82:	f842 1f04 	str.w	r1, [r2, #4]!
 8009a86:	429f      	cmp	r7, r3
 8009a88:	d2f9      	bcs.n	8009a7e <__hexnan+0xaa>
 8009a8a:	1b3b      	subs	r3, r7, r4
 8009a8c:	f023 0303 	bic.w	r3, r3, #3
 8009a90:	3304      	adds	r3, #4
 8009a92:	3401      	adds	r4, #1
 8009a94:	3e03      	subs	r6, #3
 8009a96:	42b4      	cmp	r4, r6
 8009a98:	bf88      	it	hi
 8009a9a:	2304      	movhi	r3, #4
 8009a9c:	4443      	add	r3, r8
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	f843 2b04 	str.w	r2, [r3], #4
 8009aa4:	429f      	cmp	r7, r3
 8009aa6:	d2fb      	bcs.n	8009aa0 <__hexnan+0xcc>
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	b91b      	cbnz	r3, 8009ab4 <__hexnan+0xe0>
 8009aac:	4547      	cmp	r7, r8
 8009aae:	d128      	bne.n	8009b02 <__hexnan+0x12e>
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	603b      	str	r3, [r7, #0]
 8009ab4:	2005      	movs	r0, #5
 8009ab6:	b007      	add	sp, #28
 8009ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009abc:	3501      	adds	r5, #1
 8009abe:	2d08      	cmp	r5, #8
 8009ac0:	f10b 0b01 	add.w	fp, fp, #1
 8009ac4:	dd06      	ble.n	8009ad4 <__hexnan+0x100>
 8009ac6:	4544      	cmp	r4, r8
 8009ac8:	d9c1      	bls.n	8009a4e <__hexnan+0x7a>
 8009aca:	2300      	movs	r3, #0
 8009acc:	f844 3c04 	str.w	r3, [r4, #-4]
 8009ad0:	2501      	movs	r5, #1
 8009ad2:	3c04      	subs	r4, #4
 8009ad4:	6822      	ldr	r2, [r4, #0]
 8009ad6:	f000 000f 	and.w	r0, r0, #15
 8009ada:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009ade:	6020      	str	r0, [r4, #0]
 8009ae0:	e7b5      	b.n	8009a4e <__hexnan+0x7a>
 8009ae2:	2508      	movs	r5, #8
 8009ae4:	e7b3      	b.n	8009a4e <__hexnan+0x7a>
 8009ae6:	9b01      	ldr	r3, [sp, #4]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d0dd      	beq.n	8009aa8 <__hexnan+0xd4>
 8009aec:	f1c3 0320 	rsb	r3, r3, #32
 8009af0:	f04f 32ff 	mov.w	r2, #4294967295
 8009af4:	40da      	lsrs	r2, r3
 8009af6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009afa:	4013      	ands	r3, r2
 8009afc:	f846 3c04 	str.w	r3, [r6, #-4]
 8009b00:	e7d2      	b.n	8009aa8 <__hexnan+0xd4>
 8009b02:	3f04      	subs	r7, #4
 8009b04:	e7d0      	b.n	8009aa8 <__hexnan+0xd4>
 8009b06:	2004      	movs	r0, #4
 8009b08:	e7d5      	b.n	8009ab6 <__hexnan+0xe2>

08009b0a <__ascii_mbtowc>:
 8009b0a:	b082      	sub	sp, #8
 8009b0c:	b901      	cbnz	r1, 8009b10 <__ascii_mbtowc+0x6>
 8009b0e:	a901      	add	r1, sp, #4
 8009b10:	b142      	cbz	r2, 8009b24 <__ascii_mbtowc+0x1a>
 8009b12:	b14b      	cbz	r3, 8009b28 <__ascii_mbtowc+0x1e>
 8009b14:	7813      	ldrb	r3, [r2, #0]
 8009b16:	600b      	str	r3, [r1, #0]
 8009b18:	7812      	ldrb	r2, [r2, #0]
 8009b1a:	1e10      	subs	r0, r2, #0
 8009b1c:	bf18      	it	ne
 8009b1e:	2001      	movne	r0, #1
 8009b20:	b002      	add	sp, #8
 8009b22:	4770      	bx	lr
 8009b24:	4610      	mov	r0, r2
 8009b26:	e7fb      	b.n	8009b20 <__ascii_mbtowc+0x16>
 8009b28:	f06f 0001 	mvn.w	r0, #1
 8009b2c:	e7f8      	b.n	8009b20 <__ascii_mbtowc+0x16>
	...

08009b30 <_Balloc>:
 8009b30:	b570      	push	{r4, r5, r6, lr}
 8009b32:	69c6      	ldr	r6, [r0, #28]
 8009b34:	4604      	mov	r4, r0
 8009b36:	460d      	mov	r5, r1
 8009b38:	b976      	cbnz	r6, 8009b58 <_Balloc+0x28>
 8009b3a:	2010      	movs	r0, #16
 8009b3c:	f000 fd18 	bl	800a570 <malloc>
 8009b40:	4602      	mov	r2, r0
 8009b42:	61e0      	str	r0, [r4, #28]
 8009b44:	b920      	cbnz	r0, 8009b50 <_Balloc+0x20>
 8009b46:	4b18      	ldr	r3, [pc, #96]	@ (8009ba8 <_Balloc+0x78>)
 8009b48:	4818      	ldr	r0, [pc, #96]	@ (8009bac <_Balloc+0x7c>)
 8009b4a:	216b      	movs	r1, #107	@ 0x6b
 8009b4c:	f000 fcde 	bl	800a50c <__assert_func>
 8009b50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b54:	6006      	str	r6, [r0, #0]
 8009b56:	60c6      	str	r6, [r0, #12]
 8009b58:	69e6      	ldr	r6, [r4, #28]
 8009b5a:	68f3      	ldr	r3, [r6, #12]
 8009b5c:	b183      	cbz	r3, 8009b80 <_Balloc+0x50>
 8009b5e:	69e3      	ldr	r3, [r4, #28]
 8009b60:	68db      	ldr	r3, [r3, #12]
 8009b62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009b66:	b9b8      	cbnz	r0, 8009b98 <_Balloc+0x68>
 8009b68:	2101      	movs	r1, #1
 8009b6a:	fa01 f605 	lsl.w	r6, r1, r5
 8009b6e:	1d72      	adds	r2, r6, #5
 8009b70:	0092      	lsls	r2, r2, #2
 8009b72:	4620      	mov	r0, r4
 8009b74:	f000 fce8 	bl	800a548 <_calloc_r>
 8009b78:	b160      	cbz	r0, 8009b94 <_Balloc+0x64>
 8009b7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009b7e:	e00e      	b.n	8009b9e <_Balloc+0x6e>
 8009b80:	2221      	movs	r2, #33	@ 0x21
 8009b82:	2104      	movs	r1, #4
 8009b84:	4620      	mov	r0, r4
 8009b86:	f000 fcdf 	bl	800a548 <_calloc_r>
 8009b8a:	69e3      	ldr	r3, [r4, #28]
 8009b8c:	60f0      	str	r0, [r6, #12]
 8009b8e:	68db      	ldr	r3, [r3, #12]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d1e4      	bne.n	8009b5e <_Balloc+0x2e>
 8009b94:	2000      	movs	r0, #0
 8009b96:	bd70      	pop	{r4, r5, r6, pc}
 8009b98:	6802      	ldr	r2, [r0, #0]
 8009b9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009ba4:	e7f7      	b.n	8009b96 <_Balloc+0x66>
 8009ba6:	bf00      	nop
 8009ba8:	0800af45 	.word	0x0800af45
 8009bac:	0800af5c 	.word	0x0800af5c

08009bb0 <_Bfree>:
 8009bb0:	b570      	push	{r4, r5, r6, lr}
 8009bb2:	69c6      	ldr	r6, [r0, #28]
 8009bb4:	4605      	mov	r5, r0
 8009bb6:	460c      	mov	r4, r1
 8009bb8:	b976      	cbnz	r6, 8009bd8 <_Bfree+0x28>
 8009bba:	2010      	movs	r0, #16
 8009bbc:	f000 fcd8 	bl	800a570 <malloc>
 8009bc0:	4602      	mov	r2, r0
 8009bc2:	61e8      	str	r0, [r5, #28]
 8009bc4:	b920      	cbnz	r0, 8009bd0 <_Bfree+0x20>
 8009bc6:	4b09      	ldr	r3, [pc, #36]	@ (8009bec <_Bfree+0x3c>)
 8009bc8:	4809      	ldr	r0, [pc, #36]	@ (8009bf0 <_Bfree+0x40>)
 8009bca:	218f      	movs	r1, #143	@ 0x8f
 8009bcc:	f000 fc9e 	bl	800a50c <__assert_func>
 8009bd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009bd4:	6006      	str	r6, [r0, #0]
 8009bd6:	60c6      	str	r6, [r0, #12]
 8009bd8:	b13c      	cbz	r4, 8009bea <_Bfree+0x3a>
 8009bda:	69eb      	ldr	r3, [r5, #28]
 8009bdc:	6862      	ldr	r2, [r4, #4]
 8009bde:	68db      	ldr	r3, [r3, #12]
 8009be0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009be4:	6021      	str	r1, [r4, #0]
 8009be6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009bea:	bd70      	pop	{r4, r5, r6, pc}
 8009bec:	0800af45 	.word	0x0800af45
 8009bf0:	0800af5c 	.word	0x0800af5c

08009bf4 <__multadd>:
 8009bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bf8:	690d      	ldr	r5, [r1, #16]
 8009bfa:	4607      	mov	r7, r0
 8009bfc:	460c      	mov	r4, r1
 8009bfe:	461e      	mov	r6, r3
 8009c00:	f101 0c14 	add.w	ip, r1, #20
 8009c04:	2000      	movs	r0, #0
 8009c06:	f8dc 3000 	ldr.w	r3, [ip]
 8009c0a:	b299      	uxth	r1, r3
 8009c0c:	fb02 6101 	mla	r1, r2, r1, r6
 8009c10:	0c1e      	lsrs	r6, r3, #16
 8009c12:	0c0b      	lsrs	r3, r1, #16
 8009c14:	fb02 3306 	mla	r3, r2, r6, r3
 8009c18:	b289      	uxth	r1, r1
 8009c1a:	3001      	adds	r0, #1
 8009c1c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009c20:	4285      	cmp	r5, r0
 8009c22:	f84c 1b04 	str.w	r1, [ip], #4
 8009c26:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009c2a:	dcec      	bgt.n	8009c06 <__multadd+0x12>
 8009c2c:	b30e      	cbz	r6, 8009c72 <__multadd+0x7e>
 8009c2e:	68a3      	ldr	r3, [r4, #8]
 8009c30:	42ab      	cmp	r3, r5
 8009c32:	dc19      	bgt.n	8009c68 <__multadd+0x74>
 8009c34:	6861      	ldr	r1, [r4, #4]
 8009c36:	4638      	mov	r0, r7
 8009c38:	3101      	adds	r1, #1
 8009c3a:	f7ff ff79 	bl	8009b30 <_Balloc>
 8009c3e:	4680      	mov	r8, r0
 8009c40:	b928      	cbnz	r0, 8009c4e <__multadd+0x5a>
 8009c42:	4602      	mov	r2, r0
 8009c44:	4b0c      	ldr	r3, [pc, #48]	@ (8009c78 <__multadd+0x84>)
 8009c46:	480d      	ldr	r0, [pc, #52]	@ (8009c7c <__multadd+0x88>)
 8009c48:	21ba      	movs	r1, #186	@ 0xba
 8009c4a:	f000 fc5f 	bl	800a50c <__assert_func>
 8009c4e:	6922      	ldr	r2, [r4, #16]
 8009c50:	3202      	adds	r2, #2
 8009c52:	f104 010c 	add.w	r1, r4, #12
 8009c56:	0092      	lsls	r2, r2, #2
 8009c58:	300c      	adds	r0, #12
 8009c5a:	f7ff fc05 	bl	8009468 <memcpy>
 8009c5e:	4621      	mov	r1, r4
 8009c60:	4638      	mov	r0, r7
 8009c62:	f7ff ffa5 	bl	8009bb0 <_Bfree>
 8009c66:	4644      	mov	r4, r8
 8009c68:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009c6c:	3501      	adds	r5, #1
 8009c6e:	615e      	str	r6, [r3, #20]
 8009c70:	6125      	str	r5, [r4, #16]
 8009c72:	4620      	mov	r0, r4
 8009c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c78:	0800aed4 	.word	0x0800aed4
 8009c7c:	0800af5c 	.word	0x0800af5c

08009c80 <__s2b>:
 8009c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c84:	460c      	mov	r4, r1
 8009c86:	4615      	mov	r5, r2
 8009c88:	461f      	mov	r7, r3
 8009c8a:	2209      	movs	r2, #9
 8009c8c:	3308      	adds	r3, #8
 8009c8e:	4606      	mov	r6, r0
 8009c90:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c94:	2100      	movs	r1, #0
 8009c96:	2201      	movs	r2, #1
 8009c98:	429a      	cmp	r2, r3
 8009c9a:	db09      	blt.n	8009cb0 <__s2b+0x30>
 8009c9c:	4630      	mov	r0, r6
 8009c9e:	f7ff ff47 	bl	8009b30 <_Balloc>
 8009ca2:	b940      	cbnz	r0, 8009cb6 <__s2b+0x36>
 8009ca4:	4602      	mov	r2, r0
 8009ca6:	4b19      	ldr	r3, [pc, #100]	@ (8009d0c <__s2b+0x8c>)
 8009ca8:	4819      	ldr	r0, [pc, #100]	@ (8009d10 <__s2b+0x90>)
 8009caa:	21d3      	movs	r1, #211	@ 0xd3
 8009cac:	f000 fc2e 	bl	800a50c <__assert_func>
 8009cb0:	0052      	lsls	r2, r2, #1
 8009cb2:	3101      	adds	r1, #1
 8009cb4:	e7f0      	b.n	8009c98 <__s2b+0x18>
 8009cb6:	9b08      	ldr	r3, [sp, #32]
 8009cb8:	6143      	str	r3, [r0, #20]
 8009cba:	2d09      	cmp	r5, #9
 8009cbc:	f04f 0301 	mov.w	r3, #1
 8009cc0:	6103      	str	r3, [r0, #16]
 8009cc2:	dd16      	ble.n	8009cf2 <__s2b+0x72>
 8009cc4:	f104 0909 	add.w	r9, r4, #9
 8009cc8:	46c8      	mov	r8, r9
 8009cca:	442c      	add	r4, r5
 8009ccc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009cd0:	4601      	mov	r1, r0
 8009cd2:	3b30      	subs	r3, #48	@ 0x30
 8009cd4:	220a      	movs	r2, #10
 8009cd6:	4630      	mov	r0, r6
 8009cd8:	f7ff ff8c 	bl	8009bf4 <__multadd>
 8009cdc:	45a0      	cmp	r8, r4
 8009cde:	d1f5      	bne.n	8009ccc <__s2b+0x4c>
 8009ce0:	f1a5 0408 	sub.w	r4, r5, #8
 8009ce4:	444c      	add	r4, r9
 8009ce6:	1b2d      	subs	r5, r5, r4
 8009ce8:	1963      	adds	r3, r4, r5
 8009cea:	42bb      	cmp	r3, r7
 8009cec:	db04      	blt.n	8009cf8 <__s2b+0x78>
 8009cee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cf2:	340a      	adds	r4, #10
 8009cf4:	2509      	movs	r5, #9
 8009cf6:	e7f6      	b.n	8009ce6 <__s2b+0x66>
 8009cf8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009cfc:	4601      	mov	r1, r0
 8009cfe:	3b30      	subs	r3, #48	@ 0x30
 8009d00:	220a      	movs	r2, #10
 8009d02:	4630      	mov	r0, r6
 8009d04:	f7ff ff76 	bl	8009bf4 <__multadd>
 8009d08:	e7ee      	b.n	8009ce8 <__s2b+0x68>
 8009d0a:	bf00      	nop
 8009d0c:	0800aed4 	.word	0x0800aed4
 8009d10:	0800af5c 	.word	0x0800af5c

08009d14 <__hi0bits>:
 8009d14:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009d18:	4603      	mov	r3, r0
 8009d1a:	bf36      	itet	cc
 8009d1c:	0403      	lslcc	r3, r0, #16
 8009d1e:	2000      	movcs	r0, #0
 8009d20:	2010      	movcc	r0, #16
 8009d22:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009d26:	bf3c      	itt	cc
 8009d28:	021b      	lslcc	r3, r3, #8
 8009d2a:	3008      	addcc	r0, #8
 8009d2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009d30:	bf3c      	itt	cc
 8009d32:	011b      	lslcc	r3, r3, #4
 8009d34:	3004      	addcc	r0, #4
 8009d36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d3a:	bf3c      	itt	cc
 8009d3c:	009b      	lslcc	r3, r3, #2
 8009d3e:	3002      	addcc	r0, #2
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	db05      	blt.n	8009d50 <__hi0bits+0x3c>
 8009d44:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009d48:	f100 0001 	add.w	r0, r0, #1
 8009d4c:	bf08      	it	eq
 8009d4e:	2020      	moveq	r0, #32
 8009d50:	4770      	bx	lr

08009d52 <__lo0bits>:
 8009d52:	6803      	ldr	r3, [r0, #0]
 8009d54:	4602      	mov	r2, r0
 8009d56:	f013 0007 	ands.w	r0, r3, #7
 8009d5a:	d00b      	beq.n	8009d74 <__lo0bits+0x22>
 8009d5c:	07d9      	lsls	r1, r3, #31
 8009d5e:	d421      	bmi.n	8009da4 <__lo0bits+0x52>
 8009d60:	0798      	lsls	r0, r3, #30
 8009d62:	bf49      	itett	mi
 8009d64:	085b      	lsrmi	r3, r3, #1
 8009d66:	089b      	lsrpl	r3, r3, #2
 8009d68:	2001      	movmi	r0, #1
 8009d6a:	6013      	strmi	r3, [r2, #0]
 8009d6c:	bf5c      	itt	pl
 8009d6e:	6013      	strpl	r3, [r2, #0]
 8009d70:	2002      	movpl	r0, #2
 8009d72:	4770      	bx	lr
 8009d74:	b299      	uxth	r1, r3
 8009d76:	b909      	cbnz	r1, 8009d7c <__lo0bits+0x2a>
 8009d78:	0c1b      	lsrs	r3, r3, #16
 8009d7a:	2010      	movs	r0, #16
 8009d7c:	b2d9      	uxtb	r1, r3
 8009d7e:	b909      	cbnz	r1, 8009d84 <__lo0bits+0x32>
 8009d80:	3008      	adds	r0, #8
 8009d82:	0a1b      	lsrs	r3, r3, #8
 8009d84:	0719      	lsls	r1, r3, #28
 8009d86:	bf04      	itt	eq
 8009d88:	091b      	lsreq	r3, r3, #4
 8009d8a:	3004      	addeq	r0, #4
 8009d8c:	0799      	lsls	r1, r3, #30
 8009d8e:	bf04      	itt	eq
 8009d90:	089b      	lsreq	r3, r3, #2
 8009d92:	3002      	addeq	r0, #2
 8009d94:	07d9      	lsls	r1, r3, #31
 8009d96:	d403      	bmi.n	8009da0 <__lo0bits+0x4e>
 8009d98:	085b      	lsrs	r3, r3, #1
 8009d9a:	f100 0001 	add.w	r0, r0, #1
 8009d9e:	d003      	beq.n	8009da8 <__lo0bits+0x56>
 8009da0:	6013      	str	r3, [r2, #0]
 8009da2:	4770      	bx	lr
 8009da4:	2000      	movs	r0, #0
 8009da6:	4770      	bx	lr
 8009da8:	2020      	movs	r0, #32
 8009daa:	4770      	bx	lr

08009dac <__i2b>:
 8009dac:	b510      	push	{r4, lr}
 8009dae:	460c      	mov	r4, r1
 8009db0:	2101      	movs	r1, #1
 8009db2:	f7ff febd 	bl	8009b30 <_Balloc>
 8009db6:	4602      	mov	r2, r0
 8009db8:	b928      	cbnz	r0, 8009dc6 <__i2b+0x1a>
 8009dba:	4b05      	ldr	r3, [pc, #20]	@ (8009dd0 <__i2b+0x24>)
 8009dbc:	4805      	ldr	r0, [pc, #20]	@ (8009dd4 <__i2b+0x28>)
 8009dbe:	f240 1145 	movw	r1, #325	@ 0x145
 8009dc2:	f000 fba3 	bl	800a50c <__assert_func>
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	6144      	str	r4, [r0, #20]
 8009dca:	6103      	str	r3, [r0, #16]
 8009dcc:	bd10      	pop	{r4, pc}
 8009dce:	bf00      	nop
 8009dd0:	0800aed4 	.word	0x0800aed4
 8009dd4:	0800af5c 	.word	0x0800af5c

08009dd8 <__multiply>:
 8009dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ddc:	4614      	mov	r4, r2
 8009dde:	690a      	ldr	r2, [r1, #16]
 8009de0:	6923      	ldr	r3, [r4, #16]
 8009de2:	429a      	cmp	r2, r3
 8009de4:	bfa8      	it	ge
 8009de6:	4623      	movge	r3, r4
 8009de8:	460f      	mov	r7, r1
 8009dea:	bfa4      	itt	ge
 8009dec:	460c      	movge	r4, r1
 8009dee:	461f      	movge	r7, r3
 8009df0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009df4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009df8:	68a3      	ldr	r3, [r4, #8]
 8009dfa:	6861      	ldr	r1, [r4, #4]
 8009dfc:	eb0a 0609 	add.w	r6, sl, r9
 8009e00:	42b3      	cmp	r3, r6
 8009e02:	b085      	sub	sp, #20
 8009e04:	bfb8      	it	lt
 8009e06:	3101      	addlt	r1, #1
 8009e08:	f7ff fe92 	bl	8009b30 <_Balloc>
 8009e0c:	b930      	cbnz	r0, 8009e1c <__multiply+0x44>
 8009e0e:	4602      	mov	r2, r0
 8009e10:	4b44      	ldr	r3, [pc, #272]	@ (8009f24 <__multiply+0x14c>)
 8009e12:	4845      	ldr	r0, [pc, #276]	@ (8009f28 <__multiply+0x150>)
 8009e14:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009e18:	f000 fb78 	bl	800a50c <__assert_func>
 8009e1c:	f100 0514 	add.w	r5, r0, #20
 8009e20:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009e24:	462b      	mov	r3, r5
 8009e26:	2200      	movs	r2, #0
 8009e28:	4543      	cmp	r3, r8
 8009e2a:	d321      	bcc.n	8009e70 <__multiply+0x98>
 8009e2c:	f107 0114 	add.w	r1, r7, #20
 8009e30:	f104 0214 	add.w	r2, r4, #20
 8009e34:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009e38:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009e3c:	9302      	str	r3, [sp, #8]
 8009e3e:	1b13      	subs	r3, r2, r4
 8009e40:	3b15      	subs	r3, #21
 8009e42:	f023 0303 	bic.w	r3, r3, #3
 8009e46:	3304      	adds	r3, #4
 8009e48:	f104 0715 	add.w	r7, r4, #21
 8009e4c:	42ba      	cmp	r2, r7
 8009e4e:	bf38      	it	cc
 8009e50:	2304      	movcc	r3, #4
 8009e52:	9301      	str	r3, [sp, #4]
 8009e54:	9b02      	ldr	r3, [sp, #8]
 8009e56:	9103      	str	r1, [sp, #12]
 8009e58:	428b      	cmp	r3, r1
 8009e5a:	d80c      	bhi.n	8009e76 <__multiply+0x9e>
 8009e5c:	2e00      	cmp	r6, #0
 8009e5e:	dd03      	ble.n	8009e68 <__multiply+0x90>
 8009e60:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d05b      	beq.n	8009f20 <__multiply+0x148>
 8009e68:	6106      	str	r6, [r0, #16]
 8009e6a:	b005      	add	sp, #20
 8009e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e70:	f843 2b04 	str.w	r2, [r3], #4
 8009e74:	e7d8      	b.n	8009e28 <__multiply+0x50>
 8009e76:	f8b1 a000 	ldrh.w	sl, [r1]
 8009e7a:	f1ba 0f00 	cmp.w	sl, #0
 8009e7e:	d024      	beq.n	8009eca <__multiply+0xf2>
 8009e80:	f104 0e14 	add.w	lr, r4, #20
 8009e84:	46a9      	mov	r9, r5
 8009e86:	f04f 0c00 	mov.w	ip, #0
 8009e8a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009e8e:	f8d9 3000 	ldr.w	r3, [r9]
 8009e92:	fa1f fb87 	uxth.w	fp, r7
 8009e96:	b29b      	uxth	r3, r3
 8009e98:	fb0a 330b 	mla	r3, sl, fp, r3
 8009e9c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009ea0:	f8d9 7000 	ldr.w	r7, [r9]
 8009ea4:	4463      	add	r3, ip
 8009ea6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009eaa:	fb0a c70b 	mla	r7, sl, fp, ip
 8009eae:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009eb2:	b29b      	uxth	r3, r3
 8009eb4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009eb8:	4572      	cmp	r2, lr
 8009eba:	f849 3b04 	str.w	r3, [r9], #4
 8009ebe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009ec2:	d8e2      	bhi.n	8009e8a <__multiply+0xb2>
 8009ec4:	9b01      	ldr	r3, [sp, #4]
 8009ec6:	f845 c003 	str.w	ip, [r5, r3]
 8009eca:	9b03      	ldr	r3, [sp, #12]
 8009ecc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009ed0:	3104      	adds	r1, #4
 8009ed2:	f1b9 0f00 	cmp.w	r9, #0
 8009ed6:	d021      	beq.n	8009f1c <__multiply+0x144>
 8009ed8:	682b      	ldr	r3, [r5, #0]
 8009eda:	f104 0c14 	add.w	ip, r4, #20
 8009ede:	46ae      	mov	lr, r5
 8009ee0:	f04f 0a00 	mov.w	sl, #0
 8009ee4:	f8bc b000 	ldrh.w	fp, [ip]
 8009ee8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009eec:	fb09 770b 	mla	r7, r9, fp, r7
 8009ef0:	4457      	add	r7, sl
 8009ef2:	b29b      	uxth	r3, r3
 8009ef4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009ef8:	f84e 3b04 	str.w	r3, [lr], #4
 8009efc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009f00:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009f04:	f8be 3000 	ldrh.w	r3, [lr]
 8009f08:	fb09 330a 	mla	r3, r9, sl, r3
 8009f0c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009f10:	4562      	cmp	r2, ip
 8009f12:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009f16:	d8e5      	bhi.n	8009ee4 <__multiply+0x10c>
 8009f18:	9f01      	ldr	r7, [sp, #4]
 8009f1a:	51eb      	str	r3, [r5, r7]
 8009f1c:	3504      	adds	r5, #4
 8009f1e:	e799      	b.n	8009e54 <__multiply+0x7c>
 8009f20:	3e01      	subs	r6, #1
 8009f22:	e79b      	b.n	8009e5c <__multiply+0x84>
 8009f24:	0800aed4 	.word	0x0800aed4
 8009f28:	0800af5c 	.word	0x0800af5c

08009f2c <__pow5mult>:
 8009f2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f30:	4615      	mov	r5, r2
 8009f32:	f012 0203 	ands.w	r2, r2, #3
 8009f36:	4607      	mov	r7, r0
 8009f38:	460e      	mov	r6, r1
 8009f3a:	d007      	beq.n	8009f4c <__pow5mult+0x20>
 8009f3c:	4c25      	ldr	r4, [pc, #148]	@ (8009fd4 <__pow5mult+0xa8>)
 8009f3e:	3a01      	subs	r2, #1
 8009f40:	2300      	movs	r3, #0
 8009f42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009f46:	f7ff fe55 	bl	8009bf4 <__multadd>
 8009f4a:	4606      	mov	r6, r0
 8009f4c:	10ad      	asrs	r5, r5, #2
 8009f4e:	d03d      	beq.n	8009fcc <__pow5mult+0xa0>
 8009f50:	69fc      	ldr	r4, [r7, #28]
 8009f52:	b97c      	cbnz	r4, 8009f74 <__pow5mult+0x48>
 8009f54:	2010      	movs	r0, #16
 8009f56:	f000 fb0b 	bl	800a570 <malloc>
 8009f5a:	4602      	mov	r2, r0
 8009f5c:	61f8      	str	r0, [r7, #28]
 8009f5e:	b928      	cbnz	r0, 8009f6c <__pow5mult+0x40>
 8009f60:	4b1d      	ldr	r3, [pc, #116]	@ (8009fd8 <__pow5mult+0xac>)
 8009f62:	481e      	ldr	r0, [pc, #120]	@ (8009fdc <__pow5mult+0xb0>)
 8009f64:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009f68:	f000 fad0 	bl	800a50c <__assert_func>
 8009f6c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009f70:	6004      	str	r4, [r0, #0]
 8009f72:	60c4      	str	r4, [r0, #12]
 8009f74:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009f78:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009f7c:	b94c      	cbnz	r4, 8009f92 <__pow5mult+0x66>
 8009f7e:	f240 2171 	movw	r1, #625	@ 0x271
 8009f82:	4638      	mov	r0, r7
 8009f84:	f7ff ff12 	bl	8009dac <__i2b>
 8009f88:	2300      	movs	r3, #0
 8009f8a:	f8c8 0008 	str.w	r0, [r8, #8]
 8009f8e:	4604      	mov	r4, r0
 8009f90:	6003      	str	r3, [r0, #0]
 8009f92:	f04f 0900 	mov.w	r9, #0
 8009f96:	07eb      	lsls	r3, r5, #31
 8009f98:	d50a      	bpl.n	8009fb0 <__pow5mult+0x84>
 8009f9a:	4631      	mov	r1, r6
 8009f9c:	4622      	mov	r2, r4
 8009f9e:	4638      	mov	r0, r7
 8009fa0:	f7ff ff1a 	bl	8009dd8 <__multiply>
 8009fa4:	4631      	mov	r1, r6
 8009fa6:	4680      	mov	r8, r0
 8009fa8:	4638      	mov	r0, r7
 8009faa:	f7ff fe01 	bl	8009bb0 <_Bfree>
 8009fae:	4646      	mov	r6, r8
 8009fb0:	106d      	asrs	r5, r5, #1
 8009fb2:	d00b      	beq.n	8009fcc <__pow5mult+0xa0>
 8009fb4:	6820      	ldr	r0, [r4, #0]
 8009fb6:	b938      	cbnz	r0, 8009fc8 <__pow5mult+0x9c>
 8009fb8:	4622      	mov	r2, r4
 8009fba:	4621      	mov	r1, r4
 8009fbc:	4638      	mov	r0, r7
 8009fbe:	f7ff ff0b 	bl	8009dd8 <__multiply>
 8009fc2:	6020      	str	r0, [r4, #0]
 8009fc4:	f8c0 9000 	str.w	r9, [r0]
 8009fc8:	4604      	mov	r4, r0
 8009fca:	e7e4      	b.n	8009f96 <__pow5mult+0x6a>
 8009fcc:	4630      	mov	r0, r6
 8009fce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fd2:	bf00      	nop
 8009fd4:	0800afb8 	.word	0x0800afb8
 8009fd8:	0800af45 	.word	0x0800af45
 8009fdc:	0800af5c 	.word	0x0800af5c

08009fe0 <__lshift>:
 8009fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fe4:	460c      	mov	r4, r1
 8009fe6:	6849      	ldr	r1, [r1, #4]
 8009fe8:	6923      	ldr	r3, [r4, #16]
 8009fea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009fee:	68a3      	ldr	r3, [r4, #8]
 8009ff0:	4607      	mov	r7, r0
 8009ff2:	4691      	mov	r9, r2
 8009ff4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009ff8:	f108 0601 	add.w	r6, r8, #1
 8009ffc:	42b3      	cmp	r3, r6
 8009ffe:	db0b      	blt.n	800a018 <__lshift+0x38>
 800a000:	4638      	mov	r0, r7
 800a002:	f7ff fd95 	bl	8009b30 <_Balloc>
 800a006:	4605      	mov	r5, r0
 800a008:	b948      	cbnz	r0, 800a01e <__lshift+0x3e>
 800a00a:	4602      	mov	r2, r0
 800a00c:	4b28      	ldr	r3, [pc, #160]	@ (800a0b0 <__lshift+0xd0>)
 800a00e:	4829      	ldr	r0, [pc, #164]	@ (800a0b4 <__lshift+0xd4>)
 800a010:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a014:	f000 fa7a 	bl	800a50c <__assert_func>
 800a018:	3101      	adds	r1, #1
 800a01a:	005b      	lsls	r3, r3, #1
 800a01c:	e7ee      	b.n	8009ffc <__lshift+0x1c>
 800a01e:	2300      	movs	r3, #0
 800a020:	f100 0114 	add.w	r1, r0, #20
 800a024:	f100 0210 	add.w	r2, r0, #16
 800a028:	4618      	mov	r0, r3
 800a02a:	4553      	cmp	r3, sl
 800a02c:	db33      	blt.n	800a096 <__lshift+0xb6>
 800a02e:	6920      	ldr	r0, [r4, #16]
 800a030:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a034:	f104 0314 	add.w	r3, r4, #20
 800a038:	f019 091f 	ands.w	r9, r9, #31
 800a03c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a040:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a044:	d02b      	beq.n	800a09e <__lshift+0xbe>
 800a046:	f1c9 0e20 	rsb	lr, r9, #32
 800a04a:	468a      	mov	sl, r1
 800a04c:	2200      	movs	r2, #0
 800a04e:	6818      	ldr	r0, [r3, #0]
 800a050:	fa00 f009 	lsl.w	r0, r0, r9
 800a054:	4310      	orrs	r0, r2
 800a056:	f84a 0b04 	str.w	r0, [sl], #4
 800a05a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a05e:	459c      	cmp	ip, r3
 800a060:	fa22 f20e 	lsr.w	r2, r2, lr
 800a064:	d8f3      	bhi.n	800a04e <__lshift+0x6e>
 800a066:	ebac 0304 	sub.w	r3, ip, r4
 800a06a:	3b15      	subs	r3, #21
 800a06c:	f023 0303 	bic.w	r3, r3, #3
 800a070:	3304      	adds	r3, #4
 800a072:	f104 0015 	add.w	r0, r4, #21
 800a076:	4584      	cmp	ip, r0
 800a078:	bf38      	it	cc
 800a07a:	2304      	movcc	r3, #4
 800a07c:	50ca      	str	r2, [r1, r3]
 800a07e:	b10a      	cbz	r2, 800a084 <__lshift+0xa4>
 800a080:	f108 0602 	add.w	r6, r8, #2
 800a084:	3e01      	subs	r6, #1
 800a086:	4638      	mov	r0, r7
 800a088:	612e      	str	r6, [r5, #16]
 800a08a:	4621      	mov	r1, r4
 800a08c:	f7ff fd90 	bl	8009bb0 <_Bfree>
 800a090:	4628      	mov	r0, r5
 800a092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a096:	f842 0f04 	str.w	r0, [r2, #4]!
 800a09a:	3301      	adds	r3, #1
 800a09c:	e7c5      	b.n	800a02a <__lshift+0x4a>
 800a09e:	3904      	subs	r1, #4
 800a0a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0a4:	f841 2f04 	str.w	r2, [r1, #4]!
 800a0a8:	459c      	cmp	ip, r3
 800a0aa:	d8f9      	bhi.n	800a0a0 <__lshift+0xc0>
 800a0ac:	e7ea      	b.n	800a084 <__lshift+0xa4>
 800a0ae:	bf00      	nop
 800a0b0:	0800aed4 	.word	0x0800aed4
 800a0b4:	0800af5c 	.word	0x0800af5c

0800a0b8 <__mcmp>:
 800a0b8:	690a      	ldr	r2, [r1, #16]
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	6900      	ldr	r0, [r0, #16]
 800a0be:	1a80      	subs	r0, r0, r2
 800a0c0:	b530      	push	{r4, r5, lr}
 800a0c2:	d10e      	bne.n	800a0e2 <__mcmp+0x2a>
 800a0c4:	3314      	adds	r3, #20
 800a0c6:	3114      	adds	r1, #20
 800a0c8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a0cc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a0d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a0d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a0d8:	4295      	cmp	r5, r2
 800a0da:	d003      	beq.n	800a0e4 <__mcmp+0x2c>
 800a0dc:	d205      	bcs.n	800a0ea <__mcmp+0x32>
 800a0de:	f04f 30ff 	mov.w	r0, #4294967295
 800a0e2:	bd30      	pop	{r4, r5, pc}
 800a0e4:	42a3      	cmp	r3, r4
 800a0e6:	d3f3      	bcc.n	800a0d0 <__mcmp+0x18>
 800a0e8:	e7fb      	b.n	800a0e2 <__mcmp+0x2a>
 800a0ea:	2001      	movs	r0, #1
 800a0ec:	e7f9      	b.n	800a0e2 <__mcmp+0x2a>
	...

0800a0f0 <__mdiff>:
 800a0f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0f4:	4689      	mov	r9, r1
 800a0f6:	4606      	mov	r6, r0
 800a0f8:	4611      	mov	r1, r2
 800a0fa:	4648      	mov	r0, r9
 800a0fc:	4614      	mov	r4, r2
 800a0fe:	f7ff ffdb 	bl	800a0b8 <__mcmp>
 800a102:	1e05      	subs	r5, r0, #0
 800a104:	d112      	bne.n	800a12c <__mdiff+0x3c>
 800a106:	4629      	mov	r1, r5
 800a108:	4630      	mov	r0, r6
 800a10a:	f7ff fd11 	bl	8009b30 <_Balloc>
 800a10e:	4602      	mov	r2, r0
 800a110:	b928      	cbnz	r0, 800a11e <__mdiff+0x2e>
 800a112:	4b3f      	ldr	r3, [pc, #252]	@ (800a210 <__mdiff+0x120>)
 800a114:	f240 2137 	movw	r1, #567	@ 0x237
 800a118:	483e      	ldr	r0, [pc, #248]	@ (800a214 <__mdiff+0x124>)
 800a11a:	f000 f9f7 	bl	800a50c <__assert_func>
 800a11e:	2301      	movs	r3, #1
 800a120:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a124:	4610      	mov	r0, r2
 800a126:	b003      	add	sp, #12
 800a128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a12c:	bfbc      	itt	lt
 800a12e:	464b      	movlt	r3, r9
 800a130:	46a1      	movlt	r9, r4
 800a132:	4630      	mov	r0, r6
 800a134:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a138:	bfba      	itte	lt
 800a13a:	461c      	movlt	r4, r3
 800a13c:	2501      	movlt	r5, #1
 800a13e:	2500      	movge	r5, #0
 800a140:	f7ff fcf6 	bl	8009b30 <_Balloc>
 800a144:	4602      	mov	r2, r0
 800a146:	b918      	cbnz	r0, 800a150 <__mdiff+0x60>
 800a148:	4b31      	ldr	r3, [pc, #196]	@ (800a210 <__mdiff+0x120>)
 800a14a:	f240 2145 	movw	r1, #581	@ 0x245
 800a14e:	e7e3      	b.n	800a118 <__mdiff+0x28>
 800a150:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a154:	6926      	ldr	r6, [r4, #16]
 800a156:	60c5      	str	r5, [r0, #12]
 800a158:	f109 0310 	add.w	r3, r9, #16
 800a15c:	f109 0514 	add.w	r5, r9, #20
 800a160:	f104 0e14 	add.w	lr, r4, #20
 800a164:	f100 0b14 	add.w	fp, r0, #20
 800a168:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a16c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a170:	9301      	str	r3, [sp, #4]
 800a172:	46d9      	mov	r9, fp
 800a174:	f04f 0c00 	mov.w	ip, #0
 800a178:	9b01      	ldr	r3, [sp, #4]
 800a17a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a17e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a182:	9301      	str	r3, [sp, #4]
 800a184:	fa1f f38a 	uxth.w	r3, sl
 800a188:	4619      	mov	r1, r3
 800a18a:	b283      	uxth	r3, r0
 800a18c:	1acb      	subs	r3, r1, r3
 800a18e:	0c00      	lsrs	r0, r0, #16
 800a190:	4463      	add	r3, ip
 800a192:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a196:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a19a:	b29b      	uxth	r3, r3
 800a19c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a1a0:	4576      	cmp	r6, lr
 800a1a2:	f849 3b04 	str.w	r3, [r9], #4
 800a1a6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a1aa:	d8e5      	bhi.n	800a178 <__mdiff+0x88>
 800a1ac:	1b33      	subs	r3, r6, r4
 800a1ae:	3b15      	subs	r3, #21
 800a1b0:	f023 0303 	bic.w	r3, r3, #3
 800a1b4:	3415      	adds	r4, #21
 800a1b6:	3304      	adds	r3, #4
 800a1b8:	42a6      	cmp	r6, r4
 800a1ba:	bf38      	it	cc
 800a1bc:	2304      	movcc	r3, #4
 800a1be:	441d      	add	r5, r3
 800a1c0:	445b      	add	r3, fp
 800a1c2:	461e      	mov	r6, r3
 800a1c4:	462c      	mov	r4, r5
 800a1c6:	4544      	cmp	r4, r8
 800a1c8:	d30e      	bcc.n	800a1e8 <__mdiff+0xf8>
 800a1ca:	f108 0103 	add.w	r1, r8, #3
 800a1ce:	1b49      	subs	r1, r1, r5
 800a1d0:	f021 0103 	bic.w	r1, r1, #3
 800a1d4:	3d03      	subs	r5, #3
 800a1d6:	45a8      	cmp	r8, r5
 800a1d8:	bf38      	it	cc
 800a1da:	2100      	movcc	r1, #0
 800a1dc:	440b      	add	r3, r1
 800a1de:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a1e2:	b191      	cbz	r1, 800a20a <__mdiff+0x11a>
 800a1e4:	6117      	str	r7, [r2, #16]
 800a1e6:	e79d      	b.n	800a124 <__mdiff+0x34>
 800a1e8:	f854 1b04 	ldr.w	r1, [r4], #4
 800a1ec:	46e6      	mov	lr, ip
 800a1ee:	0c08      	lsrs	r0, r1, #16
 800a1f0:	fa1c fc81 	uxtah	ip, ip, r1
 800a1f4:	4471      	add	r1, lr
 800a1f6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a1fa:	b289      	uxth	r1, r1
 800a1fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a200:	f846 1b04 	str.w	r1, [r6], #4
 800a204:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a208:	e7dd      	b.n	800a1c6 <__mdiff+0xd6>
 800a20a:	3f01      	subs	r7, #1
 800a20c:	e7e7      	b.n	800a1de <__mdiff+0xee>
 800a20e:	bf00      	nop
 800a210:	0800aed4 	.word	0x0800aed4
 800a214:	0800af5c 	.word	0x0800af5c

0800a218 <__ulp>:
 800a218:	b082      	sub	sp, #8
 800a21a:	ed8d 0b00 	vstr	d0, [sp]
 800a21e:	9a01      	ldr	r2, [sp, #4]
 800a220:	4b0f      	ldr	r3, [pc, #60]	@ (800a260 <__ulp+0x48>)
 800a222:	4013      	ands	r3, r2
 800a224:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a228:	2b00      	cmp	r3, #0
 800a22a:	dc08      	bgt.n	800a23e <__ulp+0x26>
 800a22c:	425b      	negs	r3, r3
 800a22e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a232:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a236:	da04      	bge.n	800a242 <__ulp+0x2a>
 800a238:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a23c:	4113      	asrs	r3, r2
 800a23e:	2200      	movs	r2, #0
 800a240:	e008      	b.n	800a254 <__ulp+0x3c>
 800a242:	f1a2 0314 	sub.w	r3, r2, #20
 800a246:	2b1e      	cmp	r3, #30
 800a248:	bfda      	itte	le
 800a24a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a24e:	40da      	lsrle	r2, r3
 800a250:	2201      	movgt	r2, #1
 800a252:	2300      	movs	r3, #0
 800a254:	4619      	mov	r1, r3
 800a256:	4610      	mov	r0, r2
 800a258:	ec41 0b10 	vmov	d0, r0, r1
 800a25c:	b002      	add	sp, #8
 800a25e:	4770      	bx	lr
 800a260:	7ff00000 	.word	0x7ff00000

0800a264 <__b2d>:
 800a264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a268:	6906      	ldr	r6, [r0, #16]
 800a26a:	f100 0814 	add.w	r8, r0, #20
 800a26e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a272:	1f37      	subs	r7, r6, #4
 800a274:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a278:	4610      	mov	r0, r2
 800a27a:	f7ff fd4b 	bl	8009d14 <__hi0bits>
 800a27e:	f1c0 0320 	rsb	r3, r0, #32
 800a282:	280a      	cmp	r0, #10
 800a284:	600b      	str	r3, [r1, #0]
 800a286:	491b      	ldr	r1, [pc, #108]	@ (800a2f4 <__b2d+0x90>)
 800a288:	dc15      	bgt.n	800a2b6 <__b2d+0x52>
 800a28a:	f1c0 0c0b 	rsb	ip, r0, #11
 800a28e:	fa22 f30c 	lsr.w	r3, r2, ip
 800a292:	45b8      	cmp	r8, r7
 800a294:	ea43 0501 	orr.w	r5, r3, r1
 800a298:	bf34      	ite	cc
 800a29a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a29e:	2300      	movcs	r3, #0
 800a2a0:	3015      	adds	r0, #21
 800a2a2:	fa02 f000 	lsl.w	r0, r2, r0
 800a2a6:	fa23 f30c 	lsr.w	r3, r3, ip
 800a2aa:	4303      	orrs	r3, r0
 800a2ac:	461c      	mov	r4, r3
 800a2ae:	ec45 4b10 	vmov	d0, r4, r5
 800a2b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2b6:	45b8      	cmp	r8, r7
 800a2b8:	bf3a      	itte	cc
 800a2ba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a2be:	f1a6 0708 	subcc.w	r7, r6, #8
 800a2c2:	2300      	movcs	r3, #0
 800a2c4:	380b      	subs	r0, #11
 800a2c6:	d012      	beq.n	800a2ee <__b2d+0x8a>
 800a2c8:	f1c0 0120 	rsb	r1, r0, #32
 800a2cc:	fa23 f401 	lsr.w	r4, r3, r1
 800a2d0:	4082      	lsls	r2, r0
 800a2d2:	4322      	orrs	r2, r4
 800a2d4:	4547      	cmp	r7, r8
 800a2d6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a2da:	bf8c      	ite	hi
 800a2dc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a2e0:	2200      	movls	r2, #0
 800a2e2:	4083      	lsls	r3, r0
 800a2e4:	40ca      	lsrs	r2, r1
 800a2e6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a2ea:	4313      	orrs	r3, r2
 800a2ec:	e7de      	b.n	800a2ac <__b2d+0x48>
 800a2ee:	ea42 0501 	orr.w	r5, r2, r1
 800a2f2:	e7db      	b.n	800a2ac <__b2d+0x48>
 800a2f4:	3ff00000 	.word	0x3ff00000

0800a2f8 <__d2b>:
 800a2f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a2fc:	460f      	mov	r7, r1
 800a2fe:	2101      	movs	r1, #1
 800a300:	ec59 8b10 	vmov	r8, r9, d0
 800a304:	4616      	mov	r6, r2
 800a306:	f7ff fc13 	bl	8009b30 <_Balloc>
 800a30a:	4604      	mov	r4, r0
 800a30c:	b930      	cbnz	r0, 800a31c <__d2b+0x24>
 800a30e:	4602      	mov	r2, r0
 800a310:	4b23      	ldr	r3, [pc, #140]	@ (800a3a0 <__d2b+0xa8>)
 800a312:	4824      	ldr	r0, [pc, #144]	@ (800a3a4 <__d2b+0xac>)
 800a314:	f240 310f 	movw	r1, #783	@ 0x30f
 800a318:	f000 f8f8 	bl	800a50c <__assert_func>
 800a31c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a320:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a324:	b10d      	cbz	r5, 800a32a <__d2b+0x32>
 800a326:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a32a:	9301      	str	r3, [sp, #4]
 800a32c:	f1b8 0300 	subs.w	r3, r8, #0
 800a330:	d023      	beq.n	800a37a <__d2b+0x82>
 800a332:	4668      	mov	r0, sp
 800a334:	9300      	str	r3, [sp, #0]
 800a336:	f7ff fd0c 	bl	8009d52 <__lo0bits>
 800a33a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a33e:	b1d0      	cbz	r0, 800a376 <__d2b+0x7e>
 800a340:	f1c0 0320 	rsb	r3, r0, #32
 800a344:	fa02 f303 	lsl.w	r3, r2, r3
 800a348:	430b      	orrs	r3, r1
 800a34a:	40c2      	lsrs	r2, r0
 800a34c:	6163      	str	r3, [r4, #20]
 800a34e:	9201      	str	r2, [sp, #4]
 800a350:	9b01      	ldr	r3, [sp, #4]
 800a352:	61a3      	str	r3, [r4, #24]
 800a354:	2b00      	cmp	r3, #0
 800a356:	bf0c      	ite	eq
 800a358:	2201      	moveq	r2, #1
 800a35a:	2202      	movne	r2, #2
 800a35c:	6122      	str	r2, [r4, #16]
 800a35e:	b1a5      	cbz	r5, 800a38a <__d2b+0x92>
 800a360:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a364:	4405      	add	r5, r0
 800a366:	603d      	str	r5, [r7, #0]
 800a368:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a36c:	6030      	str	r0, [r6, #0]
 800a36e:	4620      	mov	r0, r4
 800a370:	b003      	add	sp, #12
 800a372:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a376:	6161      	str	r1, [r4, #20]
 800a378:	e7ea      	b.n	800a350 <__d2b+0x58>
 800a37a:	a801      	add	r0, sp, #4
 800a37c:	f7ff fce9 	bl	8009d52 <__lo0bits>
 800a380:	9b01      	ldr	r3, [sp, #4]
 800a382:	6163      	str	r3, [r4, #20]
 800a384:	3020      	adds	r0, #32
 800a386:	2201      	movs	r2, #1
 800a388:	e7e8      	b.n	800a35c <__d2b+0x64>
 800a38a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a38e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a392:	6038      	str	r0, [r7, #0]
 800a394:	6918      	ldr	r0, [r3, #16]
 800a396:	f7ff fcbd 	bl	8009d14 <__hi0bits>
 800a39a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a39e:	e7e5      	b.n	800a36c <__d2b+0x74>
 800a3a0:	0800aed4 	.word	0x0800aed4
 800a3a4:	0800af5c 	.word	0x0800af5c

0800a3a8 <__ratio>:
 800a3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3ac:	b085      	sub	sp, #20
 800a3ae:	e9cd 1000 	strd	r1, r0, [sp]
 800a3b2:	a902      	add	r1, sp, #8
 800a3b4:	f7ff ff56 	bl	800a264 <__b2d>
 800a3b8:	9800      	ldr	r0, [sp, #0]
 800a3ba:	a903      	add	r1, sp, #12
 800a3bc:	ec55 4b10 	vmov	r4, r5, d0
 800a3c0:	f7ff ff50 	bl	800a264 <__b2d>
 800a3c4:	9b01      	ldr	r3, [sp, #4]
 800a3c6:	6919      	ldr	r1, [r3, #16]
 800a3c8:	9b00      	ldr	r3, [sp, #0]
 800a3ca:	691b      	ldr	r3, [r3, #16]
 800a3cc:	1ac9      	subs	r1, r1, r3
 800a3ce:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a3d2:	1a9b      	subs	r3, r3, r2
 800a3d4:	ec5b ab10 	vmov	sl, fp, d0
 800a3d8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	bfce      	itee	gt
 800a3e0:	462a      	movgt	r2, r5
 800a3e2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a3e6:	465a      	movle	r2, fp
 800a3e8:	462f      	mov	r7, r5
 800a3ea:	46d9      	mov	r9, fp
 800a3ec:	bfcc      	ite	gt
 800a3ee:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a3f2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a3f6:	464b      	mov	r3, r9
 800a3f8:	4652      	mov	r2, sl
 800a3fa:	4620      	mov	r0, r4
 800a3fc:	4639      	mov	r1, r7
 800a3fe:	f7f6 fa25 	bl	800084c <__aeabi_ddiv>
 800a402:	ec41 0b10 	vmov	d0, r0, r1
 800a406:	b005      	add	sp, #20
 800a408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a40c <__copybits>:
 800a40c:	3901      	subs	r1, #1
 800a40e:	b570      	push	{r4, r5, r6, lr}
 800a410:	1149      	asrs	r1, r1, #5
 800a412:	6914      	ldr	r4, [r2, #16]
 800a414:	3101      	adds	r1, #1
 800a416:	f102 0314 	add.w	r3, r2, #20
 800a41a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a41e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a422:	1f05      	subs	r5, r0, #4
 800a424:	42a3      	cmp	r3, r4
 800a426:	d30c      	bcc.n	800a442 <__copybits+0x36>
 800a428:	1aa3      	subs	r3, r4, r2
 800a42a:	3b11      	subs	r3, #17
 800a42c:	f023 0303 	bic.w	r3, r3, #3
 800a430:	3211      	adds	r2, #17
 800a432:	42a2      	cmp	r2, r4
 800a434:	bf88      	it	hi
 800a436:	2300      	movhi	r3, #0
 800a438:	4418      	add	r0, r3
 800a43a:	2300      	movs	r3, #0
 800a43c:	4288      	cmp	r0, r1
 800a43e:	d305      	bcc.n	800a44c <__copybits+0x40>
 800a440:	bd70      	pop	{r4, r5, r6, pc}
 800a442:	f853 6b04 	ldr.w	r6, [r3], #4
 800a446:	f845 6f04 	str.w	r6, [r5, #4]!
 800a44a:	e7eb      	b.n	800a424 <__copybits+0x18>
 800a44c:	f840 3b04 	str.w	r3, [r0], #4
 800a450:	e7f4      	b.n	800a43c <__copybits+0x30>

0800a452 <__any_on>:
 800a452:	f100 0214 	add.w	r2, r0, #20
 800a456:	6900      	ldr	r0, [r0, #16]
 800a458:	114b      	asrs	r3, r1, #5
 800a45a:	4298      	cmp	r0, r3
 800a45c:	b510      	push	{r4, lr}
 800a45e:	db11      	blt.n	800a484 <__any_on+0x32>
 800a460:	dd0a      	ble.n	800a478 <__any_on+0x26>
 800a462:	f011 011f 	ands.w	r1, r1, #31
 800a466:	d007      	beq.n	800a478 <__any_on+0x26>
 800a468:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a46c:	fa24 f001 	lsr.w	r0, r4, r1
 800a470:	fa00 f101 	lsl.w	r1, r0, r1
 800a474:	428c      	cmp	r4, r1
 800a476:	d10b      	bne.n	800a490 <__any_on+0x3e>
 800a478:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a47c:	4293      	cmp	r3, r2
 800a47e:	d803      	bhi.n	800a488 <__any_on+0x36>
 800a480:	2000      	movs	r0, #0
 800a482:	bd10      	pop	{r4, pc}
 800a484:	4603      	mov	r3, r0
 800a486:	e7f7      	b.n	800a478 <__any_on+0x26>
 800a488:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a48c:	2900      	cmp	r1, #0
 800a48e:	d0f5      	beq.n	800a47c <__any_on+0x2a>
 800a490:	2001      	movs	r0, #1
 800a492:	e7f6      	b.n	800a482 <__any_on+0x30>

0800a494 <_realloc_r>:
 800a494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a498:	4680      	mov	r8, r0
 800a49a:	4615      	mov	r5, r2
 800a49c:	460c      	mov	r4, r1
 800a49e:	b921      	cbnz	r1, 800a4aa <_realloc_r+0x16>
 800a4a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a4a4:	4611      	mov	r1, r2
 800a4a6:	f7fd bd01 	b.w	8007eac <_malloc_r>
 800a4aa:	b92a      	cbnz	r2, 800a4b8 <_realloc_r+0x24>
 800a4ac:	f7fd fc92 	bl	8007dd4 <_free_r>
 800a4b0:	2400      	movs	r4, #0
 800a4b2:	4620      	mov	r0, r4
 800a4b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4b8:	f000 f862 	bl	800a580 <_malloc_usable_size_r>
 800a4bc:	4285      	cmp	r5, r0
 800a4be:	4606      	mov	r6, r0
 800a4c0:	d802      	bhi.n	800a4c8 <_realloc_r+0x34>
 800a4c2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a4c6:	d8f4      	bhi.n	800a4b2 <_realloc_r+0x1e>
 800a4c8:	4629      	mov	r1, r5
 800a4ca:	4640      	mov	r0, r8
 800a4cc:	f7fd fcee 	bl	8007eac <_malloc_r>
 800a4d0:	4607      	mov	r7, r0
 800a4d2:	2800      	cmp	r0, #0
 800a4d4:	d0ec      	beq.n	800a4b0 <_realloc_r+0x1c>
 800a4d6:	42b5      	cmp	r5, r6
 800a4d8:	462a      	mov	r2, r5
 800a4da:	4621      	mov	r1, r4
 800a4dc:	bf28      	it	cs
 800a4de:	4632      	movcs	r2, r6
 800a4e0:	f7fe ffc2 	bl	8009468 <memcpy>
 800a4e4:	4621      	mov	r1, r4
 800a4e6:	4640      	mov	r0, r8
 800a4e8:	f7fd fc74 	bl	8007dd4 <_free_r>
 800a4ec:	463c      	mov	r4, r7
 800a4ee:	e7e0      	b.n	800a4b2 <_realloc_r+0x1e>

0800a4f0 <__ascii_wctomb>:
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	4608      	mov	r0, r1
 800a4f4:	b141      	cbz	r1, 800a508 <__ascii_wctomb+0x18>
 800a4f6:	2aff      	cmp	r2, #255	@ 0xff
 800a4f8:	d904      	bls.n	800a504 <__ascii_wctomb+0x14>
 800a4fa:	228a      	movs	r2, #138	@ 0x8a
 800a4fc:	601a      	str	r2, [r3, #0]
 800a4fe:	f04f 30ff 	mov.w	r0, #4294967295
 800a502:	4770      	bx	lr
 800a504:	700a      	strb	r2, [r1, #0]
 800a506:	2001      	movs	r0, #1
 800a508:	4770      	bx	lr
	...

0800a50c <__assert_func>:
 800a50c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a50e:	4614      	mov	r4, r2
 800a510:	461a      	mov	r2, r3
 800a512:	4b09      	ldr	r3, [pc, #36]	@ (800a538 <__assert_func+0x2c>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	4605      	mov	r5, r0
 800a518:	68d8      	ldr	r0, [r3, #12]
 800a51a:	b954      	cbnz	r4, 800a532 <__assert_func+0x26>
 800a51c:	4b07      	ldr	r3, [pc, #28]	@ (800a53c <__assert_func+0x30>)
 800a51e:	461c      	mov	r4, r3
 800a520:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a524:	9100      	str	r1, [sp, #0]
 800a526:	462b      	mov	r3, r5
 800a528:	4905      	ldr	r1, [pc, #20]	@ (800a540 <__assert_func+0x34>)
 800a52a:	f000 f831 	bl	800a590 <fiprintf>
 800a52e:	f000 f841 	bl	800a5b4 <abort>
 800a532:	4b04      	ldr	r3, [pc, #16]	@ (800a544 <__assert_func+0x38>)
 800a534:	e7f4      	b.n	800a520 <__assert_func+0x14>
 800a536:	bf00      	nop
 800a538:	2000003c 	.word	0x2000003c
 800a53c:	0800b0f3 	.word	0x0800b0f3
 800a540:	0800b0c5 	.word	0x0800b0c5
 800a544:	0800b0b8 	.word	0x0800b0b8

0800a548 <_calloc_r>:
 800a548:	b570      	push	{r4, r5, r6, lr}
 800a54a:	fba1 5402 	umull	r5, r4, r1, r2
 800a54e:	b93c      	cbnz	r4, 800a560 <_calloc_r+0x18>
 800a550:	4629      	mov	r1, r5
 800a552:	f7fd fcab 	bl	8007eac <_malloc_r>
 800a556:	4606      	mov	r6, r0
 800a558:	b928      	cbnz	r0, 800a566 <_calloc_r+0x1e>
 800a55a:	2600      	movs	r6, #0
 800a55c:	4630      	mov	r0, r6
 800a55e:	bd70      	pop	{r4, r5, r6, pc}
 800a560:	220c      	movs	r2, #12
 800a562:	6002      	str	r2, [r0, #0]
 800a564:	e7f9      	b.n	800a55a <_calloc_r+0x12>
 800a566:	462a      	mov	r2, r5
 800a568:	4621      	mov	r1, r4
 800a56a:	f7fd fbb0 	bl	8007cce <memset>
 800a56e:	e7f5      	b.n	800a55c <_calloc_r+0x14>

0800a570 <malloc>:
 800a570:	4b02      	ldr	r3, [pc, #8]	@ (800a57c <malloc+0xc>)
 800a572:	4601      	mov	r1, r0
 800a574:	6818      	ldr	r0, [r3, #0]
 800a576:	f7fd bc99 	b.w	8007eac <_malloc_r>
 800a57a:	bf00      	nop
 800a57c:	2000003c 	.word	0x2000003c

0800a580 <_malloc_usable_size_r>:
 800a580:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a584:	1f18      	subs	r0, r3, #4
 800a586:	2b00      	cmp	r3, #0
 800a588:	bfbc      	itt	lt
 800a58a:	580b      	ldrlt	r3, [r1, r0]
 800a58c:	18c0      	addlt	r0, r0, r3
 800a58e:	4770      	bx	lr

0800a590 <fiprintf>:
 800a590:	b40e      	push	{r1, r2, r3}
 800a592:	b503      	push	{r0, r1, lr}
 800a594:	4601      	mov	r1, r0
 800a596:	ab03      	add	r3, sp, #12
 800a598:	4805      	ldr	r0, [pc, #20]	@ (800a5b0 <fiprintf+0x20>)
 800a59a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a59e:	6800      	ldr	r0, [r0, #0]
 800a5a0:	9301      	str	r3, [sp, #4]
 800a5a2:	f000 f837 	bl	800a614 <_vfiprintf_r>
 800a5a6:	b002      	add	sp, #8
 800a5a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a5ac:	b003      	add	sp, #12
 800a5ae:	4770      	bx	lr
 800a5b0:	2000003c 	.word	0x2000003c

0800a5b4 <abort>:
 800a5b4:	b508      	push	{r3, lr}
 800a5b6:	2006      	movs	r0, #6
 800a5b8:	f000 fa00 	bl	800a9bc <raise>
 800a5bc:	2001      	movs	r0, #1
 800a5be:	f7f8 fc41 	bl	8002e44 <_exit>

0800a5c2 <__sfputc_r>:
 800a5c2:	6893      	ldr	r3, [r2, #8]
 800a5c4:	3b01      	subs	r3, #1
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	b410      	push	{r4}
 800a5ca:	6093      	str	r3, [r2, #8]
 800a5cc:	da08      	bge.n	800a5e0 <__sfputc_r+0x1e>
 800a5ce:	6994      	ldr	r4, [r2, #24]
 800a5d0:	42a3      	cmp	r3, r4
 800a5d2:	db01      	blt.n	800a5d8 <__sfputc_r+0x16>
 800a5d4:	290a      	cmp	r1, #10
 800a5d6:	d103      	bne.n	800a5e0 <__sfputc_r+0x1e>
 800a5d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5dc:	f000 b932 	b.w	800a844 <__swbuf_r>
 800a5e0:	6813      	ldr	r3, [r2, #0]
 800a5e2:	1c58      	adds	r0, r3, #1
 800a5e4:	6010      	str	r0, [r2, #0]
 800a5e6:	7019      	strb	r1, [r3, #0]
 800a5e8:	4608      	mov	r0, r1
 800a5ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5ee:	4770      	bx	lr

0800a5f0 <__sfputs_r>:
 800a5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5f2:	4606      	mov	r6, r0
 800a5f4:	460f      	mov	r7, r1
 800a5f6:	4614      	mov	r4, r2
 800a5f8:	18d5      	adds	r5, r2, r3
 800a5fa:	42ac      	cmp	r4, r5
 800a5fc:	d101      	bne.n	800a602 <__sfputs_r+0x12>
 800a5fe:	2000      	movs	r0, #0
 800a600:	e007      	b.n	800a612 <__sfputs_r+0x22>
 800a602:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a606:	463a      	mov	r2, r7
 800a608:	4630      	mov	r0, r6
 800a60a:	f7ff ffda 	bl	800a5c2 <__sfputc_r>
 800a60e:	1c43      	adds	r3, r0, #1
 800a610:	d1f3      	bne.n	800a5fa <__sfputs_r+0xa>
 800a612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a614 <_vfiprintf_r>:
 800a614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a618:	460d      	mov	r5, r1
 800a61a:	b09d      	sub	sp, #116	@ 0x74
 800a61c:	4614      	mov	r4, r2
 800a61e:	4698      	mov	r8, r3
 800a620:	4606      	mov	r6, r0
 800a622:	b118      	cbz	r0, 800a62c <_vfiprintf_r+0x18>
 800a624:	6a03      	ldr	r3, [r0, #32]
 800a626:	b90b      	cbnz	r3, 800a62c <_vfiprintf_r+0x18>
 800a628:	f7fd fab8 	bl	8007b9c <__sinit>
 800a62c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a62e:	07d9      	lsls	r1, r3, #31
 800a630:	d405      	bmi.n	800a63e <_vfiprintf_r+0x2a>
 800a632:	89ab      	ldrh	r3, [r5, #12]
 800a634:	059a      	lsls	r2, r3, #22
 800a636:	d402      	bmi.n	800a63e <_vfiprintf_r+0x2a>
 800a638:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a63a:	f7fd fbc2 	bl	8007dc2 <__retarget_lock_acquire_recursive>
 800a63e:	89ab      	ldrh	r3, [r5, #12]
 800a640:	071b      	lsls	r3, r3, #28
 800a642:	d501      	bpl.n	800a648 <_vfiprintf_r+0x34>
 800a644:	692b      	ldr	r3, [r5, #16]
 800a646:	b99b      	cbnz	r3, 800a670 <_vfiprintf_r+0x5c>
 800a648:	4629      	mov	r1, r5
 800a64a:	4630      	mov	r0, r6
 800a64c:	f000 f938 	bl	800a8c0 <__swsetup_r>
 800a650:	b170      	cbz	r0, 800a670 <_vfiprintf_r+0x5c>
 800a652:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a654:	07dc      	lsls	r4, r3, #31
 800a656:	d504      	bpl.n	800a662 <_vfiprintf_r+0x4e>
 800a658:	f04f 30ff 	mov.w	r0, #4294967295
 800a65c:	b01d      	add	sp, #116	@ 0x74
 800a65e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a662:	89ab      	ldrh	r3, [r5, #12]
 800a664:	0598      	lsls	r0, r3, #22
 800a666:	d4f7      	bmi.n	800a658 <_vfiprintf_r+0x44>
 800a668:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a66a:	f7fd fbab 	bl	8007dc4 <__retarget_lock_release_recursive>
 800a66e:	e7f3      	b.n	800a658 <_vfiprintf_r+0x44>
 800a670:	2300      	movs	r3, #0
 800a672:	9309      	str	r3, [sp, #36]	@ 0x24
 800a674:	2320      	movs	r3, #32
 800a676:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a67a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a67e:	2330      	movs	r3, #48	@ 0x30
 800a680:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a830 <_vfiprintf_r+0x21c>
 800a684:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a688:	f04f 0901 	mov.w	r9, #1
 800a68c:	4623      	mov	r3, r4
 800a68e:	469a      	mov	sl, r3
 800a690:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a694:	b10a      	cbz	r2, 800a69a <_vfiprintf_r+0x86>
 800a696:	2a25      	cmp	r2, #37	@ 0x25
 800a698:	d1f9      	bne.n	800a68e <_vfiprintf_r+0x7a>
 800a69a:	ebba 0b04 	subs.w	fp, sl, r4
 800a69e:	d00b      	beq.n	800a6b8 <_vfiprintf_r+0xa4>
 800a6a0:	465b      	mov	r3, fp
 800a6a2:	4622      	mov	r2, r4
 800a6a4:	4629      	mov	r1, r5
 800a6a6:	4630      	mov	r0, r6
 800a6a8:	f7ff ffa2 	bl	800a5f0 <__sfputs_r>
 800a6ac:	3001      	adds	r0, #1
 800a6ae:	f000 80a7 	beq.w	800a800 <_vfiprintf_r+0x1ec>
 800a6b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a6b4:	445a      	add	r2, fp
 800a6b6:	9209      	str	r2, [sp, #36]	@ 0x24
 800a6b8:	f89a 3000 	ldrb.w	r3, [sl]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	f000 809f 	beq.w	800a800 <_vfiprintf_r+0x1ec>
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	f04f 32ff 	mov.w	r2, #4294967295
 800a6c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a6cc:	f10a 0a01 	add.w	sl, sl, #1
 800a6d0:	9304      	str	r3, [sp, #16]
 800a6d2:	9307      	str	r3, [sp, #28]
 800a6d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a6d8:	931a      	str	r3, [sp, #104]	@ 0x68
 800a6da:	4654      	mov	r4, sl
 800a6dc:	2205      	movs	r2, #5
 800a6de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6e2:	4853      	ldr	r0, [pc, #332]	@ (800a830 <_vfiprintf_r+0x21c>)
 800a6e4:	f7f5 fd7c 	bl	80001e0 <memchr>
 800a6e8:	9a04      	ldr	r2, [sp, #16]
 800a6ea:	b9d8      	cbnz	r0, 800a724 <_vfiprintf_r+0x110>
 800a6ec:	06d1      	lsls	r1, r2, #27
 800a6ee:	bf44      	itt	mi
 800a6f0:	2320      	movmi	r3, #32
 800a6f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a6f6:	0713      	lsls	r3, r2, #28
 800a6f8:	bf44      	itt	mi
 800a6fa:	232b      	movmi	r3, #43	@ 0x2b
 800a6fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a700:	f89a 3000 	ldrb.w	r3, [sl]
 800a704:	2b2a      	cmp	r3, #42	@ 0x2a
 800a706:	d015      	beq.n	800a734 <_vfiprintf_r+0x120>
 800a708:	9a07      	ldr	r2, [sp, #28]
 800a70a:	4654      	mov	r4, sl
 800a70c:	2000      	movs	r0, #0
 800a70e:	f04f 0c0a 	mov.w	ip, #10
 800a712:	4621      	mov	r1, r4
 800a714:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a718:	3b30      	subs	r3, #48	@ 0x30
 800a71a:	2b09      	cmp	r3, #9
 800a71c:	d94b      	bls.n	800a7b6 <_vfiprintf_r+0x1a2>
 800a71e:	b1b0      	cbz	r0, 800a74e <_vfiprintf_r+0x13a>
 800a720:	9207      	str	r2, [sp, #28]
 800a722:	e014      	b.n	800a74e <_vfiprintf_r+0x13a>
 800a724:	eba0 0308 	sub.w	r3, r0, r8
 800a728:	fa09 f303 	lsl.w	r3, r9, r3
 800a72c:	4313      	orrs	r3, r2
 800a72e:	9304      	str	r3, [sp, #16]
 800a730:	46a2      	mov	sl, r4
 800a732:	e7d2      	b.n	800a6da <_vfiprintf_r+0xc6>
 800a734:	9b03      	ldr	r3, [sp, #12]
 800a736:	1d19      	adds	r1, r3, #4
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	9103      	str	r1, [sp, #12]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	bfbb      	ittet	lt
 800a740:	425b      	neglt	r3, r3
 800a742:	f042 0202 	orrlt.w	r2, r2, #2
 800a746:	9307      	strge	r3, [sp, #28]
 800a748:	9307      	strlt	r3, [sp, #28]
 800a74a:	bfb8      	it	lt
 800a74c:	9204      	strlt	r2, [sp, #16]
 800a74e:	7823      	ldrb	r3, [r4, #0]
 800a750:	2b2e      	cmp	r3, #46	@ 0x2e
 800a752:	d10a      	bne.n	800a76a <_vfiprintf_r+0x156>
 800a754:	7863      	ldrb	r3, [r4, #1]
 800a756:	2b2a      	cmp	r3, #42	@ 0x2a
 800a758:	d132      	bne.n	800a7c0 <_vfiprintf_r+0x1ac>
 800a75a:	9b03      	ldr	r3, [sp, #12]
 800a75c:	1d1a      	adds	r2, r3, #4
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	9203      	str	r2, [sp, #12]
 800a762:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a766:	3402      	adds	r4, #2
 800a768:	9305      	str	r3, [sp, #20]
 800a76a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a840 <_vfiprintf_r+0x22c>
 800a76e:	7821      	ldrb	r1, [r4, #0]
 800a770:	2203      	movs	r2, #3
 800a772:	4650      	mov	r0, sl
 800a774:	f7f5 fd34 	bl	80001e0 <memchr>
 800a778:	b138      	cbz	r0, 800a78a <_vfiprintf_r+0x176>
 800a77a:	9b04      	ldr	r3, [sp, #16]
 800a77c:	eba0 000a 	sub.w	r0, r0, sl
 800a780:	2240      	movs	r2, #64	@ 0x40
 800a782:	4082      	lsls	r2, r0
 800a784:	4313      	orrs	r3, r2
 800a786:	3401      	adds	r4, #1
 800a788:	9304      	str	r3, [sp, #16]
 800a78a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a78e:	4829      	ldr	r0, [pc, #164]	@ (800a834 <_vfiprintf_r+0x220>)
 800a790:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a794:	2206      	movs	r2, #6
 800a796:	f7f5 fd23 	bl	80001e0 <memchr>
 800a79a:	2800      	cmp	r0, #0
 800a79c:	d03f      	beq.n	800a81e <_vfiprintf_r+0x20a>
 800a79e:	4b26      	ldr	r3, [pc, #152]	@ (800a838 <_vfiprintf_r+0x224>)
 800a7a0:	bb1b      	cbnz	r3, 800a7ea <_vfiprintf_r+0x1d6>
 800a7a2:	9b03      	ldr	r3, [sp, #12]
 800a7a4:	3307      	adds	r3, #7
 800a7a6:	f023 0307 	bic.w	r3, r3, #7
 800a7aa:	3308      	adds	r3, #8
 800a7ac:	9303      	str	r3, [sp, #12]
 800a7ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7b0:	443b      	add	r3, r7
 800a7b2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a7b4:	e76a      	b.n	800a68c <_vfiprintf_r+0x78>
 800a7b6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a7ba:	460c      	mov	r4, r1
 800a7bc:	2001      	movs	r0, #1
 800a7be:	e7a8      	b.n	800a712 <_vfiprintf_r+0xfe>
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	3401      	adds	r4, #1
 800a7c4:	9305      	str	r3, [sp, #20]
 800a7c6:	4619      	mov	r1, r3
 800a7c8:	f04f 0c0a 	mov.w	ip, #10
 800a7cc:	4620      	mov	r0, r4
 800a7ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7d2:	3a30      	subs	r2, #48	@ 0x30
 800a7d4:	2a09      	cmp	r2, #9
 800a7d6:	d903      	bls.n	800a7e0 <_vfiprintf_r+0x1cc>
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d0c6      	beq.n	800a76a <_vfiprintf_r+0x156>
 800a7dc:	9105      	str	r1, [sp, #20]
 800a7de:	e7c4      	b.n	800a76a <_vfiprintf_r+0x156>
 800a7e0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a7e4:	4604      	mov	r4, r0
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	e7f0      	b.n	800a7cc <_vfiprintf_r+0x1b8>
 800a7ea:	ab03      	add	r3, sp, #12
 800a7ec:	9300      	str	r3, [sp, #0]
 800a7ee:	462a      	mov	r2, r5
 800a7f0:	4b12      	ldr	r3, [pc, #72]	@ (800a83c <_vfiprintf_r+0x228>)
 800a7f2:	a904      	add	r1, sp, #16
 800a7f4:	4630      	mov	r0, r6
 800a7f6:	f3af 8000 	nop.w
 800a7fa:	4607      	mov	r7, r0
 800a7fc:	1c78      	adds	r0, r7, #1
 800a7fe:	d1d6      	bne.n	800a7ae <_vfiprintf_r+0x19a>
 800a800:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a802:	07d9      	lsls	r1, r3, #31
 800a804:	d405      	bmi.n	800a812 <_vfiprintf_r+0x1fe>
 800a806:	89ab      	ldrh	r3, [r5, #12]
 800a808:	059a      	lsls	r2, r3, #22
 800a80a:	d402      	bmi.n	800a812 <_vfiprintf_r+0x1fe>
 800a80c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a80e:	f7fd fad9 	bl	8007dc4 <__retarget_lock_release_recursive>
 800a812:	89ab      	ldrh	r3, [r5, #12]
 800a814:	065b      	lsls	r3, r3, #25
 800a816:	f53f af1f 	bmi.w	800a658 <_vfiprintf_r+0x44>
 800a81a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a81c:	e71e      	b.n	800a65c <_vfiprintf_r+0x48>
 800a81e:	ab03      	add	r3, sp, #12
 800a820:	9300      	str	r3, [sp, #0]
 800a822:	462a      	mov	r2, r5
 800a824:	4b05      	ldr	r3, [pc, #20]	@ (800a83c <_vfiprintf_r+0x228>)
 800a826:	a904      	add	r1, sp, #16
 800a828:	4630      	mov	r0, r6
 800a82a:	f7fe fc15 	bl	8009058 <_printf_i>
 800a82e:	e7e4      	b.n	800a7fa <_vfiprintf_r+0x1e6>
 800a830:	0800ae99 	.word	0x0800ae99
 800a834:	0800aea3 	.word	0x0800aea3
 800a838:	00000000 	.word	0x00000000
 800a83c:	0800a5f1 	.word	0x0800a5f1
 800a840:	0800ae9f 	.word	0x0800ae9f

0800a844 <__swbuf_r>:
 800a844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a846:	460e      	mov	r6, r1
 800a848:	4614      	mov	r4, r2
 800a84a:	4605      	mov	r5, r0
 800a84c:	b118      	cbz	r0, 800a856 <__swbuf_r+0x12>
 800a84e:	6a03      	ldr	r3, [r0, #32]
 800a850:	b90b      	cbnz	r3, 800a856 <__swbuf_r+0x12>
 800a852:	f7fd f9a3 	bl	8007b9c <__sinit>
 800a856:	69a3      	ldr	r3, [r4, #24]
 800a858:	60a3      	str	r3, [r4, #8]
 800a85a:	89a3      	ldrh	r3, [r4, #12]
 800a85c:	071a      	lsls	r2, r3, #28
 800a85e:	d501      	bpl.n	800a864 <__swbuf_r+0x20>
 800a860:	6923      	ldr	r3, [r4, #16]
 800a862:	b943      	cbnz	r3, 800a876 <__swbuf_r+0x32>
 800a864:	4621      	mov	r1, r4
 800a866:	4628      	mov	r0, r5
 800a868:	f000 f82a 	bl	800a8c0 <__swsetup_r>
 800a86c:	b118      	cbz	r0, 800a876 <__swbuf_r+0x32>
 800a86e:	f04f 37ff 	mov.w	r7, #4294967295
 800a872:	4638      	mov	r0, r7
 800a874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a876:	6823      	ldr	r3, [r4, #0]
 800a878:	6922      	ldr	r2, [r4, #16]
 800a87a:	1a98      	subs	r0, r3, r2
 800a87c:	6963      	ldr	r3, [r4, #20]
 800a87e:	b2f6      	uxtb	r6, r6
 800a880:	4283      	cmp	r3, r0
 800a882:	4637      	mov	r7, r6
 800a884:	dc05      	bgt.n	800a892 <__swbuf_r+0x4e>
 800a886:	4621      	mov	r1, r4
 800a888:	4628      	mov	r0, r5
 800a88a:	f7fe fd89 	bl	80093a0 <_fflush_r>
 800a88e:	2800      	cmp	r0, #0
 800a890:	d1ed      	bne.n	800a86e <__swbuf_r+0x2a>
 800a892:	68a3      	ldr	r3, [r4, #8]
 800a894:	3b01      	subs	r3, #1
 800a896:	60a3      	str	r3, [r4, #8]
 800a898:	6823      	ldr	r3, [r4, #0]
 800a89a:	1c5a      	adds	r2, r3, #1
 800a89c:	6022      	str	r2, [r4, #0]
 800a89e:	701e      	strb	r6, [r3, #0]
 800a8a0:	6962      	ldr	r2, [r4, #20]
 800a8a2:	1c43      	adds	r3, r0, #1
 800a8a4:	429a      	cmp	r2, r3
 800a8a6:	d004      	beq.n	800a8b2 <__swbuf_r+0x6e>
 800a8a8:	89a3      	ldrh	r3, [r4, #12]
 800a8aa:	07db      	lsls	r3, r3, #31
 800a8ac:	d5e1      	bpl.n	800a872 <__swbuf_r+0x2e>
 800a8ae:	2e0a      	cmp	r6, #10
 800a8b0:	d1df      	bne.n	800a872 <__swbuf_r+0x2e>
 800a8b2:	4621      	mov	r1, r4
 800a8b4:	4628      	mov	r0, r5
 800a8b6:	f7fe fd73 	bl	80093a0 <_fflush_r>
 800a8ba:	2800      	cmp	r0, #0
 800a8bc:	d0d9      	beq.n	800a872 <__swbuf_r+0x2e>
 800a8be:	e7d6      	b.n	800a86e <__swbuf_r+0x2a>

0800a8c0 <__swsetup_r>:
 800a8c0:	b538      	push	{r3, r4, r5, lr}
 800a8c2:	4b29      	ldr	r3, [pc, #164]	@ (800a968 <__swsetup_r+0xa8>)
 800a8c4:	4605      	mov	r5, r0
 800a8c6:	6818      	ldr	r0, [r3, #0]
 800a8c8:	460c      	mov	r4, r1
 800a8ca:	b118      	cbz	r0, 800a8d4 <__swsetup_r+0x14>
 800a8cc:	6a03      	ldr	r3, [r0, #32]
 800a8ce:	b90b      	cbnz	r3, 800a8d4 <__swsetup_r+0x14>
 800a8d0:	f7fd f964 	bl	8007b9c <__sinit>
 800a8d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8d8:	0719      	lsls	r1, r3, #28
 800a8da:	d422      	bmi.n	800a922 <__swsetup_r+0x62>
 800a8dc:	06da      	lsls	r2, r3, #27
 800a8de:	d407      	bmi.n	800a8f0 <__swsetup_r+0x30>
 800a8e0:	2209      	movs	r2, #9
 800a8e2:	602a      	str	r2, [r5, #0]
 800a8e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a8e8:	81a3      	strh	r3, [r4, #12]
 800a8ea:	f04f 30ff 	mov.w	r0, #4294967295
 800a8ee:	e033      	b.n	800a958 <__swsetup_r+0x98>
 800a8f0:	0758      	lsls	r0, r3, #29
 800a8f2:	d512      	bpl.n	800a91a <__swsetup_r+0x5a>
 800a8f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a8f6:	b141      	cbz	r1, 800a90a <__swsetup_r+0x4a>
 800a8f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a8fc:	4299      	cmp	r1, r3
 800a8fe:	d002      	beq.n	800a906 <__swsetup_r+0x46>
 800a900:	4628      	mov	r0, r5
 800a902:	f7fd fa67 	bl	8007dd4 <_free_r>
 800a906:	2300      	movs	r3, #0
 800a908:	6363      	str	r3, [r4, #52]	@ 0x34
 800a90a:	89a3      	ldrh	r3, [r4, #12]
 800a90c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a910:	81a3      	strh	r3, [r4, #12]
 800a912:	2300      	movs	r3, #0
 800a914:	6063      	str	r3, [r4, #4]
 800a916:	6923      	ldr	r3, [r4, #16]
 800a918:	6023      	str	r3, [r4, #0]
 800a91a:	89a3      	ldrh	r3, [r4, #12]
 800a91c:	f043 0308 	orr.w	r3, r3, #8
 800a920:	81a3      	strh	r3, [r4, #12]
 800a922:	6923      	ldr	r3, [r4, #16]
 800a924:	b94b      	cbnz	r3, 800a93a <__swsetup_r+0x7a>
 800a926:	89a3      	ldrh	r3, [r4, #12]
 800a928:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a92c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a930:	d003      	beq.n	800a93a <__swsetup_r+0x7a>
 800a932:	4621      	mov	r1, r4
 800a934:	4628      	mov	r0, r5
 800a936:	f000 f883 	bl	800aa40 <__smakebuf_r>
 800a93a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a93e:	f013 0201 	ands.w	r2, r3, #1
 800a942:	d00a      	beq.n	800a95a <__swsetup_r+0x9a>
 800a944:	2200      	movs	r2, #0
 800a946:	60a2      	str	r2, [r4, #8]
 800a948:	6962      	ldr	r2, [r4, #20]
 800a94a:	4252      	negs	r2, r2
 800a94c:	61a2      	str	r2, [r4, #24]
 800a94e:	6922      	ldr	r2, [r4, #16]
 800a950:	b942      	cbnz	r2, 800a964 <__swsetup_r+0xa4>
 800a952:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a956:	d1c5      	bne.n	800a8e4 <__swsetup_r+0x24>
 800a958:	bd38      	pop	{r3, r4, r5, pc}
 800a95a:	0799      	lsls	r1, r3, #30
 800a95c:	bf58      	it	pl
 800a95e:	6962      	ldrpl	r2, [r4, #20]
 800a960:	60a2      	str	r2, [r4, #8]
 800a962:	e7f4      	b.n	800a94e <__swsetup_r+0x8e>
 800a964:	2000      	movs	r0, #0
 800a966:	e7f7      	b.n	800a958 <__swsetup_r+0x98>
 800a968:	2000003c 	.word	0x2000003c

0800a96c <_raise_r>:
 800a96c:	291f      	cmp	r1, #31
 800a96e:	b538      	push	{r3, r4, r5, lr}
 800a970:	4605      	mov	r5, r0
 800a972:	460c      	mov	r4, r1
 800a974:	d904      	bls.n	800a980 <_raise_r+0x14>
 800a976:	2316      	movs	r3, #22
 800a978:	6003      	str	r3, [r0, #0]
 800a97a:	f04f 30ff 	mov.w	r0, #4294967295
 800a97e:	bd38      	pop	{r3, r4, r5, pc}
 800a980:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a982:	b112      	cbz	r2, 800a98a <_raise_r+0x1e>
 800a984:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a988:	b94b      	cbnz	r3, 800a99e <_raise_r+0x32>
 800a98a:	4628      	mov	r0, r5
 800a98c:	f000 f830 	bl	800a9f0 <_getpid_r>
 800a990:	4622      	mov	r2, r4
 800a992:	4601      	mov	r1, r0
 800a994:	4628      	mov	r0, r5
 800a996:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a99a:	f000 b817 	b.w	800a9cc <_kill_r>
 800a99e:	2b01      	cmp	r3, #1
 800a9a0:	d00a      	beq.n	800a9b8 <_raise_r+0x4c>
 800a9a2:	1c59      	adds	r1, r3, #1
 800a9a4:	d103      	bne.n	800a9ae <_raise_r+0x42>
 800a9a6:	2316      	movs	r3, #22
 800a9a8:	6003      	str	r3, [r0, #0]
 800a9aa:	2001      	movs	r0, #1
 800a9ac:	e7e7      	b.n	800a97e <_raise_r+0x12>
 800a9ae:	2100      	movs	r1, #0
 800a9b0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a9b4:	4620      	mov	r0, r4
 800a9b6:	4798      	blx	r3
 800a9b8:	2000      	movs	r0, #0
 800a9ba:	e7e0      	b.n	800a97e <_raise_r+0x12>

0800a9bc <raise>:
 800a9bc:	4b02      	ldr	r3, [pc, #8]	@ (800a9c8 <raise+0xc>)
 800a9be:	4601      	mov	r1, r0
 800a9c0:	6818      	ldr	r0, [r3, #0]
 800a9c2:	f7ff bfd3 	b.w	800a96c <_raise_r>
 800a9c6:	bf00      	nop
 800a9c8:	2000003c 	.word	0x2000003c

0800a9cc <_kill_r>:
 800a9cc:	b538      	push	{r3, r4, r5, lr}
 800a9ce:	4d07      	ldr	r5, [pc, #28]	@ (800a9ec <_kill_r+0x20>)
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	4604      	mov	r4, r0
 800a9d4:	4608      	mov	r0, r1
 800a9d6:	4611      	mov	r1, r2
 800a9d8:	602b      	str	r3, [r5, #0]
 800a9da:	f7f8 fa23 	bl	8002e24 <_kill>
 800a9de:	1c43      	adds	r3, r0, #1
 800a9e0:	d102      	bne.n	800a9e8 <_kill_r+0x1c>
 800a9e2:	682b      	ldr	r3, [r5, #0]
 800a9e4:	b103      	cbz	r3, 800a9e8 <_kill_r+0x1c>
 800a9e6:	6023      	str	r3, [r4, #0]
 800a9e8:	bd38      	pop	{r3, r4, r5, pc}
 800a9ea:	bf00      	nop
 800a9ec:	200006b4 	.word	0x200006b4

0800a9f0 <_getpid_r>:
 800a9f0:	f7f8 ba10 	b.w	8002e14 <_getpid>

0800a9f4 <__swhatbuf_r>:
 800a9f4:	b570      	push	{r4, r5, r6, lr}
 800a9f6:	460c      	mov	r4, r1
 800a9f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9fc:	2900      	cmp	r1, #0
 800a9fe:	b096      	sub	sp, #88	@ 0x58
 800aa00:	4615      	mov	r5, r2
 800aa02:	461e      	mov	r6, r3
 800aa04:	da0d      	bge.n	800aa22 <__swhatbuf_r+0x2e>
 800aa06:	89a3      	ldrh	r3, [r4, #12]
 800aa08:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800aa0c:	f04f 0100 	mov.w	r1, #0
 800aa10:	bf14      	ite	ne
 800aa12:	2340      	movne	r3, #64	@ 0x40
 800aa14:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800aa18:	2000      	movs	r0, #0
 800aa1a:	6031      	str	r1, [r6, #0]
 800aa1c:	602b      	str	r3, [r5, #0]
 800aa1e:	b016      	add	sp, #88	@ 0x58
 800aa20:	bd70      	pop	{r4, r5, r6, pc}
 800aa22:	466a      	mov	r2, sp
 800aa24:	f000 f848 	bl	800aab8 <_fstat_r>
 800aa28:	2800      	cmp	r0, #0
 800aa2a:	dbec      	blt.n	800aa06 <__swhatbuf_r+0x12>
 800aa2c:	9901      	ldr	r1, [sp, #4]
 800aa2e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800aa32:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800aa36:	4259      	negs	r1, r3
 800aa38:	4159      	adcs	r1, r3
 800aa3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aa3e:	e7eb      	b.n	800aa18 <__swhatbuf_r+0x24>

0800aa40 <__smakebuf_r>:
 800aa40:	898b      	ldrh	r3, [r1, #12]
 800aa42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa44:	079d      	lsls	r5, r3, #30
 800aa46:	4606      	mov	r6, r0
 800aa48:	460c      	mov	r4, r1
 800aa4a:	d507      	bpl.n	800aa5c <__smakebuf_r+0x1c>
 800aa4c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800aa50:	6023      	str	r3, [r4, #0]
 800aa52:	6123      	str	r3, [r4, #16]
 800aa54:	2301      	movs	r3, #1
 800aa56:	6163      	str	r3, [r4, #20]
 800aa58:	b003      	add	sp, #12
 800aa5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa5c:	ab01      	add	r3, sp, #4
 800aa5e:	466a      	mov	r2, sp
 800aa60:	f7ff ffc8 	bl	800a9f4 <__swhatbuf_r>
 800aa64:	9f00      	ldr	r7, [sp, #0]
 800aa66:	4605      	mov	r5, r0
 800aa68:	4639      	mov	r1, r7
 800aa6a:	4630      	mov	r0, r6
 800aa6c:	f7fd fa1e 	bl	8007eac <_malloc_r>
 800aa70:	b948      	cbnz	r0, 800aa86 <__smakebuf_r+0x46>
 800aa72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa76:	059a      	lsls	r2, r3, #22
 800aa78:	d4ee      	bmi.n	800aa58 <__smakebuf_r+0x18>
 800aa7a:	f023 0303 	bic.w	r3, r3, #3
 800aa7e:	f043 0302 	orr.w	r3, r3, #2
 800aa82:	81a3      	strh	r3, [r4, #12]
 800aa84:	e7e2      	b.n	800aa4c <__smakebuf_r+0xc>
 800aa86:	89a3      	ldrh	r3, [r4, #12]
 800aa88:	6020      	str	r0, [r4, #0]
 800aa8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa8e:	81a3      	strh	r3, [r4, #12]
 800aa90:	9b01      	ldr	r3, [sp, #4]
 800aa92:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800aa96:	b15b      	cbz	r3, 800aab0 <__smakebuf_r+0x70>
 800aa98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa9c:	4630      	mov	r0, r6
 800aa9e:	f000 f81d 	bl	800aadc <_isatty_r>
 800aaa2:	b128      	cbz	r0, 800aab0 <__smakebuf_r+0x70>
 800aaa4:	89a3      	ldrh	r3, [r4, #12]
 800aaa6:	f023 0303 	bic.w	r3, r3, #3
 800aaaa:	f043 0301 	orr.w	r3, r3, #1
 800aaae:	81a3      	strh	r3, [r4, #12]
 800aab0:	89a3      	ldrh	r3, [r4, #12]
 800aab2:	431d      	orrs	r5, r3
 800aab4:	81a5      	strh	r5, [r4, #12]
 800aab6:	e7cf      	b.n	800aa58 <__smakebuf_r+0x18>

0800aab8 <_fstat_r>:
 800aab8:	b538      	push	{r3, r4, r5, lr}
 800aaba:	4d07      	ldr	r5, [pc, #28]	@ (800aad8 <_fstat_r+0x20>)
 800aabc:	2300      	movs	r3, #0
 800aabe:	4604      	mov	r4, r0
 800aac0:	4608      	mov	r0, r1
 800aac2:	4611      	mov	r1, r2
 800aac4:	602b      	str	r3, [r5, #0]
 800aac6:	f7f8 fa0d 	bl	8002ee4 <_fstat>
 800aaca:	1c43      	adds	r3, r0, #1
 800aacc:	d102      	bne.n	800aad4 <_fstat_r+0x1c>
 800aace:	682b      	ldr	r3, [r5, #0]
 800aad0:	b103      	cbz	r3, 800aad4 <_fstat_r+0x1c>
 800aad2:	6023      	str	r3, [r4, #0]
 800aad4:	bd38      	pop	{r3, r4, r5, pc}
 800aad6:	bf00      	nop
 800aad8:	200006b4 	.word	0x200006b4

0800aadc <_isatty_r>:
 800aadc:	b538      	push	{r3, r4, r5, lr}
 800aade:	4d06      	ldr	r5, [pc, #24]	@ (800aaf8 <_isatty_r+0x1c>)
 800aae0:	2300      	movs	r3, #0
 800aae2:	4604      	mov	r4, r0
 800aae4:	4608      	mov	r0, r1
 800aae6:	602b      	str	r3, [r5, #0]
 800aae8:	f7f8 fa0c 	bl	8002f04 <_isatty>
 800aaec:	1c43      	adds	r3, r0, #1
 800aaee:	d102      	bne.n	800aaf6 <_isatty_r+0x1a>
 800aaf0:	682b      	ldr	r3, [r5, #0]
 800aaf2:	b103      	cbz	r3, 800aaf6 <_isatty_r+0x1a>
 800aaf4:	6023      	str	r3, [r4, #0]
 800aaf6:	bd38      	pop	{r3, r4, r5, pc}
 800aaf8:	200006b4 	.word	0x200006b4

0800aafc <sqrtf>:
 800aafc:	b508      	push	{r3, lr}
 800aafe:	ed2d 8b02 	vpush	{d8}
 800ab02:	eeb0 8a40 	vmov.f32	s16, s0
 800ab06:	f000 f8f2 	bl	800acee <__ieee754_sqrtf>
 800ab0a:	eeb4 8a48 	vcmp.f32	s16, s16
 800ab0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab12:	d60c      	bvs.n	800ab2e <sqrtf+0x32>
 800ab14:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800ab34 <sqrtf+0x38>
 800ab18:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800ab1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab20:	d505      	bpl.n	800ab2e <sqrtf+0x32>
 800ab22:	f7fd f923 	bl	8007d6c <__errno>
 800ab26:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800ab2a:	2321      	movs	r3, #33	@ 0x21
 800ab2c:	6003      	str	r3, [r0, #0]
 800ab2e:	ecbd 8b02 	vpop	{d8}
 800ab32:	bd08      	pop	{r3, pc}
 800ab34:	00000000 	.word	0x00000000

0800ab38 <atanf>:
 800ab38:	b538      	push	{r3, r4, r5, lr}
 800ab3a:	ee10 5a10 	vmov	r5, s0
 800ab3e:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800ab42:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800ab46:	eef0 7a40 	vmov.f32	s15, s0
 800ab4a:	d310      	bcc.n	800ab6e <atanf+0x36>
 800ab4c:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800ab50:	d904      	bls.n	800ab5c <atanf+0x24>
 800ab52:	ee70 7a00 	vadd.f32	s15, s0, s0
 800ab56:	eeb0 0a67 	vmov.f32	s0, s15
 800ab5a:	bd38      	pop	{r3, r4, r5, pc}
 800ab5c:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800ac94 <atanf+0x15c>
 800ab60:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800ac98 <atanf+0x160>
 800ab64:	2d00      	cmp	r5, #0
 800ab66:	bfc8      	it	gt
 800ab68:	eef0 7a47 	vmovgt.f32	s15, s14
 800ab6c:	e7f3      	b.n	800ab56 <atanf+0x1e>
 800ab6e:	4b4b      	ldr	r3, [pc, #300]	@ (800ac9c <atanf+0x164>)
 800ab70:	429c      	cmp	r4, r3
 800ab72:	d810      	bhi.n	800ab96 <atanf+0x5e>
 800ab74:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800ab78:	d20a      	bcs.n	800ab90 <atanf+0x58>
 800ab7a:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800aca0 <atanf+0x168>
 800ab7e:	ee30 7a07 	vadd.f32	s14, s0, s14
 800ab82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ab86:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800ab8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab8e:	dce2      	bgt.n	800ab56 <atanf+0x1e>
 800ab90:	f04f 33ff 	mov.w	r3, #4294967295
 800ab94:	e013      	b.n	800abbe <atanf+0x86>
 800ab96:	f000 f8a3 	bl	800ace0 <fabsf>
 800ab9a:	4b42      	ldr	r3, [pc, #264]	@ (800aca4 <atanf+0x16c>)
 800ab9c:	429c      	cmp	r4, r3
 800ab9e:	d84f      	bhi.n	800ac40 <atanf+0x108>
 800aba0:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800aba4:	429c      	cmp	r4, r3
 800aba6:	d841      	bhi.n	800ac2c <atanf+0xf4>
 800aba8:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800abac:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800abb0:	eea0 7a27 	vfma.f32	s14, s0, s15
 800abb4:	2300      	movs	r3, #0
 800abb6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800abba:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800abbe:	1c5a      	adds	r2, r3, #1
 800abc0:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800abc4:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800aca8 <atanf+0x170>
 800abc8:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800acac <atanf+0x174>
 800abcc:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800acb0 <atanf+0x178>
 800abd0:	ee66 6a06 	vmul.f32	s13, s12, s12
 800abd4:	eee6 5a87 	vfma.f32	s11, s13, s14
 800abd8:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800acb4 <atanf+0x17c>
 800abdc:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800abe0:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800acb8 <atanf+0x180>
 800abe4:	eee7 5a26 	vfma.f32	s11, s14, s13
 800abe8:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800acbc <atanf+0x184>
 800abec:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800abf0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800acc0 <atanf+0x188>
 800abf4:	eee7 5a26 	vfma.f32	s11, s14, s13
 800abf8:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800acc4 <atanf+0x18c>
 800abfc:	eea6 5a87 	vfma.f32	s10, s13, s14
 800ac00:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800acc8 <atanf+0x190>
 800ac04:	eea5 7a26 	vfma.f32	s14, s10, s13
 800ac08:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800accc <atanf+0x194>
 800ac0c:	eea7 5a26 	vfma.f32	s10, s14, s13
 800ac10:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800acd0 <atanf+0x198>
 800ac14:	eea5 7a26 	vfma.f32	s14, s10, s13
 800ac18:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ac1c:	eea5 7a86 	vfma.f32	s14, s11, s12
 800ac20:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ac24:	d121      	bne.n	800ac6a <atanf+0x132>
 800ac26:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ac2a:	e794      	b.n	800ab56 <atanf+0x1e>
 800ac2c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800ac30:	ee30 7a67 	vsub.f32	s14, s0, s15
 800ac34:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ac38:	2301      	movs	r3, #1
 800ac3a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ac3e:	e7be      	b.n	800abbe <atanf+0x86>
 800ac40:	4b24      	ldr	r3, [pc, #144]	@ (800acd4 <atanf+0x19c>)
 800ac42:	429c      	cmp	r4, r3
 800ac44:	d80b      	bhi.n	800ac5e <atanf+0x126>
 800ac46:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800ac4a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ac4e:	eea0 7a27 	vfma.f32	s14, s0, s15
 800ac52:	2302      	movs	r3, #2
 800ac54:	ee70 6a67 	vsub.f32	s13, s0, s15
 800ac58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac5c:	e7af      	b.n	800abbe <atanf+0x86>
 800ac5e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800ac62:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ac66:	2303      	movs	r3, #3
 800ac68:	e7a9      	b.n	800abbe <atanf+0x86>
 800ac6a:	4a1b      	ldr	r2, [pc, #108]	@ (800acd8 <atanf+0x1a0>)
 800ac6c:	491b      	ldr	r1, [pc, #108]	@ (800acdc <atanf+0x1a4>)
 800ac6e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800ac72:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800ac76:	edd3 6a00 	vldr	s13, [r3]
 800ac7a:	ee37 7a66 	vsub.f32	s14, s14, s13
 800ac7e:	2d00      	cmp	r5, #0
 800ac80:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ac84:	edd2 7a00 	vldr	s15, [r2]
 800ac88:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ac8c:	bfb8      	it	lt
 800ac8e:	eef1 7a67 	vneglt.f32	s15, s15
 800ac92:	e760      	b.n	800ab56 <atanf+0x1e>
 800ac94:	bfc90fdb 	.word	0xbfc90fdb
 800ac98:	3fc90fdb 	.word	0x3fc90fdb
 800ac9c:	3edfffff 	.word	0x3edfffff
 800aca0:	7149f2ca 	.word	0x7149f2ca
 800aca4:	3f97ffff 	.word	0x3f97ffff
 800aca8:	3c8569d7 	.word	0x3c8569d7
 800acac:	3d4bda59 	.word	0x3d4bda59
 800acb0:	bd6ef16b 	.word	0xbd6ef16b
 800acb4:	3d886b35 	.word	0x3d886b35
 800acb8:	3dba2e6e 	.word	0x3dba2e6e
 800acbc:	3e124925 	.word	0x3e124925
 800acc0:	3eaaaaab 	.word	0x3eaaaaab
 800acc4:	bd15a221 	.word	0xbd15a221
 800acc8:	bd9d8795 	.word	0xbd9d8795
 800accc:	bde38e38 	.word	0xbde38e38
 800acd0:	be4ccccd 	.word	0xbe4ccccd
 800acd4:	401bffff 	.word	0x401bffff
 800acd8:	0800b104 	.word	0x0800b104
 800acdc:	0800b0f4 	.word	0x0800b0f4

0800ace0 <fabsf>:
 800ace0:	ee10 3a10 	vmov	r3, s0
 800ace4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ace8:	ee00 3a10 	vmov	s0, r3
 800acec:	4770      	bx	lr

0800acee <__ieee754_sqrtf>:
 800acee:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800acf2:	4770      	bx	lr

0800acf4 <_init>:
 800acf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acf6:	bf00      	nop
 800acf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acfa:	bc08      	pop	{r3}
 800acfc:	469e      	mov	lr, r3
 800acfe:	4770      	bx	lr

0800ad00 <_fini>:
 800ad00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad02:	bf00      	nop
 800ad04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad06:	bc08      	pop	{r3}
 800ad08:	469e      	mov	lr, r3
 800ad0a:	4770      	bx	lr
