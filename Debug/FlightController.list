
FlightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004194  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08004330  08004330  00005330  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004388  08004388  00006078  2**0
                  CONTENTS
  4 .ARM          00000008  08004388  08004388  00005388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004390  08004390  00006078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004390  08004390  00005390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004394  08004394  00005394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08004398  00006000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  20000078  08004410  00006078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  08004410  000062b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009ce3  00000000  00000000  000060a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015f0  00000000  00000000  0000fd8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000908  00000000  00000000  00011380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000071c  00000000  00000000  00011c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015a2c  00000000  00000000  000123a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b924  00000000  00000000  00027dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000885ff  00000000  00000000  000336f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bbcf3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a00  00000000  00000000  000bbd38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000be738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000078 	.word	0x20000078
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004314 	.word	0x08004314

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000007c 	.word	0x2000007c
 80001d4:	08004314 	.word	0x08004314

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_uldivmod>:
 8000b50:	b953      	cbnz	r3, 8000b68 <__aeabi_uldivmod+0x18>
 8000b52:	b94a      	cbnz	r2, 8000b68 <__aeabi_uldivmod+0x18>
 8000b54:	2900      	cmp	r1, #0
 8000b56:	bf08      	it	eq
 8000b58:	2800      	cmpeq	r0, #0
 8000b5a:	bf1c      	itt	ne
 8000b5c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b60:	f04f 30ff 	movne.w	r0, #4294967295
 8000b64:	f000 b96a 	b.w	8000e3c <__aeabi_idiv0>
 8000b68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b70:	f000 f806 	bl	8000b80 <__udivmoddi4>
 8000b74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b7c:	b004      	add	sp, #16
 8000b7e:	4770      	bx	lr

08000b80 <__udivmoddi4>:
 8000b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b84:	9d08      	ldr	r5, [sp, #32]
 8000b86:	460c      	mov	r4, r1
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d14e      	bne.n	8000c2a <__udivmoddi4+0xaa>
 8000b8c:	4694      	mov	ip, r2
 8000b8e:	458c      	cmp	ip, r1
 8000b90:	4686      	mov	lr, r0
 8000b92:	fab2 f282 	clz	r2, r2
 8000b96:	d962      	bls.n	8000c5e <__udivmoddi4+0xde>
 8000b98:	b14a      	cbz	r2, 8000bae <__udivmoddi4+0x2e>
 8000b9a:	f1c2 0320 	rsb	r3, r2, #32
 8000b9e:	4091      	lsls	r1, r2
 8000ba0:	fa20 f303 	lsr.w	r3, r0, r3
 8000ba4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ba8:	4319      	orrs	r1, r3
 8000baa:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bb2:	fa1f f68c 	uxth.w	r6, ip
 8000bb6:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bbe:	fb07 1114 	mls	r1, r7, r4, r1
 8000bc2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bc6:	fb04 f106 	mul.w	r1, r4, r6
 8000bca:	4299      	cmp	r1, r3
 8000bcc:	d90a      	bls.n	8000be4 <__udivmoddi4+0x64>
 8000bce:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd2:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bd6:	f080 8112 	bcs.w	8000dfe <__udivmoddi4+0x27e>
 8000bda:	4299      	cmp	r1, r3
 8000bdc:	f240 810f 	bls.w	8000dfe <__udivmoddi4+0x27e>
 8000be0:	3c02      	subs	r4, #2
 8000be2:	4463      	add	r3, ip
 8000be4:	1a59      	subs	r1, r3, r1
 8000be6:	fa1f f38e 	uxth.w	r3, lr
 8000bea:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bee:	fb07 1110 	mls	r1, r7, r0, r1
 8000bf2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf6:	fb00 f606 	mul.w	r6, r0, r6
 8000bfa:	429e      	cmp	r6, r3
 8000bfc:	d90a      	bls.n	8000c14 <__udivmoddi4+0x94>
 8000bfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000c02:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c06:	f080 80fc 	bcs.w	8000e02 <__udivmoddi4+0x282>
 8000c0a:	429e      	cmp	r6, r3
 8000c0c:	f240 80f9 	bls.w	8000e02 <__udivmoddi4+0x282>
 8000c10:	4463      	add	r3, ip
 8000c12:	3802      	subs	r0, #2
 8000c14:	1b9b      	subs	r3, r3, r6
 8000c16:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	b11d      	cbz	r5, 8000c26 <__udivmoddi4+0xa6>
 8000c1e:	40d3      	lsrs	r3, r2
 8000c20:	2200      	movs	r2, #0
 8000c22:	e9c5 3200 	strd	r3, r2, [r5]
 8000c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2a:	428b      	cmp	r3, r1
 8000c2c:	d905      	bls.n	8000c3a <__udivmoddi4+0xba>
 8000c2e:	b10d      	cbz	r5, 8000c34 <__udivmoddi4+0xb4>
 8000c30:	e9c5 0100 	strd	r0, r1, [r5]
 8000c34:	2100      	movs	r1, #0
 8000c36:	4608      	mov	r0, r1
 8000c38:	e7f5      	b.n	8000c26 <__udivmoddi4+0xa6>
 8000c3a:	fab3 f183 	clz	r1, r3
 8000c3e:	2900      	cmp	r1, #0
 8000c40:	d146      	bne.n	8000cd0 <__udivmoddi4+0x150>
 8000c42:	42a3      	cmp	r3, r4
 8000c44:	d302      	bcc.n	8000c4c <__udivmoddi4+0xcc>
 8000c46:	4290      	cmp	r0, r2
 8000c48:	f0c0 80f0 	bcc.w	8000e2c <__udivmoddi4+0x2ac>
 8000c4c:	1a86      	subs	r6, r0, r2
 8000c4e:	eb64 0303 	sbc.w	r3, r4, r3
 8000c52:	2001      	movs	r0, #1
 8000c54:	2d00      	cmp	r5, #0
 8000c56:	d0e6      	beq.n	8000c26 <__udivmoddi4+0xa6>
 8000c58:	e9c5 6300 	strd	r6, r3, [r5]
 8000c5c:	e7e3      	b.n	8000c26 <__udivmoddi4+0xa6>
 8000c5e:	2a00      	cmp	r2, #0
 8000c60:	f040 8090 	bne.w	8000d84 <__udivmoddi4+0x204>
 8000c64:	eba1 040c 	sub.w	r4, r1, ip
 8000c68:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c6c:	fa1f f78c 	uxth.w	r7, ip
 8000c70:	2101      	movs	r1, #1
 8000c72:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c76:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c7a:	fb08 4416 	mls	r4, r8, r6, r4
 8000c7e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c82:	fb07 f006 	mul.w	r0, r7, r6
 8000c86:	4298      	cmp	r0, r3
 8000c88:	d908      	bls.n	8000c9c <__udivmoddi4+0x11c>
 8000c8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c92:	d202      	bcs.n	8000c9a <__udivmoddi4+0x11a>
 8000c94:	4298      	cmp	r0, r3
 8000c96:	f200 80cd 	bhi.w	8000e34 <__udivmoddi4+0x2b4>
 8000c9a:	4626      	mov	r6, r4
 8000c9c:	1a1c      	subs	r4, r3, r0
 8000c9e:	fa1f f38e 	uxth.w	r3, lr
 8000ca2:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ca6:	fb08 4410 	mls	r4, r8, r0, r4
 8000caa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cae:	fb00 f707 	mul.w	r7, r0, r7
 8000cb2:	429f      	cmp	r7, r3
 8000cb4:	d908      	bls.n	8000cc8 <__udivmoddi4+0x148>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cbe:	d202      	bcs.n	8000cc6 <__udivmoddi4+0x146>
 8000cc0:	429f      	cmp	r7, r3
 8000cc2:	f200 80b0 	bhi.w	8000e26 <__udivmoddi4+0x2a6>
 8000cc6:	4620      	mov	r0, r4
 8000cc8:	1bdb      	subs	r3, r3, r7
 8000cca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cce:	e7a5      	b.n	8000c1c <__udivmoddi4+0x9c>
 8000cd0:	f1c1 0620 	rsb	r6, r1, #32
 8000cd4:	408b      	lsls	r3, r1
 8000cd6:	fa22 f706 	lsr.w	r7, r2, r6
 8000cda:	431f      	orrs	r7, r3
 8000cdc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ce0:	fa04 f301 	lsl.w	r3, r4, r1
 8000ce4:	ea43 030c 	orr.w	r3, r3, ip
 8000ce8:	40f4      	lsrs	r4, r6
 8000cea:	fa00 f801 	lsl.w	r8, r0, r1
 8000cee:	0c38      	lsrs	r0, r7, #16
 8000cf0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cf4:	fbb4 fef0 	udiv	lr, r4, r0
 8000cf8:	fa1f fc87 	uxth.w	ip, r7
 8000cfc:	fb00 441e 	mls	r4, r0, lr, r4
 8000d00:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d04:	fb0e f90c 	mul.w	r9, lr, ip
 8000d08:	45a1      	cmp	r9, r4
 8000d0a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d0e:	d90a      	bls.n	8000d26 <__udivmoddi4+0x1a6>
 8000d10:	193c      	adds	r4, r7, r4
 8000d12:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d16:	f080 8084 	bcs.w	8000e22 <__udivmoddi4+0x2a2>
 8000d1a:	45a1      	cmp	r9, r4
 8000d1c:	f240 8081 	bls.w	8000e22 <__udivmoddi4+0x2a2>
 8000d20:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d24:	443c      	add	r4, r7
 8000d26:	eba4 0409 	sub.w	r4, r4, r9
 8000d2a:	fa1f f983 	uxth.w	r9, r3
 8000d2e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d32:	fb00 4413 	mls	r4, r0, r3, r4
 8000d36:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d3a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d3e:	45a4      	cmp	ip, r4
 8000d40:	d907      	bls.n	8000d52 <__udivmoddi4+0x1d2>
 8000d42:	193c      	adds	r4, r7, r4
 8000d44:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d48:	d267      	bcs.n	8000e1a <__udivmoddi4+0x29a>
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	d965      	bls.n	8000e1a <__udivmoddi4+0x29a>
 8000d4e:	3b02      	subs	r3, #2
 8000d50:	443c      	add	r4, r7
 8000d52:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d56:	fba0 9302 	umull	r9, r3, r0, r2
 8000d5a:	eba4 040c 	sub.w	r4, r4, ip
 8000d5e:	429c      	cmp	r4, r3
 8000d60:	46ce      	mov	lr, r9
 8000d62:	469c      	mov	ip, r3
 8000d64:	d351      	bcc.n	8000e0a <__udivmoddi4+0x28a>
 8000d66:	d04e      	beq.n	8000e06 <__udivmoddi4+0x286>
 8000d68:	b155      	cbz	r5, 8000d80 <__udivmoddi4+0x200>
 8000d6a:	ebb8 030e 	subs.w	r3, r8, lr
 8000d6e:	eb64 040c 	sbc.w	r4, r4, ip
 8000d72:	fa04 f606 	lsl.w	r6, r4, r6
 8000d76:	40cb      	lsrs	r3, r1
 8000d78:	431e      	orrs	r6, r3
 8000d7a:	40cc      	lsrs	r4, r1
 8000d7c:	e9c5 6400 	strd	r6, r4, [r5]
 8000d80:	2100      	movs	r1, #0
 8000d82:	e750      	b.n	8000c26 <__udivmoddi4+0xa6>
 8000d84:	f1c2 0320 	rsb	r3, r2, #32
 8000d88:	fa20 f103 	lsr.w	r1, r0, r3
 8000d8c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d90:	fa24 f303 	lsr.w	r3, r4, r3
 8000d94:	4094      	lsls	r4, r2
 8000d96:	430c      	orrs	r4, r1
 8000d98:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d9c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da0:	fa1f f78c 	uxth.w	r7, ip
 8000da4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da8:	fb08 3110 	mls	r1, r8, r0, r3
 8000dac:	0c23      	lsrs	r3, r4, #16
 8000dae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db2:	fb00 f107 	mul.w	r1, r0, r7
 8000db6:	4299      	cmp	r1, r3
 8000db8:	d908      	bls.n	8000dcc <__udivmoddi4+0x24c>
 8000dba:	eb1c 0303 	adds.w	r3, ip, r3
 8000dbe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dc2:	d22c      	bcs.n	8000e1e <__udivmoddi4+0x29e>
 8000dc4:	4299      	cmp	r1, r3
 8000dc6:	d92a      	bls.n	8000e1e <__udivmoddi4+0x29e>
 8000dc8:	3802      	subs	r0, #2
 8000dca:	4463      	add	r3, ip
 8000dcc:	1a5b      	subs	r3, r3, r1
 8000dce:	b2a4      	uxth	r4, r4
 8000dd0:	fbb3 f1f8 	udiv	r1, r3, r8
 8000dd4:	fb08 3311 	mls	r3, r8, r1, r3
 8000dd8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ddc:	fb01 f307 	mul.w	r3, r1, r7
 8000de0:	42a3      	cmp	r3, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x276>
 8000de4:	eb1c 0404 	adds.w	r4, ip, r4
 8000de8:	f101 36ff 	add.w	r6, r1, #4294967295
 8000dec:	d213      	bcs.n	8000e16 <__udivmoddi4+0x296>
 8000dee:	42a3      	cmp	r3, r4
 8000df0:	d911      	bls.n	8000e16 <__udivmoddi4+0x296>
 8000df2:	3902      	subs	r1, #2
 8000df4:	4464      	add	r4, ip
 8000df6:	1ae4      	subs	r4, r4, r3
 8000df8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000dfc:	e739      	b.n	8000c72 <__udivmoddi4+0xf2>
 8000dfe:	4604      	mov	r4, r0
 8000e00:	e6f0      	b.n	8000be4 <__udivmoddi4+0x64>
 8000e02:	4608      	mov	r0, r1
 8000e04:	e706      	b.n	8000c14 <__udivmoddi4+0x94>
 8000e06:	45c8      	cmp	r8, r9
 8000e08:	d2ae      	bcs.n	8000d68 <__udivmoddi4+0x1e8>
 8000e0a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e0e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e12:	3801      	subs	r0, #1
 8000e14:	e7a8      	b.n	8000d68 <__udivmoddi4+0x1e8>
 8000e16:	4631      	mov	r1, r6
 8000e18:	e7ed      	b.n	8000df6 <__udivmoddi4+0x276>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	e799      	b.n	8000d52 <__udivmoddi4+0x1d2>
 8000e1e:	4630      	mov	r0, r6
 8000e20:	e7d4      	b.n	8000dcc <__udivmoddi4+0x24c>
 8000e22:	46d6      	mov	lr, sl
 8000e24:	e77f      	b.n	8000d26 <__udivmoddi4+0x1a6>
 8000e26:	4463      	add	r3, ip
 8000e28:	3802      	subs	r0, #2
 8000e2a:	e74d      	b.n	8000cc8 <__udivmoddi4+0x148>
 8000e2c:	4606      	mov	r6, r0
 8000e2e:	4623      	mov	r3, r4
 8000e30:	4608      	mov	r0, r1
 8000e32:	e70f      	b.n	8000c54 <__udivmoddi4+0xd4>
 8000e34:	3e02      	subs	r6, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	e730      	b.n	8000c9c <__udivmoddi4+0x11c>
 8000e3a:	bf00      	nop

08000e3c <__aeabi_idiv0>:
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop

08000e40 <wr8>:
float KalmanAnglePitch=0, 
KalmanUncertaintyAnglePitch=2*2;
float Kalman1DOutput[]={0,0};

// vi 0x68 co 7 bit ma ta dia chi can 8 bit nen ta dich 1 bit
static inline HAL_StatusTypeDef wr8(I2C_HandleTypeDef* hi2c, uint8_t reg, uint8_t val) {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af04      	add	r7, sp, #16
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	460b      	mov	r3, r1
 8000e4a:	70fb      	strb	r3, [r7, #3]
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	70bb      	strb	r3, [r7, #2]
  return HAL_I2C_Mem_Write(hi2c, 0x68<<1, reg, I2C_MEMADD_SIZE_8BIT, &val, 1, 100);
 8000e50:	78fb      	ldrb	r3, [r7, #3]
 8000e52:	b29a      	uxth	r2, r3
 8000e54:	2364      	movs	r3, #100	@ 0x64
 8000e56:	9302      	str	r3, [sp, #8]
 8000e58:	2301      	movs	r3, #1
 8000e5a:	9301      	str	r3, [sp, #4]
 8000e5c:	1cbb      	adds	r3, r7, #2
 8000e5e:	9300      	str	r3, [sp, #0]
 8000e60:	2301      	movs	r3, #1
 8000e62:	21d0      	movs	r1, #208	@ 0xd0
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f001 f97f 	bl	8002168 <HAL_I2C_Mem_Write>
 8000e6a:	4603      	mov	r3, r0
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <rd>:
static inline HAL_StatusTypeDef rd(I2C_HandleTypeDef* hi2c, uint8_t reg, uint8_t* buf, uint16_t len) {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b088      	sub	sp, #32
 8000e78:	af04      	add	r7, sp, #16
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	607a      	str	r2, [r7, #4]
 8000e7e:	461a      	mov	r2, r3
 8000e80:	460b      	mov	r3, r1
 8000e82:	72fb      	strb	r3, [r7, #11]
 8000e84:	4613      	mov	r3, r2
 8000e86:	813b      	strh	r3, [r7, #8]
  return HAL_I2C_Mem_Read(hi2c, 0x68<<1, reg, I2C_MEMADD_SIZE_8BIT, buf, len, 100);
 8000e88:	7afb      	ldrb	r3, [r7, #11]
 8000e8a:	b29a      	uxth	r2, r3
 8000e8c:	2364      	movs	r3, #100	@ 0x64
 8000e8e:	9302      	str	r3, [sp, #8]
 8000e90:	893b      	ldrh	r3, [r7, #8]
 8000e92:	9301      	str	r3, [sp, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	9300      	str	r3, [sp, #0]
 8000e98:	2301      	movs	r3, #1
 8000e9a:	21d0      	movs	r1, #208	@ 0xd0
 8000e9c:	68f8      	ldr	r0, [r7, #12]
 8000e9e:	f001 fa5d 	bl	800235c <HAL_I2C_Mem_Read>
 8000ea2:	4603      	mov	r3, r0
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3710      	adds	r7, #16
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	0000      	movs	r0, r0
	...

08000eb0 <kalman_1d>:

//kalman filter lay input la: gia tri truoc do, sai so truoc do, input(rate_gyro), gia tri measure (angle_accelerometer) 
void kalman_1d(float KalmanState, 
  float KalmanUncertainty, float KalmanInput, 
  float KalmanMeasurement) 
  {
 8000eb0:	b5b0      	push	{r4, r5, r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	ed87 0a03 	vstr	s0, [r7, #12]
 8000eba:	edc7 0a02 	vstr	s1, [r7, #8]
 8000ebe:	ed87 1a01 	vstr	s2, [r7, #4]
 8000ec2:	edc7 1a00 	vstr	s3, [r7]
    KalmanState=KalmanState+0.004*KalmanInput; //B1: du doan tho (raw) goc hien tai (angle(k) = angle(k-1) + dt*toc_do_goc )
 8000ec6:	68f8      	ldr	r0, [r7, #12]
 8000ec8:	f7ff faea 	bl	80004a0 <__aeabi_f2d>
 8000ecc:	4604      	mov	r4, r0
 8000ece:	460d      	mov	r5, r1
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f7ff fae5 	bl	80004a0 <__aeabi_f2d>
 8000ed6:	a32b      	add	r3, pc, #172	@ (adr r3, 8000f84 <kalman_1d+0xd4>)
 8000ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000edc:	f7ff fb38 	bl	8000550 <__aeabi_dmul>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	460b      	mov	r3, r1
 8000ee4:	4620      	mov	r0, r4
 8000ee6:	4629      	mov	r1, r5
 8000ee8:	f7ff f97c 	bl	80001e4 <__adddf3>
 8000eec:	4602      	mov	r2, r0
 8000eee:	460b      	mov	r3, r1
 8000ef0:	4610      	mov	r0, r2
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	f7ff fddc 	bl	8000ab0 <__aeabi_d2f>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	60fb      	str	r3, [r7, #12]
    KalmanUncertainty=KalmanUncertainty + 0.004*0.004 * 4 * 4; //B2 du doan tho (raw) sai so hien tai
 8000efc:	68b8      	ldr	r0, [r7, #8]
 8000efe:	f7ff facf 	bl	80004a0 <__aeabi_f2d>
 8000f02:	a322      	add	r3, pc, #136	@ (adr r3, 8000f8c <kalman_1d+0xdc>)
 8000f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f08:	f7ff f96c 	bl	80001e4 <__adddf3>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	460b      	mov	r3, r1
 8000f10:	4610      	mov	r0, r2
 8000f12:	4619      	mov	r1, r3
 8000f14:	f7ff fdcc 	bl	8000ab0 <__aeabi_d2f>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	60bb      	str	r3, [r7, #8]
    float KalmanGain=KalmanUncertainty * 1/(1*KalmanUncertainty + 3 * 3); //B3: tinh he so kalman gain
 8000f1c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f20:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 8000f24:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000f28:	edd7 6a02 	vldr	s13, [r7, #8]
 8000f2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f30:	edc7 7a05 	vstr	s15, [r7, #20]
    KalmanState=KalmanState+KalmanGain * (KalmanMeasurement-KalmanState); //B4: du doan toi uu goc hien tai (angle_kalman)
 8000f34:	ed97 7a00 	vldr	s14, [r7]
 8000f38:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f3c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f40:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f48:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f50:	edc7 7a03 	vstr	s15, [r7, #12]
    KalmanUncertainty=(1-KalmanGain) *  KalmanUncertainty; //B5: du doan toi uu sai so hien tai (saiSo_kalman)
 8000f54:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000f58:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f60:	ed97 7a02 	vldr	s14, [r7, #8]
 8000f64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f68:	edc7 7a02 	vstr	s15, [r7, #8]
    Kalman1DOutput[0]=KalmanState; //luu goc du doan_kalman hien tai
 8000f6c:	4a04      	ldr	r2, [pc, #16]	@ (8000f80 <kalman_1d+0xd0>)
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	6013      	str	r3, [r2, #0]
    Kalman1DOutput[1]=KalmanUncertainty; //luu sai so du doan_kalman hien tai
 8000f72:	4a03      	ldr	r2, [pc, #12]	@ (8000f80 <kalman_1d+0xd0>)
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	6053      	str	r3, [r2, #4]
 }
 8000f78:	bf00      	nop
 8000f7a:	3718      	adds	r7, #24
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bdb0      	pop	{r4, r5, r7, pc}
 8000f80:	20000174 	.word	0x20000174
 8000f84:	d2f1a9fc 	.word	0xd2f1a9fc
 8000f88:	3f70624d 	.word	0x3f70624d
 8000f8c:	a0b5ed8d 	.word	0xa0b5ed8d
 8000f90:	3f30c6f7 	.word	0x3f30c6f7
 8000f94:	00000000 	.word	0x00000000

08000f98 <gyro_signal>:
void gyro_signal(void){
 8000f98:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f9c:	b088      	sub	sp, #32
 8000f9e:	af00      	add	r7, sp, #0
  uint8_t a[6]; //xem xet bo thang a, dung b cho ca gyro voi acce
  // read register 0x43 -> 0x48 => 6 byte
  // save to b[6], vi data cua gyro 16bit
  //, ma chia ra 2 mang nen b[0] va b[1] la data day du cua rate_x, tuong tu y voi z
  // tuy nhien voi sensing scale factor 65.5/ do/s thi ta chia gia tri doc duoc cho 65.5 => toc do  
  if (rd(&hi2c1, 0x43, b, 6) == HAL_OK) {
 8000fa0:	f107 0208 	add.w	r2, r7, #8
 8000fa4:	2306      	movs	r3, #6
 8000fa6:	2143      	movs	r1, #67	@ 0x43
 8000fa8:	488f      	ldr	r0, [pc, #572]	@ (80011e8 <gyro_signal+0x250>)
 8000faa:	f7ff ff63 	bl	8000e74 <rd>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d13d      	bne.n	8001030 <gyro_signal+0x98>
    int16_t gx_raw = (int16_t)((b[0] << 8) | b[1]);
 8000fb4:	7a3b      	ldrb	r3, [r7, #8]
 8000fb6:	021b      	lsls	r3, r3, #8
 8000fb8:	b21a      	sxth	r2, r3
 8000fba:	7a7b      	ldrb	r3, [r7, #9]
 8000fbc:	b21b      	sxth	r3, r3
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	83fb      	strh	r3, [r7, #30]
    int16_t gy_raw = (int16_t)((b[2] << 8) | b[3]);
 8000fc2:	7abb      	ldrb	r3, [r7, #10]
 8000fc4:	021b      	lsls	r3, r3, #8
 8000fc6:	b21a      	sxth	r2, r3
 8000fc8:	7afb      	ldrb	r3, [r7, #11]
 8000fca:	b21b      	sxth	r3, r3
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	83bb      	strh	r3, [r7, #28]
    int16_t gz_raw = (int16_t)((b[4] << 8) | b[5]);
 8000fd0:	7b3b      	ldrb	r3, [r7, #12]
 8000fd2:	021b      	lsls	r3, r3, #8
 8000fd4:	b21a      	sxth	r2, r3
 8000fd6:	7b7b      	ldrb	r3, [r7, #13]
 8000fd8:	b21b      	sxth	r3, r3
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	837b      	strh	r3, [r7, #26]
    const float sens = 65.5f; // LSB per (deg/s) for FS_SEL=1
 8000fde:	4b83      	ldr	r3, [pc, #524]	@ (80011ec <gyro_signal+0x254>)
 8000fe0:	617b      	str	r3, [r7, #20]
    RateRoll  = gx_raw / sens;
 8000fe2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000fe6:	ee07 3a90 	vmov	s15, r3
 8000fea:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000fee:	ed97 7a05 	vldr	s14, [r7, #20]
 8000ff2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ff6:	4b7e      	ldr	r3, [pc, #504]	@ (80011f0 <gyro_signal+0x258>)
 8000ff8:	edc3 7a00 	vstr	s15, [r3]
    RatePitch = gy_raw / sens;
 8000ffc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001000:	ee07 3a90 	vmov	s15, r3
 8001004:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001008:	ed97 7a05 	vldr	s14, [r7, #20]
 800100c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001010:	4b78      	ldr	r3, [pc, #480]	@ (80011f4 <gyro_signal+0x25c>)
 8001012:	edc3 7a00 	vstr	s15, [r3]
    RateYaw   = gz_raw / sens;
 8001016:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800101a:	ee07 3a90 	vmov	s15, r3
 800101e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001022:	ed97 7a05 	vldr	s14, [r7, #20]
 8001026:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800102a:	4b73      	ldr	r3, [pc, #460]	@ (80011f8 <gyro_signal+0x260>)
 800102c:	edc3 7a00 	vstr	s15, [r3]
  }

  //doc accelerometer
  if (rd(&hi2c1, 0x3B, a, 6) == HAL_OK) {
 8001030:	463a      	mov	r2, r7
 8001032:	2306      	movs	r3, #6
 8001034:	213b      	movs	r1, #59	@ 0x3b
 8001036:	486c      	ldr	r0, [pc, #432]	@ (80011e8 <gyro_signal+0x250>)
 8001038:	f7ff ff1c 	bl	8000e74 <rd>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	f040 80c7 	bne.w	80011d2 <gyro_signal+0x23a>
    int16_t AccXLSB = (int16_t)((a[0] << 8) | a[1]);
 8001044:	783b      	ldrb	r3, [r7, #0]
 8001046:	021b      	lsls	r3, r3, #8
 8001048:	b21a      	sxth	r2, r3
 800104a:	787b      	ldrb	r3, [r7, #1]
 800104c:	b21b      	sxth	r3, r3
 800104e:	4313      	orrs	r3, r2
 8001050:	827b      	strh	r3, [r7, #18]
    int16_t AccYLSB = (int16_t)((a[2] << 8) | a[3]);
 8001052:	78bb      	ldrb	r3, [r7, #2]
 8001054:	021b      	lsls	r3, r3, #8
 8001056:	b21a      	sxth	r2, r3
 8001058:	78fb      	ldrb	r3, [r7, #3]
 800105a:	b21b      	sxth	r3, r3
 800105c:	4313      	orrs	r3, r2
 800105e:	823b      	strh	r3, [r7, #16]
    int16_t AccZLSB = (int16_t)((a[4] << 8) | a[5]);
 8001060:	793b      	ldrb	r3, [r7, #4]
 8001062:	021b      	lsls	r3, r3, #8
 8001064:	b21a      	sxth	r2, r3
 8001066:	797b      	ldrb	r3, [r7, #5]
 8001068:	b21b      	sxth	r3, r3
 800106a:	4313      	orrs	r3, r2
 800106c:	81fb      	strh	r3, [r7, #14]


	AccX=(float)AccXLSB/4096;
 800106e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001072:	ee07 3a90 	vmov	s15, r3
 8001076:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800107a:	eddf 6a60 	vldr	s13, [pc, #384]	@ 80011fc <gyro_signal+0x264>
 800107e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001082:	4b5f      	ldr	r3, [pc, #380]	@ (8001200 <gyro_signal+0x268>)
 8001084:	edc3 7a00 	vstr	s15, [r3]
	AccY=(float)AccYLSB/4096;
 8001088:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800108c:	ee07 3a90 	vmov	s15, r3
 8001090:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001094:	eddf 6a59 	vldr	s13, [pc, #356]	@ 80011fc <gyro_signal+0x264>
 8001098:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800109c:	4b59      	ldr	r3, [pc, #356]	@ (8001204 <gyro_signal+0x26c>)
 800109e:	edc3 7a00 	vstr	s15, [r3]
	AccZ=(float)AccZLSB/4096;
 80010a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010a6:	ee07 3a90 	vmov	s15, r3
 80010aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010ae:	eddf 6a53 	vldr	s13, [pc, #332]	@ 80011fc <gyro_signal+0x264>
 80010b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010b6:	4b54      	ldr	r3, [pc, #336]	@ (8001208 <gyro_signal+0x270>)
 80010b8:	edc3 7a00 	vstr	s15, [r3]
	AngleRoll=atan(AccY/sqrt(AccX*AccX+AccZ*AccZ))*1/(3.142/180);
 80010bc:	4b51      	ldr	r3, [pc, #324]	@ (8001204 <gyro_signal+0x26c>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff f9ed 	bl	80004a0 <__aeabi_f2d>
 80010c6:	4680      	mov	r8, r0
 80010c8:	4689      	mov	r9, r1
 80010ca:	4b4d      	ldr	r3, [pc, #308]	@ (8001200 <gyro_signal+0x268>)
 80010cc:	ed93 7a00 	vldr	s14, [r3]
 80010d0:	4b4b      	ldr	r3, [pc, #300]	@ (8001200 <gyro_signal+0x268>)
 80010d2:	edd3 7a00 	vldr	s15, [r3]
 80010d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010da:	4b4b      	ldr	r3, [pc, #300]	@ (8001208 <gyro_signal+0x270>)
 80010dc:	edd3 6a00 	vldr	s13, [r3]
 80010e0:	4b49      	ldr	r3, [pc, #292]	@ (8001208 <gyro_signal+0x270>)
 80010e2:	edd3 7a00 	vldr	s15, [r3]
 80010e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010ee:	ee17 0a90 	vmov	r0, s15
 80010f2:	f7ff f9d5 	bl	80004a0 <__aeabi_f2d>
 80010f6:	4602      	mov	r2, r0
 80010f8:	460b      	mov	r3, r1
 80010fa:	ec43 2b10 	vmov	d0, r2, r3
 80010fe:	f002 fe61 	bl	8003dc4 <sqrt>
 8001102:	ec53 2b10 	vmov	r2, r3, d0
 8001106:	4640      	mov	r0, r8
 8001108:	4649      	mov	r1, r9
 800110a:	f7ff fb4b 	bl	80007a4 <__aeabi_ddiv>
 800110e:	4602      	mov	r2, r0
 8001110:	460b      	mov	r3, r1
 8001112:	ec43 2b17 	vmov	d7, r2, r3
 8001116:	eeb0 0a47 	vmov.f32	s0, s14
 800111a:	eef0 0a67 	vmov.f32	s1, s15
 800111e:	f002 fe7f 	bl	8003e20 <atan>
 8001122:	ec51 0b10 	vmov	r0, r1, d0
 8001126:	a32e      	add	r3, pc, #184	@ (adr r3, 80011e0 <gyro_signal+0x248>)
 8001128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112c:	f7ff fb3a 	bl	80007a4 <__aeabi_ddiv>
 8001130:	4602      	mov	r2, r0
 8001132:	460b      	mov	r3, r1
 8001134:	4610      	mov	r0, r2
 8001136:	4619      	mov	r1, r3
 8001138:	f7ff fcba 	bl	8000ab0 <__aeabi_d2f>
 800113c:	4603      	mov	r3, r0
 800113e:	4a33      	ldr	r2, [pc, #204]	@ (800120c <gyro_signal+0x274>)
 8001140:	6013      	str	r3, [r2, #0]
	AnglePitch=-atan(AccX/sqrt(AccY*AccY+AccZ*AccZ))*1/(3.142/180);
 8001142:	4b2f      	ldr	r3, [pc, #188]	@ (8001200 <gyro_signal+0x268>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff f9aa 	bl	80004a0 <__aeabi_f2d>
 800114c:	4680      	mov	r8, r0
 800114e:	4689      	mov	r9, r1
 8001150:	4b2c      	ldr	r3, [pc, #176]	@ (8001204 <gyro_signal+0x26c>)
 8001152:	ed93 7a00 	vldr	s14, [r3]
 8001156:	4b2b      	ldr	r3, [pc, #172]	@ (8001204 <gyro_signal+0x26c>)
 8001158:	edd3 7a00 	vldr	s15, [r3]
 800115c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001160:	4b29      	ldr	r3, [pc, #164]	@ (8001208 <gyro_signal+0x270>)
 8001162:	edd3 6a00 	vldr	s13, [r3]
 8001166:	4b28      	ldr	r3, [pc, #160]	@ (8001208 <gyro_signal+0x270>)
 8001168:	edd3 7a00 	vldr	s15, [r3]
 800116c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001170:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001174:	ee17 0a90 	vmov	r0, s15
 8001178:	f7ff f992 	bl	80004a0 <__aeabi_f2d>
 800117c:	4602      	mov	r2, r0
 800117e:	460b      	mov	r3, r1
 8001180:	ec43 2b10 	vmov	d0, r2, r3
 8001184:	f002 fe1e 	bl	8003dc4 <sqrt>
 8001188:	ec53 2b10 	vmov	r2, r3, d0
 800118c:	4640      	mov	r0, r8
 800118e:	4649      	mov	r1, r9
 8001190:	f7ff fb08 	bl	80007a4 <__aeabi_ddiv>
 8001194:	4602      	mov	r2, r0
 8001196:	460b      	mov	r3, r1
 8001198:	ec43 2b17 	vmov	d7, r2, r3
 800119c:	eeb0 0a47 	vmov.f32	s0, s14
 80011a0:	eef0 0a67 	vmov.f32	s1, s15
 80011a4:	f002 fe3c 	bl	8003e20 <atan>
 80011a8:	ec53 2b10 	vmov	r2, r3, d0
 80011ac:	4614      	mov	r4, r2
 80011ae:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80011b2:	a30b      	add	r3, pc, #44	@ (adr r3, 80011e0 <gyro_signal+0x248>)
 80011b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b8:	4620      	mov	r0, r4
 80011ba:	4629      	mov	r1, r5
 80011bc:	f7ff faf2 	bl	80007a4 <__aeabi_ddiv>
 80011c0:	4602      	mov	r2, r0
 80011c2:	460b      	mov	r3, r1
 80011c4:	4610      	mov	r0, r2
 80011c6:	4619      	mov	r1, r3
 80011c8:	f7ff fc72 	bl	8000ab0 <__aeabi_d2f>
 80011cc:	4603      	mov	r3, r0
 80011ce:	4a10      	ldr	r2, [pc, #64]	@ (8001210 <gyro_signal+0x278>)
 80011d0:	6013      	str	r3, [r2, #0]
  }
} 
 80011d2:	bf00      	nop
 80011d4:	3720      	adds	r7, #32
 80011d6:	46bd      	mov	sp, r7
 80011d8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80011dc:	f3af 8000 	nop.w
 80011e0:	80fa7e3f 	.word	0x80fa7e3f
 80011e4:	3f91dfde 	.word	0x3f91dfde
 80011e8:	20000094 	.word	0x20000094
 80011ec:	42830000 	.word	0x42830000
 80011f0:	20000134 	.word	0x20000134
 80011f4:	20000138 	.word	0x20000138
 80011f8:	2000013c 	.word	0x2000013c
 80011fc:	45800000 	.word	0x45800000
 8001200:	20000150 	.word	0x20000150
 8001204:	20000154 	.word	0x20000154
 8001208:	20000158 	.word	0x20000158
 800120c:	2000015c 	.word	0x2000015c
 8001210:	20000160 	.word	0x20000160

08001214 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001218:	f000 fb62 	bl	80018e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800121c:	f000 f94e 	bl	80014bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001220:	f000 fa0c 	bl	800163c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001224:	f000 f9b2 	bl	800158c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001228:	f000 f9de 	bl	80015e8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(250);
 800122c:	20fa      	movs	r0, #250	@ 0xfa
 800122e:	f000 fbc9 	bl	80019c4 <HAL_Delay>
    (void)wr8(&hi2c1, 0x6B, 0x00);  // wake mpu 
 8001232:	2200      	movs	r2, #0
 8001234:	216b      	movs	r1, #107	@ 0x6b
 8001236:	488e      	ldr	r0, [pc, #568]	@ (8001470 <main+0x25c>)
 8001238:	f7ff fe02 	bl	8000e40 <wr8>
  (void)wr8(&hi2c1, 0x1A,0x05); // cho thanh ghi 0x1A = 0x05 => low pass filter ~10hz
 800123c:	2205      	movs	r2, #5
 800123e:	211a      	movs	r1, #26
 8001240:	488b      	ldr	r0, [pc, #556]	@ (8001470 <main+0x25c>)
 8001242:	f7ff fdfd 	bl	8000e40 <wr8>
  (void)wr8(&hi2c1, 0x1B,0x08); // config sensing scale factor la *65.5*/ do/s
 8001246:	2208      	movs	r2, #8
 8001248:	211b      	movs	r1, #27
 800124a:	4889      	ldr	r0, [pc, #548]	@ (8001470 <main+0x25c>)
 800124c:	f7ff fdf8 	bl	8000e40 <wr8>
  //sample rate cua cam bien binh thuong la 8khz, neu bat lowpassfilter thi doc la 1000hz
  (void)wr8(&hi2c1, 0x19, 0x03); // Set Sample Rate cua cam bien = 1kHz / (1 + 9) = 100Hz
 8001250:	2203      	movs	r2, #3
 8001252:	2119      	movs	r1, #25
 8001254:	4886      	ldr	r0, [pc, #536]	@ (8001470 <main+0x25c>)
 8001256:	f7ff fdf3 	bl	8000e40 <wr8>
  (void)wr8(&hi2c1, 0x1C, 0x10); // set full scale range cua accelerometer la +-8g
 800125a:	2210      	movs	r2, #16
 800125c:	211c      	movs	r1, #28
 800125e:	4884      	ldr	r0, [pc, #528]	@ (8001470 <main+0x25c>)
 8001260:	f7ff fdee 	bl	8000e40 <wr8>
  
  //calibrate gyro && accelerometer
  for (RateCalibrationNumber = 0;
 8001264:	4b83      	ldr	r3, [pc, #524]	@ (8001474 <main+0x260>)
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	e040      	b.n	80012ee <main+0xda>
	  RateCalibrationNumber < 2000;
	  RateCalibrationNumber++)
  {
	  gyro_signal();
 800126c:	f7ff fe94 	bl	8000f98 <gyro_signal>
	  RateCalibrationPitch += RatePitch;
 8001270:	4b81      	ldr	r3, [pc, #516]	@ (8001478 <main+0x264>)
 8001272:	ed93 7a00 	vldr	s14, [r3]
 8001276:	4b81      	ldr	r3, [pc, #516]	@ (800147c <main+0x268>)
 8001278:	edd3 7a00 	vldr	s15, [r3]
 800127c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001280:	4b7e      	ldr	r3, [pc, #504]	@ (800147c <main+0x268>)
 8001282:	edc3 7a00 	vstr	s15, [r3]
	  RateCalibrationRoll += RateRoll;
 8001286:	4b7e      	ldr	r3, [pc, #504]	@ (8001480 <main+0x26c>)
 8001288:	ed93 7a00 	vldr	s14, [r3]
 800128c:	4b7d      	ldr	r3, [pc, #500]	@ (8001484 <main+0x270>)
 800128e:	edd3 7a00 	vldr	s15, [r3]
 8001292:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001296:	4b7b      	ldr	r3, [pc, #492]	@ (8001484 <main+0x270>)
 8001298:	edc3 7a00 	vstr	s15, [r3]
	  RateCalibrationYaw += RateYaw;
 800129c:	4b7a      	ldr	r3, [pc, #488]	@ (8001488 <main+0x274>)
 800129e:	ed93 7a00 	vldr	s14, [r3]
 80012a2:	4b7a      	ldr	r3, [pc, #488]	@ (800148c <main+0x278>)
 80012a4:	edd3 7a00 	vldr	s15, [r3]
 80012a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ac:	4b77      	ldr	r3, [pc, #476]	@ (800148c <main+0x278>)
 80012ae:	edc3 7a00 	vstr	s15, [r3]

	  AngleCalibrationPitch += AnglePitch;
 80012b2:	4b77      	ldr	r3, [pc, #476]	@ (8001490 <main+0x27c>)
 80012b4:	ed93 7a00 	vldr	s14, [r3]
 80012b8:	4b76      	ldr	r3, [pc, #472]	@ (8001494 <main+0x280>)
 80012ba:	edd3 7a00 	vldr	s15, [r3]
 80012be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012c2:	4b73      	ldr	r3, [pc, #460]	@ (8001490 <main+0x27c>)
 80012c4:	edc3 7a00 	vstr	s15, [r3]
	  AngleCalibrationRoll += AngleRoll;
 80012c8:	4b73      	ldr	r3, [pc, #460]	@ (8001498 <main+0x284>)
 80012ca:	ed93 7a00 	vldr	s14, [r3]
 80012ce:	4b73      	ldr	r3, [pc, #460]	@ (800149c <main+0x288>)
 80012d0:	edd3 7a00 	vldr	s15, [r3]
 80012d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012d8:	4b6f      	ldr	r3, [pc, #444]	@ (8001498 <main+0x284>)
 80012da:	edc3 7a00 	vstr	s15, [r3]
	  HAL_Delay(1);
 80012de:	2001      	movs	r0, #1
 80012e0:	f000 fb70 	bl	80019c4 <HAL_Delay>
	  RateCalibrationNumber++)
 80012e4:	4b63      	ldr	r3, [pc, #396]	@ (8001474 <main+0x260>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	3301      	adds	r3, #1
 80012ea:	4a62      	ldr	r2, [pc, #392]	@ (8001474 <main+0x260>)
 80012ec:	6013      	str	r3, [r2, #0]
	  RateCalibrationNumber < 2000;
 80012ee:	4b61      	ldr	r3, [pc, #388]	@ (8001474 <main+0x260>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80012f6:	dbb9      	blt.n	800126c <main+0x58>
  }
	RateCalibrationPitch/=2000;
 80012f8:	4b60      	ldr	r3, [pc, #384]	@ (800147c <main+0x268>)
 80012fa:	ed93 7a00 	vldr	s14, [r3]
 80012fe:	eddf 6a68 	vldr	s13, [pc, #416]	@ 80014a0 <main+0x28c>
 8001302:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001306:	4b5d      	ldr	r3, [pc, #372]	@ (800147c <main+0x268>)
 8001308:	edc3 7a00 	vstr	s15, [r3]
	RateCalibrationRoll/=2000;
 800130c:	4b5d      	ldr	r3, [pc, #372]	@ (8001484 <main+0x270>)
 800130e:	ed93 7a00 	vldr	s14, [r3]
 8001312:	eddf 6a63 	vldr	s13, [pc, #396]	@ 80014a0 <main+0x28c>
 8001316:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800131a:	4b5a      	ldr	r3, [pc, #360]	@ (8001484 <main+0x270>)
 800131c:	edc3 7a00 	vstr	s15, [r3]
	RateCalibrationYaw/=2000;
 8001320:	4b5a      	ldr	r3, [pc, #360]	@ (800148c <main+0x278>)
 8001322:	ed93 7a00 	vldr	s14, [r3]
 8001326:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80014a0 <main+0x28c>
 800132a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800132e:	4b57      	ldr	r3, [pc, #348]	@ (800148c <main+0x278>)
 8001330:	edc3 7a00 	vstr	s15, [r3]

	AngleCalibrationPitch /= 2000;
 8001334:	4b56      	ldr	r3, [pc, #344]	@ (8001490 <main+0x27c>)
 8001336:	ed93 7a00 	vldr	s14, [r3]
 800133a:	eddf 6a59 	vldr	s13, [pc, #356]	@ 80014a0 <main+0x28c>
 800133e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001342:	4b53      	ldr	r3, [pc, #332]	@ (8001490 <main+0x27c>)
 8001344:	edc3 7a00 	vstr	s15, [r3]
	AngleCalibrationRoll /= 2000;
 8001348:	4b53      	ldr	r3, [pc, #332]	@ (8001498 <main+0x284>)
 800134a:	ed93 7a00 	vldr	s14, [r3]
 800134e:	eddf 6a54 	vldr	s13, [pc, #336]	@ 80014a0 <main+0x28c>
 8001352:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001356:	4b50      	ldr	r3, [pc, #320]	@ (8001498 <main+0x284>)
 8001358:	edc3 7a00 	vstr	s15, [r3]
	LoopTimer = HAL_GetTick();
 800135c:	f000 fb26 	bl	80019ac <HAL_GetTick>
 8001360:	4603      	mov	r3, r0
 8001362:	4a50      	ldr	r2, [pc, #320]	@ (80014a4 <main+0x290>)
 8001364:	6013      	str	r3, [r2, #0]
  while (1)
  {
    /* USER CODE END WHILE */ 

    /* USER CODE BEGIN 3 */
    gyro_signal();
 8001366:	f7ff fe17 	bl	8000f98 <gyro_signal>
    //calib gyro && accelerometer
    RatePitch -= RateCalibrationPitch;
 800136a:	4b43      	ldr	r3, [pc, #268]	@ (8001478 <main+0x264>)
 800136c:	ed93 7a00 	vldr	s14, [r3]
 8001370:	4b42      	ldr	r3, [pc, #264]	@ (800147c <main+0x268>)
 8001372:	edd3 7a00 	vldr	s15, [r3]
 8001376:	ee77 7a67 	vsub.f32	s15, s14, s15
 800137a:	4b3f      	ldr	r3, [pc, #252]	@ (8001478 <main+0x264>)
 800137c:	edc3 7a00 	vstr	s15, [r3]
    RateRoll -= RateCalibrationRoll;
 8001380:	4b3f      	ldr	r3, [pc, #252]	@ (8001480 <main+0x26c>)
 8001382:	ed93 7a00 	vldr	s14, [r3]
 8001386:	4b3f      	ldr	r3, [pc, #252]	@ (8001484 <main+0x270>)
 8001388:	edd3 7a00 	vldr	s15, [r3]
 800138c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001390:	4b3b      	ldr	r3, [pc, #236]	@ (8001480 <main+0x26c>)
 8001392:	edc3 7a00 	vstr	s15, [r3]
    RateYaw -= RateCalibrationYaw;
 8001396:	4b3c      	ldr	r3, [pc, #240]	@ (8001488 <main+0x274>)
 8001398:	ed93 7a00 	vldr	s14, [r3]
 800139c:	4b3b      	ldr	r3, [pc, #236]	@ (800148c <main+0x278>)
 800139e:	edd3 7a00 	vldr	s15, [r3]
 80013a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013a6:	4b38      	ldr	r3, [pc, #224]	@ (8001488 <main+0x274>)
 80013a8:	edc3 7a00 	vstr	s15, [r3]
    AnglePitch -= AngleCalibrationPitch;
 80013ac:	4b39      	ldr	r3, [pc, #228]	@ (8001494 <main+0x280>)
 80013ae:	ed93 7a00 	vldr	s14, [r3]
 80013b2:	4b37      	ldr	r3, [pc, #220]	@ (8001490 <main+0x27c>)
 80013b4:	edd3 7a00 	vldr	s15, [r3]
 80013b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013bc:	4b35      	ldr	r3, [pc, #212]	@ (8001494 <main+0x280>)
 80013be:	edc3 7a00 	vstr	s15, [r3]
	AngleRoll -= AngleCalibrationRoll;
 80013c2:	4b36      	ldr	r3, [pc, #216]	@ (800149c <main+0x288>)
 80013c4:	ed93 7a00 	vldr	s14, [r3]
 80013c8:	4b33      	ldr	r3, [pc, #204]	@ (8001498 <main+0x284>)
 80013ca:	edd3 7a00 	vldr	s15, [r3]
 80013ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013d2:	4b32      	ldr	r3, [pc, #200]	@ (800149c <main+0x288>)
 80013d4:	edc3 7a00 	vstr	s15, [r3]

    kalman_1d(KalmanAngleRoll,KalmanUncertaintyAngleRoll, RateRoll, AngleRoll);
 80013d8:	4b33      	ldr	r3, [pc, #204]	@ (80014a8 <main+0x294>)
 80013da:	edd3 7a00 	vldr	s15, [r3]
 80013de:	4b33      	ldr	r3, [pc, #204]	@ (80014ac <main+0x298>)
 80013e0:	ed93 7a00 	vldr	s14, [r3]
 80013e4:	4b26      	ldr	r3, [pc, #152]	@ (8001480 <main+0x26c>)
 80013e6:	edd3 6a00 	vldr	s13, [r3]
 80013ea:	4b2c      	ldr	r3, [pc, #176]	@ (800149c <main+0x288>)
 80013ec:	ed93 6a00 	vldr	s12, [r3]
 80013f0:	eef0 1a46 	vmov.f32	s3, s12
 80013f4:	eeb0 1a66 	vmov.f32	s2, s13
 80013f8:	eef0 0a47 	vmov.f32	s1, s14
 80013fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001400:	f7ff fd56 	bl	8000eb0 <kalman_1d>
    KalmanAngleRoll=Kalman1DOutput[0];
 8001404:	4b2a      	ldr	r3, [pc, #168]	@ (80014b0 <main+0x29c>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a27      	ldr	r2, [pc, #156]	@ (80014a8 <main+0x294>)
 800140a:	6013      	str	r3, [r2, #0]
    KalmanUncertaintyAngleRoll=Kalman1DOutput[1];
 800140c:	4b28      	ldr	r3, [pc, #160]	@ (80014b0 <main+0x29c>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	4a26      	ldr	r2, [pc, #152]	@ (80014ac <main+0x298>)
 8001412:	6013      	str	r3, [r2, #0]
    kalman_1d(KalmanAnglePitch,KalmanUncertaintyAnglePitch, RatePitch, AnglePitch);
 8001414:	4b27      	ldr	r3, [pc, #156]	@ (80014b4 <main+0x2a0>)
 8001416:	edd3 7a00 	vldr	s15, [r3]
 800141a:	4b27      	ldr	r3, [pc, #156]	@ (80014b8 <main+0x2a4>)
 800141c:	ed93 7a00 	vldr	s14, [r3]
 8001420:	4b15      	ldr	r3, [pc, #84]	@ (8001478 <main+0x264>)
 8001422:	edd3 6a00 	vldr	s13, [r3]
 8001426:	4b1b      	ldr	r3, [pc, #108]	@ (8001494 <main+0x280>)
 8001428:	ed93 6a00 	vldr	s12, [r3]
 800142c:	eef0 1a46 	vmov.f32	s3, s12
 8001430:	eeb0 1a66 	vmov.f32	s2, s13
 8001434:	eef0 0a47 	vmov.f32	s1, s14
 8001438:	eeb0 0a67 	vmov.f32	s0, s15
 800143c:	f7ff fd38 	bl	8000eb0 <kalman_1d>
    KalmanAnglePitch=Kalman1DOutput[0];
 8001440:	4b1b      	ldr	r3, [pc, #108]	@ (80014b0 <main+0x29c>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a1b      	ldr	r2, [pc, #108]	@ (80014b4 <main+0x2a0>)
 8001446:	6013      	str	r3, [r2, #0]
    KalmanUncertaintyAnglePitch=Kalman1DOutput[1];
 8001448:	4b19      	ldr	r3, [pc, #100]	@ (80014b0 <main+0x29c>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	4a1a      	ldr	r2, [pc, #104]	@ (80014b8 <main+0x2a4>)
 800144e:	6013      	str	r3, [r2, #0]
    while (HAL_GetTick() - LoopTimer <4);
 8001450:	bf00      	nop
 8001452:	f000 faab 	bl	80019ac <HAL_GetTick>
 8001456:	4602      	mov	r2, r0
 8001458:	4b12      	ldr	r3, [pc, #72]	@ (80014a4 <main+0x290>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	2b03      	cmp	r3, #3
 8001460:	d9f7      	bls.n	8001452 <main+0x23e>
    LoopTimer = HAL_GetTick();
 8001462:	f000 faa3 	bl	80019ac <HAL_GetTick>
 8001466:	4603      	mov	r3, r0
 8001468:	4a0e      	ldr	r2, [pc, #56]	@ (80014a4 <main+0x290>)
 800146a:	6013      	str	r3, [r2, #0]
    gyro_signal();
 800146c:	e77b      	b.n	8001366 <main+0x152>
 800146e:	bf00      	nop
 8001470:	20000094 	.word	0x20000094
 8001474:	2000014c 	.word	0x2000014c
 8001478:	20000138 	.word	0x20000138
 800147c:	20000144 	.word	0x20000144
 8001480:	20000134 	.word	0x20000134
 8001484:	20000140 	.word	0x20000140
 8001488:	2000013c 	.word	0x2000013c
 800148c:	20000148 	.word	0x20000148
 8001490:	20000168 	.word	0x20000168
 8001494:	20000160 	.word	0x20000160
 8001498:	20000164 	.word	0x20000164
 800149c:	2000015c 	.word	0x2000015c
 80014a0:	44fa0000 	.word	0x44fa0000
 80014a4:	20000130 	.word	0x20000130
 80014a8:	2000016c 	.word	0x2000016c
 80014ac:	20000000 	.word	0x20000000
 80014b0:	20000174 	.word	0x20000174
 80014b4:	20000170 	.word	0x20000170
 80014b8:	20000004 	.word	0x20000004

080014bc <SystemClock_Config>:
/**c
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b094      	sub	sp, #80	@ 0x50
 80014c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014c2:	f107 0320 	add.w	r3, r7, #32
 80014c6:	2230      	movs	r2, #48	@ 0x30
 80014c8:	2100      	movs	r1, #0
 80014ca:	4618      	mov	r0, r3
 80014cc:	f002 fc48 	bl	8003d60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014d0:	f107 030c 	add.w	r3, r7, #12
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014e0:	2300      	movs	r3, #0
 80014e2:	60bb      	str	r3, [r7, #8]
 80014e4:	4b27      	ldr	r3, [pc, #156]	@ (8001584 <SystemClock_Config+0xc8>)
 80014e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e8:	4a26      	ldr	r2, [pc, #152]	@ (8001584 <SystemClock_Config+0xc8>)
 80014ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80014f0:	4b24      	ldr	r3, [pc, #144]	@ (8001584 <SystemClock_Config+0xc8>)
 80014f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014f8:	60bb      	str	r3, [r7, #8]
 80014fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014fc:	2300      	movs	r3, #0
 80014fe:	607b      	str	r3, [r7, #4]
 8001500:	4b21      	ldr	r3, [pc, #132]	@ (8001588 <SystemClock_Config+0xcc>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a20      	ldr	r2, [pc, #128]	@ (8001588 <SystemClock_Config+0xcc>)
 8001506:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800150a:	6013      	str	r3, [r2, #0]
 800150c:	4b1e      	ldr	r3, [pc, #120]	@ (8001588 <SystemClock_Config+0xcc>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001514:	607b      	str	r3, [r7, #4]
 8001516:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001518:	2302      	movs	r3, #2
 800151a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800151c:	2301      	movs	r3, #1
 800151e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001520:	2310      	movs	r3, #16
 8001522:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001524:	2302      	movs	r3, #2
 8001526:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001528:	2300      	movs	r3, #0
 800152a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800152c:	2308      	movs	r3, #8
 800152e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001530:	2364      	movs	r3, #100	@ 0x64
 8001532:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001534:	2302      	movs	r3, #2
 8001536:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001538:	2304      	movs	r3, #4
 800153a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800153c:	f107 0320 	add.w	r3, r7, #32
 8001540:	4618      	mov	r0, r3
 8001542:	f001 fcf1 	bl	8002f28 <HAL_RCC_OscConfig>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800154c:	f000 f89e 	bl	800168c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001550:	230f      	movs	r3, #15
 8001552:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001554:	2302      	movs	r3, #2
 8001556:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001558:	2300      	movs	r3, #0
 800155a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800155c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001560:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001562:	2300      	movs	r3, #0
 8001564:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001566:	f107 030c 	add.w	r3, r7, #12
 800156a:	2103      	movs	r1, #3
 800156c:	4618      	mov	r0, r3
 800156e:	f001 ff53 	bl	8003418 <HAL_RCC_ClockConfig>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001578:	f000 f888 	bl	800168c <Error_Handler>
  }
}
 800157c:	bf00      	nop
 800157e:	3750      	adds	r7, #80	@ 0x50
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40023800 	.word	0x40023800
 8001588:	40007000 	.word	0x40007000

0800158c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001590:	4b12      	ldr	r3, [pc, #72]	@ (80015dc <MX_I2C1_Init+0x50>)
 8001592:	4a13      	ldr	r2, [pc, #76]	@ (80015e0 <MX_I2C1_Init+0x54>)
 8001594:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001596:	4b11      	ldr	r3, [pc, #68]	@ (80015dc <MX_I2C1_Init+0x50>)
 8001598:	4a12      	ldr	r2, [pc, #72]	@ (80015e4 <MX_I2C1_Init+0x58>)
 800159a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800159c:	4b0f      	ldr	r3, [pc, #60]	@ (80015dc <MX_I2C1_Init+0x50>)
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015a2:	4b0e      	ldr	r3, [pc, #56]	@ (80015dc <MX_I2C1_Init+0x50>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015a8:	4b0c      	ldr	r3, [pc, #48]	@ (80015dc <MX_I2C1_Init+0x50>)
 80015aa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015b0:	4b0a      	ldr	r3, [pc, #40]	@ (80015dc <MX_I2C1_Init+0x50>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015b6:	4b09      	ldr	r3, [pc, #36]	@ (80015dc <MX_I2C1_Init+0x50>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015bc:	4b07      	ldr	r3, [pc, #28]	@ (80015dc <MX_I2C1_Init+0x50>)
 80015be:	2200      	movs	r2, #0
 80015c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015c2:	4b06      	ldr	r3, [pc, #24]	@ (80015dc <MX_I2C1_Init+0x50>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015c8:	4804      	ldr	r0, [pc, #16]	@ (80015dc <MX_I2C1_Init+0x50>)
 80015ca:	f000 fc89 	bl	8001ee0 <HAL_I2C_Init>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015d4:	f000 f85a 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015d8:	bf00      	nop
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000094 	.word	0x20000094
 80015e0:	40005400 	.word	0x40005400
 80015e4:	00061a80 	.word	0x00061a80

080015e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015ec:	4b11      	ldr	r3, [pc, #68]	@ (8001634 <MX_USART1_UART_Init+0x4c>)
 80015ee:	4a12      	ldr	r2, [pc, #72]	@ (8001638 <MX_USART1_UART_Init+0x50>)
 80015f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015f2:	4b10      	ldr	r3, [pc, #64]	@ (8001634 <MX_USART1_UART_Init+0x4c>)
 80015f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001634 <MX_USART1_UART_Init+0x4c>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001600:	4b0c      	ldr	r3, [pc, #48]	@ (8001634 <MX_USART1_UART_Init+0x4c>)
 8001602:	2200      	movs	r2, #0
 8001604:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001606:	4b0b      	ldr	r3, [pc, #44]	@ (8001634 <MX_USART1_UART_Init+0x4c>)
 8001608:	2200      	movs	r2, #0
 800160a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800160c:	4b09      	ldr	r3, [pc, #36]	@ (8001634 <MX_USART1_UART_Init+0x4c>)
 800160e:	220c      	movs	r2, #12
 8001610:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001612:	4b08      	ldr	r3, [pc, #32]	@ (8001634 <MX_USART1_UART_Init+0x4c>)
 8001614:	2200      	movs	r2, #0
 8001616:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001618:	4b06      	ldr	r3, [pc, #24]	@ (8001634 <MX_USART1_UART_Init+0x4c>)
 800161a:	2200      	movs	r2, #0
 800161c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800161e:	4805      	ldr	r0, [pc, #20]	@ (8001634 <MX_USART1_UART_Init+0x4c>)
 8001620:	f002 f8da 	bl	80037d8 <HAL_UART_Init>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800162a:	f000 f82f 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	200000e8 	.word	0x200000e8
 8001638:	40011000 	.word	0x40011000

0800163c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	607b      	str	r3, [r7, #4]
 8001646:	4b10      	ldr	r3, [pc, #64]	@ (8001688 <MX_GPIO_Init+0x4c>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164a:	4a0f      	ldr	r2, [pc, #60]	@ (8001688 <MX_GPIO_Init+0x4c>)
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	6313      	str	r3, [r2, #48]	@ 0x30
 8001652:	4b0d      	ldr	r3, [pc, #52]	@ (8001688 <MX_GPIO_Init+0x4c>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	607b      	str	r3, [r7, #4]
 800165c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	603b      	str	r3, [r7, #0]
 8001662:	4b09      	ldr	r3, [pc, #36]	@ (8001688 <MX_GPIO_Init+0x4c>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001666:	4a08      	ldr	r2, [pc, #32]	@ (8001688 <MX_GPIO_Init+0x4c>)
 8001668:	f043 0302 	orr.w	r3, r3, #2
 800166c:	6313      	str	r3, [r2, #48]	@ 0x30
 800166e:	4b06      	ldr	r3, [pc, #24]	@ (8001688 <MX_GPIO_Init+0x4c>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	603b      	str	r3, [r7, #0]
 8001678:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800167a:	bf00      	nop
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	40023800 	.word	0x40023800

0800168c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001690:	b672      	cpsid	i
}
 8001692:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001694:	bf00      	nop
 8001696:	e7fd      	b.n	8001694 <Error_Handler+0x8>

08001698 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	607b      	str	r3, [r7, #4]
 80016a2:	4b10      	ldr	r3, [pc, #64]	@ (80016e4 <HAL_MspInit+0x4c>)
 80016a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016a6:	4a0f      	ldr	r2, [pc, #60]	@ (80016e4 <HAL_MspInit+0x4c>)
 80016a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80016ae:	4b0d      	ldr	r3, [pc, #52]	@ (80016e4 <HAL_MspInit+0x4c>)
 80016b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016b6:	607b      	str	r3, [r7, #4]
 80016b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	603b      	str	r3, [r7, #0]
 80016be:	4b09      	ldr	r3, [pc, #36]	@ (80016e4 <HAL_MspInit+0x4c>)
 80016c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c2:	4a08      	ldr	r2, [pc, #32]	@ (80016e4 <HAL_MspInit+0x4c>)
 80016c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ca:	4b06      	ldr	r3, [pc, #24]	@ (80016e4 <HAL_MspInit+0x4c>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016d2:	603b      	str	r3, [r7, #0]
 80016d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016d6:	bf00      	nop
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	40023800 	.word	0x40023800

080016e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b08a      	sub	sp, #40	@ 0x28
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f0:	f107 0314 	add.w	r3, r7, #20
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	60da      	str	r2, [r3, #12]
 80016fe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a19      	ldr	r2, [pc, #100]	@ (800176c <HAL_I2C_MspInit+0x84>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d12b      	bne.n	8001762 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	613b      	str	r3, [r7, #16]
 800170e:	4b18      	ldr	r3, [pc, #96]	@ (8001770 <HAL_I2C_MspInit+0x88>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001712:	4a17      	ldr	r2, [pc, #92]	@ (8001770 <HAL_I2C_MspInit+0x88>)
 8001714:	f043 0302 	orr.w	r3, r3, #2
 8001718:	6313      	str	r3, [r2, #48]	@ 0x30
 800171a:	4b15      	ldr	r3, [pc, #84]	@ (8001770 <HAL_I2C_MspInit+0x88>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	613b      	str	r3, [r7, #16]
 8001724:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001726:	23c0      	movs	r3, #192	@ 0xc0
 8001728:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800172a:	2312      	movs	r3, #18
 800172c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172e:	2300      	movs	r3, #0
 8001730:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001732:	2303      	movs	r3, #3
 8001734:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001736:	2304      	movs	r3, #4
 8001738:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800173a:	f107 0314 	add.w	r3, r7, #20
 800173e:	4619      	mov	r1, r3
 8001740:	480c      	ldr	r0, [pc, #48]	@ (8001774 <HAL_I2C_MspInit+0x8c>)
 8001742:	f000 fa49 	bl	8001bd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	4b09      	ldr	r3, [pc, #36]	@ (8001770 <HAL_I2C_MspInit+0x88>)
 800174c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174e:	4a08      	ldr	r2, [pc, #32]	@ (8001770 <HAL_I2C_MspInit+0x88>)
 8001750:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001754:	6413      	str	r3, [r2, #64]	@ 0x40
 8001756:	4b06      	ldr	r3, [pc, #24]	@ (8001770 <HAL_I2C_MspInit+0x88>)
 8001758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001762:	bf00      	nop
 8001764:	3728      	adds	r7, #40	@ 0x28
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40005400 	.word	0x40005400
 8001770:	40023800 	.word	0x40023800
 8001774:	40020400 	.word	0x40020400

08001778 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b08a      	sub	sp, #40	@ 0x28
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001780:	f107 0314 	add.w	r3, r7, #20
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	60da      	str	r2, [r3, #12]
 800178e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a19      	ldr	r2, [pc, #100]	@ (80017fc <HAL_UART_MspInit+0x84>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d12c      	bne.n	80017f4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	613b      	str	r3, [r7, #16]
 800179e:	4b18      	ldr	r3, [pc, #96]	@ (8001800 <HAL_UART_MspInit+0x88>)
 80017a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017a2:	4a17      	ldr	r2, [pc, #92]	@ (8001800 <HAL_UART_MspInit+0x88>)
 80017a4:	f043 0310 	orr.w	r3, r3, #16
 80017a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80017aa:	4b15      	ldr	r3, [pc, #84]	@ (8001800 <HAL_UART_MspInit+0x88>)
 80017ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ae:	f003 0310 	and.w	r3, r3, #16
 80017b2:	613b      	str	r3, [r7, #16]
 80017b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	4b11      	ldr	r3, [pc, #68]	@ (8001800 <HAL_UART_MspInit+0x88>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017be:	4a10      	ldr	r2, [pc, #64]	@ (8001800 <HAL_UART_MspInit+0x88>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001800 <HAL_UART_MspInit+0x88>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80017d2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80017d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d8:	2302      	movs	r3, #2
 80017da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e0:	2303      	movs	r3, #3
 80017e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017e4:	2307      	movs	r3, #7
 80017e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e8:	f107 0314 	add.w	r3, r7, #20
 80017ec:	4619      	mov	r1, r3
 80017ee:	4805      	ldr	r0, [pc, #20]	@ (8001804 <HAL_UART_MspInit+0x8c>)
 80017f0:	f000 f9f2 	bl	8001bd8 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80017f4:	bf00      	nop
 80017f6:	3728      	adds	r7, #40	@ 0x28
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40011000 	.word	0x40011000
 8001800:	40023800 	.word	0x40023800
 8001804:	40020000 	.word	0x40020000

08001808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800180c:	bf00      	nop
 800180e:	e7fd      	b.n	800180c <NMI_Handler+0x4>

08001810 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001814:	bf00      	nop
 8001816:	e7fd      	b.n	8001814 <HardFault_Handler+0x4>

08001818 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800181c:	bf00      	nop
 800181e:	e7fd      	b.n	800181c <MemManage_Handler+0x4>

08001820 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001824:	bf00      	nop
 8001826:	e7fd      	b.n	8001824 <BusFault_Handler+0x4>

08001828 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800182c:	bf00      	nop
 800182e:	e7fd      	b.n	800182c <UsageFault_Handler+0x4>

08001830 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr

0800183e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800183e:	b480      	push	{r7}
 8001840:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001850:	bf00      	nop
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr

0800185a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800185e:	f000 f891 	bl	8001984 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
	...

08001868 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800186c:	4b06      	ldr	r3, [pc, #24]	@ (8001888 <SystemInit+0x20>)
 800186e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001872:	4a05      	ldr	r2, [pc, #20]	@ (8001888 <SystemInit+0x20>)
 8001874:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001878:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	e000ed00 	.word	0xe000ed00

0800188c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800188c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018c4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001890:	f7ff ffea 	bl	8001868 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001894:	480c      	ldr	r0, [pc, #48]	@ (80018c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001896:	490d      	ldr	r1, [pc, #52]	@ (80018cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001898:	4a0d      	ldr	r2, [pc, #52]	@ (80018d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800189a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800189c:	e002      	b.n	80018a4 <LoopCopyDataInit>

0800189e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800189e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018a2:	3304      	adds	r3, #4

080018a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018a8:	d3f9      	bcc.n	800189e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018aa:	4a0a      	ldr	r2, [pc, #40]	@ (80018d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018ac:	4c0a      	ldr	r4, [pc, #40]	@ (80018d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018b0:	e001      	b.n	80018b6 <LoopFillZerobss>

080018b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018b4:	3204      	adds	r2, #4

080018b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018b8:	d3fb      	bcc.n	80018b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018ba:	f002 fa5f 	bl	8003d7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018be:	f7ff fca9 	bl	8001214 <main>
  bx  lr    
 80018c2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80018c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018cc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80018d0:	08004398 	.word	0x08004398
  ldr r2, =_sbss
 80018d4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80018d8:	200002b8 	.word	0x200002b8

080018dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018dc:	e7fe      	b.n	80018dc <ADC_IRQHandler>
	...

080018e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001920 <HAL_Init+0x40>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001920 <HAL_Init+0x40>)
 80018ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001920 <HAL_Init+0x40>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a0a      	ldr	r2, [pc, #40]	@ (8001920 <HAL_Init+0x40>)
 80018f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018fc:	4b08      	ldr	r3, [pc, #32]	@ (8001920 <HAL_Init+0x40>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a07      	ldr	r2, [pc, #28]	@ (8001920 <HAL_Init+0x40>)
 8001902:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001906:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001908:	2003      	movs	r0, #3
 800190a:	f000 f931 	bl	8001b70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800190e:	200f      	movs	r0, #15
 8001910:	f000 f808 	bl	8001924 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001914:	f7ff fec0 	bl	8001698 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40023c00 	.word	0x40023c00

08001924 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800192c:	4b12      	ldr	r3, [pc, #72]	@ (8001978 <HAL_InitTick+0x54>)
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	4b12      	ldr	r3, [pc, #72]	@ (800197c <HAL_InitTick+0x58>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	4619      	mov	r1, r3
 8001936:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800193a:	fbb3 f3f1 	udiv	r3, r3, r1
 800193e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001942:	4618      	mov	r0, r3
 8001944:	f000 f93b 	bl	8001bbe <HAL_SYSTICK_Config>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e00e      	b.n	8001970 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2b0f      	cmp	r3, #15
 8001956:	d80a      	bhi.n	800196e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001958:	2200      	movs	r2, #0
 800195a:	6879      	ldr	r1, [r7, #4]
 800195c:	f04f 30ff 	mov.w	r0, #4294967295
 8001960:	f000 f911 	bl	8001b86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001964:	4a06      	ldr	r2, [pc, #24]	@ (8001980 <HAL_InitTick+0x5c>)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800196a:	2300      	movs	r3, #0
 800196c:	e000      	b.n	8001970 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
}
 8001970:	4618      	mov	r0, r3
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	20000008 	.word	0x20000008
 800197c:	20000010 	.word	0x20000010
 8001980:	2000000c 	.word	0x2000000c

08001984 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001988:	4b06      	ldr	r3, [pc, #24]	@ (80019a4 <HAL_IncTick+0x20>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	461a      	mov	r2, r3
 800198e:	4b06      	ldr	r3, [pc, #24]	@ (80019a8 <HAL_IncTick+0x24>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4413      	add	r3, r2
 8001994:	4a04      	ldr	r2, [pc, #16]	@ (80019a8 <HAL_IncTick+0x24>)
 8001996:	6013      	str	r3, [r2, #0]
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	20000010 	.word	0x20000010
 80019a8:	2000017c 	.word	0x2000017c

080019ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  return uwTick;
 80019b0:	4b03      	ldr	r3, [pc, #12]	@ (80019c0 <HAL_GetTick+0x14>)
 80019b2:	681b      	ldr	r3, [r3, #0]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	2000017c 	.word	0x2000017c

080019c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019cc:	f7ff ffee 	bl	80019ac <HAL_GetTick>
 80019d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019dc:	d005      	beq.n	80019ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019de:	4b0a      	ldr	r3, [pc, #40]	@ (8001a08 <HAL_Delay+0x44>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	461a      	mov	r2, r3
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	4413      	add	r3, r2
 80019e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019ea:	bf00      	nop
 80019ec:	f7ff ffde 	bl	80019ac <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	68fa      	ldr	r2, [r7, #12]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d8f7      	bhi.n	80019ec <HAL_Delay+0x28>
  {
  }
}
 80019fc:	bf00      	nop
 80019fe:	bf00      	nop
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	20000010 	.word	0x20000010

08001a0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f003 0307 	and.w	r3, r3, #7
 8001a1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a50 <__NVIC_SetPriorityGrouping+0x44>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a22:	68ba      	ldr	r2, [r7, #8]
 8001a24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a28:	4013      	ands	r3, r2
 8001a2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a3e:	4a04      	ldr	r2, [pc, #16]	@ (8001a50 <__NVIC_SetPriorityGrouping+0x44>)
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	60d3      	str	r3, [r2, #12]
}
 8001a44:	bf00      	nop
 8001a46:	3714      	adds	r7, #20
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	e000ed00 	.word	0xe000ed00

08001a54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a58:	4b04      	ldr	r3, [pc, #16]	@ (8001a6c <__NVIC_GetPriorityGrouping+0x18>)
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	0a1b      	lsrs	r3, r3, #8
 8001a5e:	f003 0307 	and.w	r3, r3, #7
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	e000ed00 	.word	0xe000ed00

08001a70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	6039      	str	r1, [r7, #0]
 8001a7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	db0a      	blt.n	8001a9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	b2da      	uxtb	r2, r3
 8001a88:	490c      	ldr	r1, [pc, #48]	@ (8001abc <__NVIC_SetPriority+0x4c>)
 8001a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8e:	0112      	lsls	r2, r2, #4
 8001a90:	b2d2      	uxtb	r2, r2
 8001a92:	440b      	add	r3, r1
 8001a94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a98:	e00a      	b.n	8001ab0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	4908      	ldr	r1, [pc, #32]	@ (8001ac0 <__NVIC_SetPriority+0x50>)
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
 8001aa2:	f003 030f 	and.w	r3, r3, #15
 8001aa6:	3b04      	subs	r3, #4
 8001aa8:	0112      	lsls	r2, r2, #4
 8001aaa:	b2d2      	uxtb	r2, r2
 8001aac:	440b      	add	r3, r1
 8001aae:	761a      	strb	r2, [r3, #24]
}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	e000e100 	.word	0xe000e100
 8001ac0:	e000ed00 	.word	0xe000ed00

08001ac4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b089      	sub	sp, #36	@ 0x24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	f1c3 0307 	rsb	r3, r3, #7
 8001ade:	2b04      	cmp	r3, #4
 8001ae0:	bf28      	it	cs
 8001ae2:	2304      	movcs	r3, #4
 8001ae4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	3304      	adds	r3, #4
 8001aea:	2b06      	cmp	r3, #6
 8001aec:	d902      	bls.n	8001af4 <NVIC_EncodePriority+0x30>
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	3b03      	subs	r3, #3
 8001af2:	e000      	b.n	8001af6 <NVIC_EncodePriority+0x32>
 8001af4:	2300      	movs	r3, #0
 8001af6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af8:	f04f 32ff 	mov.w	r2, #4294967295
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	43da      	mvns	r2, r3
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	401a      	ands	r2, r3
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	fa01 f303 	lsl.w	r3, r1, r3
 8001b16:	43d9      	mvns	r1, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b1c:	4313      	orrs	r3, r2
         );
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3724      	adds	r7, #36	@ 0x24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
	...

08001b2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3b01      	subs	r3, #1
 8001b38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b3c:	d301      	bcc.n	8001b42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e00f      	b.n	8001b62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b42:	4a0a      	ldr	r2, [pc, #40]	@ (8001b6c <SysTick_Config+0x40>)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3b01      	subs	r3, #1
 8001b48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b4a:	210f      	movs	r1, #15
 8001b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b50:	f7ff ff8e 	bl	8001a70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b54:	4b05      	ldr	r3, [pc, #20]	@ (8001b6c <SysTick_Config+0x40>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b5a:	4b04      	ldr	r3, [pc, #16]	@ (8001b6c <SysTick_Config+0x40>)
 8001b5c:	2207      	movs	r2, #7
 8001b5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	e000e010 	.word	0xe000e010

08001b70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f7ff ff47 	bl	8001a0c <__NVIC_SetPriorityGrouping>
}
 8001b7e:	bf00      	nop
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b086      	sub	sp, #24
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	60b9      	str	r1, [r7, #8]
 8001b90:	607a      	str	r2, [r7, #4]
 8001b92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b94:	2300      	movs	r3, #0
 8001b96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b98:	f7ff ff5c 	bl	8001a54 <__NVIC_GetPriorityGrouping>
 8001b9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	68b9      	ldr	r1, [r7, #8]
 8001ba2:	6978      	ldr	r0, [r7, #20]
 8001ba4:	f7ff ff8e 	bl	8001ac4 <NVIC_EncodePriority>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bae:	4611      	mov	r1, r2
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff ff5d 	bl	8001a70 <__NVIC_SetPriority>
}
 8001bb6:	bf00      	nop
 8001bb8:	3718      	adds	r7, #24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b082      	sub	sp, #8
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7ff ffb0 	bl	8001b2c <SysTick_Config>
 8001bcc:	4603      	mov	r3, r0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
	...

08001bd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b089      	sub	sp, #36	@ 0x24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001be2:	2300      	movs	r3, #0
 8001be4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bea:	2300      	movs	r3, #0
 8001bec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bee:	2300      	movs	r3, #0
 8001bf0:	61fb      	str	r3, [r7, #28]
 8001bf2:	e159      	b.n	8001ea8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	697a      	ldr	r2, [r7, #20]
 8001c04:	4013      	ands	r3, r2
 8001c06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	f040 8148 	bne.w	8001ea2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f003 0303 	and.w	r3, r3, #3
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d005      	beq.n	8001c2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d130      	bne.n	8001c8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	2203      	movs	r2, #3
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	68da      	ldr	r2, [r3, #12]
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c60:	2201      	movs	r2, #1
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	091b      	lsrs	r3, r3, #4
 8001c76:	f003 0201 	and.w	r2, r3, #1
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f003 0303 	and.w	r3, r3, #3
 8001c94:	2b03      	cmp	r3, #3
 8001c96:	d017      	beq.n	8001cc8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	2203      	movs	r2, #3
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	4013      	ands	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	689a      	ldr	r2, [r3, #8]
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f003 0303 	and.w	r3, r3, #3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d123      	bne.n	8001d1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	08da      	lsrs	r2, r3, #3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	3208      	adds	r2, #8
 8001cdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	f003 0307 	and.w	r3, r3, #7
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	220f      	movs	r2, #15
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	691a      	ldr	r2, [r3, #16]
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	08da      	lsrs	r2, r3, #3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	3208      	adds	r2, #8
 8001d16:	69b9      	ldr	r1, [r7, #24]
 8001d18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	2203      	movs	r2, #3
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4013      	ands	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f003 0203 	and.w	r2, r3, #3
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	f000 80a2 	beq.w	8001ea2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60fb      	str	r3, [r7, #12]
 8001d62:	4b57      	ldr	r3, [pc, #348]	@ (8001ec0 <HAL_GPIO_Init+0x2e8>)
 8001d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d66:	4a56      	ldr	r2, [pc, #344]	@ (8001ec0 <HAL_GPIO_Init+0x2e8>)
 8001d68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d6e:	4b54      	ldr	r3, [pc, #336]	@ (8001ec0 <HAL_GPIO_Init+0x2e8>)
 8001d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d7a:	4a52      	ldr	r2, [pc, #328]	@ (8001ec4 <HAL_GPIO_Init+0x2ec>)
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	089b      	lsrs	r3, r3, #2
 8001d80:	3302      	adds	r3, #2
 8001d82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	f003 0303 	and.w	r3, r3, #3
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	220f      	movs	r2, #15
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	43db      	mvns	r3, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a49      	ldr	r2, [pc, #292]	@ (8001ec8 <HAL_GPIO_Init+0x2f0>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d019      	beq.n	8001dda <HAL_GPIO_Init+0x202>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a48      	ldr	r2, [pc, #288]	@ (8001ecc <HAL_GPIO_Init+0x2f4>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d013      	beq.n	8001dd6 <HAL_GPIO_Init+0x1fe>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a47      	ldr	r2, [pc, #284]	@ (8001ed0 <HAL_GPIO_Init+0x2f8>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d00d      	beq.n	8001dd2 <HAL_GPIO_Init+0x1fa>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a46      	ldr	r2, [pc, #280]	@ (8001ed4 <HAL_GPIO_Init+0x2fc>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d007      	beq.n	8001dce <HAL_GPIO_Init+0x1f6>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a45      	ldr	r2, [pc, #276]	@ (8001ed8 <HAL_GPIO_Init+0x300>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d101      	bne.n	8001dca <HAL_GPIO_Init+0x1f2>
 8001dc6:	2304      	movs	r3, #4
 8001dc8:	e008      	b.n	8001ddc <HAL_GPIO_Init+0x204>
 8001dca:	2307      	movs	r3, #7
 8001dcc:	e006      	b.n	8001ddc <HAL_GPIO_Init+0x204>
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e004      	b.n	8001ddc <HAL_GPIO_Init+0x204>
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	e002      	b.n	8001ddc <HAL_GPIO_Init+0x204>
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e000      	b.n	8001ddc <HAL_GPIO_Init+0x204>
 8001dda:	2300      	movs	r3, #0
 8001ddc:	69fa      	ldr	r2, [r7, #28]
 8001dde:	f002 0203 	and.w	r2, r2, #3
 8001de2:	0092      	lsls	r2, r2, #2
 8001de4:	4093      	lsls	r3, r2
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dec:	4935      	ldr	r1, [pc, #212]	@ (8001ec4 <HAL_GPIO_Init+0x2ec>)
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	089b      	lsrs	r3, r3, #2
 8001df2:	3302      	adds	r3, #2
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dfa:	4b38      	ldr	r3, [pc, #224]	@ (8001edc <HAL_GPIO_Init+0x304>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	43db      	mvns	r3, r3
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	4013      	ands	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e1e:	4a2f      	ldr	r2, [pc, #188]	@ (8001edc <HAL_GPIO_Init+0x304>)
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e24:	4b2d      	ldr	r3, [pc, #180]	@ (8001edc <HAL_GPIO_Init+0x304>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	4013      	ands	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d003      	beq.n	8001e48 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e48:	4a24      	ldr	r2, [pc, #144]	@ (8001edc <HAL_GPIO_Init+0x304>)
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e4e:	4b23      	ldr	r3, [pc, #140]	@ (8001edc <HAL_GPIO_Init+0x304>)
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	43db      	mvns	r3, r3
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e72:	4a1a      	ldr	r2, [pc, #104]	@ (8001edc <HAL_GPIO_Init+0x304>)
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e78:	4b18      	ldr	r3, [pc, #96]	@ (8001edc <HAL_GPIO_Init+0x304>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	43db      	mvns	r3, r3
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	4013      	ands	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d003      	beq.n	8001e9c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e9c:	4a0f      	ldr	r2, [pc, #60]	@ (8001edc <HAL_GPIO_Init+0x304>)
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	61fb      	str	r3, [r7, #28]
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	2b0f      	cmp	r3, #15
 8001eac:	f67f aea2 	bls.w	8001bf4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001eb0:	bf00      	nop
 8001eb2:	bf00      	nop
 8001eb4:	3724      	adds	r7, #36	@ 0x24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	40013800 	.word	0x40013800
 8001ec8:	40020000 	.word	0x40020000
 8001ecc:	40020400 	.word	0x40020400
 8001ed0:	40020800 	.word	0x40020800
 8001ed4:	40020c00 	.word	0x40020c00
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	40013c00 	.word	0x40013c00

08001ee0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e12b      	b.n	800214a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d106      	bne.n	8001f0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f7ff fbee 	bl	80016e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2224      	movs	r2, #36	@ 0x24
 8001f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f022 0201 	bic.w	r2, r2, #1
 8001f22:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f32:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f42:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f44:	f001 fc20 	bl	8003788 <HAL_RCC_GetPCLK1Freq>
 8001f48:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	4a81      	ldr	r2, [pc, #516]	@ (8002154 <HAL_I2C_Init+0x274>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d807      	bhi.n	8001f64 <HAL_I2C_Init+0x84>
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	4a80      	ldr	r2, [pc, #512]	@ (8002158 <HAL_I2C_Init+0x278>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	bf94      	ite	ls
 8001f5c:	2301      	movls	r3, #1
 8001f5e:	2300      	movhi	r3, #0
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	e006      	b.n	8001f72 <HAL_I2C_Init+0x92>
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	4a7d      	ldr	r2, [pc, #500]	@ (800215c <HAL_I2C_Init+0x27c>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	bf94      	ite	ls
 8001f6c:	2301      	movls	r3, #1
 8001f6e:	2300      	movhi	r3, #0
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e0e7      	b.n	800214a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	4a78      	ldr	r2, [pc, #480]	@ (8002160 <HAL_I2C_Init+0x280>)
 8001f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f82:	0c9b      	lsrs	r3, r3, #18
 8001f84:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	68ba      	ldr	r2, [r7, #8]
 8001f96:	430a      	orrs	r2, r1
 8001f98:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	6a1b      	ldr	r3, [r3, #32]
 8001fa0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	4a6a      	ldr	r2, [pc, #424]	@ (8002154 <HAL_I2C_Init+0x274>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d802      	bhi.n	8001fb4 <HAL_I2C_Init+0xd4>
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	e009      	b.n	8001fc8 <HAL_I2C_Init+0xe8>
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001fba:	fb02 f303 	mul.w	r3, r2, r3
 8001fbe:	4a69      	ldr	r2, [pc, #420]	@ (8002164 <HAL_I2C_Init+0x284>)
 8001fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc4:	099b      	lsrs	r3, r3, #6
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	6812      	ldr	r2, [r2, #0]
 8001fcc:	430b      	orrs	r3, r1
 8001fce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	69db      	ldr	r3, [r3, #28]
 8001fd6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001fda:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	495c      	ldr	r1, [pc, #368]	@ (8002154 <HAL_I2C_Init+0x274>)
 8001fe4:	428b      	cmp	r3, r1
 8001fe6:	d819      	bhi.n	800201c <HAL_I2C_Init+0x13c>
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	1e59      	subs	r1, r3, #1
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ff6:	1c59      	adds	r1, r3, #1
 8001ff8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001ffc:	400b      	ands	r3, r1
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d00a      	beq.n	8002018 <HAL_I2C_Init+0x138>
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	1e59      	subs	r1, r3, #1
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002010:	3301      	adds	r3, #1
 8002012:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002016:	e051      	b.n	80020bc <HAL_I2C_Init+0x1dc>
 8002018:	2304      	movs	r3, #4
 800201a:	e04f      	b.n	80020bc <HAL_I2C_Init+0x1dc>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d111      	bne.n	8002048 <HAL_I2C_Init+0x168>
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	1e58      	subs	r0, r3, #1
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6859      	ldr	r1, [r3, #4]
 800202c:	460b      	mov	r3, r1
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	440b      	add	r3, r1
 8002032:	fbb0 f3f3 	udiv	r3, r0, r3
 8002036:	3301      	adds	r3, #1
 8002038:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800203c:	2b00      	cmp	r3, #0
 800203e:	bf0c      	ite	eq
 8002040:	2301      	moveq	r3, #1
 8002042:	2300      	movne	r3, #0
 8002044:	b2db      	uxtb	r3, r3
 8002046:	e012      	b.n	800206e <HAL_I2C_Init+0x18e>
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	1e58      	subs	r0, r3, #1
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6859      	ldr	r1, [r3, #4]
 8002050:	460b      	mov	r3, r1
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	440b      	add	r3, r1
 8002056:	0099      	lsls	r1, r3, #2
 8002058:	440b      	add	r3, r1
 800205a:	fbb0 f3f3 	udiv	r3, r0, r3
 800205e:	3301      	adds	r3, #1
 8002060:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002064:	2b00      	cmp	r3, #0
 8002066:	bf0c      	ite	eq
 8002068:	2301      	moveq	r3, #1
 800206a:	2300      	movne	r3, #0
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <HAL_I2C_Init+0x196>
 8002072:	2301      	movs	r3, #1
 8002074:	e022      	b.n	80020bc <HAL_I2C_Init+0x1dc>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d10e      	bne.n	800209c <HAL_I2C_Init+0x1bc>
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	1e58      	subs	r0, r3, #1
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6859      	ldr	r1, [r3, #4]
 8002086:	460b      	mov	r3, r1
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	440b      	add	r3, r1
 800208c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002090:	3301      	adds	r3, #1
 8002092:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002096:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800209a:	e00f      	b.n	80020bc <HAL_I2C_Init+0x1dc>
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	1e58      	subs	r0, r3, #1
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6859      	ldr	r1, [r3, #4]
 80020a4:	460b      	mov	r3, r1
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	440b      	add	r3, r1
 80020aa:	0099      	lsls	r1, r3, #2
 80020ac:	440b      	add	r3, r1
 80020ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80020b2:	3301      	adds	r3, #1
 80020b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80020bc:	6879      	ldr	r1, [r7, #4]
 80020be:	6809      	ldr	r1, [r1, #0]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	69da      	ldr	r2, [r3, #28]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a1b      	ldr	r3, [r3, #32]
 80020d6:	431a      	orrs	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	430a      	orrs	r2, r1
 80020de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80020ea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	6911      	ldr	r1, [r2, #16]
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	68d2      	ldr	r2, [r2, #12]
 80020f6:	4311      	orrs	r1, r2
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	6812      	ldr	r2, [r2, #0]
 80020fc:	430b      	orrs	r3, r1
 80020fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	695a      	ldr	r2, [r3, #20]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	431a      	orrs	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	430a      	orrs	r2, r1
 800211a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f042 0201 	orr.w	r2, r2, #1
 800212a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2220      	movs	r2, #32
 8002136:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3710      	adds	r7, #16
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	000186a0 	.word	0x000186a0
 8002158:	001e847f 	.word	0x001e847f
 800215c:	003d08ff 	.word	0x003d08ff
 8002160:	431bde83 	.word	0x431bde83
 8002164:	10624dd3 	.word	0x10624dd3

08002168 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b088      	sub	sp, #32
 800216c:	af02      	add	r7, sp, #8
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	4608      	mov	r0, r1
 8002172:	4611      	mov	r1, r2
 8002174:	461a      	mov	r2, r3
 8002176:	4603      	mov	r3, r0
 8002178:	817b      	strh	r3, [r7, #10]
 800217a:	460b      	mov	r3, r1
 800217c:	813b      	strh	r3, [r7, #8]
 800217e:	4613      	mov	r3, r2
 8002180:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002182:	f7ff fc13 	bl	80019ac <HAL_GetTick>
 8002186:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800218e:	b2db      	uxtb	r3, r3
 8002190:	2b20      	cmp	r3, #32
 8002192:	f040 80d9 	bne.w	8002348 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	9300      	str	r3, [sp, #0]
 800219a:	2319      	movs	r3, #25
 800219c:	2201      	movs	r2, #1
 800219e:	496d      	ldr	r1, [pc, #436]	@ (8002354 <HAL_I2C_Mem_Write+0x1ec>)
 80021a0:	68f8      	ldr	r0, [r7, #12]
 80021a2:	f000 fc8b 	bl	8002abc <I2C_WaitOnFlagUntilTimeout>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80021ac:	2302      	movs	r3, #2
 80021ae:	e0cc      	b.n	800234a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d101      	bne.n	80021be <HAL_I2C_Mem_Write+0x56>
 80021ba:	2302      	movs	r3, #2
 80021bc:	e0c5      	b.n	800234a <HAL_I2C_Mem_Write+0x1e2>
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2201      	movs	r2, #1
 80021c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0301 	and.w	r3, r3, #1
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d007      	beq.n	80021e4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f042 0201 	orr.w	r2, r2, #1
 80021e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2221      	movs	r2, #33	@ 0x21
 80021f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2240      	movs	r2, #64	@ 0x40
 8002200:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2200      	movs	r2, #0
 8002208:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6a3a      	ldr	r2, [r7, #32]
 800220e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002214:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800221a:	b29a      	uxth	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	4a4d      	ldr	r2, [pc, #308]	@ (8002358 <HAL_I2C_Mem_Write+0x1f0>)
 8002224:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002226:	88f8      	ldrh	r0, [r7, #6]
 8002228:	893a      	ldrh	r2, [r7, #8]
 800222a:	8979      	ldrh	r1, [r7, #10]
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	9301      	str	r3, [sp, #4]
 8002230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002232:	9300      	str	r3, [sp, #0]
 8002234:	4603      	mov	r3, r0
 8002236:	68f8      	ldr	r0, [r7, #12]
 8002238:	f000 fac2 	bl	80027c0 <I2C_RequestMemoryWrite>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d052      	beq.n	80022e8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e081      	b.n	800234a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800224a:	68f8      	ldr	r0, [r7, #12]
 800224c:	f000 fd50 	bl	8002cf0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00d      	beq.n	8002272 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800225a:	2b04      	cmp	r3, #4
 800225c:	d107      	bne.n	800226e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800226c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e06b      	b.n	800234a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002276:	781a      	ldrb	r2, [r3, #0]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002282:	1c5a      	adds	r2, r3, #1
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800228c:	3b01      	subs	r3, #1
 800228e:	b29a      	uxth	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002298:	b29b      	uxth	r3, r3
 800229a:	3b01      	subs	r3, #1
 800229c:	b29a      	uxth	r2, r3
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	695b      	ldr	r3, [r3, #20]
 80022a8:	f003 0304 	and.w	r3, r3, #4
 80022ac:	2b04      	cmp	r3, #4
 80022ae:	d11b      	bne.n	80022e8 <HAL_I2C_Mem_Write+0x180>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d017      	beq.n	80022e8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022bc:	781a      	ldrb	r2, [r3, #0]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c8:	1c5a      	adds	r2, r3, #1
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022d2:	3b01      	subs	r3, #1
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022de:	b29b      	uxth	r3, r3
 80022e0:	3b01      	subs	r3, #1
 80022e2:	b29a      	uxth	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d1aa      	bne.n	8002246 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022f0:	697a      	ldr	r2, [r7, #20]
 80022f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80022f4:	68f8      	ldr	r0, [r7, #12]
 80022f6:	f000 fd43 	bl	8002d80 <I2C_WaitOnBTFFlagUntilTimeout>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d00d      	beq.n	800231c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002304:	2b04      	cmp	r3, #4
 8002306:	d107      	bne.n	8002318 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002316:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e016      	b.n	800234a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800232a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2220      	movs	r2, #32
 8002330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2200      	movs	r2, #0
 8002338:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002344:	2300      	movs	r3, #0
 8002346:	e000      	b.n	800234a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002348:	2302      	movs	r3, #2
  }
}
 800234a:	4618      	mov	r0, r3
 800234c:	3718      	adds	r7, #24
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	00100002 	.word	0x00100002
 8002358:	ffff0000 	.word	0xffff0000

0800235c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b08c      	sub	sp, #48	@ 0x30
 8002360:	af02      	add	r7, sp, #8
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	4608      	mov	r0, r1
 8002366:	4611      	mov	r1, r2
 8002368:	461a      	mov	r2, r3
 800236a:	4603      	mov	r3, r0
 800236c:	817b      	strh	r3, [r7, #10]
 800236e:	460b      	mov	r3, r1
 8002370:	813b      	strh	r3, [r7, #8]
 8002372:	4613      	mov	r3, r2
 8002374:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002376:	f7ff fb19 	bl	80019ac <HAL_GetTick>
 800237a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002382:	b2db      	uxtb	r3, r3
 8002384:	2b20      	cmp	r3, #32
 8002386:	f040 8214 	bne.w	80027b2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800238a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800238c:	9300      	str	r3, [sp, #0]
 800238e:	2319      	movs	r3, #25
 8002390:	2201      	movs	r2, #1
 8002392:	497b      	ldr	r1, [pc, #492]	@ (8002580 <HAL_I2C_Mem_Read+0x224>)
 8002394:	68f8      	ldr	r0, [r7, #12]
 8002396:	f000 fb91 	bl	8002abc <I2C_WaitOnFlagUntilTimeout>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80023a0:	2302      	movs	r3, #2
 80023a2:	e207      	b.n	80027b4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d101      	bne.n	80023b2 <HAL_I2C_Mem_Read+0x56>
 80023ae:	2302      	movs	r3, #2
 80023b0:	e200      	b.n	80027b4 <HAL_I2C_Mem_Read+0x458>
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2201      	movs	r2, #1
 80023b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d007      	beq.n	80023d8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f042 0201 	orr.w	r2, r2, #1
 80023d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2222      	movs	r2, #34	@ 0x22
 80023ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2240      	movs	r2, #64	@ 0x40
 80023f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002402:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002408:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800240e:	b29a      	uxth	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	4a5b      	ldr	r2, [pc, #364]	@ (8002584 <HAL_I2C_Mem_Read+0x228>)
 8002418:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800241a:	88f8      	ldrh	r0, [r7, #6]
 800241c:	893a      	ldrh	r2, [r7, #8]
 800241e:	8979      	ldrh	r1, [r7, #10]
 8002420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002422:	9301      	str	r3, [sp, #4]
 8002424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	4603      	mov	r3, r0
 800242a:	68f8      	ldr	r0, [r7, #12]
 800242c:	f000 fa5e 	bl	80028ec <I2C_RequestMemoryRead>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e1bc      	b.n	80027b4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800243e:	2b00      	cmp	r3, #0
 8002440:	d113      	bne.n	800246a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002442:	2300      	movs	r3, #0
 8002444:	623b      	str	r3, [r7, #32]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	695b      	ldr	r3, [r3, #20]
 800244c:	623b      	str	r3, [r7, #32]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	623b      	str	r3, [r7, #32]
 8002456:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	e190      	b.n	800278c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800246e:	2b01      	cmp	r3, #1
 8002470:	d11b      	bne.n	80024aa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002480:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002482:	2300      	movs	r3, #0
 8002484:	61fb      	str	r3, [r7, #28]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	695b      	ldr	r3, [r3, #20]
 800248c:	61fb      	str	r3, [r7, #28]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	61fb      	str	r3, [r7, #28]
 8002496:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	e170      	b.n	800278c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d11b      	bne.n	80024ea <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024c0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80024d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024d2:	2300      	movs	r3, #0
 80024d4:	61bb      	str	r3, [r7, #24]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	695b      	ldr	r3, [r3, #20]
 80024dc:	61bb      	str	r3, [r7, #24]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	61bb      	str	r3, [r7, #24]
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	e150      	b.n	800278c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024ea:	2300      	movs	r3, #0
 80024ec:	617b      	str	r3, [r7, #20]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	695b      	ldr	r3, [r3, #20]
 80024f4:	617b      	str	r3, [r7, #20]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	617b      	str	r3, [r7, #20]
 80024fe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002500:	e144      	b.n	800278c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002506:	2b03      	cmp	r3, #3
 8002508:	f200 80f1 	bhi.w	80026ee <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002510:	2b01      	cmp	r3, #1
 8002512:	d123      	bne.n	800255c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002514:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002516:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002518:	68f8      	ldr	r0, [r7, #12]
 800251a:	f000 fc79 	bl	8002e10 <I2C_WaitOnRXNEFlagUntilTimeout>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e145      	b.n	80027b4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	691a      	ldr	r2, [r3, #16]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002532:	b2d2      	uxtb	r2, r2
 8002534:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800253a:	1c5a      	adds	r2, r3, #1
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002544:	3b01      	subs	r3, #1
 8002546:	b29a      	uxth	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002550:	b29b      	uxth	r3, r3
 8002552:	3b01      	subs	r3, #1
 8002554:	b29a      	uxth	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800255a:	e117      	b.n	800278c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002560:	2b02      	cmp	r3, #2
 8002562:	d14e      	bne.n	8002602 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002566:	9300      	str	r3, [sp, #0]
 8002568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800256a:	2200      	movs	r2, #0
 800256c:	4906      	ldr	r1, [pc, #24]	@ (8002588 <HAL_I2C_Mem_Read+0x22c>)
 800256e:	68f8      	ldr	r0, [r7, #12]
 8002570:	f000 faa4 	bl	8002abc <I2C_WaitOnFlagUntilTimeout>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d008      	beq.n	800258c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e11a      	b.n	80027b4 <HAL_I2C_Mem_Read+0x458>
 800257e:	bf00      	nop
 8002580:	00100002 	.word	0x00100002
 8002584:	ffff0000 	.word	0xffff0000
 8002588:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800259a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	691a      	ldr	r2, [r3, #16]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a6:	b2d2      	uxtb	r2, r2
 80025a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ae:	1c5a      	adds	r2, r3, #1
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025b8:	3b01      	subs	r3, #1
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	3b01      	subs	r3, #1
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	691a      	ldr	r2, [r3, #16]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d8:	b2d2      	uxtb	r2, r2
 80025da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e0:	1c5a      	adds	r2, r3, #1
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025ea:	3b01      	subs	r3, #1
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	3b01      	subs	r3, #1
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002600:	e0c4      	b.n	800278c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002604:	9300      	str	r3, [sp, #0]
 8002606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002608:	2200      	movs	r2, #0
 800260a:	496c      	ldr	r1, [pc, #432]	@ (80027bc <HAL_I2C_Mem_Read+0x460>)
 800260c:	68f8      	ldr	r0, [r7, #12]
 800260e:	f000 fa55 	bl	8002abc <I2C_WaitOnFlagUntilTimeout>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e0cb      	b.n	80027b4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800262a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	691a      	ldr	r2, [r3, #16]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002636:	b2d2      	uxtb	r2, r2
 8002638:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800263e:	1c5a      	adds	r2, r3, #1
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002648:	3b01      	subs	r3, #1
 800264a:	b29a      	uxth	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002654:	b29b      	uxth	r3, r3
 8002656:	3b01      	subs	r3, #1
 8002658:	b29a      	uxth	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800265e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002664:	2200      	movs	r2, #0
 8002666:	4955      	ldr	r1, [pc, #340]	@ (80027bc <HAL_I2C_Mem_Read+0x460>)
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	f000 fa27 	bl	8002abc <I2C_WaitOnFlagUntilTimeout>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e09d      	b.n	80027b4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002686:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	691a      	ldr	r2, [r3, #16]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800269a:	1c5a      	adds	r2, r3, #1
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026a4:	3b01      	subs	r3, #1
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	3b01      	subs	r3, #1
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	691a      	ldr	r2, [r3, #16]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c4:	b2d2      	uxtb	r2, r2
 80026c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026cc:	1c5a      	adds	r2, r3, #1
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026d6:	3b01      	subs	r3, #1
 80026d8:	b29a      	uxth	r2, r3
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	3b01      	subs	r3, #1
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80026ec:	e04e      	b.n	800278c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026f0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80026f2:	68f8      	ldr	r0, [r7, #12]
 80026f4:	f000 fb8c 	bl	8002e10 <I2C_WaitOnRXNEFlagUntilTimeout>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e058      	b.n	80027b4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	691a      	ldr	r2, [r3, #16]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800270c:	b2d2      	uxtb	r2, r2
 800270e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002714:	1c5a      	adds	r2, r3, #1
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800271e:	3b01      	subs	r3, #1
 8002720:	b29a      	uxth	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800272a:	b29b      	uxth	r3, r3
 800272c:	3b01      	subs	r3, #1
 800272e:	b29a      	uxth	r2, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	f003 0304 	and.w	r3, r3, #4
 800273e:	2b04      	cmp	r3, #4
 8002740:	d124      	bne.n	800278c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002746:	2b03      	cmp	r3, #3
 8002748:	d107      	bne.n	800275a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002758:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	691a      	ldr	r2, [r3, #16]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002764:	b2d2      	uxtb	r2, r2
 8002766:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800276c:	1c5a      	adds	r2, r3, #1
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002776:	3b01      	subs	r3, #1
 8002778:	b29a      	uxth	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002782:	b29b      	uxth	r3, r3
 8002784:	3b01      	subs	r3, #1
 8002786:	b29a      	uxth	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002790:	2b00      	cmp	r3, #0
 8002792:	f47f aeb6 	bne.w	8002502 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2220      	movs	r2, #32
 800279a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80027ae:	2300      	movs	r3, #0
 80027b0:	e000      	b.n	80027b4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80027b2:	2302      	movs	r3, #2
  }
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3728      	adds	r7, #40	@ 0x28
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	00010004 	.word	0x00010004

080027c0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b088      	sub	sp, #32
 80027c4:	af02      	add	r7, sp, #8
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	4608      	mov	r0, r1
 80027ca:	4611      	mov	r1, r2
 80027cc:	461a      	mov	r2, r3
 80027ce:	4603      	mov	r3, r0
 80027d0:	817b      	strh	r3, [r7, #10]
 80027d2:	460b      	mov	r3, r1
 80027d4:	813b      	strh	r3, [r7, #8]
 80027d6:	4613      	mov	r3, r2
 80027d8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ec:	9300      	str	r3, [sp, #0]
 80027ee:	6a3b      	ldr	r3, [r7, #32]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80027f6:	68f8      	ldr	r0, [r7, #12]
 80027f8:	f000 f960 	bl	8002abc <I2C_WaitOnFlagUntilTimeout>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00d      	beq.n	800281e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800280c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002810:	d103      	bne.n	800281a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002818:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e05f      	b.n	80028de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800281e:	897b      	ldrh	r3, [r7, #10]
 8002820:	b2db      	uxtb	r3, r3
 8002822:	461a      	mov	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800282c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800282e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002830:	6a3a      	ldr	r2, [r7, #32]
 8002832:	492d      	ldr	r1, [pc, #180]	@ (80028e8 <I2C_RequestMemoryWrite+0x128>)
 8002834:	68f8      	ldr	r0, [r7, #12]
 8002836:	f000 f9bb 	bl	8002bb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e04c      	b.n	80028de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002844:	2300      	movs	r3, #0
 8002846:	617b      	str	r3, [r7, #20]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	695b      	ldr	r3, [r3, #20]
 800284e:	617b      	str	r3, [r7, #20]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	617b      	str	r3, [r7, #20]
 8002858:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800285a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800285c:	6a39      	ldr	r1, [r7, #32]
 800285e:	68f8      	ldr	r0, [r7, #12]
 8002860:	f000 fa46 	bl	8002cf0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00d      	beq.n	8002886 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286e:	2b04      	cmp	r3, #4
 8002870:	d107      	bne.n	8002882 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002880:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e02b      	b.n	80028de <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002886:	88fb      	ldrh	r3, [r7, #6]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d105      	bne.n	8002898 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800288c:	893b      	ldrh	r3, [r7, #8]
 800288e:	b2da      	uxtb	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	611a      	str	r2, [r3, #16]
 8002896:	e021      	b.n	80028dc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002898:	893b      	ldrh	r3, [r7, #8]
 800289a:	0a1b      	lsrs	r3, r3, #8
 800289c:	b29b      	uxth	r3, r3
 800289e:	b2da      	uxtb	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028a8:	6a39      	ldr	r1, [r7, #32]
 80028aa:	68f8      	ldr	r0, [r7, #12]
 80028ac:	f000 fa20 	bl	8002cf0 <I2C_WaitOnTXEFlagUntilTimeout>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00d      	beq.n	80028d2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ba:	2b04      	cmp	r3, #4
 80028bc:	d107      	bne.n	80028ce <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e005      	b.n	80028de <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80028d2:	893b      	ldrh	r3, [r7, #8]
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3718      	adds	r7, #24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	00010002 	.word	0x00010002

080028ec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b088      	sub	sp, #32
 80028f0:	af02      	add	r7, sp, #8
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	4608      	mov	r0, r1
 80028f6:	4611      	mov	r1, r2
 80028f8:	461a      	mov	r2, r3
 80028fa:	4603      	mov	r3, r0
 80028fc:	817b      	strh	r3, [r7, #10]
 80028fe:	460b      	mov	r3, r1
 8002900:	813b      	strh	r3, [r7, #8]
 8002902:	4613      	mov	r3, r2
 8002904:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002914:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002924:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002928:	9300      	str	r3, [sp, #0]
 800292a:	6a3b      	ldr	r3, [r7, #32]
 800292c:	2200      	movs	r2, #0
 800292e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002932:	68f8      	ldr	r0, [r7, #12]
 8002934:	f000 f8c2 	bl	8002abc <I2C_WaitOnFlagUntilTimeout>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00d      	beq.n	800295a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002948:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800294c:	d103      	bne.n	8002956 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002954:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e0aa      	b.n	8002ab0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800295a:	897b      	ldrh	r3, [r7, #10]
 800295c:	b2db      	uxtb	r3, r3
 800295e:	461a      	mov	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002968:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800296a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296c:	6a3a      	ldr	r2, [r7, #32]
 800296e:	4952      	ldr	r1, [pc, #328]	@ (8002ab8 <I2C_RequestMemoryRead+0x1cc>)
 8002970:	68f8      	ldr	r0, [r7, #12]
 8002972:	f000 f91d 	bl	8002bb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d001      	beq.n	8002980 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e097      	b.n	8002ab0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002980:	2300      	movs	r3, #0
 8002982:	617b      	str	r3, [r7, #20]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	617b      	str	r3, [r7, #20]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	699b      	ldr	r3, [r3, #24]
 8002992:	617b      	str	r3, [r7, #20]
 8002994:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002996:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002998:	6a39      	ldr	r1, [r7, #32]
 800299a:	68f8      	ldr	r0, [r7, #12]
 800299c:	f000 f9a8 	bl	8002cf0 <I2C_WaitOnTXEFlagUntilTimeout>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00d      	beq.n	80029c2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029aa:	2b04      	cmp	r3, #4
 80029ac:	d107      	bne.n	80029be <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e076      	b.n	8002ab0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029c2:	88fb      	ldrh	r3, [r7, #6]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d105      	bne.n	80029d4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80029c8:	893b      	ldrh	r3, [r7, #8]
 80029ca:	b2da      	uxtb	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	611a      	str	r2, [r3, #16]
 80029d2:	e021      	b.n	8002a18 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80029d4:	893b      	ldrh	r3, [r7, #8]
 80029d6:	0a1b      	lsrs	r3, r3, #8
 80029d8:	b29b      	uxth	r3, r3
 80029da:	b2da      	uxtb	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029e4:	6a39      	ldr	r1, [r7, #32]
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	f000 f982 	bl	8002cf0 <I2C_WaitOnTXEFlagUntilTimeout>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00d      	beq.n	8002a0e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f6:	2b04      	cmp	r3, #4
 80029f8:	d107      	bne.n	8002a0a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a08:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e050      	b.n	8002ab0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a0e:	893b      	ldrh	r3, [r7, #8]
 8002a10:	b2da      	uxtb	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a1a:	6a39      	ldr	r1, [r7, #32]
 8002a1c:	68f8      	ldr	r0, [r7, #12]
 8002a1e:	f000 f967 	bl	8002cf0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d00d      	beq.n	8002a44 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2c:	2b04      	cmp	r3, #4
 8002a2e:	d107      	bne.n	8002a40 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a3e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e035      	b.n	8002ab0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a52:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a56:	9300      	str	r3, [sp, #0]
 8002a58:	6a3b      	ldr	r3, [r7, #32]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002a60:	68f8      	ldr	r0, [r7, #12]
 8002a62:	f000 f82b 	bl	8002abc <I2C_WaitOnFlagUntilTimeout>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00d      	beq.n	8002a88 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a7a:	d103      	bne.n	8002a84 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a82:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e013      	b.n	8002ab0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002a88:	897b      	ldrh	r3, [r7, #10]
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	f043 0301 	orr.w	r3, r3, #1
 8002a90:	b2da      	uxtb	r2, r3
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a9a:	6a3a      	ldr	r2, [r7, #32]
 8002a9c:	4906      	ldr	r1, [pc, #24]	@ (8002ab8 <I2C_RequestMemoryRead+0x1cc>)
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f000 f886 	bl	8002bb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e000      	b.n	8002ab0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3718      	adds	r7, #24
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	00010002 	.word	0x00010002

08002abc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	603b      	str	r3, [r7, #0]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002acc:	e048      	b.n	8002b60 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad4:	d044      	beq.n	8002b60 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ad6:	f7fe ff69 	bl	80019ac <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d302      	bcc.n	8002aec <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d139      	bne.n	8002b60 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	0c1b      	lsrs	r3, r3, #16
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d10d      	bne.n	8002b12 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	695b      	ldr	r3, [r3, #20]
 8002afc:	43da      	mvns	r2, r3
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	4013      	ands	r3, r2
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	bf0c      	ite	eq
 8002b08:	2301      	moveq	r3, #1
 8002b0a:	2300      	movne	r3, #0
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	461a      	mov	r2, r3
 8002b10:	e00c      	b.n	8002b2c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	43da      	mvns	r2, r3
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	bf0c      	ite	eq
 8002b24:	2301      	moveq	r3, #1
 8002b26:	2300      	movne	r3, #0
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	79fb      	ldrb	r3, [r7, #7]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d116      	bne.n	8002b60 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2200      	movs	r2, #0
 8002b36:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2220      	movs	r2, #32
 8002b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4c:	f043 0220 	orr.w	r2, r3, #32
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e023      	b.n	8002ba8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	0c1b      	lsrs	r3, r3, #16
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d10d      	bne.n	8002b86 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	695b      	ldr	r3, [r3, #20]
 8002b70:	43da      	mvns	r2, r3
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	4013      	ands	r3, r2
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	bf0c      	ite	eq
 8002b7c:	2301      	moveq	r3, #1
 8002b7e:	2300      	movne	r3, #0
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	461a      	mov	r2, r3
 8002b84:	e00c      	b.n	8002ba0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	43da      	mvns	r2, r3
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	4013      	ands	r3, r2
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	bf0c      	ite	eq
 8002b98:	2301      	moveq	r3, #1
 8002b9a:	2300      	movne	r3, #0
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	79fb      	ldrb	r3, [r7, #7]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d093      	beq.n	8002ace <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3710      	adds	r7, #16
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	607a      	str	r2, [r7, #4]
 8002bbc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bbe:	e071      	b.n	8002ca4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bce:	d123      	bne.n	8002c18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bde:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002be8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2220      	movs	r2, #32
 8002bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c04:	f043 0204 	orr.w	r2, r3, #4
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e067      	b.n	8002ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c1e:	d041      	beq.n	8002ca4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c20:	f7fe fec4 	bl	80019ac <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d302      	bcc.n	8002c36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d136      	bne.n	8002ca4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	0c1b      	lsrs	r3, r3, #16
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d10c      	bne.n	8002c5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	695b      	ldr	r3, [r3, #20]
 8002c46:	43da      	mvns	r2, r3
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	bf14      	ite	ne
 8002c52:	2301      	movne	r3, #1
 8002c54:	2300      	moveq	r3, #0
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	e00b      	b.n	8002c72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	43da      	mvns	r2, r3
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	4013      	ands	r3, r2
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	bf14      	ite	ne
 8002c6c:	2301      	movne	r3, #1
 8002c6e:	2300      	moveq	r3, #0
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d016      	beq.n	8002ca4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2220      	movs	r2, #32
 8002c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c90:	f043 0220 	orr.w	r2, r3, #32
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e021      	b.n	8002ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	0c1b      	lsrs	r3, r3, #16
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d10c      	bne.n	8002cc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	695b      	ldr	r3, [r3, #20]
 8002cb4:	43da      	mvns	r2, r3
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	bf14      	ite	ne
 8002cc0:	2301      	movne	r3, #1
 8002cc2:	2300      	moveq	r3, #0
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	e00b      	b.n	8002ce0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	43da      	mvns	r2, r3
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	bf14      	ite	ne
 8002cda:	2301      	movne	r3, #1
 8002cdc:	2300      	moveq	r3, #0
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f47f af6d 	bne.w	8002bc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3710      	adds	r7, #16
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cfc:	e034      	b.n	8002d68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	f000 f8e3 	bl	8002eca <I2C_IsAcknowledgeFailed>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e034      	b.n	8002d78 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d14:	d028      	beq.n	8002d68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d16:	f7fe fe49 	bl	80019ac <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	68ba      	ldr	r2, [r7, #8]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d302      	bcc.n	8002d2c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d11d      	bne.n	8002d68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d36:	2b80      	cmp	r3, #128	@ 0x80
 8002d38:	d016      	beq.n	8002d68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2220      	movs	r2, #32
 8002d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d54:	f043 0220 	orr.w	r2, r3, #32
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e007      	b.n	8002d78 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d72:	2b80      	cmp	r3, #128	@ 0x80
 8002d74:	d1c3      	bne.n	8002cfe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3710      	adds	r7, #16
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d8c:	e034      	b.n	8002df8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f000 f89b 	bl	8002eca <I2C_IsAcknowledgeFailed>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e034      	b.n	8002e08 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da4:	d028      	beq.n	8002df8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002da6:	f7fe fe01 	bl	80019ac <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	68ba      	ldr	r2, [r7, #8]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d302      	bcc.n	8002dbc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d11d      	bne.n	8002df8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	f003 0304 	and.w	r3, r3, #4
 8002dc6:	2b04      	cmp	r3, #4
 8002dc8:	d016      	beq.n	8002df8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de4:	f043 0220 	orr.w	r2, r3, #32
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e007      	b.n	8002e08 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	f003 0304 	and.w	r3, r3, #4
 8002e02:	2b04      	cmp	r3, #4
 8002e04:	d1c3      	bne.n	8002d8e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3710      	adds	r7, #16
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e1c:	e049      	b.n	8002eb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	695b      	ldr	r3, [r3, #20]
 8002e24:	f003 0310 	and.w	r3, r3, #16
 8002e28:	2b10      	cmp	r3, #16
 8002e2a:	d119      	bne.n	8002e60 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f06f 0210 	mvn.w	r2, #16
 8002e34:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2220      	movs	r2, #32
 8002e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e030      	b.n	8002ec2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e60:	f7fe fda4 	bl	80019ac <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	68ba      	ldr	r2, [r7, #8]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d302      	bcc.n	8002e76 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d11d      	bne.n	8002eb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e80:	2b40      	cmp	r3, #64	@ 0x40
 8002e82:	d016      	beq.n	8002eb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2220      	movs	r2, #32
 8002e8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e9e:	f043 0220 	orr.w	r2, r3, #32
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e007      	b.n	8002ec2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	695b      	ldr	r3, [r3, #20]
 8002eb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ebc:	2b40      	cmp	r3, #64	@ 0x40
 8002ebe:	d1ae      	bne.n	8002e1e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	b083      	sub	sp, #12
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	695b      	ldr	r3, [r3, #20]
 8002ed8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002edc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ee0:	d11b      	bne.n	8002f1a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002eea:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f06:	f043 0204 	orr.w	r2, r3, #4
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e000      	b.n	8002f1c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e267      	b.n	800340a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d075      	beq.n	8003032 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002f46:	4b88      	ldr	r3, [pc, #544]	@ (8003168 <HAL_RCC_OscConfig+0x240>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f003 030c 	and.w	r3, r3, #12
 8002f4e:	2b04      	cmp	r3, #4
 8002f50:	d00c      	beq.n	8002f6c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f52:	4b85      	ldr	r3, [pc, #532]	@ (8003168 <HAL_RCC_OscConfig+0x240>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002f5a:	2b08      	cmp	r3, #8
 8002f5c:	d112      	bne.n	8002f84 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f5e:	4b82      	ldr	r3, [pc, #520]	@ (8003168 <HAL_RCC_OscConfig+0x240>)
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f66:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f6a:	d10b      	bne.n	8002f84 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f6c:	4b7e      	ldr	r3, [pc, #504]	@ (8003168 <HAL_RCC_OscConfig+0x240>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d05b      	beq.n	8003030 <HAL_RCC_OscConfig+0x108>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d157      	bne.n	8003030 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e242      	b.n	800340a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f8c:	d106      	bne.n	8002f9c <HAL_RCC_OscConfig+0x74>
 8002f8e:	4b76      	ldr	r3, [pc, #472]	@ (8003168 <HAL_RCC_OscConfig+0x240>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a75      	ldr	r2, [pc, #468]	@ (8003168 <HAL_RCC_OscConfig+0x240>)
 8002f94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f98:	6013      	str	r3, [r2, #0]
 8002f9a:	e01d      	b.n	8002fd8 <HAL_RCC_OscConfig+0xb0>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002fa4:	d10c      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x98>
 8002fa6:	4b70      	ldr	r3, [pc, #448]	@ (8003168 <HAL_RCC_OscConfig+0x240>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a6f      	ldr	r2, [pc, #444]	@ (8003168 <HAL_RCC_OscConfig+0x240>)
 8002fac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002fb0:	6013      	str	r3, [r2, #0]
 8002fb2:	4b6d      	ldr	r3, [pc, #436]	@ (8003168 <HAL_RCC_OscConfig+0x240>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a6c      	ldr	r2, [pc, #432]	@ (8003168 <HAL_RCC_OscConfig+0x240>)
 8002fb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fbc:	6013      	str	r3, [r2, #0]
 8002fbe:	e00b      	b.n	8002fd8 <HAL_RCC_OscConfig+0xb0>
 8002fc0:	4b69      	ldr	r3, [pc, #420]	@ (8003168 <HAL_RCC_OscConfig+0x240>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a68      	ldr	r2, [pc, #416]	@ (8003168 <HAL_RCC_OscConfig+0x240>)
 8002fc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fca:	6013      	str	r3, [r2, #0]
 8002fcc:	4b66      	ldr	r3, [pc, #408]	@ (8003168 <HAL_RCC_OscConfig+0x240>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a65      	ldr	r2, [pc, #404]	@ (8003168 <HAL_RCC_OscConfig+0x240>)
 8002fd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d013      	beq.n	8003008 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe0:	f7fe fce4 	bl	80019ac <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fe8:	f7fe fce0 	bl	80019ac <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b64      	cmp	r3, #100	@ 0x64
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e207      	b.n	800340a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ffa:	4b5b      	ldr	r3, [pc, #364]	@ (8003168 <HAL_RCC_OscConfig+0x240>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d0f0      	beq.n	8002fe8 <HAL_RCC_OscConfig+0xc0>
 8003006:	e014      	b.n	8003032 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003008:	f7fe fcd0 	bl	80019ac <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003010:	f7fe fccc 	bl	80019ac <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b64      	cmp	r3, #100	@ 0x64
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e1f3      	b.n	800340a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003022:	4b51      	ldr	r3, [pc, #324]	@ (8003168 <HAL_RCC_OscConfig+0x240>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1f0      	bne.n	8003010 <HAL_RCC_OscConfig+0xe8>
 800302e:	e000      	b.n	8003032 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003030:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d063      	beq.n	8003106 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800303e:	4b4a      	ldr	r3, [pc, #296]	@ (8003168 <HAL_RCC_OscConfig+0x240>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f003 030c 	and.w	r3, r3, #12
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00b      	beq.n	8003062 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800304a:	4b47      	ldr	r3, [pc, #284]	@ (8003168 <HAL_RCC_OscConfig+0x240>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003052:	2b08      	cmp	r3, #8
 8003054:	d11c      	bne.n	8003090 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003056:	4b44      	ldr	r3, [pc, #272]	@ (8003168 <HAL_RCC_OscConfig+0x240>)
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d116      	bne.n	8003090 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003062:	4b41      	ldr	r3, [pc, #260]	@ (8003168 <HAL_RCC_OscConfig+0x240>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d005      	beq.n	800307a <HAL_RCC_OscConfig+0x152>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d001      	beq.n	800307a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e1c7      	b.n	800340a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800307a:	4b3b      	ldr	r3, [pc, #236]	@ (8003168 <HAL_RCC_OscConfig+0x240>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	4937      	ldr	r1, [pc, #220]	@ (8003168 <HAL_RCC_OscConfig+0x240>)
 800308a:	4313      	orrs	r3, r2
 800308c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800308e:	e03a      	b.n	8003106 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d020      	beq.n	80030da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003098:	4b34      	ldr	r3, [pc, #208]	@ (800316c <HAL_RCC_OscConfig+0x244>)
 800309a:	2201      	movs	r2, #1
 800309c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800309e:	f7fe fc85 	bl	80019ac <HAL_GetTick>
 80030a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030a4:	e008      	b.n	80030b8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030a6:	f7fe fc81 	bl	80019ac <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d901      	bls.n	80030b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e1a8      	b.n	800340a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030b8:	4b2b      	ldr	r3, [pc, #172]	@ (8003168 <HAL_RCC_OscConfig+0x240>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d0f0      	beq.n	80030a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030c4:	4b28      	ldr	r3, [pc, #160]	@ (8003168 <HAL_RCC_OscConfig+0x240>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	4925      	ldr	r1, [pc, #148]	@ (8003168 <HAL_RCC_OscConfig+0x240>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	600b      	str	r3, [r1, #0]
 80030d8:	e015      	b.n	8003106 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030da:	4b24      	ldr	r3, [pc, #144]	@ (800316c <HAL_RCC_OscConfig+0x244>)
 80030dc:	2200      	movs	r2, #0
 80030de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e0:	f7fe fc64 	bl	80019ac <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030e8:	f7fe fc60 	bl	80019ac <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e187      	b.n	800340a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030fa:	4b1b      	ldr	r3, [pc, #108]	@ (8003168 <HAL_RCC_OscConfig+0x240>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1f0      	bne.n	80030e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0308 	and.w	r3, r3, #8
 800310e:	2b00      	cmp	r3, #0
 8003110:	d036      	beq.n	8003180 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d016      	beq.n	8003148 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800311a:	4b15      	ldr	r3, [pc, #84]	@ (8003170 <HAL_RCC_OscConfig+0x248>)
 800311c:	2201      	movs	r2, #1
 800311e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003120:	f7fe fc44 	bl	80019ac <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003128:	f7fe fc40 	bl	80019ac <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b02      	cmp	r3, #2
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e167      	b.n	800340a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800313a:	4b0b      	ldr	r3, [pc, #44]	@ (8003168 <HAL_RCC_OscConfig+0x240>)
 800313c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d0f0      	beq.n	8003128 <HAL_RCC_OscConfig+0x200>
 8003146:	e01b      	b.n	8003180 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003148:	4b09      	ldr	r3, [pc, #36]	@ (8003170 <HAL_RCC_OscConfig+0x248>)
 800314a:	2200      	movs	r2, #0
 800314c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800314e:	f7fe fc2d 	bl	80019ac <HAL_GetTick>
 8003152:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003154:	e00e      	b.n	8003174 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003156:	f7fe fc29 	bl	80019ac <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	2b02      	cmp	r3, #2
 8003162:	d907      	bls.n	8003174 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e150      	b.n	800340a <HAL_RCC_OscConfig+0x4e2>
 8003168:	40023800 	.word	0x40023800
 800316c:	42470000 	.word	0x42470000
 8003170:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003174:	4b88      	ldr	r3, [pc, #544]	@ (8003398 <HAL_RCC_OscConfig+0x470>)
 8003176:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d1ea      	bne.n	8003156 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0304 	and.w	r3, r3, #4
 8003188:	2b00      	cmp	r3, #0
 800318a:	f000 8097 	beq.w	80032bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800318e:	2300      	movs	r3, #0
 8003190:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003192:	4b81      	ldr	r3, [pc, #516]	@ (8003398 <HAL_RCC_OscConfig+0x470>)
 8003194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003196:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d10f      	bne.n	80031be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800319e:	2300      	movs	r3, #0
 80031a0:	60bb      	str	r3, [r7, #8]
 80031a2:	4b7d      	ldr	r3, [pc, #500]	@ (8003398 <HAL_RCC_OscConfig+0x470>)
 80031a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a6:	4a7c      	ldr	r2, [pc, #496]	@ (8003398 <HAL_RCC_OscConfig+0x470>)
 80031a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80031ae:	4b7a      	ldr	r3, [pc, #488]	@ (8003398 <HAL_RCC_OscConfig+0x470>)
 80031b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031b6:	60bb      	str	r3, [r7, #8]
 80031b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031ba:	2301      	movs	r3, #1
 80031bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031be:	4b77      	ldr	r3, [pc, #476]	@ (800339c <HAL_RCC_OscConfig+0x474>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d118      	bne.n	80031fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031ca:	4b74      	ldr	r3, [pc, #464]	@ (800339c <HAL_RCC_OscConfig+0x474>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a73      	ldr	r2, [pc, #460]	@ (800339c <HAL_RCC_OscConfig+0x474>)
 80031d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031d6:	f7fe fbe9 	bl	80019ac <HAL_GetTick>
 80031da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031dc:	e008      	b.n	80031f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031de:	f7fe fbe5 	bl	80019ac <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d901      	bls.n	80031f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e10c      	b.n	800340a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f0:	4b6a      	ldr	r3, [pc, #424]	@ (800339c <HAL_RCC_OscConfig+0x474>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d0f0      	beq.n	80031de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d106      	bne.n	8003212 <HAL_RCC_OscConfig+0x2ea>
 8003204:	4b64      	ldr	r3, [pc, #400]	@ (8003398 <HAL_RCC_OscConfig+0x470>)
 8003206:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003208:	4a63      	ldr	r2, [pc, #396]	@ (8003398 <HAL_RCC_OscConfig+0x470>)
 800320a:	f043 0301 	orr.w	r3, r3, #1
 800320e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003210:	e01c      	b.n	800324c <HAL_RCC_OscConfig+0x324>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	2b05      	cmp	r3, #5
 8003218:	d10c      	bne.n	8003234 <HAL_RCC_OscConfig+0x30c>
 800321a:	4b5f      	ldr	r3, [pc, #380]	@ (8003398 <HAL_RCC_OscConfig+0x470>)
 800321c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800321e:	4a5e      	ldr	r2, [pc, #376]	@ (8003398 <HAL_RCC_OscConfig+0x470>)
 8003220:	f043 0304 	orr.w	r3, r3, #4
 8003224:	6713      	str	r3, [r2, #112]	@ 0x70
 8003226:	4b5c      	ldr	r3, [pc, #368]	@ (8003398 <HAL_RCC_OscConfig+0x470>)
 8003228:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800322a:	4a5b      	ldr	r2, [pc, #364]	@ (8003398 <HAL_RCC_OscConfig+0x470>)
 800322c:	f043 0301 	orr.w	r3, r3, #1
 8003230:	6713      	str	r3, [r2, #112]	@ 0x70
 8003232:	e00b      	b.n	800324c <HAL_RCC_OscConfig+0x324>
 8003234:	4b58      	ldr	r3, [pc, #352]	@ (8003398 <HAL_RCC_OscConfig+0x470>)
 8003236:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003238:	4a57      	ldr	r2, [pc, #348]	@ (8003398 <HAL_RCC_OscConfig+0x470>)
 800323a:	f023 0301 	bic.w	r3, r3, #1
 800323e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003240:	4b55      	ldr	r3, [pc, #340]	@ (8003398 <HAL_RCC_OscConfig+0x470>)
 8003242:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003244:	4a54      	ldr	r2, [pc, #336]	@ (8003398 <HAL_RCC_OscConfig+0x470>)
 8003246:	f023 0304 	bic.w	r3, r3, #4
 800324a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d015      	beq.n	8003280 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003254:	f7fe fbaa 	bl	80019ac <HAL_GetTick>
 8003258:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800325a:	e00a      	b.n	8003272 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800325c:	f7fe fba6 	bl	80019ac <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	f241 3288 	movw	r2, #5000	@ 0x1388
 800326a:	4293      	cmp	r3, r2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e0cb      	b.n	800340a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003272:	4b49      	ldr	r3, [pc, #292]	@ (8003398 <HAL_RCC_OscConfig+0x470>)
 8003274:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d0ee      	beq.n	800325c <HAL_RCC_OscConfig+0x334>
 800327e:	e014      	b.n	80032aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003280:	f7fe fb94 	bl	80019ac <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003286:	e00a      	b.n	800329e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003288:	f7fe fb90 	bl	80019ac <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003296:	4293      	cmp	r3, r2
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e0b5      	b.n	800340a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800329e:	4b3e      	ldr	r3, [pc, #248]	@ (8003398 <HAL_RCC_OscConfig+0x470>)
 80032a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1ee      	bne.n	8003288 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80032aa:	7dfb      	ldrb	r3, [r7, #23]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d105      	bne.n	80032bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032b0:	4b39      	ldr	r3, [pc, #228]	@ (8003398 <HAL_RCC_OscConfig+0x470>)
 80032b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b4:	4a38      	ldr	r2, [pc, #224]	@ (8003398 <HAL_RCC_OscConfig+0x470>)
 80032b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032ba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f000 80a1 	beq.w	8003408 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032c6:	4b34      	ldr	r3, [pc, #208]	@ (8003398 <HAL_RCC_OscConfig+0x470>)
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f003 030c 	and.w	r3, r3, #12
 80032ce:	2b08      	cmp	r3, #8
 80032d0:	d05c      	beq.n	800338c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d141      	bne.n	800335e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032da:	4b31      	ldr	r3, [pc, #196]	@ (80033a0 <HAL_RCC_OscConfig+0x478>)
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e0:	f7fe fb64 	bl	80019ac <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032e8:	f7fe fb60 	bl	80019ac <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e087      	b.n	800340a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032fa:	4b27      	ldr	r3, [pc, #156]	@ (8003398 <HAL_RCC_OscConfig+0x470>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1f0      	bne.n	80032e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	69da      	ldr	r2, [r3, #28]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	431a      	orrs	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003314:	019b      	lsls	r3, r3, #6
 8003316:	431a      	orrs	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800331c:	085b      	lsrs	r3, r3, #1
 800331e:	3b01      	subs	r3, #1
 8003320:	041b      	lsls	r3, r3, #16
 8003322:	431a      	orrs	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003328:	061b      	lsls	r3, r3, #24
 800332a:	491b      	ldr	r1, [pc, #108]	@ (8003398 <HAL_RCC_OscConfig+0x470>)
 800332c:	4313      	orrs	r3, r2
 800332e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003330:	4b1b      	ldr	r3, [pc, #108]	@ (80033a0 <HAL_RCC_OscConfig+0x478>)
 8003332:	2201      	movs	r2, #1
 8003334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003336:	f7fe fb39 	bl	80019ac <HAL_GetTick>
 800333a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800333c:	e008      	b.n	8003350 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800333e:	f7fe fb35 	bl	80019ac <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d901      	bls.n	8003350 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e05c      	b.n	800340a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003350:	4b11      	ldr	r3, [pc, #68]	@ (8003398 <HAL_RCC_OscConfig+0x470>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d0f0      	beq.n	800333e <HAL_RCC_OscConfig+0x416>
 800335c:	e054      	b.n	8003408 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800335e:	4b10      	ldr	r3, [pc, #64]	@ (80033a0 <HAL_RCC_OscConfig+0x478>)
 8003360:	2200      	movs	r2, #0
 8003362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003364:	f7fe fb22 	bl	80019ac <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800336c:	f7fe fb1e 	bl	80019ac <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e045      	b.n	800340a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800337e:	4b06      	ldr	r3, [pc, #24]	@ (8003398 <HAL_RCC_OscConfig+0x470>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1f0      	bne.n	800336c <HAL_RCC_OscConfig+0x444>
 800338a:	e03d      	b.n	8003408 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	2b01      	cmp	r3, #1
 8003392:	d107      	bne.n	80033a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e038      	b.n	800340a <HAL_RCC_OscConfig+0x4e2>
 8003398:	40023800 	.word	0x40023800
 800339c:	40007000 	.word	0x40007000
 80033a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033a4:	4b1b      	ldr	r3, [pc, #108]	@ (8003414 <HAL_RCC_OscConfig+0x4ec>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d028      	beq.n	8003404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033bc:	429a      	cmp	r2, r3
 80033be:	d121      	bne.n	8003404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d11a      	bne.n	8003404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80033d4:	4013      	ands	r3, r2
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80033da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033dc:	4293      	cmp	r3, r2
 80033de:	d111      	bne.n	8003404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033ea:	085b      	lsrs	r3, r3, #1
 80033ec:	3b01      	subs	r3, #1
 80033ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d107      	bne.n	8003404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003400:	429a      	cmp	r2, r3
 8003402:	d001      	beq.n	8003408 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e000      	b.n	800340a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3718      	adds	r7, #24
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	40023800 	.word	0x40023800

08003418 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d101      	bne.n	800342c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e0cc      	b.n	80035c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800342c:	4b68      	ldr	r3, [pc, #416]	@ (80035d0 <HAL_RCC_ClockConfig+0x1b8>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0307 	and.w	r3, r3, #7
 8003434:	683a      	ldr	r2, [r7, #0]
 8003436:	429a      	cmp	r2, r3
 8003438:	d90c      	bls.n	8003454 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800343a:	4b65      	ldr	r3, [pc, #404]	@ (80035d0 <HAL_RCC_ClockConfig+0x1b8>)
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	b2d2      	uxtb	r2, r2
 8003440:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003442:	4b63      	ldr	r3, [pc, #396]	@ (80035d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0307 	and.w	r3, r3, #7
 800344a:	683a      	ldr	r2, [r7, #0]
 800344c:	429a      	cmp	r2, r3
 800344e:	d001      	beq.n	8003454 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e0b8      	b.n	80035c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d020      	beq.n	80034a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0304 	and.w	r3, r3, #4
 8003468:	2b00      	cmp	r3, #0
 800346a:	d005      	beq.n	8003478 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800346c:	4b59      	ldr	r3, [pc, #356]	@ (80035d4 <HAL_RCC_ClockConfig+0x1bc>)
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	4a58      	ldr	r2, [pc, #352]	@ (80035d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003472:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003476:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0308 	and.w	r3, r3, #8
 8003480:	2b00      	cmp	r3, #0
 8003482:	d005      	beq.n	8003490 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003484:	4b53      	ldr	r3, [pc, #332]	@ (80035d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	4a52      	ldr	r2, [pc, #328]	@ (80035d4 <HAL_RCC_ClockConfig+0x1bc>)
 800348a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800348e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003490:	4b50      	ldr	r3, [pc, #320]	@ (80035d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	494d      	ldr	r1, [pc, #308]	@ (80035d4 <HAL_RCC_ClockConfig+0x1bc>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d044      	beq.n	8003538 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d107      	bne.n	80034c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034b6:	4b47      	ldr	r3, [pc, #284]	@ (80035d4 <HAL_RCC_ClockConfig+0x1bc>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d119      	bne.n	80034f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e07f      	b.n	80035c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d003      	beq.n	80034d6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034d2:	2b03      	cmp	r3, #3
 80034d4:	d107      	bne.n	80034e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034d6:	4b3f      	ldr	r3, [pc, #252]	@ (80035d4 <HAL_RCC_ClockConfig+0x1bc>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d109      	bne.n	80034f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e06f      	b.n	80035c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034e6:	4b3b      	ldr	r3, [pc, #236]	@ (80035d4 <HAL_RCC_ClockConfig+0x1bc>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e067      	b.n	80035c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034f6:	4b37      	ldr	r3, [pc, #220]	@ (80035d4 <HAL_RCC_ClockConfig+0x1bc>)
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f023 0203 	bic.w	r2, r3, #3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	4934      	ldr	r1, [pc, #208]	@ (80035d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003504:	4313      	orrs	r3, r2
 8003506:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003508:	f7fe fa50 	bl	80019ac <HAL_GetTick>
 800350c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800350e:	e00a      	b.n	8003526 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003510:	f7fe fa4c 	bl	80019ac <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800351e:	4293      	cmp	r3, r2
 8003520:	d901      	bls.n	8003526 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e04f      	b.n	80035c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003526:	4b2b      	ldr	r3, [pc, #172]	@ (80035d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f003 020c 	and.w	r2, r3, #12
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	429a      	cmp	r2, r3
 8003536:	d1eb      	bne.n	8003510 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003538:	4b25      	ldr	r3, [pc, #148]	@ (80035d0 <HAL_RCC_ClockConfig+0x1b8>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0307 	and.w	r3, r3, #7
 8003540:	683a      	ldr	r2, [r7, #0]
 8003542:	429a      	cmp	r2, r3
 8003544:	d20c      	bcs.n	8003560 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003546:	4b22      	ldr	r3, [pc, #136]	@ (80035d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003548:	683a      	ldr	r2, [r7, #0]
 800354a:	b2d2      	uxtb	r2, r2
 800354c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800354e:	4b20      	ldr	r3, [pc, #128]	@ (80035d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0307 	and.w	r3, r3, #7
 8003556:	683a      	ldr	r2, [r7, #0]
 8003558:	429a      	cmp	r2, r3
 800355a:	d001      	beq.n	8003560 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e032      	b.n	80035c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0304 	and.w	r3, r3, #4
 8003568:	2b00      	cmp	r3, #0
 800356a:	d008      	beq.n	800357e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800356c:	4b19      	ldr	r3, [pc, #100]	@ (80035d4 <HAL_RCC_ClockConfig+0x1bc>)
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	4916      	ldr	r1, [pc, #88]	@ (80035d4 <HAL_RCC_ClockConfig+0x1bc>)
 800357a:	4313      	orrs	r3, r2
 800357c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0308 	and.w	r3, r3, #8
 8003586:	2b00      	cmp	r3, #0
 8003588:	d009      	beq.n	800359e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800358a:	4b12      	ldr	r3, [pc, #72]	@ (80035d4 <HAL_RCC_ClockConfig+0x1bc>)
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	00db      	lsls	r3, r3, #3
 8003598:	490e      	ldr	r1, [pc, #56]	@ (80035d4 <HAL_RCC_ClockConfig+0x1bc>)
 800359a:	4313      	orrs	r3, r2
 800359c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800359e:	f000 f821 	bl	80035e4 <HAL_RCC_GetSysClockFreq>
 80035a2:	4602      	mov	r2, r0
 80035a4:	4b0b      	ldr	r3, [pc, #44]	@ (80035d4 <HAL_RCC_ClockConfig+0x1bc>)
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	091b      	lsrs	r3, r3, #4
 80035aa:	f003 030f 	and.w	r3, r3, #15
 80035ae:	490a      	ldr	r1, [pc, #40]	@ (80035d8 <HAL_RCC_ClockConfig+0x1c0>)
 80035b0:	5ccb      	ldrb	r3, [r1, r3]
 80035b2:	fa22 f303 	lsr.w	r3, r2, r3
 80035b6:	4a09      	ldr	r2, [pc, #36]	@ (80035dc <HAL_RCC_ClockConfig+0x1c4>)
 80035b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80035ba:	4b09      	ldr	r3, [pc, #36]	@ (80035e0 <HAL_RCC_ClockConfig+0x1c8>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4618      	mov	r0, r3
 80035c0:	f7fe f9b0 	bl	8001924 <HAL_InitTick>

  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3710      	adds	r7, #16
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	40023c00 	.word	0x40023c00
 80035d4:	40023800 	.word	0x40023800
 80035d8:	08004330 	.word	0x08004330
 80035dc:	20000008 	.word	0x20000008
 80035e0:	2000000c 	.word	0x2000000c

080035e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035e8:	b090      	sub	sp, #64	@ 0x40
 80035ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80035ec:	2300      	movs	r3, #0
 80035ee:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80035f0:	2300      	movs	r3, #0
 80035f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80035f4:	2300      	movs	r3, #0
 80035f6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80035f8:	2300      	movs	r3, #0
 80035fa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035fc:	4b59      	ldr	r3, [pc, #356]	@ (8003764 <HAL_RCC_GetSysClockFreq+0x180>)
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f003 030c 	and.w	r3, r3, #12
 8003604:	2b08      	cmp	r3, #8
 8003606:	d00d      	beq.n	8003624 <HAL_RCC_GetSysClockFreq+0x40>
 8003608:	2b08      	cmp	r3, #8
 800360a:	f200 80a1 	bhi.w	8003750 <HAL_RCC_GetSysClockFreq+0x16c>
 800360e:	2b00      	cmp	r3, #0
 8003610:	d002      	beq.n	8003618 <HAL_RCC_GetSysClockFreq+0x34>
 8003612:	2b04      	cmp	r3, #4
 8003614:	d003      	beq.n	800361e <HAL_RCC_GetSysClockFreq+0x3a>
 8003616:	e09b      	b.n	8003750 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003618:	4b53      	ldr	r3, [pc, #332]	@ (8003768 <HAL_RCC_GetSysClockFreq+0x184>)
 800361a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800361c:	e09b      	b.n	8003756 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800361e:	4b53      	ldr	r3, [pc, #332]	@ (800376c <HAL_RCC_GetSysClockFreq+0x188>)
 8003620:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003622:	e098      	b.n	8003756 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003624:	4b4f      	ldr	r3, [pc, #316]	@ (8003764 <HAL_RCC_GetSysClockFreq+0x180>)
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800362c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800362e:	4b4d      	ldr	r3, [pc, #308]	@ (8003764 <HAL_RCC_GetSysClockFreq+0x180>)
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d028      	beq.n	800368c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800363a:	4b4a      	ldr	r3, [pc, #296]	@ (8003764 <HAL_RCC_GetSysClockFreq+0x180>)
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	099b      	lsrs	r3, r3, #6
 8003640:	2200      	movs	r2, #0
 8003642:	623b      	str	r3, [r7, #32]
 8003644:	627a      	str	r2, [r7, #36]	@ 0x24
 8003646:	6a3b      	ldr	r3, [r7, #32]
 8003648:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800364c:	2100      	movs	r1, #0
 800364e:	4b47      	ldr	r3, [pc, #284]	@ (800376c <HAL_RCC_GetSysClockFreq+0x188>)
 8003650:	fb03 f201 	mul.w	r2, r3, r1
 8003654:	2300      	movs	r3, #0
 8003656:	fb00 f303 	mul.w	r3, r0, r3
 800365a:	4413      	add	r3, r2
 800365c:	4a43      	ldr	r2, [pc, #268]	@ (800376c <HAL_RCC_GetSysClockFreq+0x188>)
 800365e:	fba0 1202 	umull	r1, r2, r0, r2
 8003662:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003664:	460a      	mov	r2, r1
 8003666:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003668:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800366a:	4413      	add	r3, r2
 800366c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800366e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003670:	2200      	movs	r2, #0
 8003672:	61bb      	str	r3, [r7, #24]
 8003674:	61fa      	str	r2, [r7, #28]
 8003676:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800367a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800367e:	f7fd fa67 	bl	8000b50 <__aeabi_uldivmod>
 8003682:	4602      	mov	r2, r0
 8003684:	460b      	mov	r3, r1
 8003686:	4613      	mov	r3, r2
 8003688:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800368a:	e053      	b.n	8003734 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800368c:	4b35      	ldr	r3, [pc, #212]	@ (8003764 <HAL_RCC_GetSysClockFreq+0x180>)
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	099b      	lsrs	r3, r3, #6
 8003692:	2200      	movs	r2, #0
 8003694:	613b      	str	r3, [r7, #16]
 8003696:	617a      	str	r2, [r7, #20]
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800369e:	f04f 0b00 	mov.w	fp, #0
 80036a2:	4652      	mov	r2, sl
 80036a4:	465b      	mov	r3, fp
 80036a6:	f04f 0000 	mov.w	r0, #0
 80036aa:	f04f 0100 	mov.w	r1, #0
 80036ae:	0159      	lsls	r1, r3, #5
 80036b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036b4:	0150      	lsls	r0, r2, #5
 80036b6:	4602      	mov	r2, r0
 80036b8:	460b      	mov	r3, r1
 80036ba:	ebb2 080a 	subs.w	r8, r2, sl
 80036be:	eb63 090b 	sbc.w	r9, r3, fp
 80036c2:	f04f 0200 	mov.w	r2, #0
 80036c6:	f04f 0300 	mov.w	r3, #0
 80036ca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80036ce:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80036d2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80036d6:	ebb2 0408 	subs.w	r4, r2, r8
 80036da:	eb63 0509 	sbc.w	r5, r3, r9
 80036de:	f04f 0200 	mov.w	r2, #0
 80036e2:	f04f 0300 	mov.w	r3, #0
 80036e6:	00eb      	lsls	r3, r5, #3
 80036e8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036ec:	00e2      	lsls	r2, r4, #3
 80036ee:	4614      	mov	r4, r2
 80036f0:	461d      	mov	r5, r3
 80036f2:	eb14 030a 	adds.w	r3, r4, sl
 80036f6:	603b      	str	r3, [r7, #0]
 80036f8:	eb45 030b 	adc.w	r3, r5, fp
 80036fc:	607b      	str	r3, [r7, #4]
 80036fe:	f04f 0200 	mov.w	r2, #0
 8003702:	f04f 0300 	mov.w	r3, #0
 8003706:	e9d7 4500 	ldrd	r4, r5, [r7]
 800370a:	4629      	mov	r1, r5
 800370c:	028b      	lsls	r3, r1, #10
 800370e:	4621      	mov	r1, r4
 8003710:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003714:	4621      	mov	r1, r4
 8003716:	028a      	lsls	r2, r1, #10
 8003718:	4610      	mov	r0, r2
 800371a:	4619      	mov	r1, r3
 800371c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800371e:	2200      	movs	r2, #0
 8003720:	60bb      	str	r3, [r7, #8]
 8003722:	60fa      	str	r2, [r7, #12]
 8003724:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003728:	f7fd fa12 	bl	8000b50 <__aeabi_uldivmod>
 800372c:	4602      	mov	r2, r0
 800372e:	460b      	mov	r3, r1
 8003730:	4613      	mov	r3, r2
 8003732:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003734:	4b0b      	ldr	r3, [pc, #44]	@ (8003764 <HAL_RCC_GetSysClockFreq+0x180>)
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	0c1b      	lsrs	r3, r3, #16
 800373a:	f003 0303 	and.w	r3, r3, #3
 800373e:	3301      	adds	r3, #1
 8003740:	005b      	lsls	r3, r3, #1
 8003742:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003744:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003748:	fbb2 f3f3 	udiv	r3, r2, r3
 800374c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800374e:	e002      	b.n	8003756 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003750:	4b05      	ldr	r3, [pc, #20]	@ (8003768 <HAL_RCC_GetSysClockFreq+0x184>)
 8003752:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003754:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003758:	4618      	mov	r0, r3
 800375a:	3740      	adds	r7, #64	@ 0x40
 800375c:	46bd      	mov	sp, r7
 800375e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003762:	bf00      	nop
 8003764:	40023800 	.word	0x40023800
 8003768:	00f42400 	.word	0x00f42400
 800376c:	017d7840 	.word	0x017d7840

08003770 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003770:	b480      	push	{r7}
 8003772:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003774:	4b03      	ldr	r3, [pc, #12]	@ (8003784 <HAL_RCC_GetHCLKFreq+0x14>)
 8003776:	681b      	ldr	r3, [r3, #0]
}
 8003778:	4618      	mov	r0, r3
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	20000008 	.word	0x20000008

08003788 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800378c:	f7ff fff0 	bl	8003770 <HAL_RCC_GetHCLKFreq>
 8003790:	4602      	mov	r2, r0
 8003792:	4b05      	ldr	r3, [pc, #20]	@ (80037a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	0a9b      	lsrs	r3, r3, #10
 8003798:	f003 0307 	and.w	r3, r3, #7
 800379c:	4903      	ldr	r1, [pc, #12]	@ (80037ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800379e:	5ccb      	ldrb	r3, [r1, r3]
 80037a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	40023800 	.word	0x40023800
 80037ac:	08004340 	.word	0x08004340

080037b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80037b4:	f7ff ffdc 	bl	8003770 <HAL_RCC_GetHCLKFreq>
 80037b8:	4602      	mov	r2, r0
 80037ba:	4b05      	ldr	r3, [pc, #20]	@ (80037d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	0b5b      	lsrs	r3, r3, #13
 80037c0:	f003 0307 	and.w	r3, r3, #7
 80037c4:	4903      	ldr	r1, [pc, #12]	@ (80037d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037c6:	5ccb      	ldrb	r3, [r1, r3]
 80037c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	40023800 	.word	0x40023800
 80037d4:	08004340 	.word	0x08004340

080037d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d101      	bne.n	80037ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e042      	b.n	8003870 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d106      	bne.n	8003804 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f7fd ffba 	bl	8001778 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2224      	movs	r2, #36	@ 0x24
 8003808:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68da      	ldr	r2, [r3, #12]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800381a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 f82b 	bl	8003878 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	691a      	ldr	r2, [r3, #16]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003830:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	695a      	ldr	r2, [r3, #20]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003840:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68da      	ldr	r2, [r3, #12]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003850:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2220      	movs	r2, #32
 800385c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2220      	movs	r2, #32
 8003864:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3708      	adds	r7, #8
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003878:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800387c:	b0c0      	sub	sp, #256	@ 0x100
 800387e:	af00      	add	r7, sp, #0
 8003880:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003894:	68d9      	ldr	r1, [r3, #12]
 8003896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	ea40 0301 	orr.w	r3, r0, r1
 80038a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80038a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038a6:	689a      	ldr	r2, [r3, #8]
 80038a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	431a      	orrs	r2, r3
 80038b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	431a      	orrs	r2, r3
 80038b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038bc:	69db      	ldr	r3, [r3, #28]
 80038be:	4313      	orrs	r3, r2
 80038c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80038c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80038d0:	f021 010c 	bic.w	r1, r1, #12
 80038d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80038de:	430b      	orrs	r3, r1
 80038e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80038ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038f2:	6999      	ldr	r1, [r3, #24]
 80038f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	ea40 0301 	orr.w	r3, r0, r1
 80038fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	4b8f      	ldr	r3, [pc, #572]	@ (8003b44 <UART_SetConfig+0x2cc>)
 8003908:	429a      	cmp	r2, r3
 800390a:	d005      	beq.n	8003918 <UART_SetConfig+0xa0>
 800390c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	4b8d      	ldr	r3, [pc, #564]	@ (8003b48 <UART_SetConfig+0x2d0>)
 8003914:	429a      	cmp	r2, r3
 8003916:	d104      	bne.n	8003922 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003918:	f7ff ff4a 	bl	80037b0 <HAL_RCC_GetPCLK2Freq>
 800391c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003920:	e003      	b.n	800392a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003922:	f7ff ff31 	bl	8003788 <HAL_RCC_GetPCLK1Freq>
 8003926:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800392a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800392e:	69db      	ldr	r3, [r3, #28]
 8003930:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003934:	f040 810c 	bne.w	8003b50 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003938:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800393c:	2200      	movs	r2, #0
 800393e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003942:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003946:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800394a:	4622      	mov	r2, r4
 800394c:	462b      	mov	r3, r5
 800394e:	1891      	adds	r1, r2, r2
 8003950:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003952:	415b      	adcs	r3, r3
 8003954:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003956:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800395a:	4621      	mov	r1, r4
 800395c:	eb12 0801 	adds.w	r8, r2, r1
 8003960:	4629      	mov	r1, r5
 8003962:	eb43 0901 	adc.w	r9, r3, r1
 8003966:	f04f 0200 	mov.w	r2, #0
 800396a:	f04f 0300 	mov.w	r3, #0
 800396e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003972:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003976:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800397a:	4690      	mov	r8, r2
 800397c:	4699      	mov	r9, r3
 800397e:	4623      	mov	r3, r4
 8003980:	eb18 0303 	adds.w	r3, r8, r3
 8003984:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003988:	462b      	mov	r3, r5
 800398a:	eb49 0303 	adc.w	r3, r9, r3
 800398e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800399e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80039a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80039a6:	460b      	mov	r3, r1
 80039a8:	18db      	adds	r3, r3, r3
 80039aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80039ac:	4613      	mov	r3, r2
 80039ae:	eb42 0303 	adc.w	r3, r2, r3
 80039b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80039b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80039b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80039bc:	f7fd f8c8 	bl	8000b50 <__aeabi_uldivmod>
 80039c0:	4602      	mov	r2, r0
 80039c2:	460b      	mov	r3, r1
 80039c4:	4b61      	ldr	r3, [pc, #388]	@ (8003b4c <UART_SetConfig+0x2d4>)
 80039c6:	fba3 2302 	umull	r2, r3, r3, r2
 80039ca:	095b      	lsrs	r3, r3, #5
 80039cc:	011c      	lsls	r4, r3, #4
 80039ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039d2:	2200      	movs	r2, #0
 80039d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80039d8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80039dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80039e0:	4642      	mov	r2, r8
 80039e2:	464b      	mov	r3, r9
 80039e4:	1891      	adds	r1, r2, r2
 80039e6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80039e8:	415b      	adcs	r3, r3
 80039ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80039f0:	4641      	mov	r1, r8
 80039f2:	eb12 0a01 	adds.w	sl, r2, r1
 80039f6:	4649      	mov	r1, r9
 80039f8:	eb43 0b01 	adc.w	fp, r3, r1
 80039fc:	f04f 0200 	mov.w	r2, #0
 8003a00:	f04f 0300 	mov.w	r3, #0
 8003a04:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a08:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a10:	4692      	mov	sl, r2
 8003a12:	469b      	mov	fp, r3
 8003a14:	4643      	mov	r3, r8
 8003a16:	eb1a 0303 	adds.w	r3, sl, r3
 8003a1a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a1e:	464b      	mov	r3, r9
 8003a20:	eb4b 0303 	adc.w	r3, fp, r3
 8003a24:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003a34:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003a38:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	18db      	adds	r3, r3, r3
 8003a40:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a42:	4613      	mov	r3, r2
 8003a44:	eb42 0303 	adc.w	r3, r2, r3
 8003a48:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a4a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003a4e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003a52:	f7fd f87d 	bl	8000b50 <__aeabi_uldivmod>
 8003a56:	4602      	mov	r2, r0
 8003a58:	460b      	mov	r3, r1
 8003a5a:	4611      	mov	r1, r2
 8003a5c:	4b3b      	ldr	r3, [pc, #236]	@ (8003b4c <UART_SetConfig+0x2d4>)
 8003a5e:	fba3 2301 	umull	r2, r3, r3, r1
 8003a62:	095b      	lsrs	r3, r3, #5
 8003a64:	2264      	movs	r2, #100	@ 0x64
 8003a66:	fb02 f303 	mul.w	r3, r2, r3
 8003a6a:	1acb      	subs	r3, r1, r3
 8003a6c:	00db      	lsls	r3, r3, #3
 8003a6e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003a72:	4b36      	ldr	r3, [pc, #216]	@ (8003b4c <UART_SetConfig+0x2d4>)
 8003a74:	fba3 2302 	umull	r2, r3, r3, r2
 8003a78:	095b      	lsrs	r3, r3, #5
 8003a7a:	005b      	lsls	r3, r3, #1
 8003a7c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003a80:	441c      	add	r4, r3
 8003a82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a86:	2200      	movs	r2, #0
 8003a88:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003a8c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003a90:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003a94:	4642      	mov	r2, r8
 8003a96:	464b      	mov	r3, r9
 8003a98:	1891      	adds	r1, r2, r2
 8003a9a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003a9c:	415b      	adcs	r3, r3
 8003a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003aa0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003aa4:	4641      	mov	r1, r8
 8003aa6:	1851      	adds	r1, r2, r1
 8003aa8:	6339      	str	r1, [r7, #48]	@ 0x30
 8003aaa:	4649      	mov	r1, r9
 8003aac:	414b      	adcs	r3, r1
 8003aae:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ab0:	f04f 0200 	mov.w	r2, #0
 8003ab4:	f04f 0300 	mov.w	r3, #0
 8003ab8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003abc:	4659      	mov	r1, fp
 8003abe:	00cb      	lsls	r3, r1, #3
 8003ac0:	4651      	mov	r1, sl
 8003ac2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ac6:	4651      	mov	r1, sl
 8003ac8:	00ca      	lsls	r2, r1, #3
 8003aca:	4610      	mov	r0, r2
 8003acc:	4619      	mov	r1, r3
 8003ace:	4603      	mov	r3, r0
 8003ad0:	4642      	mov	r2, r8
 8003ad2:	189b      	adds	r3, r3, r2
 8003ad4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ad8:	464b      	mov	r3, r9
 8003ada:	460a      	mov	r2, r1
 8003adc:	eb42 0303 	adc.w	r3, r2, r3
 8003ae0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003af0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003af4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003af8:	460b      	mov	r3, r1
 8003afa:	18db      	adds	r3, r3, r3
 8003afc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003afe:	4613      	mov	r3, r2
 8003b00:	eb42 0303 	adc.w	r3, r2, r3
 8003b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003b0a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003b0e:	f7fd f81f 	bl	8000b50 <__aeabi_uldivmod>
 8003b12:	4602      	mov	r2, r0
 8003b14:	460b      	mov	r3, r1
 8003b16:	4b0d      	ldr	r3, [pc, #52]	@ (8003b4c <UART_SetConfig+0x2d4>)
 8003b18:	fba3 1302 	umull	r1, r3, r3, r2
 8003b1c:	095b      	lsrs	r3, r3, #5
 8003b1e:	2164      	movs	r1, #100	@ 0x64
 8003b20:	fb01 f303 	mul.w	r3, r1, r3
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	00db      	lsls	r3, r3, #3
 8003b28:	3332      	adds	r3, #50	@ 0x32
 8003b2a:	4a08      	ldr	r2, [pc, #32]	@ (8003b4c <UART_SetConfig+0x2d4>)
 8003b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b30:	095b      	lsrs	r3, r3, #5
 8003b32:	f003 0207 	and.w	r2, r3, #7
 8003b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4422      	add	r2, r4
 8003b3e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b40:	e106      	b.n	8003d50 <UART_SetConfig+0x4d8>
 8003b42:	bf00      	nop
 8003b44:	40011000 	.word	0x40011000
 8003b48:	40011400 	.word	0x40011400
 8003b4c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b54:	2200      	movs	r2, #0
 8003b56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003b5a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003b5e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003b62:	4642      	mov	r2, r8
 8003b64:	464b      	mov	r3, r9
 8003b66:	1891      	adds	r1, r2, r2
 8003b68:	6239      	str	r1, [r7, #32]
 8003b6a:	415b      	adcs	r3, r3
 8003b6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b72:	4641      	mov	r1, r8
 8003b74:	1854      	adds	r4, r2, r1
 8003b76:	4649      	mov	r1, r9
 8003b78:	eb43 0501 	adc.w	r5, r3, r1
 8003b7c:	f04f 0200 	mov.w	r2, #0
 8003b80:	f04f 0300 	mov.w	r3, #0
 8003b84:	00eb      	lsls	r3, r5, #3
 8003b86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b8a:	00e2      	lsls	r2, r4, #3
 8003b8c:	4614      	mov	r4, r2
 8003b8e:	461d      	mov	r5, r3
 8003b90:	4643      	mov	r3, r8
 8003b92:	18e3      	adds	r3, r4, r3
 8003b94:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003b98:	464b      	mov	r3, r9
 8003b9a:	eb45 0303 	adc.w	r3, r5, r3
 8003b9e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003bae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003bb2:	f04f 0200 	mov.w	r2, #0
 8003bb6:	f04f 0300 	mov.w	r3, #0
 8003bba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003bbe:	4629      	mov	r1, r5
 8003bc0:	008b      	lsls	r3, r1, #2
 8003bc2:	4621      	mov	r1, r4
 8003bc4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bc8:	4621      	mov	r1, r4
 8003bca:	008a      	lsls	r2, r1, #2
 8003bcc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003bd0:	f7fc ffbe 	bl	8000b50 <__aeabi_uldivmod>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	460b      	mov	r3, r1
 8003bd8:	4b60      	ldr	r3, [pc, #384]	@ (8003d5c <UART_SetConfig+0x4e4>)
 8003bda:	fba3 2302 	umull	r2, r3, r3, r2
 8003bde:	095b      	lsrs	r3, r3, #5
 8003be0:	011c      	lsls	r4, r3, #4
 8003be2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003be6:	2200      	movs	r2, #0
 8003be8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003bec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003bf0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003bf4:	4642      	mov	r2, r8
 8003bf6:	464b      	mov	r3, r9
 8003bf8:	1891      	adds	r1, r2, r2
 8003bfa:	61b9      	str	r1, [r7, #24]
 8003bfc:	415b      	adcs	r3, r3
 8003bfe:	61fb      	str	r3, [r7, #28]
 8003c00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c04:	4641      	mov	r1, r8
 8003c06:	1851      	adds	r1, r2, r1
 8003c08:	6139      	str	r1, [r7, #16]
 8003c0a:	4649      	mov	r1, r9
 8003c0c:	414b      	adcs	r3, r1
 8003c0e:	617b      	str	r3, [r7, #20]
 8003c10:	f04f 0200 	mov.w	r2, #0
 8003c14:	f04f 0300 	mov.w	r3, #0
 8003c18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c1c:	4659      	mov	r1, fp
 8003c1e:	00cb      	lsls	r3, r1, #3
 8003c20:	4651      	mov	r1, sl
 8003c22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c26:	4651      	mov	r1, sl
 8003c28:	00ca      	lsls	r2, r1, #3
 8003c2a:	4610      	mov	r0, r2
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	4603      	mov	r3, r0
 8003c30:	4642      	mov	r2, r8
 8003c32:	189b      	adds	r3, r3, r2
 8003c34:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003c38:	464b      	mov	r3, r9
 8003c3a:	460a      	mov	r2, r1
 8003c3c:	eb42 0303 	adc.w	r3, r2, r3
 8003c40:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003c4e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003c50:	f04f 0200 	mov.w	r2, #0
 8003c54:	f04f 0300 	mov.w	r3, #0
 8003c58:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003c5c:	4649      	mov	r1, r9
 8003c5e:	008b      	lsls	r3, r1, #2
 8003c60:	4641      	mov	r1, r8
 8003c62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c66:	4641      	mov	r1, r8
 8003c68:	008a      	lsls	r2, r1, #2
 8003c6a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003c6e:	f7fc ff6f 	bl	8000b50 <__aeabi_uldivmod>
 8003c72:	4602      	mov	r2, r0
 8003c74:	460b      	mov	r3, r1
 8003c76:	4611      	mov	r1, r2
 8003c78:	4b38      	ldr	r3, [pc, #224]	@ (8003d5c <UART_SetConfig+0x4e4>)
 8003c7a:	fba3 2301 	umull	r2, r3, r3, r1
 8003c7e:	095b      	lsrs	r3, r3, #5
 8003c80:	2264      	movs	r2, #100	@ 0x64
 8003c82:	fb02 f303 	mul.w	r3, r2, r3
 8003c86:	1acb      	subs	r3, r1, r3
 8003c88:	011b      	lsls	r3, r3, #4
 8003c8a:	3332      	adds	r3, #50	@ 0x32
 8003c8c:	4a33      	ldr	r2, [pc, #204]	@ (8003d5c <UART_SetConfig+0x4e4>)
 8003c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c92:	095b      	lsrs	r3, r3, #5
 8003c94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c98:	441c      	add	r4, r3
 8003c9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	673b      	str	r3, [r7, #112]	@ 0x70
 8003ca2:	677a      	str	r2, [r7, #116]	@ 0x74
 8003ca4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003ca8:	4642      	mov	r2, r8
 8003caa:	464b      	mov	r3, r9
 8003cac:	1891      	adds	r1, r2, r2
 8003cae:	60b9      	str	r1, [r7, #8]
 8003cb0:	415b      	adcs	r3, r3
 8003cb2:	60fb      	str	r3, [r7, #12]
 8003cb4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cb8:	4641      	mov	r1, r8
 8003cba:	1851      	adds	r1, r2, r1
 8003cbc:	6039      	str	r1, [r7, #0]
 8003cbe:	4649      	mov	r1, r9
 8003cc0:	414b      	adcs	r3, r1
 8003cc2:	607b      	str	r3, [r7, #4]
 8003cc4:	f04f 0200 	mov.w	r2, #0
 8003cc8:	f04f 0300 	mov.w	r3, #0
 8003ccc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003cd0:	4659      	mov	r1, fp
 8003cd2:	00cb      	lsls	r3, r1, #3
 8003cd4:	4651      	mov	r1, sl
 8003cd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cda:	4651      	mov	r1, sl
 8003cdc:	00ca      	lsls	r2, r1, #3
 8003cde:	4610      	mov	r0, r2
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	4642      	mov	r2, r8
 8003ce6:	189b      	adds	r3, r3, r2
 8003ce8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003cea:	464b      	mov	r3, r9
 8003cec:	460a      	mov	r2, r1
 8003cee:	eb42 0303 	adc.w	r3, r2, r3
 8003cf2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	663b      	str	r3, [r7, #96]	@ 0x60
 8003cfe:	667a      	str	r2, [r7, #100]	@ 0x64
 8003d00:	f04f 0200 	mov.w	r2, #0
 8003d04:	f04f 0300 	mov.w	r3, #0
 8003d08:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003d0c:	4649      	mov	r1, r9
 8003d0e:	008b      	lsls	r3, r1, #2
 8003d10:	4641      	mov	r1, r8
 8003d12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d16:	4641      	mov	r1, r8
 8003d18:	008a      	lsls	r2, r1, #2
 8003d1a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003d1e:	f7fc ff17 	bl	8000b50 <__aeabi_uldivmod>
 8003d22:	4602      	mov	r2, r0
 8003d24:	460b      	mov	r3, r1
 8003d26:	4b0d      	ldr	r3, [pc, #52]	@ (8003d5c <UART_SetConfig+0x4e4>)
 8003d28:	fba3 1302 	umull	r1, r3, r3, r2
 8003d2c:	095b      	lsrs	r3, r3, #5
 8003d2e:	2164      	movs	r1, #100	@ 0x64
 8003d30:	fb01 f303 	mul.w	r3, r1, r3
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	011b      	lsls	r3, r3, #4
 8003d38:	3332      	adds	r3, #50	@ 0x32
 8003d3a:	4a08      	ldr	r2, [pc, #32]	@ (8003d5c <UART_SetConfig+0x4e4>)
 8003d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d40:	095b      	lsrs	r3, r3, #5
 8003d42:	f003 020f 	and.w	r2, r3, #15
 8003d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4422      	add	r2, r4
 8003d4e:	609a      	str	r2, [r3, #8]
}
 8003d50:	bf00      	nop
 8003d52:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003d56:	46bd      	mov	sp, r7
 8003d58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d5c:	51eb851f 	.word	0x51eb851f

08003d60 <memset>:
 8003d60:	4402      	add	r2, r0
 8003d62:	4603      	mov	r3, r0
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d100      	bne.n	8003d6a <memset+0xa>
 8003d68:	4770      	bx	lr
 8003d6a:	f803 1b01 	strb.w	r1, [r3], #1
 8003d6e:	e7f9      	b.n	8003d64 <memset+0x4>

08003d70 <__errno>:
 8003d70:	4b01      	ldr	r3, [pc, #4]	@ (8003d78 <__errno+0x8>)
 8003d72:	6818      	ldr	r0, [r3, #0]
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop
 8003d78:	20000014 	.word	0x20000014

08003d7c <__libc_init_array>:
 8003d7c:	b570      	push	{r4, r5, r6, lr}
 8003d7e:	4d0d      	ldr	r5, [pc, #52]	@ (8003db4 <__libc_init_array+0x38>)
 8003d80:	4c0d      	ldr	r4, [pc, #52]	@ (8003db8 <__libc_init_array+0x3c>)
 8003d82:	1b64      	subs	r4, r4, r5
 8003d84:	10a4      	asrs	r4, r4, #2
 8003d86:	2600      	movs	r6, #0
 8003d88:	42a6      	cmp	r6, r4
 8003d8a:	d109      	bne.n	8003da0 <__libc_init_array+0x24>
 8003d8c:	4d0b      	ldr	r5, [pc, #44]	@ (8003dbc <__libc_init_array+0x40>)
 8003d8e:	4c0c      	ldr	r4, [pc, #48]	@ (8003dc0 <__libc_init_array+0x44>)
 8003d90:	f000 fac0 	bl	8004314 <_init>
 8003d94:	1b64      	subs	r4, r4, r5
 8003d96:	10a4      	asrs	r4, r4, #2
 8003d98:	2600      	movs	r6, #0
 8003d9a:	42a6      	cmp	r6, r4
 8003d9c:	d105      	bne.n	8003daa <__libc_init_array+0x2e>
 8003d9e:	bd70      	pop	{r4, r5, r6, pc}
 8003da0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003da4:	4798      	blx	r3
 8003da6:	3601      	adds	r6, #1
 8003da8:	e7ee      	b.n	8003d88 <__libc_init_array+0xc>
 8003daa:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dae:	4798      	blx	r3
 8003db0:	3601      	adds	r6, #1
 8003db2:	e7f2      	b.n	8003d9a <__libc_init_array+0x1e>
 8003db4:	08004390 	.word	0x08004390
 8003db8:	08004390 	.word	0x08004390
 8003dbc:	08004390 	.word	0x08004390
 8003dc0:	08004394 	.word	0x08004394

08003dc4 <sqrt>:
 8003dc4:	b538      	push	{r3, r4, r5, lr}
 8003dc6:	ed2d 8b02 	vpush	{d8}
 8003dca:	ec55 4b10 	vmov	r4, r5, d0
 8003dce:	f000 f9c7 	bl	8004160 <__ieee754_sqrt>
 8003dd2:	4622      	mov	r2, r4
 8003dd4:	462b      	mov	r3, r5
 8003dd6:	4620      	mov	r0, r4
 8003dd8:	4629      	mov	r1, r5
 8003dda:	eeb0 8a40 	vmov.f32	s16, s0
 8003dde:	eef0 8a60 	vmov.f32	s17, s1
 8003de2:	f7fc fe4f 	bl	8000a84 <__aeabi_dcmpun>
 8003de6:	b990      	cbnz	r0, 8003e0e <sqrt+0x4a>
 8003de8:	2200      	movs	r2, #0
 8003dea:	2300      	movs	r3, #0
 8003dec:	4620      	mov	r0, r4
 8003dee:	4629      	mov	r1, r5
 8003df0:	f7fc fe20 	bl	8000a34 <__aeabi_dcmplt>
 8003df4:	b158      	cbz	r0, 8003e0e <sqrt+0x4a>
 8003df6:	f7ff ffbb 	bl	8003d70 <__errno>
 8003dfa:	2321      	movs	r3, #33	@ 0x21
 8003dfc:	6003      	str	r3, [r0, #0]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	2300      	movs	r3, #0
 8003e02:	4610      	mov	r0, r2
 8003e04:	4619      	mov	r1, r3
 8003e06:	f7fc fccd 	bl	80007a4 <__aeabi_ddiv>
 8003e0a:	ec41 0b18 	vmov	d8, r0, r1
 8003e0e:	eeb0 0a48 	vmov.f32	s0, s16
 8003e12:	eef0 0a68 	vmov.f32	s1, s17
 8003e16:	ecbd 8b02 	vpop	{d8}
 8003e1a:	bd38      	pop	{r3, r4, r5, pc}
 8003e1c:	0000      	movs	r0, r0
	...

08003e20 <atan>:
 8003e20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e24:	ec55 4b10 	vmov	r4, r5, d0
 8003e28:	4bbf      	ldr	r3, [pc, #764]	@ (8004128 <atan+0x308>)
 8003e2a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8003e2e:	429e      	cmp	r6, r3
 8003e30:	46ab      	mov	fp, r5
 8003e32:	d918      	bls.n	8003e66 <atan+0x46>
 8003e34:	4bbd      	ldr	r3, [pc, #756]	@ (800412c <atan+0x30c>)
 8003e36:	429e      	cmp	r6, r3
 8003e38:	d801      	bhi.n	8003e3e <atan+0x1e>
 8003e3a:	d109      	bne.n	8003e50 <atan+0x30>
 8003e3c:	b144      	cbz	r4, 8003e50 <atan+0x30>
 8003e3e:	4622      	mov	r2, r4
 8003e40:	462b      	mov	r3, r5
 8003e42:	4620      	mov	r0, r4
 8003e44:	4629      	mov	r1, r5
 8003e46:	f7fc f9cd 	bl	80001e4 <__adddf3>
 8003e4a:	4604      	mov	r4, r0
 8003e4c:	460d      	mov	r5, r1
 8003e4e:	e006      	b.n	8003e5e <atan+0x3e>
 8003e50:	f1bb 0f00 	cmp.w	fp, #0
 8003e54:	f340 812b 	ble.w	80040ae <atan+0x28e>
 8003e58:	a597      	add	r5, pc, #604	@ (adr r5, 80040b8 <atan+0x298>)
 8003e5a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003e5e:	ec45 4b10 	vmov	d0, r4, r5
 8003e62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e66:	4bb2      	ldr	r3, [pc, #712]	@ (8004130 <atan+0x310>)
 8003e68:	429e      	cmp	r6, r3
 8003e6a:	d813      	bhi.n	8003e94 <atan+0x74>
 8003e6c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8003e70:	429e      	cmp	r6, r3
 8003e72:	d80c      	bhi.n	8003e8e <atan+0x6e>
 8003e74:	a392      	add	r3, pc, #584	@ (adr r3, 80040c0 <atan+0x2a0>)
 8003e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e7a:	4620      	mov	r0, r4
 8003e7c:	4629      	mov	r1, r5
 8003e7e:	f7fc f9b1 	bl	80001e4 <__adddf3>
 8003e82:	4bac      	ldr	r3, [pc, #688]	@ (8004134 <atan+0x314>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	f7fc fdf3 	bl	8000a70 <__aeabi_dcmpgt>
 8003e8a:	2800      	cmp	r0, #0
 8003e8c:	d1e7      	bne.n	8003e5e <atan+0x3e>
 8003e8e:	f04f 3aff 	mov.w	sl, #4294967295
 8003e92:	e029      	b.n	8003ee8 <atan+0xc8>
 8003e94:	f000 f95c 	bl	8004150 <fabs>
 8003e98:	4ba7      	ldr	r3, [pc, #668]	@ (8004138 <atan+0x318>)
 8003e9a:	429e      	cmp	r6, r3
 8003e9c:	ec55 4b10 	vmov	r4, r5, d0
 8003ea0:	f200 80bc 	bhi.w	800401c <atan+0x1fc>
 8003ea4:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8003ea8:	429e      	cmp	r6, r3
 8003eaa:	f200 809e 	bhi.w	8003fea <atan+0x1ca>
 8003eae:	4622      	mov	r2, r4
 8003eb0:	462b      	mov	r3, r5
 8003eb2:	4620      	mov	r0, r4
 8003eb4:	4629      	mov	r1, r5
 8003eb6:	f7fc f995 	bl	80001e4 <__adddf3>
 8003eba:	4b9e      	ldr	r3, [pc, #632]	@ (8004134 <atan+0x314>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f7fc f98f 	bl	80001e0 <__aeabi_dsub>
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	4606      	mov	r6, r0
 8003ec6:	460f      	mov	r7, r1
 8003ec8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003ecc:	4620      	mov	r0, r4
 8003ece:	4629      	mov	r1, r5
 8003ed0:	f7fc f988 	bl	80001e4 <__adddf3>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	460b      	mov	r3, r1
 8003ed8:	4630      	mov	r0, r6
 8003eda:	4639      	mov	r1, r7
 8003edc:	f7fc fc62 	bl	80007a4 <__aeabi_ddiv>
 8003ee0:	f04f 0a00 	mov.w	sl, #0
 8003ee4:	4604      	mov	r4, r0
 8003ee6:	460d      	mov	r5, r1
 8003ee8:	4622      	mov	r2, r4
 8003eea:	462b      	mov	r3, r5
 8003eec:	4620      	mov	r0, r4
 8003eee:	4629      	mov	r1, r5
 8003ef0:	f7fc fb2e 	bl	8000550 <__aeabi_dmul>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	460b      	mov	r3, r1
 8003ef8:	4680      	mov	r8, r0
 8003efa:	4689      	mov	r9, r1
 8003efc:	f7fc fb28 	bl	8000550 <__aeabi_dmul>
 8003f00:	a371      	add	r3, pc, #452	@ (adr r3, 80040c8 <atan+0x2a8>)
 8003f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f06:	4606      	mov	r6, r0
 8003f08:	460f      	mov	r7, r1
 8003f0a:	f7fc fb21 	bl	8000550 <__aeabi_dmul>
 8003f0e:	a370      	add	r3, pc, #448	@ (adr r3, 80040d0 <atan+0x2b0>)
 8003f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f14:	f7fc f966 	bl	80001e4 <__adddf3>
 8003f18:	4632      	mov	r2, r6
 8003f1a:	463b      	mov	r3, r7
 8003f1c:	f7fc fb18 	bl	8000550 <__aeabi_dmul>
 8003f20:	a36d      	add	r3, pc, #436	@ (adr r3, 80040d8 <atan+0x2b8>)
 8003f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f26:	f7fc f95d 	bl	80001e4 <__adddf3>
 8003f2a:	4632      	mov	r2, r6
 8003f2c:	463b      	mov	r3, r7
 8003f2e:	f7fc fb0f 	bl	8000550 <__aeabi_dmul>
 8003f32:	a36b      	add	r3, pc, #428	@ (adr r3, 80040e0 <atan+0x2c0>)
 8003f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f38:	f7fc f954 	bl	80001e4 <__adddf3>
 8003f3c:	4632      	mov	r2, r6
 8003f3e:	463b      	mov	r3, r7
 8003f40:	f7fc fb06 	bl	8000550 <__aeabi_dmul>
 8003f44:	a368      	add	r3, pc, #416	@ (adr r3, 80040e8 <atan+0x2c8>)
 8003f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f4a:	f7fc f94b 	bl	80001e4 <__adddf3>
 8003f4e:	4632      	mov	r2, r6
 8003f50:	463b      	mov	r3, r7
 8003f52:	f7fc fafd 	bl	8000550 <__aeabi_dmul>
 8003f56:	a366      	add	r3, pc, #408	@ (adr r3, 80040f0 <atan+0x2d0>)
 8003f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f5c:	f7fc f942 	bl	80001e4 <__adddf3>
 8003f60:	4642      	mov	r2, r8
 8003f62:	464b      	mov	r3, r9
 8003f64:	f7fc faf4 	bl	8000550 <__aeabi_dmul>
 8003f68:	a363      	add	r3, pc, #396	@ (adr r3, 80040f8 <atan+0x2d8>)
 8003f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f6e:	4680      	mov	r8, r0
 8003f70:	4689      	mov	r9, r1
 8003f72:	4630      	mov	r0, r6
 8003f74:	4639      	mov	r1, r7
 8003f76:	f7fc faeb 	bl	8000550 <__aeabi_dmul>
 8003f7a:	a361      	add	r3, pc, #388	@ (adr r3, 8004100 <atan+0x2e0>)
 8003f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f80:	f7fc f92e 	bl	80001e0 <__aeabi_dsub>
 8003f84:	4632      	mov	r2, r6
 8003f86:	463b      	mov	r3, r7
 8003f88:	f7fc fae2 	bl	8000550 <__aeabi_dmul>
 8003f8c:	a35e      	add	r3, pc, #376	@ (adr r3, 8004108 <atan+0x2e8>)
 8003f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f92:	f7fc f925 	bl	80001e0 <__aeabi_dsub>
 8003f96:	4632      	mov	r2, r6
 8003f98:	463b      	mov	r3, r7
 8003f9a:	f7fc fad9 	bl	8000550 <__aeabi_dmul>
 8003f9e:	a35c      	add	r3, pc, #368	@ (adr r3, 8004110 <atan+0x2f0>)
 8003fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa4:	f7fc f91c 	bl	80001e0 <__aeabi_dsub>
 8003fa8:	4632      	mov	r2, r6
 8003faa:	463b      	mov	r3, r7
 8003fac:	f7fc fad0 	bl	8000550 <__aeabi_dmul>
 8003fb0:	a359      	add	r3, pc, #356	@ (adr r3, 8004118 <atan+0x2f8>)
 8003fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb6:	f7fc f913 	bl	80001e0 <__aeabi_dsub>
 8003fba:	4632      	mov	r2, r6
 8003fbc:	463b      	mov	r3, r7
 8003fbe:	f7fc fac7 	bl	8000550 <__aeabi_dmul>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	4640      	mov	r0, r8
 8003fc8:	4649      	mov	r1, r9
 8003fca:	f7fc f90b 	bl	80001e4 <__adddf3>
 8003fce:	4622      	mov	r2, r4
 8003fd0:	462b      	mov	r3, r5
 8003fd2:	f7fc fabd 	bl	8000550 <__aeabi_dmul>
 8003fd6:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003fda:	4602      	mov	r2, r0
 8003fdc:	460b      	mov	r3, r1
 8003fde:	d148      	bne.n	8004072 <atan+0x252>
 8003fe0:	4620      	mov	r0, r4
 8003fe2:	4629      	mov	r1, r5
 8003fe4:	f7fc f8fc 	bl	80001e0 <__aeabi_dsub>
 8003fe8:	e72f      	b.n	8003e4a <atan+0x2a>
 8003fea:	4b52      	ldr	r3, [pc, #328]	@ (8004134 <atan+0x314>)
 8003fec:	2200      	movs	r2, #0
 8003fee:	4620      	mov	r0, r4
 8003ff0:	4629      	mov	r1, r5
 8003ff2:	f7fc f8f5 	bl	80001e0 <__aeabi_dsub>
 8003ff6:	4b4f      	ldr	r3, [pc, #316]	@ (8004134 <atan+0x314>)
 8003ff8:	4606      	mov	r6, r0
 8003ffa:	460f      	mov	r7, r1
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	4620      	mov	r0, r4
 8004000:	4629      	mov	r1, r5
 8004002:	f7fc f8ef 	bl	80001e4 <__adddf3>
 8004006:	4602      	mov	r2, r0
 8004008:	460b      	mov	r3, r1
 800400a:	4630      	mov	r0, r6
 800400c:	4639      	mov	r1, r7
 800400e:	f7fc fbc9 	bl	80007a4 <__aeabi_ddiv>
 8004012:	f04f 0a01 	mov.w	sl, #1
 8004016:	4604      	mov	r4, r0
 8004018:	460d      	mov	r5, r1
 800401a:	e765      	b.n	8003ee8 <atan+0xc8>
 800401c:	4b47      	ldr	r3, [pc, #284]	@ (800413c <atan+0x31c>)
 800401e:	429e      	cmp	r6, r3
 8004020:	d21c      	bcs.n	800405c <atan+0x23c>
 8004022:	4b47      	ldr	r3, [pc, #284]	@ (8004140 <atan+0x320>)
 8004024:	2200      	movs	r2, #0
 8004026:	4620      	mov	r0, r4
 8004028:	4629      	mov	r1, r5
 800402a:	f7fc f8d9 	bl	80001e0 <__aeabi_dsub>
 800402e:	4b44      	ldr	r3, [pc, #272]	@ (8004140 <atan+0x320>)
 8004030:	4606      	mov	r6, r0
 8004032:	460f      	mov	r7, r1
 8004034:	2200      	movs	r2, #0
 8004036:	4620      	mov	r0, r4
 8004038:	4629      	mov	r1, r5
 800403a:	f7fc fa89 	bl	8000550 <__aeabi_dmul>
 800403e:	4b3d      	ldr	r3, [pc, #244]	@ (8004134 <atan+0x314>)
 8004040:	2200      	movs	r2, #0
 8004042:	f7fc f8cf 	bl	80001e4 <__adddf3>
 8004046:	4602      	mov	r2, r0
 8004048:	460b      	mov	r3, r1
 800404a:	4630      	mov	r0, r6
 800404c:	4639      	mov	r1, r7
 800404e:	f7fc fba9 	bl	80007a4 <__aeabi_ddiv>
 8004052:	f04f 0a02 	mov.w	sl, #2
 8004056:	4604      	mov	r4, r0
 8004058:	460d      	mov	r5, r1
 800405a:	e745      	b.n	8003ee8 <atan+0xc8>
 800405c:	4622      	mov	r2, r4
 800405e:	462b      	mov	r3, r5
 8004060:	4938      	ldr	r1, [pc, #224]	@ (8004144 <atan+0x324>)
 8004062:	2000      	movs	r0, #0
 8004064:	f7fc fb9e 	bl	80007a4 <__aeabi_ddiv>
 8004068:	f04f 0a03 	mov.w	sl, #3
 800406c:	4604      	mov	r4, r0
 800406e:	460d      	mov	r5, r1
 8004070:	e73a      	b.n	8003ee8 <atan+0xc8>
 8004072:	4b35      	ldr	r3, [pc, #212]	@ (8004148 <atan+0x328>)
 8004074:	4e35      	ldr	r6, [pc, #212]	@ (800414c <atan+0x32c>)
 8004076:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800407a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800407e:	f7fc f8af 	bl	80001e0 <__aeabi_dsub>
 8004082:	4622      	mov	r2, r4
 8004084:	462b      	mov	r3, r5
 8004086:	f7fc f8ab 	bl	80001e0 <__aeabi_dsub>
 800408a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800408e:	4602      	mov	r2, r0
 8004090:	460b      	mov	r3, r1
 8004092:	e9d6 0100 	ldrd	r0, r1, [r6]
 8004096:	f7fc f8a3 	bl	80001e0 <__aeabi_dsub>
 800409a:	f1bb 0f00 	cmp.w	fp, #0
 800409e:	4604      	mov	r4, r0
 80040a0:	460d      	mov	r5, r1
 80040a2:	f6bf aedc 	bge.w	8003e5e <atan+0x3e>
 80040a6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80040aa:	461d      	mov	r5, r3
 80040ac:	e6d7      	b.n	8003e5e <atan+0x3e>
 80040ae:	a51c      	add	r5, pc, #112	@ (adr r5, 8004120 <atan+0x300>)
 80040b0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80040b4:	e6d3      	b.n	8003e5e <atan+0x3e>
 80040b6:	bf00      	nop
 80040b8:	54442d18 	.word	0x54442d18
 80040bc:	3ff921fb 	.word	0x3ff921fb
 80040c0:	8800759c 	.word	0x8800759c
 80040c4:	7e37e43c 	.word	0x7e37e43c
 80040c8:	e322da11 	.word	0xe322da11
 80040cc:	3f90ad3a 	.word	0x3f90ad3a
 80040d0:	24760deb 	.word	0x24760deb
 80040d4:	3fa97b4b 	.word	0x3fa97b4b
 80040d8:	a0d03d51 	.word	0xa0d03d51
 80040dc:	3fb10d66 	.word	0x3fb10d66
 80040e0:	c54c206e 	.word	0xc54c206e
 80040e4:	3fb745cd 	.word	0x3fb745cd
 80040e8:	920083ff 	.word	0x920083ff
 80040ec:	3fc24924 	.word	0x3fc24924
 80040f0:	5555550d 	.word	0x5555550d
 80040f4:	3fd55555 	.word	0x3fd55555
 80040f8:	2c6a6c2f 	.word	0x2c6a6c2f
 80040fc:	bfa2b444 	.word	0xbfa2b444
 8004100:	52defd9a 	.word	0x52defd9a
 8004104:	3fadde2d 	.word	0x3fadde2d
 8004108:	af749a6d 	.word	0xaf749a6d
 800410c:	3fb3b0f2 	.word	0x3fb3b0f2
 8004110:	fe231671 	.word	0xfe231671
 8004114:	3fbc71c6 	.word	0x3fbc71c6
 8004118:	9998ebc4 	.word	0x9998ebc4
 800411c:	3fc99999 	.word	0x3fc99999
 8004120:	54442d18 	.word	0x54442d18
 8004124:	bff921fb 	.word	0xbff921fb
 8004128:	440fffff 	.word	0x440fffff
 800412c:	7ff00000 	.word	0x7ff00000
 8004130:	3fdbffff 	.word	0x3fdbffff
 8004134:	3ff00000 	.word	0x3ff00000
 8004138:	3ff2ffff 	.word	0x3ff2ffff
 800413c:	40038000 	.word	0x40038000
 8004140:	3ff80000 	.word	0x3ff80000
 8004144:	bff00000 	.word	0xbff00000
 8004148:	08004348 	.word	0x08004348
 800414c:	08004368 	.word	0x08004368

08004150 <fabs>:
 8004150:	ec51 0b10 	vmov	r0, r1, d0
 8004154:	4602      	mov	r2, r0
 8004156:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800415a:	ec43 2b10 	vmov	d0, r2, r3
 800415e:	4770      	bx	lr

08004160 <__ieee754_sqrt>:
 8004160:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004164:	4a68      	ldr	r2, [pc, #416]	@ (8004308 <__ieee754_sqrt+0x1a8>)
 8004166:	ec55 4b10 	vmov	r4, r5, d0
 800416a:	43aa      	bics	r2, r5
 800416c:	462b      	mov	r3, r5
 800416e:	4621      	mov	r1, r4
 8004170:	d110      	bne.n	8004194 <__ieee754_sqrt+0x34>
 8004172:	4622      	mov	r2, r4
 8004174:	4620      	mov	r0, r4
 8004176:	4629      	mov	r1, r5
 8004178:	f7fc f9ea 	bl	8000550 <__aeabi_dmul>
 800417c:	4602      	mov	r2, r0
 800417e:	460b      	mov	r3, r1
 8004180:	4620      	mov	r0, r4
 8004182:	4629      	mov	r1, r5
 8004184:	f7fc f82e 	bl	80001e4 <__adddf3>
 8004188:	4604      	mov	r4, r0
 800418a:	460d      	mov	r5, r1
 800418c:	ec45 4b10 	vmov	d0, r4, r5
 8004190:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004194:	2d00      	cmp	r5, #0
 8004196:	dc0e      	bgt.n	80041b6 <__ieee754_sqrt+0x56>
 8004198:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800419c:	4322      	orrs	r2, r4
 800419e:	d0f5      	beq.n	800418c <__ieee754_sqrt+0x2c>
 80041a0:	b19d      	cbz	r5, 80041ca <__ieee754_sqrt+0x6a>
 80041a2:	4622      	mov	r2, r4
 80041a4:	4620      	mov	r0, r4
 80041a6:	4629      	mov	r1, r5
 80041a8:	f7fc f81a 	bl	80001e0 <__aeabi_dsub>
 80041ac:	4602      	mov	r2, r0
 80041ae:	460b      	mov	r3, r1
 80041b0:	f7fc faf8 	bl	80007a4 <__aeabi_ddiv>
 80041b4:	e7e8      	b.n	8004188 <__ieee754_sqrt+0x28>
 80041b6:	152a      	asrs	r2, r5, #20
 80041b8:	d115      	bne.n	80041e6 <__ieee754_sqrt+0x86>
 80041ba:	2000      	movs	r0, #0
 80041bc:	e009      	b.n	80041d2 <__ieee754_sqrt+0x72>
 80041be:	0acb      	lsrs	r3, r1, #11
 80041c0:	3a15      	subs	r2, #21
 80041c2:	0549      	lsls	r1, r1, #21
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d0fa      	beq.n	80041be <__ieee754_sqrt+0x5e>
 80041c8:	e7f7      	b.n	80041ba <__ieee754_sqrt+0x5a>
 80041ca:	462a      	mov	r2, r5
 80041cc:	e7fa      	b.n	80041c4 <__ieee754_sqrt+0x64>
 80041ce:	005b      	lsls	r3, r3, #1
 80041d0:	3001      	adds	r0, #1
 80041d2:	02dc      	lsls	r4, r3, #11
 80041d4:	d5fb      	bpl.n	80041ce <__ieee754_sqrt+0x6e>
 80041d6:	1e44      	subs	r4, r0, #1
 80041d8:	1b12      	subs	r2, r2, r4
 80041da:	f1c0 0420 	rsb	r4, r0, #32
 80041de:	fa21 f404 	lsr.w	r4, r1, r4
 80041e2:	4323      	orrs	r3, r4
 80041e4:	4081      	lsls	r1, r0
 80041e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041ea:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80041ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041f2:	07d2      	lsls	r2, r2, #31
 80041f4:	bf5c      	itt	pl
 80041f6:	005b      	lslpl	r3, r3, #1
 80041f8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80041fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004200:	bf58      	it	pl
 8004202:	0049      	lslpl	r1, r1, #1
 8004204:	2600      	movs	r6, #0
 8004206:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800420a:	106d      	asrs	r5, r5, #1
 800420c:	0049      	lsls	r1, r1, #1
 800420e:	2016      	movs	r0, #22
 8004210:	4632      	mov	r2, r6
 8004212:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8004216:	1917      	adds	r7, r2, r4
 8004218:	429f      	cmp	r7, r3
 800421a:	bfde      	ittt	le
 800421c:	193a      	addle	r2, r7, r4
 800421e:	1bdb      	suble	r3, r3, r7
 8004220:	1936      	addle	r6, r6, r4
 8004222:	0fcf      	lsrs	r7, r1, #31
 8004224:	3801      	subs	r0, #1
 8004226:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800422a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800422e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8004232:	d1f0      	bne.n	8004216 <__ieee754_sqrt+0xb6>
 8004234:	4604      	mov	r4, r0
 8004236:	2720      	movs	r7, #32
 8004238:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800423c:	429a      	cmp	r2, r3
 800423e:	eb00 0e0c 	add.w	lr, r0, ip
 8004242:	db02      	blt.n	800424a <__ieee754_sqrt+0xea>
 8004244:	d113      	bne.n	800426e <__ieee754_sqrt+0x10e>
 8004246:	458e      	cmp	lr, r1
 8004248:	d811      	bhi.n	800426e <__ieee754_sqrt+0x10e>
 800424a:	f1be 0f00 	cmp.w	lr, #0
 800424e:	eb0e 000c 	add.w	r0, lr, ip
 8004252:	da42      	bge.n	80042da <__ieee754_sqrt+0x17a>
 8004254:	2800      	cmp	r0, #0
 8004256:	db40      	blt.n	80042da <__ieee754_sqrt+0x17a>
 8004258:	f102 0801 	add.w	r8, r2, #1
 800425c:	1a9b      	subs	r3, r3, r2
 800425e:	458e      	cmp	lr, r1
 8004260:	bf88      	it	hi
 8004262:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8004266:	eba1 010e 	sub.w	r1, r1, lr
 800426a:	4464      	add	r4, ip
 800426c:	4642      	mov	r2, r8
 800426e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8004272:	3f01      	subs	r7, #1
 8004274:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8004278:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800427c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8004280:	d1dc      	bne.n	800423c <__ieee754_sqrt+0xdc>
 8004282:	4319      	orrs	r1, r3
 8004284:	d01b      	beq.n	80042be <__ieee754_sqrt+0x15e>
 8004286:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800430c <__ieee754_sqrt+0x1ac>
 800428a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8004310 <__ieee754_sqrt+0x1b0>
 800428e:	e9da 0100 	ldrd	r0, r1, [sl]
 8004292:	e9db 2300 	ldrd	r2, r3, [fp]
 8004296:	f7fb ffa3 	bl	80001e0 <__aeabi_dsub>
 800429a:	e9da 8900 	ldrd	r8, r9, [sl]
 800429e:	4602      	mov	r2, r0
 80042a0:	460b      	mov	r3, r1
 80042a2:	4640      	mov	r0, r8
 80042a4:	4649      	mov	r1, r9
 80042a6:	f7fc fbcf 	bl	8000a48 <__aeabi_dcmple>
 80042aa:	b140      	cbz	r0, 80042be <__ieee754_sqrt+0x15e>
 80042ac:	f1b4 3fff 	cmp.w	r4, #4294967295
 80042b0:	e9da 0100 	ldrd	r0, r1, [sl]
 80042b4:	e9db 2300 	ldrd	r2, r3, [fp]
 80042b8:	d111      	bne.n	80042de <__ieee754_sqrt+0x17e>
 80042ba:	3601      	adds	r6, #1
 80042bc:	463c      	mov	r4, r7
 80042be:	1072      	asrs	r2, r6, #1
 80042c0:	0863      	lsrs	r3, r4, #1
 80042c2:	07f1      	lsls	r1, r6, #31
 80042c4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80042c8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80042cc:	bf48      	it	mi
 80042ce:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80042d2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80042d6:	4618      	mov	r0, r3
 80042d8:	e756      	b.n	8004188 <__ieee754_sqrt+0x28>
 80042da:	4690      	mov	r8, r2
 80042dc:	e7be      	b.n	800425c <__ieee754_sqrt+0xfc>
 80042de:	f7fb ff81 	bl	80001e4 <__adddf3>
 80042e2:	e9da 8900 	ldrd	r8, r9, [sl]
 80042e6:	4602      	mov	r2, r0
 80042e8:	460b      	mov	r3, r1
 80042ea:	4640      	mov	r0, r8
 80042ec:	4649      	mov	r1, r9
 80042ee:	f7fc fba1 	bl	8000a34 <__aeabi_dcmplt>
 80042f2:	b120      	cbz	r0, 80042fe <__ieee754_sqrt+0x19e>
 80042f4:	1ca0      	adds	r0, r4, #2
 80042f6:	bf08      	it	eq
 80042f8:	3601      	addeq	r6, #1
 80042fa:	3402      	adds	r4, #2
 80042fc:	e7df      	b.n	80042be <__ieee754_sqrt+0x15e>
 80042fe:	1c63      	adds	r3, r4, #1
 8004300:	f023 0401 	bic.w	r4, r3, #1
 8004304:	e7db      	b.n	80042be <__ieee754_sqrt+0x15e>
 8004306:	bf00      	nop
 8004308:	7ff00000 	.word	0x7ff00000
 800430c:	20000070 	.word	0x20000070
 8004310:	20000068 	.word	0x20000068

08004314 <_init>:
 8004314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004316:	bf00      	nop
 8004318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800431a:	bc08      	pop	{r3}
 800431c:	469e      	mov	lr, r3
 800431e:	4770      	bx	lr

08004320 <_fini>:
 8004320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004322:	bf00      	nop
 8004324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004326:	bc08      	pop	{r3}
 8004328:	469e      	mov	lr, r3
 800432a:	4770      	bx	lr
