
FlightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f6c  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08004108  08004108  00005108  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004160  08004160  00006070  2**0
                  CONTENTS
  4 .ARM          00000008  08004160  08004160  00005160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004168  08004168  00006070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004168  08004168  00005168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800416c  0800416c  0000516c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08004170  00006000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  20000070  080041e0  00006070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  080041e0  00006294  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009be9  00000000  00000000  000060a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001604  00000000  00000000  0000fc89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000900  00000000  00000000  00011290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000715  00000000  00000000  00011b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015a2c  00000000  00000000  000122a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b8a4  00000000  00000000  00027cd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088527  00000000  00000000  00033575  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bba9c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029d8  00000000  00000000  000bbae0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000be4b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080040ec 	.word	0x080040ec

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	080040ec 	.word	0x080040ec

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_uldivmod>:
 8000b50:	b953      	cbnz	r3, 8000b68 <__aeabi_uldivmod+0x18>
 8000b52:	b94a      	cbnz	r2, 8000b68 <__aeabi_uldivmod+0x18>
 8000b54:	2900      	cmp	r1, #0
 8000b56:	bf08      	it	eq
 8000b58:	2800      	cmpeq	r0, #0
 8000b5a:	bf1c      	itt	ne
 8000b5c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b60:	f04f 30ff 	movne.w	r0, #4294967295
 8000b64:	f000 b96a 	b.w	8000e3c <__aeabi_idiv0>
 8000b68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b70:	f000 f806 	bl	8000b80 <__udivmoddi4>
 8000b74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b7c:	b004      	add	sp, #16
 8000b7e:	4770      	bx	lr

08000b80 <__udivmoddi4>:
 8000b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b84:	9d08      	ldr	r5, [sp, #32]
 8000b86:	460c      	mov	r4, r1
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d14e      	bne.n	8000c2a <__udivmoddi4+0xaa>
 8000b8c:	4694      	mov	ip, r2
 8000b8e:	458c      	cmp	ip, r1
 8000b90:	4686      	mov	lr, r0
 8000b92:	fab2 f282 	clz	r2, r2
 8000b96:	d962      	bls.n	8000c5e <__udivmoddi4+0xde>
 8000b98:	b14a      	cbz	r2, 8000bae <__udivmoddi4+0x2e>
 8000b9a:	f1c2 0320 	rsb	r3, r2, #32
 8000b9e:	4091      	lsls	r1, r2
 8000ba0:	fa20 f303 	lsr.w	r3, r0, r3
 8000ba4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ba8:	4319      	orrs	r1, r3
 8000baa:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bb2:	fa1f f68c 	uxth.w	r6, ip
 8000bb6:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bbe:	fb07 1114 	mls	r1, r7, r4, r1
 8000bc2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bc6:	fb04 f106 	mul.w	r1, r4, r6
 8000bca:	4299      	cmp	r1, r3
 8000bcc:	d90a      	bls.n	8000be4 <__udivmoddi4+0x64>
 8000bce:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd2:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bd6:	f080 8112 	bcs.w	8000dfe <__udivmoddi4+0x27e>
 8000bda:	4299      	cmp	r1, r3
 8000bdc:	f240 810f 	bls.w	8000dfe <__udivmoddi4+0x27e>
 8000be0:	3c02      	subs	r4, #2
 8000be2:	4463      	add	r3, ip
 8000be4:	1a59      	subs	r1, r3, r1
 8000be6:	fa1f f38e 	uxth.w	r3, lr
 8000bea:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bee:	fb07 1110 	mls	r1, r7, r0, r1
 8000bf2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf6:	fb00 f606 	mul.w	r6, r0, r6
 8000bfa:	429e      	cmp	r6, r3
 8000bfc:	d90a      	bls.n	8000c14 <__udivmoddi4+0x94>
 8000bfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000c02:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c06:	f080 80fc 	bcs.w	8000e02 <__udivmoddi4+0x282>
 8000c0a:	429e      	cmp	r6, r3
 8000c0c:	f240 80f9 	bls.w	8000e02 <__udivmoddi4+0x282>
 8000c10:	4463      	add	r3, ip
 8000c12:	3802      	subs	r0, #2
 8000c14:	1b9b      	subs	r3, r3, r6
 8000c16:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	b11d      	cbz	r5, 8000c26 <__udivmoddi4+0xa6>
 8000c1e:	40d3      	lsrs	r3, r2
 8000c20:	2200      	movs	r2, #0
 8000c22:	e9c5 3200 	strd	r3, r2, [r5]
 8000c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2a:	428b      	cmp	r3, r1
 8000c2c:	d905      	bls.n	8000c3a <__udivmoddi4+0xba>
 8000c2e:	b10d      	cbz	r5, 8000c34 <__udivmoddi4+0xb4>
 8000c30:	e9c5 0100 	strd	r0, r1, [r5]
 8000c34:	2100      	movs	r1, #0
 8000c36:	4608      	mov	r0, r1
 8000c38:	e7f5      	b.n	8000c26 <__udivmoddi4+0xa6>
 8000c3a:	fab3 f183 	clz	r1, r3
 8000c3e:	2900      	cmp	r1, #0
 8000c40:	d146      	bne.n	8000cd0 <__udivmoddi4+0x150>
 8000c42:	42a3      	cmp	r3, r4
 8000c44:	d302      	bcc.n	8000c4c <__udivmoddi4+0xcc>
 8000c46:	4290      	cmp	r0, r2
 8000c48:	f0c0 80f0 	bcc.w	8000e2c <__udivmoddi4+0x2ac>
 8000c4c:	1a86      	subs	r6, r0, r2
 8000c4e:	eb64 0303 	sbc.w	r3, r4, r3
 8000c52:	2001      	movs	r0, #1
 8000c54:	2d00      	cmp	r5, #0
 8000c56:	d0e6      	beq.n	8000c26 <__udivmoddi4+0xa6>
 8000c58:	e9c5 6300 	strd	r6, r3, [r5]
 8000c5c:	e7e3      	b.n	8000c26 <__udivmoddi4+0xa6>
 8000c5e:	2a00      	cmp	r2, #0
 8000c60:	f040 8090 	bne.w	8000d84 <__udivmoddi4+0x204>
 8000c64:	eba1 040c 	sub.w	r4, r1, ip
 8000c68:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c6c:	fa1f f78c 	uxth.w	r7, ip
 8000c70:	2101      	movs	r1, #1
 8000c72:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c76:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c7a:	fb08 4416 	mls	r4, r8, r6, r4
 8000c7e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c82:	fb07 f006 	mul.w	r0, r7, r6
 8000c86:	4298      	cmp	r0, r3
 8000c88:	d908      	bls.n	8000c9c <__udivmoddi4+0x11c>
 8000c8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c92:	d202      	bcs.n	8000c9a <__udivmoddi4+0x11a>
 8000c94:	4298      	cmp	r0, r3
 8000c96:	f200 80cd 	bhi.w	8000e34 <__udivmoddi4+0x2b4>
 8000c9a:	4626      	mov	r6, r4
 8000c9c:	1a1c      	subs	r4, r3, r0
 8000c9e:	fa1f f38e 	uxth.w	r3, lr
 8000ca2:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ca6:	fb08 4410 	mls	r4, r8, r0, r4
 8000caa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cae:	fb00 f707 	mul.w	r7, r0, r7
 8000cb2:	429f      	cmp	r7, r3
 8000cb4:	d908      	bls.n	8000cc8 <__udivmoddi4+0x148>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cbe:	d202      	bcs.n	8000cc6 <__udivmoddi4+0x146>
 8000cc0:	429f      	cmp	r7, r3
 8000cc2:	f200 80b0 	bhi.w	8000e26 <__udivmoddi4+0x2a6>
 8000cc6:	4620      	mov	r0, r4
 8000cc8:	1bdb      	subs	r3, r3, r7
 8000cca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cce:	e7a5      	b.n	8000c1c <__udivmoddi4+0x9c>
 8000cd0:	f1c1 0620 	rsb	r6, r1, #32
 8000cd4:	408b      	lsls	r3, r1
 8000cd6:	fa22 f706 	lsr.w	r7, r2, r6
 8000cda:	431f      	orrs	r7, r3
 8000cdc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ce0:	fa04 f301 	lsl.w	r3, r4, r1
 8000ce4:	ea43 030c 	orr.w	r3, r3, ip
 8000ce8:	40f4      	lsrs	r4, r6
 8000cea:	fa00 f801 	lsl.w	r8, r0, r1
 8000cee:	0c38      	lsrs	r0, r7, #16
 8000cf0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cf4:	fbb4 fef0 	udiv	lr, r4, r0
 8000cf8:	fa1f fc87 	uxth.w	ip, r7
 8000cfc:	fb00 441e 	mls	r4, r0, lr, r4
 8000d00:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d04:	fb0e f90c 	mul.w	r9, lr, ip
 8000d08:	45a1      	cmp	r9, r4
 8000d0a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d0e:	d90a      	bls.n	8000d26 <__udivmoddi4+0x1a6>
 8000d10:	193c      	adds	r4, r7, r4
 8000d12:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d16:	f080 8084 	bcs.w	8000e22 <__udivmoddi4+0x2a2>
 8000d1a:	45a1      	cmp	r9, r4
 8000d1c:	f240 8081 	bls.w	8000e22 <__udivmoddi4+0x2a2>
 8000d20:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d24:	443c      	add	r4, r7
 8000d26:	eba4 0409 	sub.w	r4, r4, r9
 8000d2a:	fa1f f983 	uxth.w	r9, r3
 8000d2e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d32:	fb00 4413 	mls	r4, r0, r3, r4
 8000d36:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d3a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d3e:	45a4      	cmp	ip, r4
 8000d40:	d907      	bls.n	8000d52 <__udivmoddi4+0x1d2>
 8000d42:	193c      	adds	r4, r7, r4
 8000d44:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d48:	d267      	bcs.n	8000e1a <__udivmoddi4+0x29a>
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	d965      	bls.n	8000e1a <__udivmoddi4+0x29a>
 8000d4e:	3b02      	subs	r3, #2
 8000d50:	443c      	add	r4, r7
 8000d52:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d56:	fba0 9302 	umull	r9, r3, r0, r2
 8000d5a:	eba4 040c 	sub.w	r4, r4, ip
 8000d5e:	429c      	cmp	r4, r3
 8000d60:	46ce      	mov	lr, r9
 8000d62:	469c      	mov	ip, r3
 8000d64:	d351      	bcc.n	8000e0a <__udivmoddi4+0x28a>
 8000d66:	d04e      	beq.n	8000e06 <__udivmoddi4+0x286>
 8000d68:	b155      	cbz	r5, 8000d80 <__udivmoddi4+0x200>
 8000d6a:	ebb8 030e 	subs.w	r3, r8, lr
 8000d6e:	eb64 040c 	sbc.w	r4, r4, ip
 8000d72:	fa04 f606 	lsl.w	r6, r4, r6
 8000d76:	40cb      	lsrs	r3, r1
 8000d78:	431e      	orrs	r6, r3
 8000d7a:	40cc      	lsrs	r4, r1
 8000d7c:	e9c5 6400 	strd	r6, r4, [r5]
 8000d80:	2100      	movs	r1, #0
 8000d82:	e750      	b.n	8000c26 <__udivmoddi4+0xa6>
 8000d84:	f1c2 0320 	rsb	r3, r2, #32
 8000d88:	fa20 f103 	lsr.w	r1, r0, r3
 8000d8c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d90:	fa24 f303 	lsr.w	r3, r4, r3
 8000d94:	4094      	lsls	r4, r2
 8000d96:	430c      	orrs	r4, r1
 8000d98:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d9c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da0:	fa1f f78c 	uxth.w	r7, ip
 8000da4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da8:	fb08 3110 	mls	r1, r8, r0, r3
 8000dac:	0c23      	lsrs	r3, r4, #16
 8000dae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db2:	fb00 f107 	mul.w	r1, r0, r7
 8000db6:	4299      	cmp	r1, r3
 8000db8:	d908      	bls.n	8000dcc <__udivmoddi4+0x24c>
 8000dba:	eb1c 0303 	adds.w	r3, ip, r3
 8000dbe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dc2:	d22c      	bcs.n	8000e1e <__udivmoddi4+0x29e>
 8000dc4:	4299      	cmp	r1, r3
 8000dc6:	d92a      	bls.n	8000e1e <__udivmoddi4+0x29e>
 8000dc8:	3802      	subs	r0, #2
 8000dca:	4463      	add	r3, ip
 8000dcc:	1a5b      	subs	r3, r3, r1
 8000dce:	b2a4      	uxth	r4, r4
 8000dd0:	fbb3 f1f8 	udiv	r1, r3, r8
 8000dd4:	fb08 3311 	mls	r3, r8, r1, r3
 8000dd8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ddc:	fb01 f307 	mul.w	r3, r1, r7
 8000de0:	42a3      	cmp	r3, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x276>
 8000de4:	eb1c 0404 	adds.w	r4, ip, r4
 8000de8:	f101 36ff 	add.w	r6, r1, #4294967295
 8000dec:	d213      	bcs.n	8000e16 <__udivmoddi4+0x296>
 8000dee:	42a3      	cmp	r3, r4
 8000df0:	d911      	bls.n	8000e16 <__udivmoddi4+0x296>
 8000df2:	3902      	subs	r1, #2
 8000df4:	4464      	add	r4, ip
 8000df6:	1ae4      	subs	r4, r4, r3
 8000df8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000dfc:	e739      	b.n	8000c72 <__udivmoddi4+0xf2>
 8000dfe:	4604      	mov	r4, r0
 8000e00:	e6f0      	b.n	8000be4 <__udivmoddi4+0x64>
 8000e02:	4608      	mov	r0, r1
 8000e04:	e706      	b.n	8000c14 <__udivmoddi4+0x94>
 8000e06:	45c8      	cmp	r8, r9
 8000e08:	d2ae      	bcs.n	8000d68 <__udivmoddi4+0x1e8>
 8000e0a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e0e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e12:	3801      	subs	r0, #1
 8000e14:	e7a8      	b.n	8000d68 <__udivmoddi4+0x1e8>
 8000e16:	4631      	mov	r1, r6
 8000e18:	e7ed      	b.n	8000df6 <__udivmoddi4+0x276>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	e799      	b.n	8000d52 <__udivmoddi4+0x1d2>
 8000e1e:	4630      	mov	r0, r6
 8000e20:	e7d4      	b.n	8000dcc <__udivmoddi4+0x24c>
 8000e22:	46d6      	mov	lr, sl
 8000e24:	e77f      	b.n	8000d26 <__udivmoddi4+0x1a6>
 8000e26:	4463      	add	r3, ip
 8000e28:	3802      	subs	r0, #2
 8000e2a:	e74d      	b.n	8000cc8 <__udivmoddi4+0x148>
 8000e2c:	4606      	mov	r6, r0
 8000e2e:	4623      	mov	r3, r4
 8000e30:	4608      	mov	r0, r1
 8000e32:	e70f      	b.n	8000c54 <__udivmoddi4+0xd4>
 8000e34:	3e02      	subs	r6, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	e730      	b.n	8000c9c <__udivmoddi4+0x11c>
 8000e3a:	bf00      	nop

08000e3c <__aeabi_idiv0>:
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop

08000e40 <wr8>:
//accelerometer
float AccX, AccY, AccZ;
float AngleRoll, AnglePitch;

// vi 0x68 co 7 bit ma ta dia chi can 8 bit nen ta dich 1 bit
static inline HAL_StatusTypeDef wr8(I2C_HandleTypeDef* hi2c, uint8_t reg, uint8_t val) {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af04      	add	r7, sp, #16
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	460b      	mov	r3, r1
 8000e4a:	70fb      	strb	r3, [r7, #3]
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	70bb      	strb	r3, [r7, #2]
  return HAL_I2C_Mem_Write(hi2c, 0x68<<1, reg, I2C_MEMADD_SIZE_8BIT, &val, 1, 100);
 8000e50:	78fb      	ldrb	r3, [r7, #3]
 8000e52:	b29a      	uxth	r2, r3
 8000e54:	2364      	movs	r3, #100	@ 0x64
 8000e56:	9302      	str	r3, [sp, #8]
 8000e58:	2301      	movs	r3, #1
 8000e5a:	9301      	str	r3, [sp, #4]
 8000e5c:	1cbb      	adds	r3, r7, #2
 8000e5e:	9300      	str	r3, [sp, #0]
 8000e60:	2301      	movs	r3, #1
 8000e62:	21d0      	movs	r1, #208	@ 0xd0
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f001 f86b 	bl	8001f40 <HAL_I2C_Mem_Write>
 8000e6a:	4603      	mov	r3, r0
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <rd>:
static inline HAL_StatusTypeDef rd(I2C_HandleTypeDef* hi2c, uint8_t reg, uint8_t* buf, uint16_t len) {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b088      	sub	sp, #32
 8000e78:	af04      	add	r7, sp, #16
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	607a      	str	r2, [r7, #4]
 8000e7e:	461a      	mov	r2, r3
 8000e80:	460b      	mov	r3, r1
 8000e82:	72fb      	strb	r3, [r7, #11]
 8000e84:	4613      	mov	r3, r2
 8000e86:	813b      	strh	r3, [r7, #8]
  return HAL_I2C_Mem_Read(hi2c, 0x68<<1, reg, I2C_MEMADD_SIZE_8BIT, buf, len, 100);
 8000e88:	7afb      	ldrb	r3, [r7, #11]
 8000e8a:	b29a      	uxth	r2, r3
 8000e8c:	2364      	movs	r3, #100	@ 0x64
 8000e8e:	9302      	str	r3, [sp, #8]
 8000e90:	893b      	ldrh	r3, [r7, #8]
 8000e92:	9301      	str	r3, [sp, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	9300      	str	r3, [sp, #0]
 8000e98:	2301      	movs	r3, #1
 8000e9a:	21d0      	movs	r1, #208	@ 0xd0
 8000e9c:	68f8      	ldr	r0, [r7, #12]
 8000e9e:	f001 f949 	bl	8002134 <HAL_I2C_Mem_Read>
 8000ea2:	4603      	mov	r3, r0
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3710      	adds	r7, #16
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	0000      	movs	r0, r0
	...

08000eb0 <gyro_signal>:

void gyro_signal(void){
 8000eb0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000eb4:	b088      	sub	sp, #32
 8000eb6:	af00      	add	r7, sp, #0
  uint8_t a[6]; //xem xet bo thang a, dung b cho ca gyro voi acce
  // read register 0x43 -> 0x48 => 6 byte
  // save to b[6], vi data cua gyro 16bit
  //, ma chia ra 2 mang nen b[0] va b[1] la data day du cua rate_x, tuong tu y voi z
  // tuy nhien voi sensing scale factor 65.5/ do/s thi ta chia gia tri doc duoc cho 65.5 => toc do  
  if (rd(&hi2c1, 0x43, b, 6) == HAL_OK) {
 8000eb8:	f107 0208 	add.w	r2, r7, #8
 8000ebc:	2306      	movs	r3, #6
 8000ebe:	2143      	movs	r1, #67	@ 0x43
 8000ec0:	488f      	ldr	r0, [pc, #572]	@ (8001100 <gyro_signal+0x250>)
 8000ec2:	f7ff ffd7 	bl	8000e74 <rd>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d13d      	bne.n	8000f48 <gyro_signal+0x98>
    int16_t gx_raw = (int16_t)((b[0] << 8) | b[1]);
 8000ecc:	7a3b      	ldrb	r3, [r7, #8]
 8000ece:	021b      	lsls	r3, r3, #8
 8000ed0:	b21a      	sxth	r2, r3
 8000ed2:	7a7b      	ldrb	r3, [r7, #9]
 8000ed4:	b21b      	sxth	r3, r3
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	83fb      	strh	r3, [r7, #30]
    int16_t gy_raw = (int16_t)((b[2] << 8) | b[3]);
 8000eda:	7abb      	ldrb	r3, [r7, #10]
 8000edc:	021b      	lsls	r3, r3, #8
 8000ede:	b21a      	sxth	r2, r3
 8000ee0:	7afb      	ldrb	r3, [r7, #11]
 8000ee2:	b21b      	sxth	r3, r3
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	83bb      	strh	r3, [r7, #28]
    int16_t gz_raw = (int16_t)((b[4] << 8) | b[5]);
 8000ee8:	7b3b      	ldrb	r3, [r7, #12]
 8000eea:	021b      	lsls	r3, r3, #8
 8000eec:	b21a      	sxth	r2, r3
 8000eee:	7b7b      	ldrb	r3, [r7, #13]
 8000ef0:	b21b      	sxth	r3, r3
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	837b      	strh	r3, [r7, #26]
    const float sens = 65.5f; // LSB per (deg/s) for FS_SEL=1
 8000ef6:	4b83      	ldr	r3, [pc, #524]	@ (8001104 <gyro_signal+0x254>)
 8000ef8:	617b      	str	r3, [r7, #20]
    RateRoll  = gx_raw / sens;
 8000efa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000efe:	ee07 3a90 	vmov	s15, r3
 8000f02:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f06:	ed97 7a05 	vldr	s14, [r7, #20]
 8000f0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f0e:	4b7e      	ldr	r3, [pc, #504]	@ (8001108 <gyro_signal+0x258>)
 8000f10:	edc3 7a00 	vstr	s15, [r3]
    RatePitch = gy_raw / sens;
 8000f14:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000f18:	ee07 3a90 	vmov	s15, r3
 8000f1c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f20:	ed97 7a05 	vldr	s14, [r7, #20]
 8000f24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f28:	4b78      	ldr	r3, [pc, #480]	@ (800110c <gyro_signal+0x25c>)
 8000f2a:	edc3 7a00 	vstr	s15, [r3]
    RateYaw   = gz_raw / sens;
 8000f2e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000f32:	ee07 3a90 	vmov	s15, r3
 8000f36:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f3a:	ed97 7a05 	vldr	s14, [r7, #20]
 8000f3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f42:	4b73      	ldr	r3, [pc, #460]	@ (8001110 <gyro_signal+0x260>)
 8000f44:	edc3 7a00 	vstr	s15, [r3]
  }

  //doc accelerometer
  if (rd(&hi2c1, 0x3B, a, 6) == HAL_OK) {
 8000f48:	463a      	mov	r2, r7
 8000f4a:	2306      	movs	r3, #6
 8000f4c:	213b      	movs	r1, #59	@ 0x3b
 8000f4e:	486c      	ldr	r0, [pc, #432]	@ (8001100 <gyro_signal+0x250>)
 8000f50:	f7ff ff90 	bl	8000e74 <rd>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	f040 80c7 	bne.w	80010ea <gyro_signal+0x23a>
    int16_t AccXLSB = (int16_t)((a[0] << 8) | a[1]);
 8000f5c:	783b      	ldrb	r3, [r7, #0]
 8000f5e:	021b      	lsls	r3, r3, #8
 8000f60:	b21a      	sxth	r2, r3
 8000f62:	787b      	ldrb	r3, [r7, #1]
 8000f64:	b21b      	sxth	r3, r3
 8000f66:	4313      	orrs	r3, r2
 8000f68:	827b      	strh	r3, [r7, #18]
    int16_t AccYLSB = (int16_t)((a[2] << 8) | a[3]);
 8000f6a:	78bb      	ldrb	r3, [r7, #2]
 8000f6c:	021b      	lsls	r3, r3, #8
 8000f6e:	b21a      	sxth	r2, r3
 8000f70:	78fb      	ldrb	r3, [r7, #3]
 8000f72:	b21b      	sxth	r3, r3
 8000f74:	4313      	orrs	r3, r2
 8000f76:	823b      	strh	r3, [r7, #16]
    int16_t AccZLSB = (int16_t)((a[4] << 8) | a[5]);
 8000f78:	793b      	ldrb	r3, [r7, #4]
 8000f7a:	021b      	lsls	r3, r3, #8
 8000f7c:	b21a      	sxth	r2, r3
 8000f7e:	797b      	ldrb	r3, [r7, #5]
 8000f80:	b21b      	sxth	r3, r3
 8000f82:	4313      	orrs	r3, r2
 8000f84:	81fb      	strh	r3, [r7, #14]


	AccX=(float)AccXLSB/4096;
 8000f86:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000f8a:	ee07 3a90 	vmov	s15, r3
 8000f8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f92:	eddf 6a60 	vldr	s13, [pc, #384]	@ 8001114 <gyro_signal+0x264>
 8000f96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f9a:	4b5f      	ldr	r3, [pc, #380]	@ (8001118 <gyro_signal+0x268>)
 8000f9c:	edc3 7a00 	vstr	s15, [r3]
	AccY=(float)AccYLSB/4096;
 8000fa0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000fa4:	ee07 3a90 	vmov	s15, r3
 8000fa8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fac:	eddf 6a59 	vldr	s13, [pc, #356]	@ 8001114 <gyro_signal+0x264>
 8000fb0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fb4:	4b59      	ldr	r3, [pc, #356]	@ (800111c <gyro_signal+0x26c>)
 8000fb6:	edc3 7a00 	vstr	s15, [r3]
	AccZ=(float)AccZLSB/4096;
 8000fba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fbe:	ee07 3a90 	vmov	s15, r3
 8000fc2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fc6:	eddf 6a53 	vldr	s13, [pc, #332]	@ 8001114 <gyro_signal+0x264>
 8000fca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fce:	4b54      	ldr	r3, [pc, #336]	@ (8001120 <gyro_signal+0x270>)
 8000fd0:	edc3 7a00 	vstr	s15, [r3]
	AngleRoll=atan(AccY/sqrt(AccX*AccX+AccZ*AccZ))*1/(3.142/180);
 8000fd4:	4b51      	ldr	r3, [pc, #324]	@ (800111c <gyro_signal+0x26c>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff fa61 	bl	80004a0 <__aeabi_f2d>
 8000fde:	4680      	mov	r8, r0
 8000fe0:	4689      	mov	r9, r1
 8000fe2:	4b4d      	ldr	r3, [pc, #308]	@ (8001118 <gyro_signal+0x268>)
 8000fe4:	ed93 7a00 	vldr	s14, [r3]
 8000fe8:	4b4b      	ldr	r3, [pc, #300]	@ (8001118 <gyro_signal+0x268>)
 8000fea:	edd3 7a00 	vldr	s15, [r3]
 8000fee:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ff2:	4b4b      	ldr	r3, [pc, #300]	@ (8001120 <gyro_signal+0x270>)
 8000ff4:	edd3 6a00 	vldr	s13, [r3]
 8000ff8:	4b49      	ldr	r3, [pc, #292]	@ (8001120 <gyro_signal+0x270>)
 8000ffa:	edd3 7a00 	vldr	s15, [r3]
 8000ffe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001002:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001006:	ee17 0a90 	vmov	r0, s15
 800100a:	f7ff fa49 	bl	80004a0 <__aeabi_f2d>
 800100e:	4602      	mov	r2, r0
 8001010:	460b      	mov	r3, r1
 8001012:	ec43 2b10 	vmov	d0, r2, r3
 8001016:	f002 fdc1 	bl	8003b9c <sqrt>
 800101a:	ec53 2b10 	vmov	r2, r3, d0
 800101e:	4640      	mov	r0, r8
 8001020:	4649      	mov	r1, r9
 8001022:	f7ff fbbf 	bl	80007a4 <__aeabi_ddiv>
 8001026:	4602      	mov	r2, r0
 8001028:	460b      	mov	r3, r1
 800102a:	ec43 2b17 	vmov	d7, r2, r3
 800102e:	eeb0 0a47 	vmov.f32	s0, s14
 8001032:	eef0 0a67 	vmov.f32	s1, s15
 8001036:	f002 fddf 	bl	8003bf8 <atan>
 800103a:	ec51 0b10 	vmov	r0, r1, d0
 800103e:	a32e      	add	r3, pc, #184	@ (adr r3, 80010f8 <gyro_signal+0x248>)
 8001040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001044:	f7ff fbae 	bl	80007a4 <__aeabi_ddiv>
 8001048:	4602      	mov	r2, r0
 800104a:	460b      	mov	r3, r1
 800104c:	4610      	mov	r0, r2
 800104e:	4619      	mov	r1, r3
 8001050:	f7ff fd2e 	bl	8000ab0 <__aeabi_d2f>
 8001054:	4603      	mov	r3, r0
 8001056:	4a33      	ldr	r2, [pc, #204]	@ (8001124 <gyro_signal+0x274>)
 8001058:	6013      	str	r3, [r2, #0]
	AnglePitch=-atan(AccX/sqrt(AccY*AccY+AccZ*AccZ))*1/(3.142/180);
 800105a:	4b2f      	ldr	r3, [pc, #188]	@ (8001118 <gyro_signal+0x268>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff fa1e 	bl	80004a0 <__aeabi_f2d>
 8001064:	4680      	mov	r8, r0
 8001066:	4689      	mov	r9, r1
 8001068:	4b2c      	ldr	r3, [pc, #176]	@ (800111c <gyro_signal+0x26c>)
 800106a:	ed93 7a00 	vldr	s14, [r3]
 800106e:	4b2b      	ldr	r3, [pc, #172]	@ (800111c <gyro_signal+0x26c>)
 8001070:	edd3 7a00 	vldr	s15, [r3]
 8001074:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001078:	4b29      	ldr	r3, [pc, #164]	@ (8001120 <gyro_signal+0x270>)
 800107a:	edd3 6a00 	vldr	s13, [r3]
 800107e:	4b28      	ldr	r3, [pc, #160]	@ (8001120 <gyro_signal+0x270>)
 8001080:	edd3 7a00 	vldr	s15, [r3]
 8001084:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001088:	ee77 7a27 	vadd.f32	s15, s14, s15
 800108c:	ee17 0a90 	vmov	r0, s15
 8001090:	f7ff fa06 	bl	80004a0 <__aeabi_f2d>
 8001094:	4602      	mov	r2, r0
 8001096:	460b      	mov	r3, r1
 8001098:	ec43 2b10 	vmov	d0, r2, r3
 800109c:	f002 fd7e 	bl	8003b9c <sqrt>
 80010a0:	ec53 2b10 	vmov	r2, r3, d0
 80010a4:	4640      	mov	r0, r8
 80010a6:	4649      	mov	r1, r9
 80010a8:	f7ff fb7c 	bl	80007a4 <__aeabi_ddiv>
 80010ac:	4602      	mov	r2, r0
 80010ae:	460b      	mov	r3, r1
 80010b0:	ec43 2b17 	vmov	d7, r2, r3
 80010b4:	eeb0 0a47 	vmov.f32	s0, s14
 80010b8:	eef0 0a67 	vmov.f32	s1, s15
 80010bc:	f002 fd9c 	bl	8003bf8 <atan>
 80010c0:	ec53 2b10 	vmov	r2, r3, d0
 80010c4:	4614      	mov	r4, r2
 80010c6:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80010ca:	a30b      	add	r3, pc, #44	@ (adr r3, 80010f8 <gyro_signal+0x248>)
 80010cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d0:	4620      	mov	r0, r4
 80010d2:	4629      	mov	r1, r5
 80010d4:	f7ff fb66 	bl	80007a4 <__aeabi_ddiv>
 80010d8:	4602      	mov	r2, r0
 80010da:	460b      	mov	r3, r1
 80010dc:	4610      	mov	r0, r2
 80010de:	4619      	mov	r1, r3
 80010e0:	f7ff fce6 	bl	8000ab0 <__aeabi_d2f>
 80010e4:	4603      	mov	r3, r0
 80010e6:	4a10      	ldr	r2, [pc, #64]	@ (8001128 <gyro_signal+0x278>)
 80010e8:	6013      	str	r3, [r2, #0]
  }
} 
 80010ea:	bf00      	nop
 80010ec:	3720      	adds	r7, #32
 80010ee:	46bd      	mov	sp, r7
 80010f0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80010f4:	f3af 8000 	nop.w
 80010f8:	80fa7e3f 	.word	0x80fa7e3f
 80010fc:	3f91dfde 	.word	0x3f91dfde
 8001100:	2000008c 	.word	0x2000008c
 8001104:	42830000 	.word	0x42830000
 8001108:	20000128 	.word	0x20000128
 800110c:	2000012c 	.word	0x2000012c
 8001110:	20000130 	.word	0x20000130
 8001114:	45800000 	.word	0x45800000
 8001118:	20000144 	.word	0x20000144
 800111c:	20000148 	.word	0x20000148
 8001120:	2000014c 	.word	0x2000014c
 8001124:	20000150 	.word	0x20000150
 8001128:	20000154 	.word	0x20000154

0800112c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001130:	f000 fac2 	bl	80016b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001134:	f000 f8ae 	bl	8001294 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001138:	f000 f96c 	bl	8001414 <MX_GPIO_Init>
  MX_I2C1_Init();
 800113c:	f000 f912 	bl	8001364 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001140:	f000 f93e 	bl	80013c0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(250); 
 8001144:	20fa      	movs	r0, #250	@ 0xfa
 8001146:	f000 fb29 	bl	800179c <HAL_Delay>
  (void)wr8(&hi2c1, 0x1A,0x05); // cho thanh ghi 0x1A = 0x05 => low pass filter ~10hz
 800114a:	2205      	movs	r2, #5
 800114c:	211a      	movs	r1, #26
 800114e:	4848      	ldr	r0, [pc, #288]	@ (8001270 <main+0x144>)
 8001150:	f7ff fe76 	bl	8000e40 <wr8>
  (void)wr8(&hi2c1, 0x1B,0x08); // config sensing scale factor la *65.5*/ do/s
 8001154:	2208      	movs	r2, #8
 8001156:	211b      	movs	r1, #27
 8001158:	4845      	ldr	r0, [pc, #276]	@ (8001270 <main+0x144>)
 800115a:	f7ff fe71 	bl	8000e40 <wr8>
  //sample rate cua cam bien binh thuong la 8khz, neu bat lowpassfilter thi doc la 1000hz
  (void)wr8(&hi2c1, 0x19, 0x09); // Set Sample Rate cua cam bien = 1kHz / (1 + 9) = 100Hz
 800115e:	2209      	movs	r2, #9
 8001160:	2119      	movs	r1, #25
 8001162:	4843      	ldr	r0, [pc, #268]	@ (8001270 <main+0x144>)
 8001164:	f7ff fe6c 	bl	8000e40 <wr8>
  (void)wr8(&hi2c1, 0x1C, 0x10);
 8001168:	2210      	movs	r2, #16
 800116a:	211c      	movs	r1, #28
 800116c:	4840      	ldr	r0, [pc, #256]	@ (8001270 <main+0x144>)
 800116e:	f7ff fe67 	bl	8000e40 <wr8>
  
  
  
  (void)wr8(&hi2c1, 0x6B, 0x00);  // wake mpu
 8001172:	2200      	movs	r2, #0
 8001174:	216b      	movs	r1, #107	@ 0x6b
 8001176:	483e      	ldr	r0, [pc, #248]	@ (8001270 <main+0x144>)
 8001178:	f7ff fe62 	bl	8000e40 <wr8>
  //calibrate gyro
  for (RateCalibrationNumber = 0;
 800117c:	4b3d      	ldr	r3, [pc, #244]	@ (8001274 <main+0x148>)
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	e02a      	b.n	80011da <main+0xae>
	  RateCalibrationNumber < 2000;
	  RateCalibrationNumber++)
  {
	  gyro_signal();
 8001184:	f7ff fe94 	bl	8000eb0 <gyro_signal>
	  RateCalibrationPitch += RatePitch;
 8001188:	4b3b      	ldr	r3, [pc, #236]	@ (8001278 <main+0x14c>)
 800118a:	ed93 7a00 	vldr	s14, [r3]
 800118e:	4b3b      	ldr	r3, [pc, #236]	@ (800127c <main+0x150>)
 8001190:	edd3 7a00 	vldr	s15, [r3]
 8001194:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001198:	4b38      	ldr	r3, [pc, #224]	@ (800127c <main+0x150>)
 800119a:	edc3 7a00 	vstr	s15, [r3]
	  RateCalibrationRoll += RateRoll;
 800119e:	4b38      	ldr	r3, [pc, #224]	@ (8001280 <main+0x154>)
 80011a0:	ed93 7a00 	vldr	s14, [r3]
 80011a4:	4b37      	ldr	r3, [pc, #220]	@ (8001284 <main+0x158>)
 80011a6:	edd3 7a00 	vldr	s15, [r3]
 80011aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011ae:	4b35      	ldr	r3, [pc, #212]	@ (8001284 <main+0x158>)
 80011b0:	edc3 7a00 	vstr	s15, [r3]
	  RateCalibrationYaw += RateYaw;
 80011b4:	4b34      	ldr	r3, [pc, #208]	@ (8001288 <main+0x15c>)
 80011b6:	ed93 7a00 	vldr	s14, [r3]
 80011ba:	4b34      	ldr	r3, [pc, #208]	@ (800128c <main+0x160>)
 80011bc:	edd3 7a00 	vldr	s15, [r3]
 80011c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011c4:	4b31      	ldr	r3, [pc, #196]	@ (800128c <main+0x160>)
 80011c6:	edc3 7a00 	vstr	s15, [r3]
	  HAL_Delay(1);
 80011ca:	2001      	movs	r0, #1
 80011cc:	f000 fae6 	bl	800179c <HAL_Delay>
	  RateCalibrationNumber++)
 80011d0:	4b28      	ldr	r3, [pc, #160]	@ (8001274 <main+0x148>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	3301      	adds	r3, #1
 80011d6:	4a27      	ldr	r2, [pc, #156]	@ (8001274 <main+0x148>)
 80011d8:	6013      	str	r3, [r2, #0]
	  RateCalibrationNumber < 2000;
 80011da:	4b26      	ldr	r3, [pc, #152]	@ (8001274 <main+0x148>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80011e2:	dbcf      	blt.n	8001184 <main+0x58>
  }
  RateCalibrationPitch/=2000;
 80011e4:	4b25      	ldr	r3, [pc, #148]	@ (800127c <main+0x150>)
 80011e6:	ed93 7a00 	vldr	s14, [r3]
 80011ea:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8001290 <main+0x164>
 80011ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011f2:	4b22      	ldr	r3, [pc, #136]	@ (800127c <main+0x150>)
 80011f4:	edc3 7a00 	vstr	s15, [r3]
  RateCalibrationRoll/=2000;
 80011f8:	4b22      	ldr	r3, [pc, #136]	@ (8001284 <main+0x158>)
 80011fa:	ed93 7a00 	vldr	s14, [r3]
 80011fe:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8001290 <main+0x164>
 8001202:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001206:	4b1f      	ldr	r3, [pc, #124]	@ (8001284 <main+0x158>)
 8001208:	edc3 7a00 	vstr	s15, [r3]
  RateCalibrationYaw/=2000;
 800120c:	4b1f      	ldr	r3, [pc, #124]	@ (800128c <main+0x160>)
 800120e:	ed93 7a00 	vldr	s14, [r3]
 8001212:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8001290 <main+0x164>
 8001216:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800121a:	4b1c      	ldr	r3, [pc, #112]	@ (800128c <main+0x160>)
 800121c:	edc3 7a00 	vstr	s15, [r3]
  while (1)
  {
    /* USER CODE END WHILE */ 

    /* USER CODE BEGIN 3 */
    gyro_signal();         // đọc gyro
 8001220:	f7ff fe46 	bl	8000eb0 <gyro_signal>
    RatePitch -= RateCalibrationPitch;
 8001224:	4b14      	ldr	r3, [pc, #80]	@ (8001278 <main+0x14c>)
 8001226:	ed93 7a00 	vldr	s14, [r3]
 800122a:	4b14      	ldr	r3, [pc, #80]	@ (800127c <main+0x150>)
 800122c:	edd3 7a00 	vldr	s15, [r3]
 8001230:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001234:	4b10      	ldr	r3, [pc, #64]	@ (8001278 <main+0x14c>)
 8001236:	edc3 7a00 	vstr	s15, [r3]
    RateRoll -= RateCalibrationRoll;
 800123a:	4b11      	ldr	r3, [pc, #68]	@ (8001280 <main+0x154>)
 800123c:	ed93 7a00 	vldr	s14, [r3]
 8001240:	4b10      	ldr	r3, [pc, #64]	@ (8001284 <main+0x158>)
 8001242:	edd3 7a00 	vldr	s15, [r3]
 8001246:	ee77 7a67 	vsub.f32	s15, s14, s15
 800124a:	4b0d      	ldr	r3, [pc, #52]	@ (8001280 <main+0x154>)
 800124c:	edc3 7a00 	vstr	s15, [r3]
    RateYaw -= RateCalibrationYaw;
 8001250:	4b0d      	ldr	r3, [pc, #52]	@ (8001288 <main+0x15c>)
 8001252:	ed93 7a00 	vldr	s14, [r3]
 8001256:	4b0d      	ldr	r3, [pc, #52]	@ (800128c <main+0x160>)
 8001258:	edd3 7a00 	vldr	s15, [r3]
 800125c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001260:	4b09      	ldr	r3, [pc, #36]	@ (8001288 <main+0x15c>)
 8001262:	edc3 7a00 	vstr	s15, [r3]
    HAL_Delay(50);         // như Arduino: 50 ms
 8001266:	2032      	movs	r0, #50	@ 0x32
 8001268:	f000 fa98 	bl	800179c <HAL_Delay>
    gyro_signal();         // đọc gyro
 800126c:	bf00      	nop
 800126e:	e7d7      	b.n	8001220 <main+0xf4>
 8001270:	2000008c 	.word	0x2000008c
 8001274:	20000140 	.word	0x20000140
 8001278:	2000012c 	.word	0x2000012c
 800127c:	20000138 	.word	0x20000138
 8001280:	20000128 	.word	0x20000128
 8001284:	20000134 	.word	0x20000134
 8001288:	20000130 	.word	0x20000130
 800128c:	2000013c 	.word	0x2000013c
 8001290:	44fa0000 	.word	0x44fa0000

08001294 <SystemClock_Config>:
/**c
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b094      	sub	sp, #80	@ 0x50
 8001298:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800129a:	f107 0320 	add.w	r3, r7, #32
 800129e:	2230      	movs	r2, #48	@ 0x30
 80012a0:	2100      	movs	r1, #0
 80012a2:	4618      	mov	r0, r3
 80012a4:	f002 fc48 	bl	8003b38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012a8:	f107 030c 	add.w	r3, r7, #12
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
 80012b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012b8:	2300      	movs	r3, #0
 80012ba:	60bb      	str	r3, [r7, #8]
 80012bc:	4b27      	ldr	r3, [pc, #156]	@ (800135c <SystemClock_Config+0xc8>)
 80012be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c0:	4a26      	ldr	r2, [pc, #152]	@ (800135c <SystemClock_Config+0xc8>)
 80012c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80012c8:	4b24      	ldr	r3, [pc, #144]	@ (800135c <SystemClock_Config+0xc8>)
 80012ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012d0:	60bb      	str	r3, [r7, #8]
 80012d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012d4:	2300      	movs	r3, #0
 80012d6:	607b      	str	r3, [r7, #4]
 80012d8:	4b21      	ldr	r3, [pc, #132]	@ (8001360 <SystemClock_Config+0xcc>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a20      	ldr	r2, [pc, #128]	@ (8001360 <SystemClock_Config+0xcc>)
 80012de:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80012e2:	6013      	str	r3, [r2, #0]
 80012e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001360 <SystemClock_Config+0xcc>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012ec:	607b      	str	r3, [r7, #4]
 80012ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012f0:	2302      	movs	r3, #2
 80012f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012f4:	2301      	movs	r3, #1
 80012f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012f8:	2310      	movs	r3, #16
 80012fa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012fc:	2302      	movs	r3, #2
 80012fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001300:	2300      	movs	r3, #0
 8001302:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001304:	2308      	movs	r3, #8
 8001306:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001308:	2364      	movs	r3, #100	@ 0x64
 800130a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800130c:	2302      	movs	r3, #2
 800130e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001310:	2304      	movs	r3, #4
 8001312:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001314:	f107 0320 	add.w	r3, r7, #32
 8001318:	4618      	mov	r0, r3
 800131a:	f001 fcf1 	bl	8002d00 <HAL_RCC_OscConfig>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001324:	f000 f89e 	bl	8001464 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001328:	230f      	movs	r3, #15
 800132a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800132c:	2302      	movs	r3, #2
 800132e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001330:	2300      	movs	r3, #0
 8001332:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001334:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001338:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800133a:	2300      	movs	r3, #0
 800133c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800133e:	f107 030c 	add.w	r3, r7, #12
 8001342:	2103      	movs	r1, #3
 8001344:	4618      	mov	r0, r3
 8001346:	f001 ff53 	bl	80031f0 <HAL_RCC_ClockConfig>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001350:	f000 f888 	bl	8001464 <Error_Handler>
  }
}
 8001354:	bf00      	nop
 8001356:	3750      	adds	r7, #80	@ 0x50
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40023800 	.word	0x40023800
 8001360:	40007000 	.word	0x40007000

08001364 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001368:	4b12      	ldr	r3, [pc, #72]	@ (80013b4 <MX_I2C1_Init+0x50>)
 800136a:	4a13      	ldr	r2, [pc, #76]	@ (80013b8 <MX_I2C1_Init+0x54>)
 800136c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800136e:	4b11      	ldr	r3, [pc, #68]	@ (80013b4 <MX_I2C1_Init+0x50>)
 8001370:	4a12      	ldr	r2, [pc, #72]	@ (80013bc <MX_I2C1_Init+0x58>)
 8001372:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001374:	4b0f      	ldr	r3, [pc, #60]	@ (80013b4 <MX_I2C1_Init+0x50>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800137a:	4b0e      	ldr	r3, [pc, #56]	@ (80013b4 <MX_I2C1_Init+0x50>)
 800137c:	2200      	movs	r2, #0
 800137e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001380:	4b0c      	ldr	r3, [pc, #48]	@ (80013b4 <MX_I2C1_Init+0x50>)
 8001382:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001386:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001388:	4b0a      	ldr	r3, [pc, #40]	@ (80013b4 <MX_I2C1_Init+0x50>)
 800138a:	2200      	movs	r2, #0
 800138c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800138e:	4b09      	ldr	r3, [pc, #36]	@ (80013b4 <MX_I2C1_Init+0x50>)
 8001390:	2200      	movs	r2, #0
 8001392:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001394:	4b07      	ldr	r3, [pc, #28]	@ (80013b4 <MX_I2C1_Init+0x50>)
 8001396:	2200      	movs	r2, #0
 8001398:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800139a:	4b06      	ldr	r3, [pc, #24]	@ (80013b4 <MX_I2C1_Init+0x50>)
 800139c:	2200      	movs	r2, #0
 800139e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013a0:	4804      	ldr	r0, [pc, #16]	@ (80013b4 <MX_I2C1_Init+0x50>)
 80013a2:	f000 fc89 	bl	8001cb8 <HAL_I2C_Init>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013ac:	f000 f85a 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	2000008c 	.word	0x2000008c
 80013b8:	40005400 	.word	0x40005400
 80013bc:	00061a80 	.word	0x00061a80

080013c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013c4:	4b11      	ldr	r3, [pc, #68]	@ (800140c <MX_USART1_UART_Init+0x4c>)
 80013c6:	4a12      	ldr	r2, [pc, #72]	@ (8001410 <MX_USART1_UART_Init+0x50>)
 80013c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013ca:	4b10      	ldr	r3, [pc, #64]	@ (800140c <MX_USART1_UART_Init+0x4c>)
 80013cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013d2:	4b0e      	ldr	r3, [pc, #56]	@ (800140c <MX_USART1_UART_Init+0x4c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013d8:	4b0c      	ldr	r3, [pc, #48]	@ (800140c <MX_USART1_UART_Init+0x4c>)
 80013da:	2200      	movs	r2, #0
 80013dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013de:	4b0b      	ldr	r3, [pc, #44]	@ (800140c <MX_USART1_UART_Init+0x4c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013e4:	4b09      	ldr	r3, [pc, #36]	@ (800140c <MX_USART1_UART_Init+0x4c>)
 80013e6:	220c      	movs	r2, #12
 80013e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ea:	4b08      	ldr	r3, [pc, #32]	@ (800140c <MX_USART1_UART_Init+0x4c>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013f0:	4b06      	ldr	r3, [pc, #24]	@ (800140c <MX_USART1_UART_Init+0x4c>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013f6:	4805      	ldr	r0, [pc, #20]	@ (800140c <MX_USART1_UART_Init+0x4c>)
 80013f8:	f002 f8da 	bl	80035b0 <HAL_UART_Init>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001402:	f000 f82f 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	200000e0 	.word	0x200000e0
 8001410:	40011000 	.word	0x40011000

08001414 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	607b      	str	r3, [r7, #4]
 800141e:	4b10      	ldr	r3, [pc, #64]	@ (8001460 <MX_GPIO_Init+0x4c>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001422:	4a0f      	ldr	r2, [pc, #60]	@ (8001460 <MX_GPIO_Init+0x4c>)
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	6313      	str	r3, [r2, #48]	@ 0x30
 800142a:	4b0d      	ldr	r3, [pc, #52]	@ (8001460 <MX_GPIO_Init+0x4c>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	607b      	str	r3, [r7, #4]
 8001434:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	603b      	str	r3, [r7, #0]
 800143a:	4b09      	ldr	r3, [pc, #36]	@ (8001460 <MX_GPIO_Init+0x4c>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143e:	4a08      	ldr	r2, [pc, #32]	@ (8001460 <MX_GPIO_Init+0x4c>)
 8001440:	f043 0302 	orr.w	r3, r3, #2
 8001444:	6313      	str	r3, [r2, #48]	@ 0x30
 8001446:	4b06      	ldr	r3, [pc, #24]	@ (8001460 <MX_GPIO_Init+0x4c>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	603b      	str	r3, [r7, #0]
 8001450:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	40023800 	.word	0x40023800

08001464 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001468:	b672      	cpsid	i
}
 800146a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800146c:	bf00      	nop
 800146e:	e7fd      	b.n	800146c <Error_Handler+0x8>

08001470 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	607b      	str	r3, [r7, #4]
 800147a:	4b10      	ldr	r3, [pc, #64]	@ (80014bc <HAL_MspInit+0x4c>)
 800147c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800147e:	4a0f      	ldr	r2, [pc, #60]	@ (80014bc <HAL_MspInit+0x4c>)
 8001480:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001484:	6453      	str	r3, [r2, #68]	@ 0x44
 8001486:	4b0d      	ldr	r3, [pc, #52]	@ (80014bc <HAL_MspInit+0x4c>)
 8001488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800148a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800148e:	607b      	str	r3, [r7, #4]
 8001490:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	603b      	str	r3, [r7, #0]
 8001496:	4b09      	ldr	r3, [pc, #36]	@ (80014bc <HAL_MspInit+0x4c>)
 8001498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800149a:	4a08      	ldr	r2, [pc, #32]	@ (80014bc <HAL_MspInit+0x4c>)
 800149c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80014a2:	4b06      	ldr	r3, [pc, #24]	@ (80014bc <HAL_MspInit+0x4c>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014aa:	603b      	str	r3, [r7, #0]
 80014ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	40023800 	.word	0x40023800

080014c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08a      	sub	sp, #40	@ 0x28
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c8:	f107 0314 	add.w	r3, r7, #20
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
 80014d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a19      	ldr	r2, [pc, #100]	@ (8001544 <HAL_I2C_MspInit+0x84>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d12b      	bne.n	800153a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	613b      	str	r3, [r7, #16]
 80014e6:	4b18      	ldr	r3, [pc, #96]	@ (8001548 <HAL_I2C_MspInit+0x88>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ea:	4a17      	ldr	r2, [pc, #92]	@ (8001548 <HAL_I2C_MspInit+0x88>)
 80014ec:	f043 0302 	orr.w	r3, r3, #2
 80014f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014f2:	4b15      	ldr	r3, [pc, #84]	@ (8001548 <HAL_I2C_MspInit+0x88>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	613b      	str	r3, [r7, #16]
 80014fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014fe:	23c0      	movs	r3, #192	@ 0xc0
 8001500:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001502:	2312      	movs	r3, #18
 8001504:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150a:	2303      	movs	r3, #3
 800150c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800150e:	2304      	movs	r3, #4
 8001510:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001512:	f107 0314 	add.w	r3, r7, #20
 8001516:	4619      	mov	r1, r3
 8001518:	480c      	ldr	r0, [pc, #48]	@ (800154c <HAL_I2C_MspInit+0x8c>)
 800151a:	f000 fa49 	bl	80019b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	4b09      	ldr	r3, [pc, #36]	@ (8001548 <HAL_I2C_MspInit+0x88>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001526:	4a08      	ldr	r2, [pc, #32]	@ (8001548 <HAL_I2C_MspInit+0x88>)
 8001528:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800152c:	6413      	str	r3, [r2, #64]	@ 0x40
 800152e:	4b06      	ldr	r3, [pc, #24]	@ (8001548 <HAL_I2C_MspInit+0x88>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001532:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800153a:	bf00      	nop
 800153c:	3728      	adds	r7, #40	@ 0x28
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40005400 	.word	0x40005400
 8001548:	40023800 	.word	0x40023800
 800154c:	40020400 	.word	0x40020400

08001550 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b08a      	sub	sp, #40	@ 0x28
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001558:	f107 0314 	add.w	r3, r7, #20
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a19      	ldr	r2, [pc, #100]	@ (80015d4 <HAL_UART_MspInit+0x84>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d12c      	bne.n	80015cc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	613b      	str	r3, [r7, #16]
 8001576:	4b18      	ldr	r3, [pc, #96]	@ (80015d8 <HAL_UART_MspInit+0x88>)
 8001578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800157a:	4a17      	ldr	r2, [pc, #92]	@ (80015d8 <HAL_UART_MspInit+0x88>)
 800157c:	f043 0310 	orr.w	r3, r3, #16
 8001580:	6453      	str	r3, [r2, #68]	@ 0x44
 8001582:	4b15      	ldr	r3, [pc, #84]	@ (80015d8 <HAL_UART_MspInit+0x88>)
 8001584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001586:	f003 0310 	and.w	r3, r3, #16
 800158a:	613b      	str	r3, [r7, #16]
 800158c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	4b11      	ldr	r3, [pc, #68]	@ (80015d8 <HAL_UART_MspInit+0x88>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001596:	4a10      	ldr	r2, [pc, #64]	@ (80015d8 <HAL_UART_MspInit+0x88>)
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	6313      	str	r3, [r2, #48]	@ 0x30
 800159e:	4b0e      	ldr	r3, [pc, #56]	@ (80015d8 <HAL_UART_MspInit+0x88>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80015aa:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80015ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b0:	2302      	movs	r3, #2
 80015b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b8:	2303      	movs	r3, #3
 80015ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015bc:	2307      	movs	r3, #7
 80015be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	4619      	mov	r1, r3
 80015c6:	4805      	ldr	r0, [pc, #20]	@ (80015dc <HAL_UART_MspInit+0x8c>)
 80015c8:	f000 f9f2 	bl	80019b0 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80015cc:	bf00      	nop
 80015ce:	3728      	adds	r7, #40	@ 0x28
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40011000 	.word	0x40011000
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40020000 	.word	0x40020000

080015e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015e4:	bf00      	nop
 80015e6:	e7fd      	b.n	80015e4 <NMI_Handler+0x4>

080015e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ec:	bf00      	nop
 80015ee:	e7fd      	b.n	80015ec <HardFault_Handler+0x4>

080015f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f4:	bf00      	nop
 80015f6:	e7fd      	b.n	80015f4 <MemManage_Handler+0x4>

080015f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015fc:	bf00      	nop
 80015fe:	e7fd      	b.n	80015fc <BusFault_Handler+0x4>

08001600 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001604:	bf00      	nop
 8001606:	e7fd      	b.n	8001604 <UsageFault_Handler+0x4>

08001608 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001628:	bf00      	nop
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001636:	f000 f891 	bl	800175c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
	...

08001640 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001644:	4b06      	ldr	r3, [pc, #24]	@ (8001660 <SystemInit+0x20>)
 8001646:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800164a:	4a05      	ldr	r2, [pc, #20]	@ (8001660 <SystemInit+0x20>)
 800164c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001650:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	e000ed00 	.word	0xe000ed00

08001664 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001664:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800169c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001668:	f7ff ffea 	bl	8001640 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800166c:	480c      	ldr	r0, [pc, #48]	@ (80016a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800166e:	490d      	ldr	r1, [pc, #52]	@ (80016a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001670:	4a0d      	ldr	r2, [pc, #52]	@ (80016a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001672:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001674:	e002      	b.n	800167c <LoopCopyDataInit>

08001676 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001676:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001678:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800167a:	3304      	adds	r3, #4

0800167c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800167c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800167e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001680:	d3f9      	bcc.n	8001676 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001682:	4a0a      	ldr	r2, [pc, #40]	@ (80016ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001684:	4c0a      	ldr	r4, [pc, #40]	@ (80016b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001686:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001688:	e001      	b.n	800168e <LoopFillZerobss>

0800168a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800168a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800168c:	3204      	adds	r2, #4

0800168e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800168e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001690:	d3fb      	bcc.n	800168a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001692:	f002 fa5f 	bl	8003b54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001696:	f7ff fd49 	bl	800112c <main>
  bx  lr    
 800169a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800169c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016a4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80016a8:	08004170 	.word	0x08004170
  ldr r2, =_sbss
 80016ac:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80016b0:	20000294 	.word	0x20000294

080016b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016b4:	e7fe      	b.n	80016b4 <ADC_IRQHandler>
	...

080016b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016bc:	4b0e      	ldr	r3, [pc, #56]	@ (80016f8 <HAL_Init+0x40>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a0d      	ldr	r2, [pc, #52]	@ (80016f8 <HAL_Init+0x40>)
 80016c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016c8:	4b0b      	ldr	r3, [pc, #44]	@ (80016f8 <HAL_Init+0x40>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a0a      	ldr	r2, [pc, #40]	@ (80016f8 <HAL_Init+0x40>)
 80016ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016d4:	4b08      	ldr	r3, [pc, #32]	@ (80016f8 <HAL_Init+0x40>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a07      	ldr	r2, [pc, #28]	@ (80016f8 <HAL_Init+0x40>)
 80016da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016e0:	2003      	movs	r0, #3
 80016e2:	f000 f931 	bl	8001948 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016e6:	200f      	movs	r0, #15
 80016e8:	f000 f808 	bl	80016fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016ec:	f7ff fec0 	bl	8001470 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40023c00 	.word	0x40023c00

080016fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001704:	4b12      	ldr	r3, [pc, #72]	@ (8001750 <HAL_InitTick+0x54>)
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	4b12      	ldr	r3, [pc, #72]	@ (8001754 <HAL_InitTick+0x58>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	4619      	mov	r1, r3
 800170e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001712:	fbb3 f3f1 	udiv	r3, r3, r1
 8001716:	fbb2 f3f3 	udiv	r3, r2, r3
 800171a:	4618      	mov	r0, r3
 800171c:	f000 f93b 	bl	8001996 <HAL_SYSTICK_Config>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e00e      	b.n	8001748 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2b0f      	cmp	r3, #15
 800172e:	d80a      	bhi.n	8001746 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001730:	2200      	movs	r2, #0
 8001732:	6879      	ldr	r1, [r7, #4]
 8001734:	f04f 30ff 	mov.w	r0, #4294967295
 8001738:	f000 f911 	bl	800195e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800173c:	4a06      	ldr	r2, [pc, #24]	@ (8001758 <HAL_InitTick+0x5c>)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001742:	2300      	movs	r3, #0
 8001744:	e000      	b.n	8001748 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
}
 8001748:	4618      	mov	r0, r3
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	20000000 	.word	0x20000000
 8001754:	20000008 	.word	0x20000008
 8001758:	20000004 	.word	0x20000004

0800175c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001760:	4b06      	ldr	r3, [pc, #24]	@ (800177c <HAL_IncTick+0x20>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	461a      	mov	r2, r3
 8001766:	4b06      	ldr	r3, [pc, #24]	@ (8001780 <HAL_IncTick+0x24>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4413      	add	r3, r2
 800176c:	4a04      	ldr	r2, [pc, #16]	@ (8001780 <HAL_IncTick+0x24>)
 800176e:	6013      	str	r3, [r2, #0]
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	20000008 	.word	0x20000008
 8001780:	20000158 	.word	0x20000158

08001784 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  return uwTick;
 8001788:	4b03      	ldr	r3, [pc, #12]	@ (8001798 <HAL_GetTick+0x14>)
 800178a:	681b      	ldr	r3, [r3, #0]
}
 800178c:	4618      	mov	r0, r3
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	20000158 	.word	0x20000158

0800179c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017a4:	f7ff ffee 	bl	8001784 <HAL_GetTick>
 80017a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017b4:	d005      	beq.n	80017c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017b6:	4b0a      	ldr	r3, [pc, #40]	@ (80017e0 <HAL_Delay+0x44>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	461a      	mov	r2, r3
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	4413      	add	r3, r2
 80017c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017c2:	bf00      	nop
 80017c4:	f7ff ffde 	bl	8001784 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	68fa      	ldr	r2, [r7, #12]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d8f7      	bhi.n	80017c4 <HAL_Delay+0x28>
  {
  }
}
 80017d4:	bf00      	nop
 80017d6:	bf00      	nop
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000008 	.word	0x20000008

080017e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001828 <__NVIC_SetPriorityGrouping+0x44>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017fa:	68ba      	ldr	r2, [r7, #8]
 80017fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001800:	4013      	ands	r3, r2
 8001802:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800180c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001810:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001814:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001816:	4a04      	ldr	r2, [pc, #16]	@ (8001828 <__NVIC_SetPriorityGrouping+0x44>)
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	60d3      	str	r3, [r2, #12]
}
 800181c:	bf00      	nop
 800181e:	3714      	adds	r7, #20
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	e000ed00 	.word	0xe000ed00

0800182c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001830:	4b04      	ldr	r3, [pc, #16]	@ (8001844 <__NVIC_GetPriorityGrouping+0x18>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	0a1b      	lsrs	r3, r3, #8
 8001836:	f003 0307 	and.w	r3, r3, #7
}
 800183a:	4618      	mov	r0, r3
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	e000ed00 	.word	0xe000ed00

08001848 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	6039      	str	r1, [r7, #0]
 8001852:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001858:	2b00      	cmp	r3, #0
 800185a:	db0a      	blt.n	8001872 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	b2da      	uxtb	r2, r3
 8001860:	490c      	ldr	r1, [pc, #48]	@ (8001894 <__NVIC_SetPriority+0x4c>)
 8001862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001866:	0112      	lsls	r2, r2, #4
 8001868:	b2d2      	uxtb	r2, r2
 800186a:	440b      	add	r3, r1
 800186c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001870:	e00a      	b.n	8001888 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	b2da      	uxtb	r2, r3
 8001876:	4908      	ldr	r1, [pc, #32]	@ (8001898 <__NVIC_SetPriority+0x50>)
 8001878:	79fb      	ldrb	r3, [r7, #7]
 800187a:	f003 030f 	and.w	r3, r3, #15
 800187e:	3b04      	subs	r3, #4
 8001880:	0112      	lsls	r2, r2, #4
 8001882:	b2d2      	uxtb	r2, r2
 8001884:	440b      	add	r3, r1
 8001886:	761a      	strb	r2, [r3, #24]
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	e000e100 	.word	0xe000e100
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800189c:	b480      	push	{r7}
 800189e:	b089      	sub	sp, #36	@ 0x24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f003 0307 	and.w	r3, r3, #7
 80018ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	f1c3 0307 	rsb	r3, r3, #7
 80018b6:	2b04      	cmp	r3, #4
 80018b8:	bf28      	it	cs
 80018ba:	2304      	movcs	r3, #4
 80018bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	3304      	adds	r3, #4
 80018c2:	2b06      	cmp	r3, #6
 80018c4:	d902      	bls.n	80018cc <NVIC_EncodePriority+0x30>
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	3b03      	subs	r3, #3
 80018ca:	e000      	b.n	80018ce <NVIC_EncodePriority+0x32>
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d0:	f04f 32ff 	mov.w	r2, #4294967295
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43da      	mvns	r2, r3
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	401a      	ands	r2, r3
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018e4:	f04f 31ff 	mov.w	r1, #4294967295
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	fa01 f303 	lsl.w	r3, r1, r3
 80018ee:	43d9      	mvns	r1, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f4:	4313      	orrs	r3, r2
         );
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3724      	adds	r7, #36	@ 0x24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
	...

08001904 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	3b01      	subs	r3, #1
 8001910:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001914:	d301      	bcc.n	800191a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001916:	2301      	movs	r3, #1
 8001918:	e00f      	b.n	800193a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800191a:	4a0a      	ldr	r2, [pc, #40]	@ (8001944 <SysTick_Config+0x40>)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3b01      	subs	r3, #1
 8001920:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001922:	210f      	movs	r1, #15
 8001924:	f04f 30ff 	mov.w	r0, #4294967295
 8001928:	f7ff ff8e 	bl	8001848 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800192c:	4b05      	ldr	r3, [pc, #20]	@ (8001944 <SysTick_Config+0x40>)
 800192e:	2200      	movs	r2, #0
 8001930:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001932:	4b04      	ldr	r3, [pc, #16]	@ (8001944 <SysTick_Config+0x40>)
 8001934:	2207      	movs	r2, #7
 8001936:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	e000e010 	.word	0xe000e010

08001948 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f7ff ff47 	bl	80017e4 <__NVIC_SetPriorityGrouping>
}
 8001956:	bf00      	nop
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800195e:	b580      	push	{r7, lr}
 8001960:	b086      	sub	sp, #24
 8001962:	af00      	add	r7, sp, #0
 8001964:	4603      	mov	r3, r0
 8001966:	60b9      	str	r1, [r7, #8]
 8001968:	607a      	str	r2, [r7, #4]
 800196a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800196c:	2300      	movs	r3, #0
 800196e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001970:	f7ff ff5c 	bl	800182c <__NVIC_GetPriorityGrouping>
 8001974:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	68b9      	ldr	r1, [r7, #8]
 800197a:	6978      	ldr	r0, [r7, #20]
 800197c:	f7ff ff8e 	bl	800189c <NVIC_EncodePriority>
 8001980:	4602      	mov	r2, r0
 8001982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001986:	4611      	mov	r1, r2
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff ff5d 	bl	8001848 <__NVIC_SetPriority>
}
 800198e:	bf00      	nop
 8001990:	3718      	adds	r7, #24
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b082      	sub	sp, #8
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f7ff ffb0 	bl	8001904 <SysTick_Config>
 80019a4:	4603      	mov	r3, r0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
	...

080019b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b089      	sub	sp, #36	@ 0x24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019ba:	2300      	movs	r3, #0
 80019bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019be:	2300      	movs	r3, #0
 80019c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019c2:	2300      	movs	r3, #0
 80019c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019c6:	2300      	movs	r3, #0
 80019c8:	61fb      	str	r3, [r7, #28]
 80019ca:	e159      	b.n	8001c80 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019cc:	2201      	movs	r2, #1
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	697a      	ldr	r2, [r7, #20]
 80019dc:	4013      	ands	r3, r2
 80019de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	f040 8148 	bne.w	8001c7a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f003 0303 	and.w	r3, r3, #3
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d005      	beq.n	8001a02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d130      	bne.n	8001a64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	2203      	movs	r2, #3
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	43db      	mvns	r3, r3
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	4013      	ands	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	68da      	ldr	r2, [r3, #12]
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a38:	2201      	movs	r2, #1
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	43db      	mvns	r3, r3
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	4013      	ands	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	091b      	lsrs	r3, r3, #4
 8001a4e:	f003 0201 	and.w	r2, r3, #1
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f003 0303 	and.w	r3, r3, #3
 8001a6c:	2b03      	cmp	r3, #3
 8001a6e:	d017      	beq.n	8001aa0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	2203      	movs	r2, #3
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	43db      	mvns	r3, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4013      	ands	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	689a      	ldr	r2, [r3, #8]
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f003 0303 	and.w	r3, r3, #3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d123      	bne.n	8001af4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	08da      	lsrs	r2, r3, #3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3208      	adds	r2, #8
 8001ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	f003 0307 	and.w	r3, r3, #7
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	220f      	movs	r2, #15
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	4013      	ands	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	691a      	ldr	r2, [r3, #16]
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	08da      	lsrs	r2, r3, #3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	3208      	adds	r2, #8
 8001aee:	69b9      	ldr	r1, [r7, #24]
 8001af0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	2203      	movs	r2, #3
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	43db      	mvns	r3, r3
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f003 0203 	and.w	r2, r3, #3
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	f000 80a2 	beq.w	8001c7a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	4b57      	ldr	r3, [pc, #348]	@ (8001c98 <HAL_GPIO_Init+0x2e8>)
 8001b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b3e:	4a56      	ldr	r2, [pc, #344]	@ (8001c98 <HAL_GPIO_Init+0x2e8>)
 8001b40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b44:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b46:	4b54      	ldr	r3, [pc, #336]	@ (8001c98 <HAL_GPIO_Init+0x2e8>)
 8001b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b52:	4a52      	ldr	r2, [pc, #328]	@ (8001c9c <HAL_GPIO_Init+0x2ec>)
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	089b      	lsrs	r3, r3, #2
 8001b58:	3302      	adds	r3, #2
 8001b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	f003 0303 	and.w	r3, r3, #3
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	220f      	movs	r2, #15
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	43db      	mvns	r3, r3
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	4013      	ands	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a49      	ldr	r2, [pc, #292]	@ (8001ca0 <HAL_GPIO_Init+0x2f0>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d019      	beq.n	8001bb2 <HAL_GPIO_Init+0x202>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a48      	ldr	r2, [pc, #288]	@ (8001ca4 <HAL_GPIO_Init+0x2f4>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d013      	beq.n	8001bae <HAL_GPIO_Init+0x1fe>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a47      	ldr	r2, [pc, #284]	@ (8001ca8 <HAL_GPIO_Init+0x2f8>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d00d      	beq.n	8001baa <HAL_GPIO_Init+0x1fa>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a46      	ldr	r2, [pc, #280]	@ (8001cac <HAL_GPIO_Init+0x2fc>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d007      	beq.n	8001ba6 <HAL_GPIO_Init+0x1f6>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a45      	ldr	r2, [pc, #276]	@ (8001cb0 <HAL_GPIO_Init+0x300>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d101      	bne.n	8001ba2 <HAL_GPIO_Init+0x1f2>
 8001b9e:	2304      	movs	r3, #4
 8001ba0:	e008      	b.n	8001bb4 <HAL_GPIO_Init+0x204>
 8001ba2:	2307      	movs	r3, #7
 8001ba4:	e006      	b.n	8001bb4 <HAL_GPIO_Init+0x204>
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e004      	b.n	8001bb4 <HAL_GPIO_Init+0x204>
 8001baa:	2302      	movs	r3, #2
 8001bac:	e002      	b.n	8001bb4 <HAL_GPIO_Init+0x204>
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e000      	b.n	8001bb4 <HAL_GPIO_Init+0x204>
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	69fa      	ldr	r2, [r7, #28]
 8001bb6:	f002 0203 	and.w	r2, r2, #3
 8001bba:	0092      	lsls	r2, r2, #2
 8001bbc:	4093      	lsls	r3, r2
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bc4:	4935      	ldr	r1, [pc, #212]	@ (8001c9c <HAL_GPIO_Init+0x2ec>)
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	089b      	lsrs	r3, r3, #2
 8001bca:	3302      	adds	r3, #2
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bd2:	4b38      	ldr	r3, [pc, #224]	@ (8001cb4 <HAL_GPIO_Init+0x304>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4013      	ands	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bf6:	4a2f      	ldr	r2, [pc, #188]	@ (8001cb4 <HAL_GPIO_Init+0x304>)
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bfc:	4b2d      	ldr	r3, [pc, #180]	@ (8001cb4 <HAL_GPIO_Init+0x304>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	43db      	mvns	r3, r3
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d003      	beq.n	8001c20 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c20:	4a24      	ldr	r2, [pc, #144]	@ (8001cb4 <HAL_GPIO_Init+0x304>)
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c26:	4b23      	ldr	r3, [pc, #140]	@ (8001cb4 <HAL_GPIO_Init+0x304>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	43db      	mvns	r3, r3
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	4013      	ands	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d003      	beq.n	8001c4a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c4a:	4a1a      	ldr	r2, [pc, #104]	@ (8001cb4 <HAL_GPIO_Init+0x304>)
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c50:	4b18      	ldr	r3, [pc, #96]	@ (8001cb4 <HAL_GPIO_Init+0x304>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d003      	beq.n	8001c74 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c74:	4a0f      	ldr	r2, [pc, #60]	@ (8001cb4 <HAL_GPIO_Init+0x304>)
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	61fb      	str	r3, [r7, #28]
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	2b0f      	cmp	r3, #15
 8001c84:	f67f aea2 	bls.w	80019cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c88:	bf00      	nop
 8001c8a:	bf00      	nop
 8001c8c:	3724      	adds	r7, #36	@ 0x24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	40013800 	.word	0x40013800
 8001ca0:	40020000 	.word	0x40020000
 8001ca4:	40020400 	.word	0x40020400
 8001ca8:	40020800 	.word	0x40020800
 8001cac:	40020c00 	.word	0x40020c00
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	40013c00 	.word	0x40013c00

08001cb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d101      	bne.n	8001cca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e12b      	b.n	8001f22 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d106      	bne.n	8001ce4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f7ff fbee 	bl	80014c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2224      	movs	r2, #36	@ 0x24
 8001ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f022 0201 	bic.w	r2, r2, #1
 8001cfa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d1c:	f001 fc20 	bl	8003560 <HAL_RCC_GetPCLK1Freq>
 8001d20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	4a81      	ldr	r2, [pc, #516]	@ (8001f2c <HAL_I2C_Init+0x274>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d807      	bhi.n	8001d3c <HAL_I2C_Init+0x84>
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	4a80      	ldr	r2, [pc, #512]	@ (8001f30 <HAL_I2C_Init+0x278>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	bf94      	ite	ls
 8001d34:	2301      	movls	r3, #1
 8001d36:	2300      	movhi	r3, #0
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	e006      	b.n	8001d4a <HAL_I2C_Init+0x92>
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	4a7d      	ldr	r2, [pc, #500]	@ (8001f34 <HAL_I2C_Init+0x27c>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	bf94      	ite	ls
 8001d44:	2301      	movls	r3, #1
 8001d46:	2300      	movhi	r3, #0
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e0e7      	b.n	8001f22 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	4a78      	ldr	r2, [pc, #480]	@ (8001f38 <HAL_I2C_Init+0x280>)
 8001d56:	fba2 2303 	umull	r2, r3, r2, r3
 8001d5a:	0c9b      	lsrs	r3, r3, #18
 8001d5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	68ba      	ldr	r2, [r7, #8]
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	6a1b      	ldr	r3, [r3, #32]
 8001d78:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	4a6a      	ldr	r2, [pc, #424]	@ (8001f2c <HAL_I2C_Init+0x274>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d802      	bhi.n	8001d8c <HAL_I2C_Init+0xd4>
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	e009      	b.n	8001da0 <HAL_I2C_Init+0xe8>
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001d92:	fb02 f303 	mul.w	r3, r2, r3
 8001d96:	4a69      	ldr	r2, [pc, #420]	@ (8001f3c <HAL_I2C_Init+0x284>)
 8001d98:	fba2 2303 	umull	r2, r3, r2, r3
 8001d9c:	099b      	lsrs	r3, r3, #6
 8001d9e:	3301      	adds	r3, #1
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	6812      	ldr	r2, [r2, #0]
 8001da4:	430b      	orrs	r3, r1
 8001da6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001db2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	495c      	ldr	r1, [pc, #368]	@ (8001f2c <HAL_I2C_Init+0x274>)
 8001dbc:	428b      	cmp	r3, r1
 8001dbe:	d819      	bhi.n	8001df4 <HAL_I2C_Init+0x13c>
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	1e59      	subs	r1, r3, #1
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dce:	1c59      	adds	r1, r3, #1
 8001dd0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001dd4:	400b      	ands	r3, r1
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d00a      	beq.n	8001df0 <HAL_I2C_Init+0x138>
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	1e59      	subs	r1, r3, #1
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001de8:	3301      	adds	r3, #1
 8001dea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dee:	e051      	b.n	8001e94 <HAL_I2C_Init+0x1dc>
 8001df0:	2304      	movs	r3, #4
 8001df2:	e04f      	b.n	8001e94 <HAL_I2C_Init+0x1dc>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d111      	bne.n	8001e20 <HAL_I2C_Init+0x168>
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	1e58      	subs	r0, r3, #1
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6859      	ldr	r1, [r3, #4]
 8001e04:	460b      	mov	r3, r1
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	440b      	add	r3, r1
 8001e0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e0e:	3301      	adds	r3, #1
 8001e10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	bf0c      	ite	eq
 8001e18:	2301      	moveq	r3, #1
 8001e1a:	2300      	movne	r3, #0
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	e012      	b.n	8001e46 <HAL_I2C_Init+0x18e>
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	1e58      	subs	r0, r3, #1
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6859      	ldr	r1, [r3, #4]
 8001e28:	460b      	mov	r3, r1
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	440b      	add	r3, r1
 8001e2e:	0099      	lsls	r1, r3, #2
 8001e30:	440b      	add	r3, r1
 8001e32:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e36:	3301      	adds	r3, #1
 8001e38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	bf0c      	ite	eq
 8001e40:	2301      	moveq	r3, #1
 8001e42:	2300      	movne	r3, #0
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <HAL_I2C_Init+0x196>
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e022      	b.n	8001e94 <HAL_I2C_Init+0x1dc>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d10e      	bne.n	8001e74 <HAL_I2C_Init+0x1bc>
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	1e58      	subs	r0, r3, #1
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6859      	ldr	r1, [r3, #4]
 8001e5e:	460b      	mov	r3, r1
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	440b      	add	r3, r1
 8001e64:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e68:	3301      	adds	r3, #1
 8001e6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e72:	e00f      	b.n	8001e94 <HAL_I2C_Init+0x1dc>
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	1e58      	subs	r0, r3, #1
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6859      	ldr	r1, [r3, #4]
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	440b      	add	r3, r1
 8001e82:	0099      	lsls	r1, r3, #2
 8001e84:	440b      	add	r3, r1
 8001e86:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e90:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e94:	6879      	ldr	r1, [r7, #4]
 8001e96:	6809      	ldr	r1, [r1, #0]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	69da      	ldr	r2, [r3, #28]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a1b      	ldr	r3, [r3, #32]
 8001eae:	431a      	orrs	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001ec2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	6911      	ldr	r1, [r2, #16]
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	68d2      	ldr	r2, [r2, #12]
 8001ece:	4311      	orrs	r1, r2
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	6812      	ldr	r2, [r2, #0]
 8001ed4:	430b      	orrs	r3, r1
 8001ed6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	695a      	ldr	r2, [r3, #20]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	431a      	orrs	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f042 0201 	orr.w	r2, r2, #1
 8001f02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2220      	movs	r2, #32
 8001f0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	000186a0 	.word	0x000186a0
 8001f30:	001e847f 	.word	0x001e847f
 8001f34:	003d08ff 	.word	0x003d08ff
 8001f38:	431bde83 	.word	0x431bde83
 8001f3c:	10624dd3 	.word	0x10624dd3

08001f40 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b088      	sub	sp, #32
 8001f44:	af02      	add	r7, sp, #8
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	4608      	mov	r0, r1
 8001f4a:	4611      	mov	r1, r2
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	4603      	mov	r3, r0
 8001f50:	817b      	strh	r3, [r7, #10]
 8001f52:	460b      	mov	r3, r1
 8001f54:	813b      	strh	r3, [r7, #8]
 8001f56:	4613      	mov	r3, r2
 8001f58:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f5a:	f7ff fc13 	bl	8001784 <HAL_GetTick>
 8001f5e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	2b20      	cmp	r3, #32
 8001f6a:	f040 80d9 	bne.w	8002120 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	9300      	str	r3, [sp, #0]
 8001f72:	2319      	movs	r3, #25
 8001f74:	2201      	movs	r2, #1
 8001f76:	496d      	ldr	r1, [pc, #436]	@ (800212c <HAL_I2C_Mem_Write+0x1ec>)
 8001f78:	68f8      	ldr	r0, [r7, #12]
 8001f7a:	f000 fc8b 	bl	8002894 <I2C_WaitOnFlagUntilTimeout>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001f84:	2302      	movs	r3, #2
 8001f86:	e0cc      	b.n	8002122 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d101      	bne.n	8001f96 <HAL_I2C_Mem_Write+0x56>
 8001f92:	2302      	movs	r3, #2
 8001f94:	e0c5      	b.n	8002122 <HAL_I2C_Mem_Write+0x1e2>
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d007      	beq.n	8001fbc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f042 0201 	orr.w	r2, r2, #1
 8001fba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001fca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2221      	movs	r2, #33	@ 0x21
 8001fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2240      	movs	r2, #64	@ 0x40
 8001fd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6a3a      	ldr	r2, [r7, #32]
 8001fe6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001fec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ff2:	b29a      	uxth	r2, r3
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	4a4d      	ldr	r2, [pc, #308]	@ (8002130 <HAL_I2C_Mem_Write+0x1f0>)
 8001ffc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ffe:	88f8      	ldrh	r0, [r7, #6]
 8002000:	893a      	ldrh	r2, [r7, #8]
 8002002:	8979      	ldrh	r1, [r7, #10]
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	9301      	str	r3, [sp, #4]
 8002008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800200a:	9300      	str	r3, [sp, #0]
 800200c:	4603      	mov	r3, r0
 800200e:	68f8      	ldr	r0, [r7, #12]
 8002010:	f000 fac2 	bl	8002598 <I2C_RequestMemoryWrite>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d052      	beq.n	80020c0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e081      	b.n	8002122 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800201e:	697a      	ldr	r2, [r7, #20]
 8002020:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002022:	68f8      	ldr	r0, [r7, #12]
 8002024:	f000 fd50 	bl	8002ac8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d00d      	beq.n	800204a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002032:	2b04      	cmp	r3, #4
 8002034:	d107      	bne.n	8002046 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002044:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e06b      	b.n	8002122 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800204e:	781a      	ldrb	r2, [r3, #0]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800205a:	1c5a      	adds	r2, r3, #1
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002064:	3b01      	subs	r3, #1
 8002066:	b29a      	uxth	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002070:	b29b      	uxth	r3, r3
 8002072:	3b01      	subs	r3, #1
 8002074:	b29a      	uxth	r2, r3
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	695b      	ldr	r3, [r3, #20]
 8002080:	f003 0304 	and.w	r3, r3, #4
 8002084:	2b04      	cmp	r3, #4
 8002086:	d11b      	bne.n	80020c0 <HAL_I2C_Mem_Write+0x180>
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800208c:	2b00      	cmp	r3, #0
 800208e:	d017      	beq.n	80020c0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002094:	781a      	ldrb	r2, [r3, #0]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020a0:	1c5a      	adds	r2, r3, #1
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020aa:	3b01      	subs	r3, #1
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	3b01      	subs	r3, #1
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1aa      	bne.n	800201e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020c8:	697a      	ldr	r2, [r7, #20]
 80020ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80020cc:	68f8      	ldr	r0, [r7, #12]
 80020ce:	f000 fd43 	bl	8002b58 <I2C_WaitOnBTFFlagUntilTimeout>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d00d      	beq.n	80020f4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020dc:	2b04      	cmp	r3, #4
 80020de:	d107      	bne.n	80020f0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020ee:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e016      	b.n	8002122 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002102:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2220      	movs	r2, #32
 8002108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2200      	movs	r2, #0
 8002110:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800211c:	2300      	movs	r3, #0
 800211e:	e000      	b.n	8002122 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002120:	2302      	movs	r3, #2
  }
}
 8002122:	4618      	mov	r0, r3
 8002124:	3718      	adds	r7, #24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	00100002 	.word	0x00100002
 8002130:	ffff0000 	.word	0xffff0000

08002134 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b08c      	sub	sp, #48	@ 0x30
 8002138:	af02      	add	r7, sp, #8
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	4608      	mov	r0, r1
 800213e:	4611      	mov	r1, r2
 8002140:	461a      	mov	r2, r3
 8002142:	4603      	mov	r3, r0
 8002144:	817b      	strh	r3, [r7, #10]
 8002146:	460b      	mov	r3, r1
 8002148:	813b      	strh	r3, [r7, #8]
 800214a:	4613      	mov	r3, r2
 800214c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800214e:	f7ff fb19 	bl	8001784 <HAL_GetTick>
 8002152:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800215a:	b2db      	uxtb	r3, r3
 800215c:	2b20      	cmp	r3, #32
 800215e:	f040 8214 	bne.w	800258a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002164:	9300      	str	r3, [sp, #0]
 8002166:	2319      	movs	r3, #25
 8002168:	2201      	movs	r2, #1
 800216a:	497b      	ldr	r1, [pc, #492]	@ (8002358 <HAL_I2C_Mem_Read+0x224>)
 800216c:	68f8      	ldr	r0, [r7, #12]
 800216e:	f000 fb91 	bl	8002894 <I2C_WaitOnFlagUntilTimeout>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002178:	2302      	movs	r3, #2
 800217a:	e207      	b.n	800258c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002182:	2b01      	cmp	r3, #1
 8002184:	d101      	bne.n	800218a <HAL_I2C_Mem_Read+0x56>
 8002186:	2302      	movs	r3, #2
 8002188:	e200      	b.n	800258c <HAL_I2C_Mem_Read+0x458>
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2201      	movs	r2, #1
 800218e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0301 	and.w	r3, r3, #1
 800219c:	2b01      	cmp	r3, #1
 800219e:	d007      	beq.n	80021b0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f042 0201 	orr.w	r2, r2, #1
 80021ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2222      	movs	r2, #34	@ 0x22
 80021c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2240      	movs	r2, #64	@ 0x40
 80021cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2200      	movs	r2, #0
 80021d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80021da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80021e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	4a5b      	ldr	r2, [pc, #364]	@ (800235c <HAL_I2C_Mem_Read+0x228>)
 80021f0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80021f2:	88f8      	ldrh	r0, [r7, #6]
 80021f4:	893a      	ldrh	r2, [r7, #8]
 80021f6:	8979      	ldrh	r1, [r7, #10]
 80021f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021fa:	9301      	str	r3, [sp, #4]
 80021fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021fe:	9300      	str	r3, [sp, #0]
 8002200:	4603      	mov	r3, r0
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	f000 fa5e 	bl	80026c4 <I2C_RequestMemoryRead>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e1bc      	b.n	800258c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002216:	2b00      	cmp	r3, #0
 8002218:	d113      	bne.n	8002242 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800221a:	2300      	movs	r3, #0
 800221c:	623b      	str	r3, [r7, #32]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	695b      	ldr	r3, [r3, #20]
 8002224:	623b      	str	r3, [r7, #32]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	623b      	str	r3, [r7, #32]
 800222e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	e190      	b.n	8002564 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002246:	2b01      	cmp	r3, #1
 8002248:	d11b      	bne.n	8002282 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002258:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800225a:	2300      	movs	r3, #0
 800225c:	61fb      	str	r3, [r7, #28]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	695b      	ldr	r3, [r3, #20]
 8002264:	61fb      	str	r3, [r7, #28]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	61fb      	str	r3, [r7, #28]
 800226e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	e170      	b.n	8002564 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002286:	2b02      	cmp	r3, #2
 8002288:	d11b      	bne.n	80022c2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002298:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80022a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022aa:	2300      	movs	r3, #0
 80022ac:	61bb      	str	r3, [r7, #24]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	695b      	ldr	r3, [r3, #20]
 80022b4:	61bb      	str	r3, [r7, #24]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	61bb      	str	r3, [r7, #24]
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	e150      	b.n	8002564 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022c2:	2300      	movs	r3, #0
 80022c4:	617b      	str	r3, [r7, #20]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	695b      	ldr	r3, [r3, #20]
 80022cc:	617b      	str	r3, [r7, #20]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	617b      	str	r3, [r7, #20]
 80022d6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80022d8:	e144      	b.n	8002564 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022de:	2b03      	cmp	r3, #3
 80022e0:	f200 80f1 	bhi.w	80024c6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d123      	bne.n	8002334 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022ee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80022f0:	68f8      	ldr	r0, [r7, #12]
 80022f2:	f000 fc79 	bl	8002be8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e145      	b.n	800258c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	691a      	ldr	r2, [r3, #16]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800230a:	b2d2      	uxtb	r2, r2
 800230c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002312:	1c5a      	adds	r2, r3, #1
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800231c:	3b01      	subs	r3, #1
 800231e:	b29a      	uxth	r2, r3
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002328:	b29b      	uxth	r3, r3
 800232a:	3b01      	subs	r3, #1
 800232c:	b29a      	uxth	r2, r3
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002332:	e117      	b.n	8002564 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002338:	2b02      	cmp	r3, #2
 800233a:	d14e      	bne.n	80023da <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800233c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800233e:	9300      	str	r3, [sp, #0]
 8002340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002342:	2200      	movs	r2, #0
 8002344:	4906      	ldr	r1, [pc, #24]	@ (8002360 <HAL_I2C_Mem_Read+0x22c>)
 8002346:	68f8      	ldr	r0, [r7, #12]
 8002348:	f000 faa4 	bl	8002894 <I2C_WaitOnFlagUntilTimeout>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d008      	beq.n	8002364 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e11a      	b.n	800258c <HAL_I2C_Mem_Read+0x458>
 8002356:	bf00      	nop
 8002358:	00100002 	.word	0x00100002
 800235c:	ffff0000 	.word	0xffff0000
 8002360:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002372:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	691a      	ldr	r2, [r3, #16]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800237e:	b2d2      	uxtb	r2, r2
 8002380:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002386:	1c5a      	adds	r2, r3, #1
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002390:	3b01      	subs	r3, #1
 8002392:	b29a      	uxth	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800239c:	b29b      	uxth	r3, r3
 800239e:	3b01      	subs	r3, #1
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	691a      	ldr	r2, [r3, #16]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b0:	b2d2      	uxtb	r2, r2
 80023b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b8:	1c5a      	adds	r2, r3, #1
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023c2:	3b01      	subs	r3, #1
 80023c4:	b29a      	uxth	r2, r3
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	3b01      	subs	r3, #1
 80023d2:	b29a      	uxth	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80023d8:	e0c4      	b.n	8002564 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80023da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023dc:	9300      	str	r3, [sp, #0]
 80023de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023e0:	2200      	movs	r2, #0
 80023e2:	496c      	ldr	r1, [pc, #432]	@ (8002594 <HAL_I2C_Mem_Read+0x460>)
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f000 fa55 	bl	8002894 <I2C_WaitOnFlagUntilTimeout>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e0cb      	b.n	800258c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002402:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	691a      	ldr	r2, [r3, #16]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800240e:	b2d2      	uxtb	r2, r2
 8002410:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002416:	1c5a      	adds	r2, r3, #1
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002420:	3b01      	subs	r3, #1
 8002422:	b29a      	uxth	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800242c:	b29b      	uxth	r3, r3
 800242e:	3b01      	subs	r3, #1
 8002430:	b29a      	uxth	r2, r3
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002438:	9300      	str	r3, [sp, #0]
 800243a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800243c:	2200      	movs	r2, #0
 800243e:	4955      	ldr	r1, [pc, #340]	@ (8002594 <HAL_I2C_Mem_Read+0x460>)
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	f000 fa27 	bl	8002894 <I2C_WaitOnFlagUntilTimeout>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e09d      	b.n	800258c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800245e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	691a      	ldr	r2, [r3, #16]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800246a:	b2d2      	uxtb	r2, r2
 800246c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002472:	1c5a      	adds	r2, r3, #1
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800247c:	3b01      	subs	r3, #1
 800247e:	b29a      	uxth	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002488:	b29b      	uxth	r3, r3
 800248a:	3b01      	subs	r3, #1
 800248c:	b29a      	uxth	r2, r3
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	691a      	ldr	r2, [r3, #16]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800249c:	b2d2      	uxtb	r2, r2
 800249e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a4:	1c5a      	adds	r2, r3, #1
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024ae:	3b01      	subs	r3, #1
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	3b01      	subs	r3, #1
 80024be:	b29a      	uxth	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80024c4:	e04e      	b.n	8002564 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024c8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80024ca:	68f8      	ldr	r0, [r7, #12]
 80024cc:	f000 fb8c 	bl	8002be8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e058      	b.n	800258c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	691a      	ldr	r2, [r3, #16]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e4:	b2d2      	uxtb	r2, r2
 80024e6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ec:	1c5a      	adds	r2, r3, #1
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024f6:	3b01      	subs	r3, #1
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002502:	b29b      	uxth	r3, r3
 8002504:	3b01      	subs	r3, #1
 8002506:	b29a      	uxth	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	f003 0304 	and.w	r3, r3, #4
 8002516:	2b04      	cmp	r3, #4
 8002518:	d124      	bne.n	8002564 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800251e:	2b03      	cmp	r3, #3
 8002520:	d107      	bne.n	8002532 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002530:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	691a      	ldr	r2, [r3, #16]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800253c:	b2d2      	uxtb	r2, r2
 800253e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002544:	1c5a      	adds	r2, r3, #1
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800254e:	3b01      	subs	r3, #1
 8002550:	b29a      	uxth	r2, r3
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800255a:	b29b      	uxth	r3, r3
 800255c:	3b01      	subs	r3, #1
 800255e:	b29a      	uxth	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002568:	2b00      	cmp	r3, #0
 800256a:	f47f aeb6 	bne.w	80022da <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2220      	movs	r2, #32
 8002572:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002586:	2300      	movs	r3, #0
 8002588:	e000      	b.n	800258c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800258a:	2302      	movs	r3, #2
  }
}
 800258c:	4618      	mov	r0, r3
 800258e:	3728      	adds	r7, #40	@ 0x28
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	00010004 	.word	0x00010004

08002598 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b088      	sub	sp, #32
 800259c:	af02      	add	r7, sp, #8
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	4608      	mov	r0, r1
 80025a2:	4611      	mov	r1, r2
 80025a4:	461a      	mov	r2, r3
 80025a6:	4603      	mov	r3, r0
 80025a8:	817b      	strh	r3, [r7, #10]
 80025aa:	460b      	mov	r3, r1
 80025ac:	813b      	strh	r3, [r7, #8]
 80025ae:	4613      	mov	r3, r2
 80025b0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025c0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c4:	9300      	str	r3, [sp, #0]
 80025c6:	6a3b      	ldr	r3, [r7, #32]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f000 f960 	bl	8002894 <I2C_WaitOnFlagUntilTimeout>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00d      	beq.n	80025f6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80025e8:	d103      	bne.n	80025f2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025f0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e05f      	b.n	80026b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80025f6:	897b      	ldrh	r3, [r7, #10]
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	461a      	mov	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002604:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002608:	6a3a      	ldr	r2, [r7, #32]
 800260a:	492d      	ldr	r1, [pc, #180]	@ (80026c0 <I2C_RequestMemoryWrite+0x128>)
 800260c:	68f8      	ldr	r0, [r7, #12]
 800260e:	f000 f9bb 	bl	8002988 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e04c      	b.n	80026b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800261c:	2300      	movs	r3, #0
 800261e:	617b      	str	r3, [r7, #20]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	617b      	str	r3, [r7, #20]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	617b      	str	r3, [r7, #20]
 8002630:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002632:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002634:	6a39      	ldr	r1, [r7, #32]
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f000 fa46 	bl	8002ac8 <I2C_WaitOnTXEFlagUntilTimeout>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00d      	beq.n	800265e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002646:	2b04      	cmp	r3, #4
 8002648:	d107      	bne.n	800265a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002658:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e02b      	b.n	80026b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800265e:	88fb      	ldrh	r3, [r7, #6]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d105      	bne.n	8002670 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002664:	893b      	ldrh	r3, [r7, #8]
 8002666:	b2da      	uxtb	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	611a      	str	r2, [r3, #16]
 800266e:	e021      	b.n	80026b4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002670:	893b      	ldrh	r3, [r7, #8]
 8002672:	0a1b      	lsrs	r3, r3, #8
 8002674:	b29b      	uxth	r3, r3
 8002676:	b2da      	uxtb	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800267e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002680:	6a39      	ldr	r1, [r7, #32]
 8002682:	68f8      	ldr	r0, [r7, #12]
 8002684:	f000 fa20 	bl	8002ac8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00d      	beq.n	80026aa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002692:	2b04      	cmp	r3, #4
 8002694:	d107      	bne.n	80026a6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026a4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e005      	b.n	80026b6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026aa:	893b      	ldrh	r3, [r7, #8]
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3718      	adds	r7, #24
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	00010002 	.word	0x00010002

080026c4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b088      	sub	sp, #32
 80026c8:	af02      	add	r7, sp, #8
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	4608      	mov	r0, r1
 80026ce:	4611      	mov	r1, r2
 80026d0:	461a      	mov	r2, r3
 80026d2:	4603      	mov	r3, r0
 80026d4:	817b      	strh	r3, [r7, #10]
 80026d6:	460b      	mov	r3, r1
 80026d8:	813b      	strh	r3, [r7, #8]
 80026da:	4613      	mov	r3, r2
 80026dc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80026ec:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026fc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002700:	9300      	str	r3, [sp, #0]
 8002702:	6a3b      	ldr	r3, [r7, #32]
 8002704:	2200      	movs	r2, #0
 8002706:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800270a:	68f8      	ldr	r0, [r7, #12]
 800270c:	f000 f8c2 	bl	8002894 <I2C_WaitOnFlagUntilTimeout>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00d      	beq.n	8002732 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002720:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002724:	d103      	bne.n	800272e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800272c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e0aa      	b.n	8002888 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002732:	897b      	ldrh	r3, [r7, #10]
 8002734:	b2db      	uxtb	r3, r3
 8002736:	461a      	mov	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002740:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002744:	6a3a      	ldr	r2, [r7, #32]
 8002746:	4952      	ldr	r1, [pc, #328]	@ (8002890 <I2C_RequestMemoryRead+0x1cc>)
 8002748:	68f8      	ldr	r0, [r7, #12]
 800274a:	f000 f91d 	bl	8002988 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e097      	b.n	8002888 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002758:	2300      	movs	r3, #0
 800275a:	617b      	str	r3, [r7, #20]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	617b      	str	r3, [r7, #20]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	617b      	str	r3, [r7, #20]
 800276c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800276e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002770:	6a39      	ldr	r1, [r7, #32]
 8002772:	68f8      	ldr	r0, [r7, #12]
 8002774:	f000 f9a8 	bl	8002ac8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d00d      	beq.n	800279a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002782:	2b04      	cmp	r3, #4
 8002784:	d107      	bne.n	8002796 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002794:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e076      	b.n	8002888 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800279a:	88fb      	ldrh	r3, [r7, #6]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d105      	bne.n	80027ac <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80027a0:	893b      	ldrh	r3, [r7, #8]
 80027a2:	b2da      	uxtb	r2, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	611a      	str	r2, [r3, #16]
 80027aa:	e021      	b.n	80027f0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80027ac:	893b      	ldrh	r3, [r7, #8]
 80027ae:	0a1b      	lsrs	r3, r3, #8
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	b2da      	uxtb	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027bc:	6a39      	ldr	r1, [r7, #32]
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f000 f982 	bl	8002ac8 <I2C_WaitOnTXEFlagUntilTimeout>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00d      	beq.n	80027e6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ce:	2b04      	cmp	r3, #4
 80027d0:	d107      	bne.n	80027e2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027e0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e050      	b.n	8002888 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80027e6:	893b      	ldrh	r3, [r7, #8]
 80027e8:	b2da      	uxtb	r2, r3
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027f2:	6a39      	ldr	r1, [r7, #32]
 80027f4:	68f8      	ldr	r0, [r7, #12]
 80027f6:	f000 f967 	bl	8002ac8 <I2C_WaitOnTXEFlagUntilTimeout>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d00d      	beq.n	800281c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002804:	2b04      	cmp	r3, #4
 8002806:	d107      	bne.n	8002818 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002816:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e035      	b.n	8002888 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800282a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800282c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800282e:	9300      	str	r3, [sp, #0]
 8002830:	6a3b      	ldr	r3, [r7, #32]
 8002832:	2200      	movs	r2, #0
 8002834:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002838:	68f8      	ldr	r0, [r7, #12]
 800283a:	f000 f82b 	bl	8002894 <I2C_WaitOnFlagUntilTimeout>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d00d      	beq.n	8002860 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800284e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002852:	d103      	bne.n	800285c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800285a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e013      	b.n	8002888 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002860:	897b      	ldrh	r3, [r7, #10]
 8002862:	b2db      	uxtb	r3, r3
 8002864:	f043 0301 	orr.w	r3, r3, #1
 8002868:	b2da      	uxtb	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002872:	6a3a      	ldr	r2, [r7, #32]
 8002874:	4906      	ldr	r1, [pc, #24]	@ (8002890 <I2C_RequestMemoryRead+0x1cc>)
 8002876:	68f8      	ldr	r0, [r7, #12]
 8002878:	f000 f886 	bl	8002988 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e000      	b.n	8002888 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002886:	2300      	movs	r3, #0
}
 8002888:	4618      	mov	r0, r3
 800288a:	3718      	adds	r7, #24
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	00010002 	.word	0x00010002

08002894 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	603b      	str	r3, [r7, #0]
 80028a0:	4613      	mov	r3, r2
 80028a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028a4:	e048      	b.n	8002938 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ac:	d044      	beq.n	8002938 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028ae:	f7fe ff69 	bl	8001784 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d302      	bcc.n	80028c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d139      	bne.n	8002938 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	0c1b      	lsrs	r3, r3, #16
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d10d      	bne.n	80028ea <I2C_WaitOnFlagUntilTimeout+0x56>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	695b      	ldr	r3, [r3, #20]
 80028d4:	43da      	mvns	r2, r3
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	4013      	ands	r3, r2
 80028da:	b29b      	uxth	r3, r3
 80028dc:	2b00      	cmp	r3, #0
 80028de:	bf0c      	ite	eq
 80028e0:	2301      	moveq	r3, #1
 80028e2:	2300      	movne	r3, #0
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	461a      	mov	r2, r3
 80028e8:	e00c      	b.n	8002904 <I2C_WaitOnFlagUntilTimeout+0x70>
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	43da      	mvns	r2, r3
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	4013      	ands	r3, r2
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	bf0c      	ite	eq
 80028fc:	2301      	moveq	r3, #1
 80028fe:	2300      	movne	r3, #0
 8002900:	b2db      	uxtb	r3, r3
 8002902:	461a      	mov	r2, r3
 8002904:	79fb      	ldrb	r3, [r7, #7]
 8002906:	429a      	cmp	r2, r3
 8002908:	d116      	bne.n	8002938 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2200      	movs	r2, #0
 800290e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2220      	movs	r2, #32
 8002914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002924:	f043 0220 	orr.w	r2, r3, #32
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e023      	b.n	8002980 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	0c1b      	lsrs	r3, r3, #16
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b01      	cmp	r3, #1
 8002940:	d10d      	bne.n	800295e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	695b      	ldr	r3, [r3, #20]
 8002948:	43da      	mvns	r2, r3
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	4013      	ands	r3, r2
 800294e:	b29b      	uxth	r3, r3
 8002950:	2b00      	cmp	r3, #0
 8002952:	bf0c      	ite	eq
 8002954:	2301      	moveq	r3, #1
 8002956:	2300      	movne	r3, #0
 8002958:	b2db      	uxtb	r3, r3
 800295a:	461a      	mov	r2, r3
 800295c:	e00c      	b.n	8002978 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	43da      	mvns	r2, r3
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	4013      	ands	r3, r2
 800296a:	b29b      	uxth	r3, r3
 800296c:	2b00      	cmp	r3, #0
 800296e:	bf0c      	ite	eq
 8002970:	2301      	moveq	r3, #1
 8002972:	2300      	movne	r3, #0
 8002974:	b2db      	uxtb	r3, r3
 8002976:	461a      	mov	r2, r3
 8002978:	79fb      	ldrb	r3, [r7, #7]
 800297a:	429a      	cmp	r2, r3
 800297c:	d093      	beq.n	80028a6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	3710      	adds	r7, #16
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	607a      	str	r2, [r7, #4]
 8002994:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002996:	e071      	b.n	8002a7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029a6:	d123      	bne.n	80029f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029b6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80029c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2220      	movs	r2, #32
 80029cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029dc:	f043 0204 	orr.w	r2, r3, #4
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e067      	b.n	8002ac0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f6:	d041      	beq.n	8002a7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029f8:	f7fe fec4 	bl	8001784 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d302      	bcc.n	8002a0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d136      	bne.n	8002a7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	0c1b      	lsrs	r3, r3, #16
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d10c      	bne.n	8002a32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	43da      	mvns	r2, r3
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	4013      	ands	r3, r2
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	bf14      	ite	ne
 8002a2a:	2301      	movne	r3, #1
 8002a2c:	2300      	moveq	r3, #0
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	e00b      	b.n	8002a4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	43da      	mvns	r2, r3
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	bf14      	ite	ne
 8002a44:	2301      	movne	r3, #1
 8002a46:	2300      	moveq	r3, #0
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d016      	beq.n	8002a7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2200      	movs	r2, #0
 8002a52:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2220      	movs	r2, #32
 8002a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a68:	f043 0220 	orr.w	r2, r3, #32
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e021      	b.n	8002ac0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	0c1b      	lsrs	r3, r3, #16
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d10c      	bne.n	8002aa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	695b      	ldr	r3, [r3, #20]
 8002a8c:	43da      	mvns	r2, r3
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	4013      	ands	r3, r2
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	bf14      	ite	ne
 8002a98:	2301      	movne	r3, #1
 8002a9a:	2300      	moveq	r3, #0
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	e00b      	b.n	8002ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	43da      	mvns	r2, r3
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	bf14      	ite	ne
 8002ab2:	2301      	movne	r3, #1
 8002ab4:	2300      	moveq	r3, #0
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f47f af6d 	bne.w	8002998 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3710      	adds	r7, #16
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ad4:	e034      	b.n	8002b40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ad6:	68f8      	ldr	r0, [r7, #12]
 8002ad8:	f000 f8e3 	bl	8002ca2 <I2C_IsAcknowledgeFailed>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e034      	b.n	8002b50 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aec:	d028      	beq.n	8002b40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aee:	f7fe fe49 	bl	8001784 <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	68ba      	ldr	r2, [r7, #8]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d302      	bcc.n	8002b04 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d11d      	bne.n	8002b40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b0e:	2b80      	cmp	r3, #128	@ 0x80
 8002b10:	d016      	beq.n	8002b40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2220      	movs	r2, #32
 8002b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2c:	f043 0220 	orr.w	r2, r3, #32
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e007      	b.n	8002b50 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b4a:	2b80      	cmp	r3, #128	@ 0x80
 8002b4c:	d1c3      	bne.n	8002ad6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3710      	adds	r7, #16
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b64:	e034      	b.n	8002bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b66:	68f8      	ldr	r0, [r7, #12]
 8002b68:	f000 f89b 	bl	8002ca2 <I2C_IsAcknowledgeFailed>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e034      	b.n	8002be0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b7c:	d028      	beq.n	8002bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b7e:	f7fe fe01 	bl	8001784 <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	68ba      	ldr	r2, [r7, #8]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d302      	bcc.n	8002b94 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d11d      	bne.n	8002bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	f003 0304 	and.w	r3, r3, #4
 8002b9e:	2b04      	cmp	r3, #4
 8002ba0:	d016      	beq.n	8002bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2220      	movs	r2, #32
 8002bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bbc:	f043 0220 	orr.w	r2, r3, #32
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e007      	b.n	8002be0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	f003 0304 	and.w	r3, r3, #4
 8002bda:	2b04      	cmp	r3, #4
 8002bdc:	d1c3      	bne.n	8002b66 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3710      	adds	r7, #16
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002bf4:	e049      	b.n	8002c8a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	695b      	ldr	r3, [r3, #20]
 8002bfc:	f003 0310 	and.w	r3, r3, #16
 8002c00:	2b10      	cmp	r3, #16
 8002c02:	d119      	bne.n	8002c38 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f06f 0210 	mvn.w	r2, #16
 8002c0c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2200      	movs	r2, #0
 8002c12:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2220      	movs	r2, #32
 8002c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e030      	b.n	8002c9a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c38:	f7fe fda4 	bl	8001784 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	68ba      	ldr	r2, [r7, #8]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d302      	bcc.n	8002c4e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d11d      	bne.n	8002c8a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	695b      	ldr	r3, [r3, #20]
 8002c54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c58:	2b40      	cmp	r3, #64	@ 0x40
 8002c5a:	d016      	beq.n	8002c8a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2220      	movs	r2, #32
 8002c66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c76:	f043 0220 	orr.w	r2, r3, #32
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e007      	b.n	8002c9a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c94:	2b40      	cmp	r3, #64	@ 0x40
 8002c96:	d1ae      	bne.n	8002bf6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	b083      	sub	sp, #12
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	695b      	ldr	r3, [r3, #20]
 8002cb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cb8:	d11b      	bne.n	8002cf2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002cc2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2220      	movs	r2, #32
 8002cce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cde:	f043 0204 	orr.w	r2, r3, #4
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e000      	b.n	8002cf4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e267      	b.n	80031e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d075      	beq.n	8002e0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002d1e:	4b88      	ldr	r3, [pc, #544]	@ (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f003 030c 	and.w	r3, r3, #12
 8002d26:	2b04      	cmp	r3, #4
 8002d28:	d00c      	beq.n	8002d44 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d2a:	4b85      	ldr	r3, [pc, #532]	@ (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002d32:	2b08      	cmp	r3, #8
 8002d34:	d112      	bne.n	8002d5c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d36:	4b82      	ldr	r3, [pc, #520]	@ (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d3e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d42:	d10b      	bne.n	8002d5c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d44:	4b7e      	ldr	r3, [pc, #504]	@ (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d05b      	beq.n	8002e08 <HAL_RCC_OscConfig+0x108>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d157      	bne.n	8002e08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e242      	b.n	80031e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d64:	d106      	bne.n	8002d74 <HAL_RCC_OscConfig+0x74>
 8002d66:	4b76      	ldr	r3, [pc, #472]	@ (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a75      	ldr	r2, [pc, #468]	@ (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002d6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d70:	6013      	str	r3, [r2, #0]
 8002d72:	e01d      	b.n	8002db0 <HAL_RCC_OscConfig+0xb0>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d7c:	d10c      	bne.n	8002d98 <HAL_RCC_OscConfig+0x98>
 8002d7e:	4b70      	ldr	r3, [pc, #448]	@ (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a6f      	ldr	r2, [pc, #444]	@ (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002d84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d88:	6013      	str	r3, [r2, #0]
 8002d8a:	4b6d      	ldr	r3, [pc, #436]	@ (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a6c      	ldr	r2, [pc, #432]	@ (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002d90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d94:	6013      	str	r3, [r2, #0]
 8002d96:	e00b      	b.n	8002db0 <HAL_RCC_OscConfig+0xb0>
 8002d98:	4b69      	ldr	r3, [pc, #420]	@ (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a68      	ldr	r2, [pc, #416]	@ (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002d9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002da2:	6013      	str	r3, [r2, #0]
 8002da4:	4b66      	ldr	r3, [pc, #408]	@ (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a65      	ldr	r2, [pc, #404]	@ (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002daa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002dae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d013      	beq.n	8002de0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db8:	f7fe fce4 	bl	8001784 <HAL_GetTick>
 8002dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dbe:	e008      	b.n	8002dd2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dc0:	f7fe fce0 	bl	8001784 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b64      	cmp	r3, #100	@ 0x64
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e207      	b.n	80031e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dd2:	4b5b      	ldr	r3, [pc, #364]	@ (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d0f0      	beq.n	8002dc0 <HAL_RCC_OscConfig+0xc0>
 8002dde:	e014      	b.n	8002e0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de0:	f7fe fcd0 	bl	8001784 <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002de8:	f7fe fccc 	bl	8001784 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b64      	cmp	r3, #100	@ 0x64
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e1f3      	b.n	80031e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dfa:	4b51      	ldr	r3, [pc, #324]	@ (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1f0      	bne.n	8002de8 <HAL_RCC_OscConfig+0xe8>
 8002e06:	e000      	b.n	8002e0a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d063      	beq.n	8002ede <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002e16:	4b4a      	ldr	r3, [pc, #296]	@ (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f003 030c 	and.w	r3, r3, #12
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00b      	beq.n	8002e3a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e22:	4b47      	ldr	r3, [pc, #284]	@ (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002e2a:	2b08      	cmp	r3, #8
 8002e2c:	d11c      	bne.n	8002e68 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e2e:	4b44      	ldr	r3, [pc, #272]	@ (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d116      	bne.n	8002e68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e3a:	4b41      	ldr	r3, [pc, #260]	@ (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d005      	beq.n	8002e52 <HAL_RCC_OscConfig+0x152>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d001      	beq.n	8002e52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e1c7      	b.n	80031e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e52:	4b3b      	ldr	r3, [pc, #236]	@ (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	4937      	ldr	r1, [pc, #220]	@ (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e66:	e03a      	b.n	8002ede <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d020      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e70:	4b34      	ldr	r3, [pc, #208]	@ (8002f44 <HAL_RCC_OscConfig+0x244>)
 8002e72:	2201      	movs	r2, #1
 8002e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e76:	f7fe fc85 	bl	8001784 <HAL_GetTick>
 8002e7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e7c:	e008      	b.n	8002e90 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e7e:	f7fe fc81 	bl	8001784 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e1a8      	b.n	80031e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e90:	4b2b      	ldr	r3, [pc, #172]	@ (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d0f0      	beq.n	8002e7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e9c:	4b28      	ldr	r3, [pc, #160]	@ (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	691b      	ldr	r3, [r3, #16]
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	4925      	ldr	r1, [pc, #148]	@ (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	600b      	str	r3, [r1, #0]
 8002eb0:	e015      	b.n	8002ede <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eb2:	4b24      	ldr	r3, [pc, #144]	@ (8002f44 <HAL_RCC_OscConfig+0x244>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb8:	f7fe fc64 	bl	8001784 <HAL_GetTick>
 8002ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ebe:	e008      	b.n	8002ed2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ec0:	f7fe fc60 	bl	8001784 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e187      	b.n	80031e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ed2:	4b1b      	ldr	r3, [pc, #108]	@ (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1f0      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0308 	and.w	r3, r3, #8
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d036      	beq.n	8002f58 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d016      	beq.n	8002f20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ef2:	4b15      	ldr	r3, [pc, #84]	@ (8002f48 <HAL_RCC_OscConfig+0x248>)
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef8:	f7fe fc44 	bl	8001784 <HAL_GetTick>
 8002efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002efe:	e008      	b.n	8002f12 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f00:	f7fe fc40 	bl	8001784 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e167      	b.n	80031e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f12:	4b0b      	ldr	r3, [pc, #44]	@ (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002f14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d0f0      	beq.n	8002f00 <HAL_RCC_OscConfig+0x200>
 8002f1e:	e01b      	b.n	8002f58 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f20:	4b09      	ldr	r3, [pc, #36]	@ (8002f48 <HAL_RCC_OscConfig+0x248>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f26:	f7fe fc2d 	bl	8001784 <HAL_GetTick>
 8002f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f2c:	e00e      	b.n	8002f4c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f2e:	f7fe fc29 	bl	8001784 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d907      	bls.n	8002f4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e150      	b.n	80031e2 <HAL_RCC_OscConfig+0x4e2>
 8002f40:	40023800 	.word	0x40023800
 8002f44:	42470000 	.word	0x42470000
 8002f48:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f4c:	4b88      	ldr	r3, [pc, #544]	@ (8003170 <HAL_RCC_OscConfig+0x470>)
 8002f4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1ea      	bne.n	8002f2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0304 	and.w	r3, r3, #4
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f000 8097 	beq.w	8003094 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f66:	2300      	movs	r3, #0
 8002f68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f6a:	4b81      	ldr	r3, [pc, #516]	@ (8003170 <HAL_RCC_OscConfig+0x470>)
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d10f      	bne.n	8002f96 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f76:	2300      	movs	r3, #0
 8002f78:	60bb      	str	r3, [r7, #8]
 8002f7a:	4b7d      	ldr	r3, [pc, #500]	@ (8003170 <HAL_RCC_OscConfig+0x470>)
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f7e:	4a7c      	ldr	r2, [pc, #496]	@ (8003170 <HAL_RCC_OscConfig+0x470>)
 8002f80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f84:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f86:	4b7a      	ldr	r3, [pc, #488]	@ (8003170 <HAL_RCC_OscConfig+0x470>)
 8002f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f8e:	60bb      	str	r3, [r7, #8]
 8002f90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f92:	2301      	movs	r3, #1
 8002f94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f96:	4b77      	ldr	r3, [pc, #476]	@ (8003174 <HAL_RCC_OscConfig+0x474>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d118      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fa2:	4b74      	ldr	r3, [pc, #464]	@ (8003174 <HAL_RCC_OscConfig+0x474>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a73      	ldr	r2, [pc, #460]	@ (8003174 <HAL_RCC_OscConfig+0x474>)
 8002fa8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fae:	f7fe fbe9 	bl	8001784 <HAL_GetTick>
 8002fb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb4:	e008      	b.n	8002fc8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fb6:	f7fe fbe5 	bl	8001784 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d901      	bls.n	8002fc8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e10c      	b.n	80031e2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc8:	4b6a      	ldr	r3, [pc, #424]	@ (8003174 <HAL_RCC_OscConfig+0x474>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d0f0      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d106      	bne.n	8002fea <HAL_RCC_OscConfig+0x2ea>
 8002fdc:	4b64      	ldr	r3, [pc, #400]	@ (8003170 <HAL_RCC_OscConfig+0x470>)
 8002fde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fe0:	4a63      	ldr	r2, [pc, #396]	@ (8003170 <HAL_RCC_OscConfig+0x470>)
 8002fe2:	f043 0301 	orr.w	r3, r3, #1
 8002fe6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fe8:	e01c      	b.n	8003024 <HAL_RCC_OscConfig+0x324>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	2b05      	cmp	r3, #5
 8002ff0:	d10c      	bne.n	800300c <HAL_RCC_OscConfig+0x30c>
 8002ff2:	4b5f      	ldr	r3, [pc, #380]	@ (8003170 <HAL_RCC_OscConfig+0x470>)
 8002ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ff6:	4a5e      	ldr	r2, [pc, #376]	@ (8003170 <HAL_RCC_OscConfig+0x470>)
 8002ff8:	f043 0304 	orr.w	r3, r3, #4
 8002ffc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ffe:	4b5c      	ldr	r3, [pc, #368]	@ (8003170 <HAL_RCC_OscConfig+0x470>)
 8003000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003002:	4a5b      	ldr	r2, [pc, #364]	@ (8003170 <HAL_RCC_OscConfig+0x470>)
 8003004:	f043 0301 	orr.w	r3, r3, #1
 8003008:	6713      	str	r3, [r2, #112]	@ 0x70
 800300a:	e00b      	b.n	8003024 <HAL_RCC_OscConfig+0x324>
 800300c:	4b58      	ldr	r3, [pc, #352]	@ (8003170 <HAL_RCC_OscConfig+0x470>)
 800300e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003010:	4a57      	ldr	r2, [pc, #348]	@ (8003170 <HAL_RCC_OscConfig+0x470>)
 8003012:	f023 0301 	bic.w	r3, r3, #1
 8003016:	6713      	str	r3, [r2, #112]	@ 0x70
 8003018:	4b55      	ldr	r3, [pc, #340]	@ (8003170 <HAL_RCC_OscConfig+0x470>)
 800301a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800301c:	4a54      	ldr	r2, [pc, #336]	@ (8003170 <HAL_RCC_OscConfig+0x470>)
 800301e:	f023 0304 	bic.w	r3, r3, #4
 8003022:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d015      	beq.n	8003058 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800302c:	f7fe fbaa 	bl	8001784 <HAL_GetTick>
 8003030:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003032:	e00a      	b.n	800304a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003034:	f7fe fba6 	bl	8001784 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003042:	4293      	cmp	r3, r2
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e0cb      	b.n	80031e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800304a:	4b49      	ldr	r3, [pc, #292]	@ (8003170 <HAL_RCC_OscConfig+0x470>)
 800304c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d0ee      	beq.n	8003034 <HAL_RCC_OscConfig+0x334>
 8003056:	e014      	b.n	8003082 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003058:	f7fe fb94 	bl	8001784 <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800305e:	e00a      	b.n	8003076 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003060:	f7fe fb90 	bl	8001784 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800306e:	4293      	cmp	r3, r2
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e0b5      	b.n	80031e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003076:	4b3e      	ldr	r3, [pc, #248]	@ (8003170 <HAL_RCC_OscConfig+0x470>)
 8003078:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d1ee      	bne.n	8003060 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003082:	7dfb      	ldrb	r3, [r7, #23]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d105      	bne.n	8003094 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003088:	4b39      	ldr	r3, [pc, #228]	@ (8003170 <HAL_RCC_OscConfig+0x470>)
 800308a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800308c:	4a38      	ldr	r2, [pc, #224]	@ (8003170 <HAL_RCC_OscConfig+0x470>)
 800308e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003092:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	2b00      	cmp	r3, #0
 800309a:	f000 80a1 	beq.w	80031e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800309e:	4b34      	ldr	r3, [pc, #208]	@ (8003170 <HAL_RCC_OscConfig+0x470>)
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f003 030c 	and.w	r3, r3, #12
 80030a6:	2b08      	cmp	r3, #8
 80030a8:	d05c      	beq.n	8003164 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d141      	bne.n	8003136 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030b2:	4b31      	ldr	r3, [pc, #196]	@ (8003178 <HAL_RCC_OscConfig+0x478>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b8:	f7fe fb64 	bl	8001784 <HAL_GetTick>
 80030bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030be:	e008      	b.n	80030d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030c0:	f7fe fb60 	bl	8001784 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e087      	b.n	80031e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030d2:	4b27      	ldr	r3, [pc, #156]	@ (8003170 <HAL_RCC_OscConfig+0x470>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1f0      	bne.n	80030c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	69da      	ldr	r2, [r3, #28]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a1b      	ldr	r3, [r3, #32]
 80030e6:	431a      	orrs	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ec:	019b      	lsls	r3, r3, #6
 80030ee:	431a      	orrs	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030f4:	085b      	lsrs	r3, r3, #1
 80030f6:	3b01      	subs	r3, #1
 80030f8:	041b      	lsls	r3, r3, #16
 80030fa:	431a      	orrs	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003100:	061b      	lsls	r3, r3, #24
 8003102:	491b      	ldr	r1, [pc, #108]	@ (8003170 <HAL_RCC_OscConfig+0x470>)
 8003104:	4313      	orrs	r3, r2
 8003106:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003108:	4b1b      	ldr	r3, [pc, #108]	@ (8003178 <HAL_RCC_OscConfig+0x478>)
 800310a:	2201      	movs	r2, #1
 800310c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800310e:	f7fe fb39 	bl	8001784 <HAL_GetTick>
 8003112:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003114:	e008      	b.n	8003128 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003116:	f7fe fb35 	bl	8001784 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	2b02      	cmp	r3, #2
 8003122:	d901      	bls.n	8003128 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e05c      	b.n	80031e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003128:	4b11      	ldr	r3, [pc, #68]	@ (8003170 <HAL_RCC_OscConfig+0x470>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d0f0      	beq.n	8003116 <HAL_RCC_OscConfig+0x416>
 8003134:	e054      	b.n	80031e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003136:	4b10      	ldr	r3, [pc, #64]	@ (8003178 <HAL_RCC_OscConfig+0x478>)
 8003138:	2200      	movs	r2, #0
 800313a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800313c:	f7fe fb22 	bl	8001784 <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003144:	f7fe fb1e 	bl	8001784 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e045      	b.n	80031e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003156:	4b06      	ldr	r3, [pc, #24]	@ (8003170 <HAL_RCC_OscConfig+0x470>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1f0      	bne.n	8003144 <HAL_RCC_OscConfig+0x444>
 8003162:	e03d      	b.n	80031e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	2b01      	cmp	r3, #1
 800316a:	d107      	bne.n	800317c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e038      	b.n	80031e2 <HAL_RCC_OscConfig+0x4e2>
 8003170:	40023800 	.word	0x40023800
 8003174:	40007000 	.word	0x40007000
 8003178:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800317c:	4b1b      	ldr	r3, [pc, #108]	@ (80031ec <HAL_RCC_OscConfig+0x4ec>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	2b01      	cmp	r3, #1
 8003188:	d028      	beq.n	80031dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003194:	429a      	cmp	r2, r3
 8003196:	d121      	bne.n	80031dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d11a      	bne.n	80031dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80031ac:	4013      	ands	r3, r2
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80031b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d111      	bne.n	80031dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031c2:	085b      	lsrs	r3, r3, #1
 80031c4:	3b01      	subs	r3, #1
 80031c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d107      	bne.n	80031dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031d8:	429a      	cmp	r2, r3
 80031da:	d001      	beq.n	80031e0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e000      	b.n	80031e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3718      	adds	r7, #24
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	40023800 	.word	0x40023800

080031f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d101      	bne.n	8003204 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e0cc      	b.n	800339e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003204:	4b68      	ldr	r3, [pc, #416]	@ (80033a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	683a      	ldr	r2, [r7, #0]
 800320e:	429a      	cmp	r2, r3
 8003210:	d90c      	bls.n	800322c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003212:	4b65      	ldr	r3, [pc, #404]	@ (80033a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003214:	683a      	ldr	r2, [r7, #0]
 8003216:	b2d2      	uxtb	r2, r2
 8003218:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800321a:	4b63      	ldr	r3, [pc, #396]	@ (80033a8 <HAL_RCC_ClockConfig+0x1b8>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0307 	and.w	r3, r3, #7
 8003222:	683a      	ldr	r2, [r7, #0]
 8003224:	429a      	cmp	r2, r3
 8003226:	d001      	beq.n	800322c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e0b8      	b.n	800339e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0302 	and.w	r3, r3, #2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d020      	beq.n	800327a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0304 	and.w	r3, r3, #4
 8003240:	2b00      	cmp	r3, #0
 8003242:	d005      	beq.n	8003250 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003244:	4b59      	ldr	r3, [pc, #356]	@ (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	4a58      	ldr	r2, [pc, #352]	@ (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 800324a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800324e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0308 	and.w	r3, r3, #8
 8003258:	2b00      	cmp	r3, #0
 800325a:	d005      	beq.n	8003268 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800325c:	4b53      	ldr	r3, [pc, #332]	@ (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	4a52      	ldr	r2, [pc, #328]	@ (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 8003262:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003266:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003268:	4b50      	ldr	r3, [pc, #320]	@ (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	494d      	ldr	r1, [pc, #308]	@ (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 8003276:	4313      	orrs	r3, r2
 8003278:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b00      	cmp	r3, #0
 8003284:	d044      	beq.n	8003310 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d107      	bne.n	800329e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800328e:	4b47      	ldr	r3, [pc, #284]	@ (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d119      	bne.n	80032ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e07f      	b.n	800339e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d003      	beq.n	80032ae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032aa:	2b03      	cmp	r3, #3
 80032ac:	d107      	bne.n	80032be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ae:	4b3f      	ldr	r3, [pc, #252]	@ (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d109      	bne.n	80032ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e06f      	b.n	800339e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032be:	4b3b      	ldr	r3, [pc, #236]	@ (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e067      	b.n	800339e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032ce:	4b37      	ldr	r3, [pc, #220]	@ (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f023 0203 	bic.w	r2, r3, #3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	4934      	ldr	r1, [pc, #208]	@ (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032e0:	f7fe fa50 	bl	8001784 <HAL_GetTick>
 80032e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032e6:	e00a      	b.n	80032fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032e8:	f7fe fa4c 	bl	8001784 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e04f      	b.n	800339e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032fe:	4b2b      	ldr	r3, [pc, #172]	@ (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f003 020c 	and.w	r2, r3, #12
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	429a      	cmp	r2, r3
 800330e:	d1eb      	bne.n	80032e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003310:	4b25      	ldr	r3, [pc, #148]	@ (80033a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0307 	and.w	r3, r3, #7
 8003318:	683a      	ldr	r2, [r7, #0]
 800331a:	429a      	cmp	r2, r3
 800331c:	d20c      	bcs.n	8003338 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800331e:	4b22      	ldr	r3, [pc, #136]	@ (80033a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	b2d2      	uxtb	r2, r2
 8003324:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003326:	4b20      	ldr	r3, [pc, #128]	@ (80033a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0307 	and.w	r3, r3, #7
 800332e:	683a      	ldr	r2, [r7, #0]
 8003330:	429a      	cmp	r2, r3
 8003332:	d001      	beq.n	8003338 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e032      	b.n	800339e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0304 	and.w	r3, r3, #4
 8003340:	2b00      	cmp	r3, #0
 8003342:	d008      	beq.n	8003356 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003344:	4b19      	ldr	r3, [pc, #100]	@ (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	4916      	ldr	r1, [pc, #88]	@ (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 8003352:	4313      	orrs	r3, r2
 8003354:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0308 	and.w	r3, r3, #8
 800335e:	2b00      	cmp	r3, #0
 8003360:	d009      	beq.n	8003376 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003362:	4b12      	ldr	r3, [pc, #72]	@ (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	490e      	ldr	r1, [pc, #56]	@ (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 8003372:	4313      	orrs	r3, r2
 8003374:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003376:	f000 f821 	bl	80033bc <HAL_RCC_GetSysClockFreq>
 800337a:	4602      	mov	r2, r0
 800337c:	4b0b      	ldr	r3, [pc, #44]	@ (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	091b      	lsrs	r3, r3, #4
 8003382:	f003 030f 	and.w	r3, r3, #15
 8003386:	490a      	ldr	r1, [pc, #40]	@ (80033b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003388:	5ccb      	ldrb	r3, [r1, r3]
 800338a:	fa22 f303 	lsr.w	r3, r2, r3
 800338e:	4a09      	ldr	r2, [pc, #36]	@ (80033b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003390:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003392:	4b09      	ldr	r3, [pc, #36]	@ (80033b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4618      	mov	r0, r3
 8003398:	f7fe f9b0 	bl	80016fc <HAL_InitTick>

  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3710      	adds	r7, #16
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	40023c00 	.word	0x40023c00
 80033ac:	40023800 	.word	0x40023800
 80033b0:	08004108 	.word	0x08004108
 80033b4:	20000000 	.word	0x20000000
 80033b8:	20000004 	.word	0x20000004

080033bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033c0:	b090      	sub	sp, #64	@ 0x40
 80033c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80033c4:	2300      	movs	r3, #0
 80033c6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80033c8:	2300      	movs	r3, #0
 80033ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80033cc:	2300      	movs	r3, #0
 80033ce:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80033d0:	2300      	movs	r3, #0
 80033d2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033d4:	4b59      	ldr	r3, [pc, #356]	@ (800353c <HAL_RCC_GetSysClockFreq+0x180>)
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f003 030c 	and.w	r3, r3, #12
 80033dc:	2b08      	cmp	r3, #8
 80033de:	d00d      	beq.n	80033fc <HAL_RCC_GetSysClockFreq+0x40>
 80033e0:	2b08      	cmp	r3, #8
 80033e2:	f200 80a1 	bhi.w	8003528 <HAL_RCC_GetSysClockFreq+0x16c>
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d002      	beq.n	80033f0 <HAL_RCC_GetSysClockFreq+0x34>
 80033ea:	2b04      	cmp	r3, #4
 80033ec:	d003      	beq.n	80033f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80033ee:	e09b      	b.n	8003528 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033f0:	4b53      	ldr	r3, [pc, #332]	@ (8003540 <HAL_RCC_GetSysClockFreq+0x184>)
 80033f2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80033f4:	e09b      	b.n	800352e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033f6:	4b53      	ldr	r3, [pc, #332]	@ (8003544 <HAL_RCC_GetSysClockFreq+0x188>)
 80033f8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80033fa:	e098      	b.n	800352e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033fc:	4b4f      	ldr	r3, [pc, #316]	@ (800353c <HAL_RCC_GetSysClockFreq+0x180>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003404:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003406:	4b4d      	ldr	r3, [pc, #308]	@ (800353c <HAL_RCC_GetSysClockFreq+0x180>)
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d028      	beq.n	8003464 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003412:	4b4a      	ldr	r3, [pc, #296]	@ (800353c <HAL_RCC_GetSysClockFreq+0x180>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	099b      	lsrs	r3, r3, #6
 8003418:	2200      	movs	r2, #0
 800341a:	623b      	str	r3, [r7, #32]
 800341c:	627a      	str	r2, [r7, #36]	@ 0x24
 800341e:	6a3b      	ldr	r3, [r7, #32]
 8003420:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003424:	2100      	movs	r1, #0
 8003426:	4b47      	ldr	r3, [pc, #284]	@ (8003544 <HAL_RCC_GetSysClockFreq+0x188>)
 8003428:	fb03 f201 	mul.w	r2, r3, r1
 800342c:	2300      	movs	r3, #0
 800342e:	fb00 f303 	mul.w	r3, r0, r3
 8003432:	4413      	add	r3, r2
 8003434:	4a43      	ldr	r2, [pc, #268]	@ (8003544 <HAL_RCC_GetSysClockFreq+0x188>)
 8003436:	fba0 1202 	umull	r1, r2, r0, r2
 800343a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800343c:	460a      	mov	r2, r1
 800343e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003440:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003442:	4413      	add	r3, r2
 8003444:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003446:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003448:	2200      	movs	r2, #0
 800344a:	61bb      	str	r3, [r7, #24]
 800344c:	61fa      	str	r2, [r7, #28]
 800344e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003452:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003456:	f7fd fb7b 	bl	8000b50 <__aeabi_uldivmod>
 800345a:	4602      	mov	r2, r0
 800345c:	460b      	mov	r3, r1
 800345e:	4613      	mov	r3, r2
 8003460:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003462:	e053      	b.n	800350c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003464:	4b35      	ldr	r3, [pc, #212]	@ (800353c <HAL_RCC_GetSysClockFreq+0x180>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	099b      	lsrs	r3, r3, #6
 800346a:	2200      	movs	r2, #0
 800346c:	613b      	str	r3, [r7, #16]
 800346e:	617a      	str	r2, [r7, #20]
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003476:	f04f 0b00 	mov.w	fp, #0
 800347a:	4652      	mov	r2, sl
 800347c:	465b      	mov	r3, fp
 800347e:	f04f 0000 	mov.w	r0, #0
 8003482:	f04f 0100 	mov.w	r1, #0
 8003486:	0159      	lsls	r1, r3, #5
 8003488:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800348c:	0150      	lsls	r0, r2, #5
 800348e:	4602      	mov	r2, r0
 8003490:	460b      	mov	r3, r1
 8003492:	ebb2 080a 	subs.w	r8, r2, sl
 8003496:	eb63 090b 	sbc.w	r9, r3, fp
 800349a:	f04f 0200 	mov.w	r2, #0
 800349e:	f04f 0300 	mov.w	r3, #0
 80034a2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80034a6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80034aa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80034ae:	ebb2 0408 	subs.w	r4, r2, r8
 80034b2:	eb63 0509 	sbc.w	r5, r3, r9
 80034b6:	f04f 0200 	mov.w	r2, #0
 80034ba:	f04f 0300 	mov.w	r3, #0
 80034be:	00eb      	lsls	r3, r5, #3
 80034c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034c4:	00e2      	lsls	r2, r4, #3
 80034c6:	4614      	mov	r4, r2
 80034c8:	461d      	mov	r5, r3
 80034ca:	eb14 030a 	adds.w	r3, r4, sl
 80034ce:	603b      	str	r3, [r7, #0]
 80034d0:	eb45 030b 	adc.w	r3, r5, fp
 80034d4:	607b      	str	r3, [r7, #4]
 80034d6:	f04f 0200 	mov.w	r2, #0
 80034da:	f04f 0300 	mov.w	r3, #0
 80034de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034e2:	4629      	mov	r1, r5
 80034e4:	028b      	lsls	r3, r1, #10
 80034e6:	4621      	mov	r1, r4
 80034e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034ec:	4621      	mov	r1, r4
 80034ee:	028a      	lsls	r2, r1, #10
 80034f0:	4610      	mov	r0, r2
 80034f2:	4619      	mov	r1, r3
 80034f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034f6:	2200      	movs	r2, #0
 80034f8:	60bb      	str	r3, [r7, #8]
 80034fa:	60fa      	str	r2, [r7, #12]
 80034fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003500:	f7fd fb26 	bl	8000b50 <__aeabi_uldivmod>
 8003504:	4602      	mov	r2, r0
 8003506:	460b      	mov	r3, r1
 8003508:	4613      	mov	r3, r2
 800350a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800350c:	4b0b      	ldr	r3, [pc, #44]	@ (800353c <HAL_RCC_GetSysClockFreq+0x180>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	0c1b      	lsrs	r3, r3, #16
 8003512:	f003 0303 	and.w	r3, r3, #3
 8003516:	3301      	adds	r3, #1
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800351c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800351e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003520:	fbb2 f3f3 	udiv	r3, r2, r3
 8003524:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003526:	e002      	b.n	800352e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003528:	4b05      	ldr	r3, [pc, #20]	@ (8003540 <HAL_RCC_GetSysClockFreq+0x184>)
 800352a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800352c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800352e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003530:	4618      	mov	r0, r3
 8003532:	3740      	adds	r7, #64	@ 0x40
 8003534:	46bd      	mov	sp, r7
 8003536:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800353a:	bf00      	nop
 800353c:	40023800 	.word	0x40023800
 8003540:	00f42400 	.word	0x00f42400
 8003544:	017d7840 	.word	0x017d7840

08003548 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800354c:	4b03      	ldr	r3, [pc, #12]	@ (800355c <HAL_RCC_GetHCLKFreq+0x14>)
 800354e:	681b      	ldr	r3, [r3, #0]
}
 8003550:	4618      	mov	r0, r3
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	20000000 	.word	0x20000000

08003560 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003564:	f7ff fff0 	bl	8003548 <HAL_RCC_GetHCLKFreq>
 8003568:	4602      	mov	r2, r0
 800356a:	4b05      	ldr	r3, [pc, #20]	@ (8003580 <HAL_RCC_GetPCLK1Freq+0x20>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	0a9b      	lsrs	r3, r3, #10
 8003570:	f003 0307 	and.w	r3, r3, #7
 8003574:	4903      	ldr	r1, [pc, #12]	@ (8003584 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003576:	5ccb      	ldrb	r3, [r1, r3]
 8003578:	fa22 f303 	lsr.w	r3, r2, r3
}
 800357c:	4618      	mov	r0, r3
 800357e:	bd80      	pop	{r7, pc}
 8003580:	40023800 	.word	0x40023800
 8003584:	08004118 	.word	0x08004118

08003588 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800358c:	f7ff ffdc 	bl	8003548 <HAL_RCC_GetHCLKFreq>
 8003590:	4602      	mov	r2, r0
 8003592:	4b05      	ldr	r3, [pc, #20]	@ (80035a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	0b5b      	lsrs	r3, r3, #13
 8003598:	f003 0307 	and.w	r3, r3, #7
 800359c:	4903      	ldr	r1, [pc, #12]	@ (80035ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800359e:	5ccb      	ldrb	r3, [r1, r3]
 80035a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	40023800 	.word	0x40023800
 80035ac:	08004118 	.word	0x08004118

080035b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e042      	b.n	8003648 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d106      	bne.n	80035dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f7fd ffba 	bl	8001550 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2224      	movs	r2, #36	@ 0x24
 80035e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68da      	ldr	r2, [r3, #12]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80035f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f000 f82b 	bl	8003650 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	691a      	ldr	r2, [r3, #16]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003608:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	695a      	ldr	r2, [r3, #20]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003618:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68da      	ldr	r2, [r3, #12]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003628:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2220      	movs	r2, #32
 8003634:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2220      	movs	r2, #32
 800363c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	3708      	adds	r7, #8
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003650:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003654:	b0c0      	sub	sp, #256	@ 0x100
 8003656:	af00      	add	r7, sp, #0
 8003658:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800365c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800366c:	68d9      	ldr	r1, [r3, #12]
 800366e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	ea40 0301 	orr.w	r3, r0, r1
 8003678:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800367a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800367e:	689a      	ldr	r2, [r3, #8]
 8003680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	431a      	orrs	r2, r3
 8003688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	431a      	orrs	r2, r3
 8003690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003694:	69db      	ldr	r3, [r3, #28]
 8003696:	4313      	orrs	r3, r2
 8003698:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800369c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80036a8:	f021 010c 	bic.w	r1, r1, #12
 80036ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80036b6:	430b      	orrs	r3, r1
 80036b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80036c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036ca:	6999      	ldr	r1, [r3, #24]
 80036cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	ea40 0301 	orr.w	r3, r0, r1
 80036d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	4b8f      	ldr	r3, [pc, #572]	@ (800391c <UART_SetConfig+0x2cc>)
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d005      	beq.n	80036f0 <UART_SetConfig+0xa0>
 80036e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	4b8d      	ldr	r3, [pc, #564]	@ (8003920 <UART_SetConfig+0x2d0>)
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d104      	bne.n	80036fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80036f0:	f7ff ff4a 	bl	8003588 <HAL_RCC_GetPCLK2Freq>
 80036f4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80036f8:	e003      	b.n	8003702 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80036fa:	f7ff ff31 	bl	8003560 <HAL_RCC_GetPCLK1Freq>
 80036fe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003706:	69db      	ldr	r3, [r3, #28]
 8003708:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800370c:	f040 810c 	bne.w	8003928 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003710:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003714:	2200      	movs	r2, #0
 8003716:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800371a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800371e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003722:	4622      	mov	r2, r4
 8003724:	462b      	mov	r3, r5
 8003726:	1891      	adds	r1, r2, r2
 8003728:	65b9      	str	r1, [r7, #88]	@ 0x58
 800372a:	415b      	adcs	r3, r3
 800372c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800372e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003732:	4621      	mov	r1, r4
 8003734:	eb12 0801 	adds.w	r8, r2, r1
 8003738:	4629      	mov	r1, r5
 800373a:	eb43 0901 	adc.w	r9, r3, r1
 800373e:	f04f 0200 	mov.w	r2, #0
 8003742:	f04f 0300 	mov.w	r3, #0
 8003746:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800374a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800374e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003752:	4690      	mov	r8, r2
 8003754:	4699      	mov	r9, r3
 8003756:	4623      	mov	r3, r4
 8003758:	eb18 0303 	adds.w	r3, r8, r3
 800375c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003760:	462b      	mov	r3, r5
 8003762:	eb49 0303 	adc.w	r3, r9, r3
 8003766:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800376a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003776:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800377a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800377e:	460b      	mov	r3, r1
 8003780:	18db      	adds	r3, r3, r3
 8003782:	653b      	str	r3, [r7, #80]	@ 0x50
 8003784:	4613      	mov	r3, r2
 8003786:	eb42 0303 	adc.w	r3, r2, r3
 800378a:	657b      	str	r3, [r7, #84]	@ 0x54
 800378c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003790:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003794:	f7fd f9dc 	bl	8000b50 <__aeabi_uldivmod>
 8003798:	4602      	mov	r2, r0
 800379a:	460b      	mov	r3, r1
 800379c:	4b61      	ldr	r3, [pc, #388]	@ (8003924 <UART_SetConfig+0x2d4>)
 800379e:	fba3 2302 	umull	r2, r3, r3, r2
 80037a2:	095b      	lsrs	r3, r3, #5
 80037a4:	011c      	lsls	r4, r3, #4
 80037a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037aa:	2200      	movs	r2, #0
 80037ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80037b0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80037b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80037b8:	4642      	mov	r2, r8
 80037ba:	464b      	mov	r3, r9
 80037bc:	1891      	adds	r1, r2, r2
 80037be:	64b9      	str	r1, [r7, #72]	@ 0x48
 80037c0:	415b      	adcs	r3, r3
 80037c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80037c8:	4641      	mov	r1, r8
 80037ca:	eb12 0a01 	adds.w	sl, r2, r1
 80037ce:	4649      	mov	r1, r9
 80037d0:	eb43 0b01 	adc.w	fp, r3, r1
 80037d4:	f04f 0200 	mov.w	r2, #0
 80037d8:	f04f 0300 	mov.w	r3, #0
 80037dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80037e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80037e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037e8:	4692      	mov	sl, r2
 80037ea:	469b      	mov	fp, r3
 80037ec:	4643      	mov	r3, r8
 80037ee:	eb1a 0303 	adds.w	r3, sl, r3
 80037f2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80037f6:	464b      	mov	r3, r9
 80037f8:	eb4b 0303 	adc.w	r3, fp, r3
 80037fc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800380c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003810:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003814:	460b      	mov	r3, r1
 8003816:	18db      	adds	r3, r3, r3
 8003818:	643b      	str	r3, [r7, #64]	@ 0x40
 800381a:	4613      	mov	r3, r2
 800381c:	eb42 0303 	adc.w	r3, r2, r3
 8003820:	647b      	str	r3, [r7, #68]	@ 0x44
 8003822:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003826:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800382a:	f7fd f991 	bl	8000b50 <__aeabi_uldivmod>
 800382e:	4602      	mov	r2, r0
 8003830:	460b      	mov	r3, r1
 8003832:	4611      	mov	r1, r2
 8003834:	4b3b      	ldr	r3, [pc, #236]	@ (8003924 <UART_SetConfig+0x2d4>)
 8003836:	fba3 2301 	umull	r2, r3, r3, r1
 800383a:	095b      	lsrs	r3, r3, #5
 800383c:	2264      	movs	r2, #100	@ 0x64
 800383e:	fb02 f303 	mul.w	r3, r2, r3
 8003842:	1acb      	subs	r3, r1, r3
 8003844:	00db      	lsls	r3, r3, #3
 8003846:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800384a:	4b36      	ldr	r3, [pc, #216]	@ (8003924 <UART_SetConfig+0x2d4>)
 800384c:	fba3 2302 	umull	r2, r3, r3, r2
 8003850:	095b      	lsrs	r3, r3, #5
 8003852:	005b      	lsls	r3, r3, #1
 8003854:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003858:	441c      	add	r4, r3
 800385a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800385e:	2200      	movs	r2, #0
 8003860:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003864:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003868:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800386c:	4642      	mov	r2, r8
 800386e:	464b      	mov	r3, r9
 8003870:	1891      	adds	r1, r2, r2
 8003872:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003874:	415b      	adcs	r3, r3
 8003876:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003878:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800387c:	4641      	mov	r1, r8
 800387e:	1851      	adds	r1, r2, r1
 8003880:	6339      	str	r1, [r7, #48]	@ 0x30
 8003882:	4649      	mov	r1, r9
 8003884:	414b      	adcs	r3, r1
 8003886:	637b      	str	r3, [r7, #52]	@ 0x34
 8003888:	f04f 0200 	mov.w	r2, #0
 800388c:	f04f 0300 	mov.w	r3, #0
 8003890:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003894:	4659      	mov	r1, fp
 8003896:	00cb      	lsls	r3, r1, #3
 8003898:	4651      	mov	r1, sl
 800389a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800389e:	4651      	mov	r1, sl
 80038a0:	00ca      	lsls	r2, r1, #3
 80038a2:	4610      	mov	r0, r2
 80038a4:	4619      	mov	r1, r3
 80038a6:	4603      	mov	r3, r0
 80038a8:	4642      	mov	r2, r8
 80038aa:	189b      	adds	r3, r3, r2
 80038ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80038b0:	464b      	mov	r3, r9
 80038b2:	460a      	mov	r2, r1
 80038b4:	eb42 0303 	adc.w	r3, r2, r3
 80038b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80038bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80038c8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80038cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80038d0:	460b      	mov	r3, r1
 80038d2:	18db      	adds	r3, r3, r3
 80038d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038d6:	4613      	mov	r3, r2
 80038d8:	eb42 0303 	adc.w	r3, r2, r3
 80038dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80038e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80038e6:	f7fd f933 	bl	8000b50 <__aeabi_uldivmod>
 80038ea:	4602      	mov	r2, r0
 80038ec:	460b      	mov	r3, r1
 80038ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003924 <UART_SetConfig+0x2d4>)
 80038f0:	fba3 1302 	umull	r1, r3, r3, r2
 80038f4:	095b      	lsrs	r3, r3, #5
 80038f6:	2164      	movs	r1, #100	@ 0x64
 80038f8:	fb01 f303 	mul.w	r3, r1, r3
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	00db      	lsls	r3, r3, #3
 8003900:	3332      	adds	r3, #50	@ 0x32
 8003902:	4a08      	ldr	r2, [pc, #32]	@ (8003924 <UART_SetConfig+0x2d4>)
 8003904:	fba2 2303 	umull	r2, r3, r2, r3
 8003908:	095b      	lsrs	r3, r3, #5
 800390a:	f003 0207 	and.w	r2, r3, #7
 800390e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4422      	add	r2, r4
 8003916:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003918:	e106      	b.n	8003b28 <UART_SetConfig+0x4d8>
 800391a:	bf00      	nop
 800391c:	40011000 	.word	0x40011000
 8003920:	40011400 	.word	0x40011400
 8003924:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003928:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800392c:	2200      	movs	r2, #0
 800392e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003932:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003936:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800393a:	4642      	mov	r2, r8
 800393c:	464b      	mov	r3, r9
 800393e:	1891      	adds	r1, r2, r2
 8003940:	6239      	str	r1, [r7, #32]
 8003942:	415b      	adcs	r3, r3
 8003944:	627b      	str	r3, [r7, #36]	@ 0x24
 8003946:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800394a:	4641      	mov	r1, r8
 800394c:	1854      	adds	r4, r2, r1
 800394e:	4649      	mov	r1, r9
 8003950:	eb43 0501 	adc.w	r5, r3, r1
 8003954:	f04f 0200 	mov.w	r2, #0
 8003958:	f04f 0300 	mov.w	r3, #0
 800395c:	00eb      	lsls	r3, r5, #3
 800395e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003962:	00e2      	lsls	r2, r4, #3
 8003964:	4614      	mov	r4, r2
 8003966:	461d      	mov	r5, r3
 8003968:	4643      	mov	r3, r8
 800396a:	18e3      	adds	r3, r4, r3
 800396c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003970:	464b      	mov	r3, r9
 8003972:	eb45 0303 	adc.w	r3, r5, r3
 8003976:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800397a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003986:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800398a:	f04f 0200 	mov.w	r2, #0
 800398e:	f04f 0300 	mov.w	r3, #0
 8003992:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003996:	4629      	mov	r1, r5
 8003998:	008b      	lsls	r3, r1, #2
 800399a:	4621      	mov	r1, r4
 800399c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039a0:	4621      	mov	r1, r4
 80039a2:	008a      	lsls	r2, r1, #2
 80039a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80039a8:	f7fd f8d2 	bl	8000b50 <__aeabi_uldivmod>
 80039ac:	4602      	mov	r2, r0
 80039ae:	460b      	mov	r3, r1
 80039b0:	4b60      	ldr	r3, [pc, #384]	@ (8003b34 <UART_SetConfig+0x4e4>)
 80039b2:	fba3 2302 	umull	r2, r3, r3, r2
 80039b6:	095b      	lsrs	r3, r3, #5
 80039b8:	011c      	lsls	r4, r3, #4
 80039ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039be:	2200      	movs	r2, #0
 80039c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80039c4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80039c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80039cc:	4642      	mov	r2, r8
 80039ce:	464b      	mov	r3, r9
 80039d0:	1891      	adds	r1, r2, r2
 80039d2:	61b9      	str	r1, [r7, #24]
 80039d4:	415b      	adcs	r3, r3
 80039d6:	61fb      	str	r3, [r7, #28]
 80039d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039dc:	4641      	mov	r1, r8
 80039de:	1851      	adds	r1, r2, r1
 80039e0:	6139      	str	r1, [r7, #16]
 80039e2:	4649      	mov	r1, r9
 80039e4:	414b      	adcs	r3, r1
 80039e6:	617b      	str	r3, [r7, #20]
 80039e8:	f04f 0200 	mov.w	r2, #0
 80039ec:	f04f 0300 	mov.w	r3, #0
 80039f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80039f4:	4659      	mov	r1, fp
 80039f6:	00cb      	lsls	r3, r1, #3
 80039f8:	4651      	mov	r1, sl
 80039fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039fe:	4651      	mov	r1, sl
 8003a00:	00ca      	lsls	r2, r1, #3
 8003a02:	4610      	mov	r0, r2
 8003a04:	4619      	mov	r1, r3
 8003a06:	4603      	mov	r3, r0
 8003a08:	4642      	mov	r2, r8
 8003a0a:	189b      	adds	r3, r3, r2
 8003a0c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003a10:	464b      	mov	r3, r9
 8003a12:	460a      	mov	r2, r1
 8003a14:	eb42 0303 	adc.w	r3, r2, r3
 8003a18:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003a26:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003a28:	f04f 0200 	mov.w	r2, #0
 8003a2c:	f04f 0300 	mov.w	r3, #0
 8003a30:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003a34:	4649      	mov	r1, r9
 8003a36:	008b      	lsls	r3, r1, #2
 8003a38:	4641      	mov	r1, r8
 8003a3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a3e:	4641      	mov	r1, r8
 8003a40:	008a      	lsls	r2, r1, #2
 8003a42:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003a46:	f7fd f883 	bl	8000b50 <__aeabi_uldivmod>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	4611      	mov	r1, r2
 8003a50:	4b38      	ldr	r3, [pc, #224]	@ (8003b34 <UART_SetConfig+0x4e4>)
 8003a52:	fba3 2301 	umull	r2, r3, r3, r1
 8003a56:	095b      	lsrs	r3, r3, #5
 8003a58:	2264      	movs	r2, #100	@ 0x64
 8003a5a:	fb02 f303 	mul.w	r3, r2, r3
 8003a5e:	1acb      	subs	r3, r1, r3
 8003a60:	011b      	lsls	r3, r3, #4
 8003a62:	3332      	adds	r3, #50	@ 0x32
 8003a64:	4a33      	ldr	r2, [pc, #204]	@ (8003b34 <UART_SetConfig+0x4e4>)
 8003a66:	fba2 2303 	umull	r2, r3, r2, r3
 8003a6a:	095b      	lsrs	r3, r3, #5
 8003a6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a70:	441c      	add	r4, r3
 8003a72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a76:	2200      	movs	r2, #0
 8003a78:	673b      	str	r3, [r7, #112]	@ 0x70
 8003a7a:	677a      	str	r2, [r7, #116]	@ 0x74
 8003a7c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003a80:	4642      	mov	r2, r8
 8003a82:	464b      	mov	r3, r9
 8003a84:	1891      	adds	r1, r2, r2
 8003a86:	60b9      	str	r1, [r7, #8]
 8003a88:	415b      	adcs	r3, r3
 8003a8a:	60fb      	str	r3, [r7, #12]
 8003a8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a90:	4641      	mov	r1, r8
 8003a92:	1851      	adds	r1, r2, r1
 8003a94:	6039      	str	r1, [r7, #0]
 8003a96:	4649      	mov	r1, r9
 8003a98:	414b      	adcs	r3, r1
 8003a9a:	607b      	str	r3, [r7, #4]
 8003a9c:	f04f 0200 	mov.w	r2, #0
 8003aa0:	f04f 0300 	mov.w	r3, #0
 8003aa4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003aa8:	4659      	mov	r1, fp
 8003aaa:	00cb      	lsls	r3, r1, #3
 8003aac:	4651      	mov	r1, sl
 8003aae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ab2:	4651      	mov	r1, sl
 8003ab4:	00ca      	lsls	r2, r1, #3
 8003ab6:	4610      	mov	r0, r2
 8003ab8:	4619      	mov	r1, r3
 8003aba:	4603      	mov	r3, r0
 8003abc:	4642      	mov	r2, r8
 8003abe:	189b      	adds	r3, r3, r2
 8003ac0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ac2:	464b      	mov	r3, r9
 8003ac4:	460a      	mov	r2, r1
 8003ac6:	eb42 0303 	adc.w	r3, r2, r3
 8003aca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ad6:	667a      	str	r2, [r7, #100]	@ 0x64
 8003ad8:	f04f 0200 	mov.w	r2, #0
 8003adc:	f04f 0300 	mov.w	r3, #0
 8003ae0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003ae4:	4649      	mov	r1, r9
 8003ae6:	008b      	lsls	r3, r1, #2
 8003ae8:	4641      	mov	r1, r8
 8003aea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003aee:	4641      	mov	r1, r8
 8003af0:	008a      	lsls	r2, r1, #2
 8003af2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003af6:	f7fd f82b 	bl	8000b50 <__aeabi_uldivmod>
 8003afa:	4602      	mov	r2, r0
 8003afc:	460b      	mov	r3, r1
 8003afe:	4b0d      	ldr	r3, [pc, #52]	@ (8003b34 <UART_SetConfig+0x4e4>)
 8003b00:	fba3 1302 	umull	r1, r3, r3, r2
 8003b04:	095b      	lsrs	r3, r3, #5
 8003b06:	2164      	movs	r1, #100	@ 0x64
 8003b08:	fb01 f303 	mul.w	r3, r1, r3
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	011b      	lsls	r3, r3, #4
 8003b10:	3332      	adds	r3, #50	@ 0x32
 8003b12:	4a08      	ldr	r2, [pc, #32]	@ (8003b34 <UART_SetConfig+0x4e4>)
 8003b14:	fba2 2303 	umull	r2, r3, r2, r3
 8003b18:	095b      	lsrs	r3, r3, #5
 8003b1a:	f003 020f 	and.w	r2, r3, #15
 8003b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4422      	add	r2, r4
 8003b26:	609a      	str	r2, [r3, #8]
}
 8003b28:	bf00      	nop
 8003b2a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b34:	51eb851f 	.word	0x51eb851f

08003b38 <memset>:
 8003b38:	4402      	add	r2, r0
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d100      	bne.n	8003b42 <memset+0xa>
 8003b40:	4770      	bx	lr
 8003b42:	f803 1b01 	strb.w	r1, [r3], #1
 8003b46:	e7f9      	b.n	8003b3c <memset+0x4>

08003b48 <__errno>:
 8003b48:	4b01      	ldr	r3, [pc, #4]	@ (8003b50 <__errno+0x8>)
 8003b4a:	6818      	ldr	r0, [r3, #0]
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	2000000c 	.word	0x2000000c

08003b54 <__libc_init_array>:
 8003b54:	b570      	push	{r4, r5, r6, lr}
 8003b56:	4d0d      	ldr	r5, [pc, #52]	@ (8003b8c <__libc_init_array+0x38>)
 8003b58:	4c0d      	ldr	r4, [pc, #52]	@ (8003b90 <__libc_init_array+0x3c>)
 8003b5a:	1b64      	subs	r4, r4, r5
 8003b5c:	10a4      	asrs	r4, r4, #2
 8003b5e:	2600      	movs	r6, #0
 8003b60:	42a6      	cmp	r6, r4
 8003b62:	d109      	bne.n	8003b78 <__libc_init_array+0x24>
 8003b64:	4d0b      	ldr	r5, [pc, #44]	@ (8003b94 <__libc_init_array+0x40>)
 8003b66:	4c0c      	ldr	r4, [pc, #48]	@ (8003b98 <__libc_init_array+0x44>)
 8003b68:	f000 fac0 	bl	80040ec <_init>
 8003b6c:	1b64      	subs	r4, r4, r5
 8003b6e:	10a4      	asrs	r4, r4, #2
 8003b70:	2600      	movs	r6, #0
 8003b72:	42a6      	cmp	r6, r4
 8003b74:	d105      	bne.n	8003b82 <__libc_init_array+0x2e>
 8003b76:	bd70      	pop	{r4, r5, r6, pc}
 8003b78:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b7c:	4798      	blx	r3
 8003b7e:	3601      	adds	r6, #1
 8003b80:	e7ee      	b.n	8003b60 <__libc_init_array+0xc>
 8003b82:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b86:	4798      	blx	r3
 8003b88:	3601      	adds	r6, #1
 8003b8a:	e7f2      	b.n	8003b72 <__libc_init_array+0x1e>
 8003b8c:	08004168 	.word	0x08004168
 8003b90:	08004168 	.word	0x08004168
 8003b94:	08004168 	.word	0x08004168
 8003b98:	0800416c 	.word	0x0800416c

08003b9c <sqrt>:
 8003b9c:	b538      	push	{r3, r4, r5, lr}
 8003b9e:	ed2d 8b02 	vpush	{d8}
 8003ba2:	ec55 4b10 	vmov	r4, r5, d0
 8003ba6:	f000 f9c7 	bl	8003f38 <__ieee754_sqrt>
 8003baa:	4622      	mov	r2, r4
 8003bac:	462b      	mov	r3, r5
 8003bae:	4620      	mov	r0, r4
 8003bb0:	4629      	mov	r1, r5
 8003bb2:	eeb0 8a40 	vmov.f32	s16, s0
 8003bb6:	eef0 8a60 	vmov.f32	s17, s1
 8003bba:	f7fc ff63 	bl	8000a84 <__aeabi_dcmpun>
 8003bbe:	b990      	cbnz	r0, 8003be6 <sqrt+0x4a>
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	4620      	mov	r0, r4
 8003bc6:	4629      	mov	r1, r5
 8003bc8:	f7fc ff34 	bl	8000a34 <__aeabi_dcmplt>
 8003bcc:	b158      	cbz	r0, 8003be6 <sqrt+0x4a>
 8003bce:	f7ff ffbb 	bl	8003b48 <__errno>
 8003bd2:	2321      	movs	r3, #33	@ 0x21
 8003bd4:	6003      	str	r3, [r0, #0]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	2300      	movs	r3, #0
 8003bda:	4610      	mov	r0, r2
 8003bdc:	4619      	mov	r1, r3
 8003bde:	f7fc fde1 	bl	80007a4 <__aeabi_ddiv>
 8003be2:	ec41 0b18 	vmov	d8, r0, r1
 8003be6:	eeb0 0a48 	vmov.f32	s0, s16
 8003bea:	eef0 0a68 	vmov.f32	s1, s17
 8003bee:	ecbd 8b02 	vpop	{d8}
 8003bf2:	bd38      	pop	{r3, r4, r5, pc}
 8003bf4:	0000      	movs	r0, r0
	...

08003bf8 <atan>:
 8003bf8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bfc:	ec55 4b10 	vmov	r4, r5, d0
 8003c00:	4bbf      	ldr	r3, [pc, #764]	@ (8003f00 <atan+0x308>)
 8003c02:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8003c06:	429e      	cmp	r6, r3
 8003c08:	46ab      	mov	fp, r5
 8003c0a:	d918      	bls.n	8003c3e <atan+0x46>
 8003c0c:	4bbd      	ldr	r3, [pc, #756]	@ (8003f04 <atan+0x30c>)
 8003c0e:	429e      	cmp	r6, r3
 8003c10:	d801      	bhi.n	8003c16 <atan+0x1e>
 8003c12:	d109      	bne.n	8003c28 <atan+0x30>
 8003c14:	b144      	cbz	r4, 8003c28 <atan+0x30>
 8003c16:	4622      	mov	r2, r4
 8003c18:	462b      	mov	r3, r5
 8003c1a:	4620      	mov	r0, r4
 8003c1c:	4629      	mov	r1, r5
 8003c1e:	f7fc fae1 	bl	80001e4 <__adddf3>
 8003c22:	4604      	mov	r4, r0
 8003c24:	460d      	mov	r5, r1
 8003c26:	e006      	b.n	8003c36 <atan+0x3e>
 8003c28:	f1bb 0f00 	cmp.w	fp, #0
 8003c2c:	f340 812b 	ble.w	8003e86 <atan+0x28e>
 8003c30:	a597      	add	r5, pc, #604	@ (adr r5, 8003e90 <atan+0x298>)
 8003c32:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003c36:	ec45 4b10 	vmov	d0, r4, r5
 8003c3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c3e:	4bb2      	ldr	r3, [pc, #712]	@ (8003f08 <atan+0x310>)
 8003c40:	429e      	cmp	r6, r3
 8003c42:	d813      	bhi.n	8003c6c <atan+0x74>
 8003c44:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8003c48:	429e      	cmp	r6, r3
 8003c4a:	d80c      	bhi.n	8003c66 <atan+0x6e>
 8003c4c:	a392      	add	r3, pc, #584	@ (adr r3, 8003e98 <atan+0x2a0>)
 8003c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c52:	4620      	mov	r0, r4
 8003c54:	4629      	mov	r1, r5
 8003c56:	f7fc fac5 	bl	80001e4 <__adddf3>
 8003c5a:	4bac      	ldr	r3, [pc, #688]	@ (8003f0c <atan+0x314>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f7fc ff07 	bl	8000a70 <__aeabi_dcmpgt>
 8003c62:	2800      	cmp	r0, #0
 8003c64:	d1e7      	bne.n	8003c36 <atan+0x3e>
 8003c66:	f04f 3aff 	mov.w	sl, #4294967295
 8003c6a:	e029      	b.n	8003cc0 <atan+0xc8>
 8003c6c:	f000 f95c 	bl	8003f28 <fabs>
 8003c70:	4ba7      	ldr	r3, [pc, #668]	@ (8003f10 <atan+0x318>)
 8003c72:	429e      	cmp	r6, r3
 8003c74:	ec55 4b10 	vmov	r4, r5, d0
 8003c78:	f200 80bc 	bhi.w	8003df4 <atan+0x1fc>
 8003c7c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8003c80:	429e      	cmp	r6, r3
 8003c82:	f200 809e 	bhi.w	8003dc2 <atan+0x1ca>
 8003c86:	4622      	mov	r2, r4
 8003c88:	462b      	mov	r3, r5
 8003c8a:	4620      	mov	r0, r4
 8003c8c:	4629      	mov	r1, r5
 8003c8e:	f7fc faa9 	bl	80001e4 <__adddf3>
 8003c92:	4b9e      	ldr	r3, [pc, #632]	@ (8003f0c <atan+0x314>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	f7fc faa3 	bl	80001e0 <__aeabi_dsub>
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	4606      	mov	r6, r0
 8003c9e:	460f      	mov	r7, r1
 8003ca0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003ca4:	4620      	mov	r0, r4
 8003ca6:	4629      	mov	r1, r5
 8003ca8:	f7fc fa9c 	bl	80001e4 <__adddf3>
 8003cac:	4602      	mov	r2, r0
 8003cae:	460b      	mov	r3, r1
 8003cb0:	4630      	mov	r0, r6
 8003cb2:	4639      	mov	r1, r7
 8003cb4:	f7fc fd76 	bl	80007a4 <__aeabi_ddiv>
 8003cb8:	f04f 0a00 	mov.w	sl, #0
 8003cbc:	4604      	mov	r4, r0
 8003cbe:	460d      	mov	r5, r1
 8003cc0:	4622      	mov	r2, r4
 8003cc2:	462b      	mov	r3, r5
 8003cc4:	4620      	mov	r0, r4
 8003cc6:	4629      	mov	r1, r5
 8003cc8:	f7fc fc42 	bl	8000550 <__aeabi_dmul>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	460b      	mov	r3, r1
 8003cd0:	4680      	mov	r8, r0
 8003cd2:	4689      	mov	r9, r1
 8003cd4:	f7fc fc3c 	bl	8000550 <__aeabi_dmul>
 8003cd8:	a371      	add	r3, pc, #452	@ (adr r3, 8003ea0 <atan+0x2a8>)
 8003cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cde:	4606      	mov	r6, r0
 8003ce0:	460f      	mov	r7, r1
 8003ce2:	f7fc fc35 	bl	8000550 <__aeabi_dmul>
 8003ce6:	a370      	add	r3, pc, #448	@ (adr r3, 8003ea8 <atan+0x2b0>)
 8003ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cec:	f7fc fa7a 	bl	80001e4 <__adddf3>
 8003cf0:	4632      	mov	r2, r6
 8003cf2:	463b      	mov	r3, r7
 8003cf4:	f7fc fc2c 	bl	8000550 <__aeabi_dmul>
 8003cf8:	a36d      	add	r3, pc, #436	@ (adr r3, 8003eb0 <atan+0x2b8>)
 8003cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cfe:	f7fc fa71 	bl	80001e4 <__adddf3>
 8003d02:	4632      	mov	r2, r6
 8003d04:	463b      	mov	r3, r7
 8003d06:	f7fc fc23 	bl	8000550 <__aeabi_dmul>
 8003d0a:	a36b      	add	r3, pc, #428	@ (adr r3, 8003eb8 <atan+0x2c0>)
 8003d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d10:	f7fc fa68 	bl	80001e4 <__adddf3>
 8003d14:	4632      	mov	r2, r6
 8003d16:	463b      	mov	r3, r7
 8003d18:	f7fc fc1a 	bl	8000550 <__aeabi_dmul>
 8003d1c:	a368      	add	r3, pc, #416	@ (adr r3, 8003ec0 <atan+0x2c8>)
 8003d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d22:	f7fc fa5f 	bl	80001e4 <__adddf3>
 8003d26:	4632      	mov	r2, r6
 8003d28:	463b      	mov	r3, r7
 8003d2a:	f7fc fc11 	bl	8000550 <__aeabi_dmul>
 8003d2e:	a366      	add	r3, pc, #408	@ (adr r3, 8003ec8 <atan+0x2d0>)
 8003d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d34:	f7fc fa56 	bl	80001e4 <__adddf3>
 8003d38:	4642      	mov	r2, r8
 8003d3a:	464b      	mov	r3, r9
 8003d3c:	f7fc fc08 	bl	8000550 <__aeabi_dmul>
 8003d40:	a363      	add	r3, pc, #396	@ (adr r3, 8003ed0 <atan+0x2d8>)
 8003d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d46:	4680      	mov	r8, r0
 8003d48:	4689      	mov	r9, r1
 8003d4a:	4630      	mov	r0, r6
 8003d4c:	4639      	mov	r1, r7
 8003d4e:	f7fc fbff 	bl	8000550 <__aeabi_dmul>
 8003d52:	a361      	add	r3, pc, #388	@ (adr r3, 8003ed8 <atan+0x2e0>)
 8003d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d58:	f7fc fa42 	bl	80001e0 <__aeabi_dsub>
 8003d5c:	4632      	mov	r2, r6
 8003d5e:	463b      	mov	r3, r7
 8003d60:	f7fc fbf6 	bl	8000550 <__aeabi_dmul>
 8003d64:	a35e      	add	r3, pc, #376	@ (adr r3, 8003ee0 <atan+0x2e8>)
 8003d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d6a:	f7fc fa39 	bl	80001e0 <__aeabi_dsub>
 8003d6e:	4632      	mov	r2, r6
 8003d70:	463b      	mov	r3, r7
 8003d72:	f7fc fbed 	bl	8000550 <__aeabi_dmul>
 8003d76:	a35c      	add	r3, pc, #368	@ (adr r3, 8003ee8 <atan+0x2f0>)
 8003d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d7c:	f7fc fa30 	bl	80001e0 <__aeabi_dsub>
 8003d80:	4632      	mov	r2, r6
 8003d82:	463b      	mov	r3, r7
 8003d84:	f7fc fbe4 	bl	8000550 <__aeabi_dmul>
 8003d88:	a359      	add	r3, pc, #356	@ (adr r3, 8003ef0 <atan+0x2f8>)
 8003d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d8e:	f7fc fa27 	bl	80001e0 <__aeabi_dsub>
 8003d92:	4632      	mov	r2, r6
 8003d94:	463b      	mov	r3, r7
 8003d96:	f7fc fbdb 	bl	8000550 <__aeabi_dmul>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	4640      	mov	r0, r8
 8003da0:	4649      	mov	r1, r9
 8003da2:	f7fc fa1f 	bl	80001e4 <__adddf3>
 8003da6:	4622      	mov	r2, r4
 8003da8:	462b      	mov	r3, r5
 8003daa:	f7fc fbd1 	bl	8000550 <__aeabi_dmul>
 8003dae:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003db2:	4602      	mov	r2, r0
 8003db4:	460b      	mov	r3, r1
 8003db6:	d148      	bne.n	8003e4a <atan+0x252>
 8003db8:	4620      	mov	r0, r4
 8003dba:	4629      	mov	r1, r5
 8003dbc:	f7fc fa10 	bl	80001e0 <__aeabi_dsub>
 8003dc0:	e72f      	b.n	8003c22 <atan+0x2a>
 8003dc2:	4b52      	ldr	r3, [pc, #328]	@ (8003f0c <atan+0x314>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	4620      	mov	r0, r4
 8003dc8:	4629      	mov	r1, r5
 8003dca:	f7fc fa09 	bl	80001e0 <__aeabi_dsub>
 8003dce:	4b4f      	ldr	r3, [pc, #316]	@ (8003f0c <atan+0x314>)
 8003dd0:	4606      	mov	r6, r0
 8003dd2:	460f      	mov	r7, r1
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	4620      	mov	r0, r4
 8003dd8:	4629      	mov	r1, r5
 8003dda:	f7fc fa03 	bl	80001e4 <__adddf3>
 8003dde:	4602      	mov	r2, r0
 8003de0:	460b      	mov	r3, r1
 8003de2:	4630      	mov	r0, r6
 8003de4:	4639      	mov	r1, r7
 8003de6:	f7fc fcdd 	bl	80007a4 <__aeabi_ddiv>
 8003dea:	f04f 0a01 	mov.w	sl, #1
 8003dee:	4604      	mov	r4, r0
 8003df0:	460d      	mov	r5, r1
 8003df2:	e765      	b.n	8003cc0 <atan+0xc8>
 8003df4:	4b47      	ldr	r3, [pc, #284]	@ (8003f14 <atan+0x31c>)
 8003df6:	429e      	cmp	r6, r3
 8003df8:	d21c      	bcs.n	8003e34 <atan+0x23c>
 8003dfa:	4b47      	ldr	r3, [pc, #284]	@ (8003f18 <atan+0x320>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	4620      	mov	r0, r4
 8003e00:	4629      	mov	r1, r5
 8003e02:	f7fc f9ed 	bl	80001e0 <__aeabi_dsub>
 8003e06:	4b44      	ldr	r3, [pc, #272]	@ (8003f18 <atan+0x320>)
 8003e08:	4606      	mov	r6, r0
 8003e0a:	460f      	mov	r7, r1
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	4620      	mov	r0, r4
 8003e10:	4629      	mov	r1, r5
 8003e12:	f7fc fb9d 	bl	8000550 <__aeabi_dmul>
 8003e16:	4b3d      	ldr	r3, [pc, #244]	@ (8003f0c <atan+0x314>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f7fc f9e3 	bl	80001e4 <__adddf3>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	460b      	mov	r3, r1
 8003e22:	4630      	mov	r0, r6
 8003e24:	4639      	mov	r1, r7
 8003e26:	f7fc fcbd 	bl	80007a4 <__aeabi_ddiv>
 8003e2a:	f04f 0a02 	mov.w	sl, #2
 8003e2e:	4604      	mov	r4, r0
 8003e30:	460d      	mov	r5, r1
 8003e32:	e745      	b.n	8003cc0 <atan+0xc8>
 8003e34:	4622      	mov	r2, r4
 8003e36:	462b      	mov	r3, r5
 8003e38:	4938      	ldr	r1, [pc, #224]	@ (8003f1c <atan+0x324>)
 8003e3a:	2000      	movs	r0, #0
 8003e3c:	f7fc fcb2 	bl	80007a4 <__aeabi_ddiv>
 8003e40:	f04f 0a03 	mov.w	sl, #3
 8003e44:	4604      	mov	r4, r0
 8003e46:	460d      	mov	r5, r1
 8003e48:	e73a      	b.n	8003cc0 <atan+0xc8>
 8003e4a:	4b35      	ldr	r3, [pc, #212]	@ (8003f20 <atan+0x328>)
 8003e4c:	4e35      	ldr	r6, [pc, #212]	@ (8003f24 <atan+0x32c>)
 8003e4e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e56:	f7fc f9c3 	bl	80001e0 <__aeabi_dsub>
 8003e5a:	4622      	mov	r2, r4
 8003e5c:	462b      	mov	r3, r5
 8003e5e:	f7fc f9bf 	bl	80001e0 <__aeabi_dsub>
 8003e62:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8003e66:	4602      	mov	r2, r0
 8003e68:	460b      	mov	r3, r1
 8003e6a:	e9d6 0100 	ldrd	r0, r1, [r6]
 8003e6e:	f7fc f9b7 	bl	80001e0 <__aeabi_dsub>
 8003e72:	f1bb 0f00 	cmp.w	fp, #0
 8003e76:	4604      	mov	r4, r0
 8003e78:	460d      	mov	r5, r1
 8003e7a:	f6bf aedc 	bge.w	8003c36 <atan+0x3e>
 8003e7e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003e82:	461d      	mov	r5, r3
 8003e84:	e6d7      	b.n	8003c36 <atan+0x3e>
 8003e86:	a51c      	add	r5, pc, #112	@ (adr r5, 8003ef8 <atan+0x300>)
 8003e88:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003e8c:	e6d3      	b.n	8003c36 <atan+0x3e>
 8003e8e:	bf00      	nop
 8003e90:	54442d18 	.word	0x54442d18
 8003e94:	3ff921fb 	.word	0x3ff921fb
 8003e98:	8800759c 	.word	0x8800759c
 8003e9c:	7e37e43c 	.word	0x7e37e43c
 8003ea0:	e322da11 	.word	0xe322da11
 8003ea4:	3f90ad3a 	.word	0x3f90ad3a
 8003ea8:	24760deb 	.word	0x24760deb
 8003eac:	3fa97b4b 	.word	0x3fa97b4b
 8003eb0:	a0d03d51 	.word	0xa0d03d51
 8003eb4:	3fb10d66 	.word	0x3fb10d66
 8003eb8:	c54c206e 	.word	0xc54c206e
 8003ebc:	3fb745cd 	.word	0x3fb745cd
 8003ec0:	920083ff 	.word	0x920083ff
 8003ec4:	3fc24924 	.word	0x3fc24924
 8003ec8:	5555550d 	.word	0x5555550d
 8003ecc:	3fd55555 	.word	0x3fd55555
 8003ed0:	2c6a6c2f 	.word	0x2c6a6c2f
 8003ed4:	bfa2b444 	.word	0xbfa2b444
 8003ed8:	52defd9a 	.word	0x52defd9a
 8003edc:	3fadde2d 	.word	0x3fadde2d
 8003ee0:	af749a6d 	.word	0xaf749a6d
 8003ee4:	3fb3b0f2 	.word	0x3fb3b0f2
 8003ee8:	fe231671 	.word	0xfe231671
 8003eec:	3fbc71c6 	.word	0x3fbc71c6
 8003ef0:	9998ebc4 	.word	0x9998ebc4
 8003ef4:	3fc99999 	.word	0x3fc99999
 8003ef8:	54442d18 	.word	0x54442d18
 8003efc:	bff921fb 	.word	0xbff921fb
 8003f00:	440fffff 	.word	0x440fffff
 8003f04:	7ff00000 	.word	0x7ff00000
 8003f08:	3fdbffff 	.word	0x3fdbffff
 8003f0c:	3ff00000 	.word	0x3ff00000
 8003f10:	3ff2ffff 	.word	0x3ff2ffff
 8003f14:	40038000 	.word	0x40038000
 8003f18:	3ff80000 	.word	0x3ff80000
 8003f1c:	bff00000 	.word	0xbff00000
 8003f20:	08004120 	.word	0x08004120
 8003f24:	08004140 	.word	0x08004140

08003f28 <fabs>:
 8003f28:	ec51 0b10 	vmov	r0, r1, d0
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8003f32:	ec43 2b10 	vmov	d0, r2, r3
 8003f36:	4770      	bx	lr

08003f38 <__ieee754_sqrt>:
 8003f38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f3c:	4a68      	ldr	r2, [pc, #416]	@ (80040e0 <__ieee754_sqrt+0x1a8>)
 8003f3e:	ec55 4b10 	vmov	r4, r5, d0
 8003f42:	43aa      	bics	r2, r5
 8003f44:	462b      	mov	r3, r5
 8003f46:	4621      	mov	r1, r4
 8003f48:	d110      	bne.n	8003f6c <__ieee754_sqrt+0x34>
 8003f4a:	4622      	mov	r2, r4
 8003f4c:	4620      	mov	r0, r4
 8003f4e:	4629      	mov	r1, r5
 8003f50:	f7fc fafe 	bl	8000550 <__aeabi_dmul>
 8003f54:	4602      	mov	r2, r0
 8003f56:	460b      	mov	r3, r1
 8003f58:	4620      	mov	r0, r4
 8003f5a:	4629      	mov	r1, r5
 8003f5c:	f7fc f942 	bl	80001e4 <__adddf3>
 8003f60:	4604      	mov	r4, r0
 8003f62:	460d      	mov	r5, r1
 8003f64:	ec45 4b10 	vmov	d0, r4, r5
 8003f68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f6c:	2d00      	cmp	r5, #0
 8003f6e:	dc0e      	bgt.n	8003f8e <__ieee754_sqrt+0x56>
 8003f70:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8003f74:	4322      	orrs	r2, r4
 8003f76:	d0f5      	beq.n	8003f64 <__ieee754_sqrt+0x2c>
 8003f78:	b19d      	cbz	r5, 8003fa2 <__ieee754_sqrt+0x6a>
 8003f7a:	4622      	mov	r2, r4
 8003f7c:	4620      	mov	r0, r4
 8003f7e:	4629      	mov	r1, r5
 8003f80:	f7fc f92e 	bl	80001e0 <__aeabi_dsub>
 8003f84:	4602      	mov	r2, r0
 8003f86:	460b      	mov	r3, r1
 8003f88:	f7fc fc0c 	bl	80007a4 <__aeabi_ddiv>
 8003f8c:	e7e8      	b.n	8003f60 <__ieee754_sqrt+0x28>
 8003f8e:	152a      	asrs	r2, r5, #20
 8003f90:	d115      	bne.n	8003fbe <__ieee754_sqrt+0x86>
 8003f92:	2000      	movs	r0, #0
 8003f94:	e009      	b.n	8003faa <__ieee754_sqrt+0x72>
 8003f96:	0acb      	lsrs	r3, r1, #11
 8003f98:	3a15      	subs	r2, #21
 8003f9a:	0549      	lsls	r1, r1, #21
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d0fa      	beq.n	8003f96 <__ieee754_sqrt+0x5e>
 8003fa0:	e7f7      	b.n	8003f92 <__ieee754_sqrt+0x5a>
 8003fa2:	462a      	mov	r2, r5
 8003fa4:	e7fa      	b.n	8003f9c <__ieee754_sqrt+0x64>
 8003fa6:	005b      	lsls	r3, r3, #1
 8003fa8:	3001      	adds	r0, #1
 8003faa:	02dc      	lsls	r4, r3, #11
 8003fac:	d5fb      	bpl.n	8003fa6 <__ieee754_sqrt+0x6e>
 8003fae:	1e44      	subs	r4, r0, #1
 8003fb0:	1b12      	subs	r2, r2, r4
 8003fb2:	f1c0 0420 	rsb	r4, r0, #32
 8003fb6:	fa21 f404 	lsr.w	r4, r1, r4
 8003fba:	4323      	orrs	r3, r4
 8003fbc:	4081      	lsls	r1, r0
 8003fbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fc2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8003fc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003fca:	07d2      	lsls	r2, r2, #31
 8003fcc:	bf5c      	itt	pl
 8003fce:	005b      	lslpl	r3, r3, #1
 8003fd0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8003fd4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003fd8:	bf58      	it	pl
 8003fda:	0049      	lslpl	r1, r1, #1
 8003fdc:	2600      	movs	r6, #0
 8003fde:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8003fe2:	106d      	asrs	r5, r5, #1
 8003fe4:	0049      	lsls	r1, r1, #1
 8003fe6:	2016      	movs	r0, #22
 8003fe8:	4632      	mov	r2, r6
 8003fea:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8003fee:	1917      	adds	r7, r2, r4
 8003ff0:	429f      	cmp	r7, r3
 8003ff2:	bfde      	ittt	le
 8003ff4:	193a      	addle	r2, r7, r4
 8003ff6:	1bdb      	suble	r3, r3, r7
 8003ff8:	1936      	addle	r6, r6, r4
 8003ffa:	0fcf      	lsrs	r7, r1, #31
 8003ffc:	3801      	subs	r0, #1
 8003ffe:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8004002:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8004006:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800400a:	d1f0      	bne.n	8003fee <__ieee754_sqrt+0xb6>
 800400c:	4604      	mov	r4, r0
 800400e:	2720      	movs	r7, #32
 8004010:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8004014:	429a      	cmp	r2, r3
 8004016:	eb00 0e0c 	add.w	lr, r0, ip
 800401a:	db02      	blt.n	8004022 <__ieee754_sqrt+0xea>
 800401c:	d113      	bne.n	8004046 <__ieee754_sqrt+0x10e>
 800401e:	458e      	cmp	lr, r1
 8004020:	d811      	bhi.n	8004046 <__ieee754_sqrt+0x10e>
 8004022:	f1be 0f00 	cmp.w	lr, #0
 8004026:	eb0e 000c 	add.w	r0, lr, ip
 800402a:	da42      	bge.n	80040b2 <__ieee754_sqrt+0x17a>
 800402c:	2800      	cmp	r0, #0
 800402e:	db40      	blt.n	80040b2 <__ieee754_sqrt+0x17a>
 8004030:	f102 0801 	add.w	r8, r2, #1
 8004034:	1a9b      	subs	r3, r3, r2
 8004036:	458e      	cmp	lr, r1
 8004038:	bf88      	it	hi
 800403a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800403e:	eba1 010e 	sub.w	r1, r1, lr
 8004042:	4464      	add	r4, ip
 8004044:	4642      	mov	r2, r8
 8004046:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800404a:	3f01      	subs	r7, #1
 800404c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8004050:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8004054:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8004058:	d1dc      	bne.n	8004014 <__ieee754_sqrt+0xdc>
 800405a:	4319      	orrs	r1, r3
 800405c:	d01b      	beq.n	8004096 <__ieee754_sqrt+0x15e>
 800405e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80040e4 <__ieee754_sqrt+0x1ac>
 8004062:	f8df b084 	ldr.w	fp, [pc, #132]	@ 80040e8 <__ieee754_sqrt+0x1b0>
 8004066:	e9da 0100 	ldrd	r0, r1, [sl]
 800406a:	e9db 2300 	ldrd	r2, r3, [fp]
 800406e:	f7fc f8b7 	bl	80001e0 <__aeabi_dsub>
 8004072:	e9da 8900 	ldrd	r8, r9, [sl]
 8004076:	4602      	mov	r2, r0
 8004078:	460b      	mov	r3, r1
 800407a:	4640      	mov	r0, r8
 800407c:	4649      	mov	r1, r9
 800407e:	f7fc fce3 	bl	8000a48 <__aeabi_dcmple>
 8004082:	b140      	cbz	r0, 8004096 <__ieee754_sqrt+0x15e>
 8004084:	f1b4 3fff 	cmp.w	r4, #4294967295
 8004088:	e9da 0100 	ldrd	r0, r1, [sl]
 800408c:	e9db 2300 	ldrd	r2, r3, [fp]
 8004090:	d111      	bne.n	80040b6 <__ieee754_sqrt+0x17e>
 8004092:	3601      	adds	r6, #1
 8004094:	463c      	mov	r4, r7
 8004096:	1072      	asrs	r2, r6, #1
 8004098:	0863      	lsrs	r3, r4, #1
 800409a:	07f1      	lsls	r1, r6, #31
 800409c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80040a0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80040a4:	bf48      	it	mi
 80040a6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80040aa:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80040ae:	4618      	mov	r0, r3
 80040b0:	e756      	b.n	8003f60 <__ieee754_sqrt+0x28>
 80040b2:	4690      	mov	r8, r2
 80040b4:	e7be      	b.n	8004034 <__ieee754_sqrt+0xfc>
 80040b6:	f7fc f895 	bl	80001e4 <__adddf3>
 80040ba:	e9da 8900 	ldrd	r8, r9, [sl]
 80040be:	4602      	mov	r2, r0
 80040c0:	460b      	mov	r3, r1
 80040c2:	4640      	mov	r0, r8
 80040c4:	4649      	mov	r1, r9
 80040c6:	f7fc fcb5 	bl	8000a34 <__aeabi_dcmplt>
 80040ca:	b120      	cbz	r0, 80040d6 <__ieee754_sqrt+0x19e>
 80040cc:	1ca0      	adds	r0, r4, #2
 80040ce:	bf08      	it	eq
 80040d0:	3601      	addeq	r6, #1
 80040d2:	3402      	adds	r4, #2
 80040d4:	e7df      	b.n	8004096 <__ieee754_sqrt+0x15e>
 80040d6:	1c63      	adds	r3, r4, #1
 80040d8:	f023 0401 	bic.w	r4, r3, #1
 80040dc:	e7db      	b.n	8004096 <__ieee754_sqrt+0x15e>
 80040de:	bf00      	nop
 80040e0:	7ff00000 	.word	0x7ff00000
 80040e4:	20000068 	.word	0x20000068
 80040e8:	20000060 	.word	0x20000060

080040ec <_init>:
 80040ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ee:	bf00      	nop
 80040f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040f2:	bc08      	pop	{r3}
 80040f4:	469e      	mov	lr, r3
 80040f6:	4770      	bx	lr

080040f8 <_fini>:
 80040f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040fa:	bf00      	nop
 80040fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040fe:	bc08      	pop	{r3}
 8004100:	469e      	mov	lr, r3
 8004102:	4770      	bx	lr
