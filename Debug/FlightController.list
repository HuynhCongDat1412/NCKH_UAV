
FlightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000699c  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08006b34  08006b34  00007b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b74  08006b74  00008080  2**0
                  CONTENTS
  4 .ARM          00000008  08006b74  08006b74  00007b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b7c  08006b7c  00008080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b7c  08006b7c  00007b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006b80  08006b80  00007b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08006b84  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000458  20000080  08006c04  00008080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d8  08006c04  000084d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fff6  00000000  00000000  000080b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002022  00000000  00000000  000180a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f50  00000000  00000000  0001a0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c31  00000000  00000000  0001b018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a7c  00000000  00000000  0001bc49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001236c  00000000  00000000  000326c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091531  00000000  00000000  00044a31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d5f62  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004448  00000000  00000000  000d5fa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000da3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000080 	.word	0x20000080
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006b1c 	.word	0x08006b1c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000084 	.word	0x20000084
 80001d4:	08006b1c 	.word	0x08006b1c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <wr8>:

#define I2C_TIMEOUT_MS 3 // vi vong lap 4ms nen de timeout 3ms

//2 ham user de ghi va doc vao i2c
// vi 0x68 co 7 bit ma ta dia chi can 8 bit nen ta dich 1 bit
static inline HAL_StatusTypeDef wr8(I2C_HandleTypeDef* hi2c, uint8_t reg, uint8_t val) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b086      	sub	sp, #24
 80004cc:	af04      	add	r7, sp, #16
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	460b      	mov	r3, r1
 80004d2:	70fb      	strb	r3, [r7, #3]
 80004d4:	4613      	mov	r3, r2
 80004d6:	70bb      	strb	r3, [r7, #2]
  return HAL_I2C_Mem_Write(hi2c, 0x68<<1, reg, I2C_MEMADD_SIZE_8BIT, &val, 1, I2C_TIMEOUT_MS);
 80004d8:	78fb      	ldrb	r3, [r7, #3]
 80004da:	b29a      	uxth	r2, r3
 80004dc:	2303      	movs	r3, #3
 80004de:	9302      	str	r3, [sp, #8]
 80004e0:	2301      	movs	r3, #1
 80004e2:	9301      	str	r3, [sp, #4]
 80004e4:	1cbb      	adds	r3, r7, #2
 80004e6:	9300      	str	r3, [sp, #0]
 80004e8:	2301      	movs	r3, #1
 80004ea:	21d0      	movs	r1, #208	@ 0xd0
 80004ec:	6878      	ldr	r0, [r7, #4]
 80004ee:	f002 ff37 	bl	8003360 <HAL_I2C_Mem_Write>
 80004f2:	4603      	mov	r3, r0
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	3708      	adds	r7, #8
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}

080004fc <rd>:
static inline HAL_StatusTypeDef rd(I2C_HandleTypeDef* hi2c, uint8_t reg, uint8_t* buf, uint16_t len) {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b088      	sub	sp, #32
 8000500:	af04      	add	r7, sp, #16
 8000502:	60f8      	str	r0, [r7, #12]
 8000504:	607a      	str	r2, [r7, #4]
 8000506:	461a      	mov	r2, r3
 8000508:	460b      	mov	r3, r1
 800050a:	72fb      	strb	r3, [r7, #11]
 800050c:	4613      	mov	r3, r2
 800050e:	813b      	strh	r3, [r7, #8]
  return HAL_I2C_Mem_Read(hi2c, 0x68<<1, reg, I2C_MEMADD_SIZE_8BIT, buf, len, I2C_TIMEOUT_MS);
 8000510:	7afb      	ldrb	r3, [r7, #11]
 8000512:	b29a      	uxth	r2, r3
 8000514:	2303      	movs	r3, #3
 8000516:	9302      	str	r3, [sp, #8]
 8000518:	893b      	ldrh	r3, [r7, #8]
 800051a:	9301      	str	r3, [sp, #4]
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	9300      	str	r3, [sp, #0]
 8000520:	2301      	movs	r3, #1
 8000522:	21d0      	movs	r1, #208	@ 0xd0
 8000524:	68f8      	ldr	r0, [r7, #12]
 8000526:	f003 f815 	bl	8003554 <HAL_I2C_Mem_Read>
 800052a:	4603      	mov	r3, r0
}
 800052c:	4618      	mov	r0, r3
 800052e:	3710      	adds	r7, #16
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}

08000534 <kalman_1d>:

//kalman filter lay input la: gia tri truoc do, sai so truoc do, input(rate_gyro), gia tri measure (angle_accelerometer) 
void kalman_1d(float* pKalmanState, 
  float* pKalmanUncertainty, float KalmanInput, 
  float KalmanMeasurement, float dt_s) 
  {
 8000534:	b480      	push	{r7}
 8000536:	b08b      	sub	sp, #44	@ 0x2c
 8000538:	af00      	add	r7, sp, #0
 800053a:	6178      	str	r0, [r7, #20]
 800053c:	6139      	str	r1, [r7, #16]
 800053e:	ed87 0a03 	vstr	s0, [r7, #12]
 8000542:	edc7 0a02 	vstr	s1, [r7, #8]
 8000546:	ed87 1a01 	vstr	s2, [r7, #4]
    float KalmanState = *pKalmanState; //lay gia tri k-1
 800054a:	697b      	ldr	r3, [r7, #20]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	627b      	str	r3, [r7, #36]	@ 0x24
    float KalmanUncertainty = *pKalmanUncertainty; ////lay sai so k-1
 8000550:	693b      	ldr	r3, [r7, #16]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	623b      	str	r3, [r7, #32]
    KalmanState=KalmanState+dt_s*KalmanInput; //B1: du doan tho (raw) goc hien tai (angle(k) = angle(k-1) + dt*toc_do_goc )
 8000556:	ed97 7a01 	vldr	s14, [r7, #4]
 800055a:	edd7 7a03 	vldr	s15, [r7, #12]
 800055e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000562:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8000566:	ee77 7a27 	vadd.f32	s15, s14, s15
 800056a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    KalmanUncertainty=KalmanUncertainty + dt_s*dt_s * 4 * 4; //B2 du doan tho (raw) sai so hien tai
 800056e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000572:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000576:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800057a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800057e:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8000582:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000586:	ed97 7a08 	vldr	s14, [r7, #32]
 800058a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800058e:	edc7 7a08 	vstr	s15, [r7, #32]
    float KalmanGain=KalmanUncertainty * 1/(1*KalmanUncertainty + 3 * 3); //B3: tinh he so kalman gain
 8000592:	edd7 7a08 	vldr	s15, [r7, #32]
 8000596:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 800059a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800059e:	edd7 6a08 	vldr	s13, [r7, #32]
 80005a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80005a6:	edc7 7a07 	vstr	s15, [r7, #28]
    KalmanState=KalmanState+KalmanGain * (KalmanMeasurement-KalmanState); //B4: du doan toi uu goc hien tai (angle_kalman)
 80005aa:	ed97 7a02 	vldr	s14, [r7, #8]
 80005ae:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80005b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80005b6:	edd7 7a07 	vldr	s15, [r7, #28]
 80005ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80005be:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80005c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005c6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    KalmanUncertainty=(1-KalmanGain) *  KalmanUncertainty; //B5: du doan toi uu sai so hien tai (saiSo_kalman)
 80005ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80005ce:	edd7 7a07 	vldr	s15, [r7, #28]
 80005d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80005d6:	ed97 7a08 	vldr	s14, [r7, #32]
 80005da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80005de:	edc7 7a08 	vstr	s15, [r7, #32]
    *pKalmanState=KalmanState; //luu goc du doan_kalman hien tai
 80005e2:	697b      	ldr	r3, [r7, #20]
 80005e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80005e6:	601a      	str	r2, [r3, #0]
    *pKalmanUncertainty=KalmanUncertainty; //luu sai so du doan_kalman hien tai
 80005e8:	693b      	ldr	r3, [r7, #16]
 80005ea:	6a3a      	ldr	r2, [r7, #32]
 80005ec:	601a      	str	r2, [r3, #0]
 }
 80005ee:	bf00      	nop
 80005f0:	372c      	adds	r7, #44	@ 0x2c
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
	...

080005fc <gyro_signal>:
void gyro_signal(void){
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b088      	sub	sp, #32
 8000600:	af00      	add	r7, sp, #0

  // read register 0x43 -> 0x48 => 6 byte
  // save to b[6], vi data cua gyro 16bit
  //, ma chia ra 2 mang nen b[0] va b[1] la data day du cua rate_x, tuong tu y voi z
  // tuy nhien voi sensing scale factor 65.5/ do/s thi ta chia gia tri doc duoc cho 65.5 => toc do  
  if (rd(&hi2c1, 0x43, value, 6) == HAL_OK) {
 8000602:	2306      	movs	r3, #6
 8000604:	4a83      	ldr	r2, [pc, #524]	@ (8000814 <gyro_signal+0x218>)
 8000606:	2143      	movs	r1, #67	@ 0x43
 8000608:	4883      	ldr	r0, [pc, #524]	@ (8000818 <gyro_signal+0x21c>)
 800060a:	f7ff ff77 	bl	80004fc <rd>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d146      	bne.n	80006a2 <gyro_signal+0xa6>
	mpu6050_gyro_flag = 1;
 8000614:	4b81      	ldr	r3, [pc, #516]	@ (800081c <gyro_signal+0x220>)
 8000616:	2201      	movs	r2, #1
 8000618:	701a      	strb	r2, [r3, #0]
    int16_t gx_raw = (int16_t)((value[0] << 8) | value[1]);
 800061a:	4b7e      	ldr	r3, [pc, #504]	@ (8000814 <gyro_signal+0x218>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	021b      	lsls	r3, r3, #8
 8000620:	b21a      	sxth	r2, r3
 8000622:	4b7c      	ldr	r3, [pc, #496]	@ (8000814 <gyro_signal+0x218>)
 8000624:	785b      	ldrb	r3, [r3, #1]
 8000626:	b21b      	sxth	r3, r3
 8000628:	4313      	orrs	r3, r2
 800062a:	83fb      	strh	r3, [r7, #30]
    int16_t gy_raw = (int16_t)((value[2] << 8) | value[3]);
 800062c:	4b79      	ldr	r3, [pc, #484]	@ (8000814 <gyro_signal+0x218>)
 800062e:	789b      	ldrb	r3, [r3, #2]
 8000630:	021b      	lsls	r3, r3, #8
 8000632:	b21a      	sxth	r2, r3
 8000634:	4b77      	ldr	r3, [pc, #476]	@ (8000814 <gyro_signal+0x218>)
 8000636:	78db      	ldrb	r3, [r3, #3]
 8000638:	b21b      	sxth	r3, r3
 800063a:	4313      	orrs	r3, r2
 800063c:	83bb      	strh	r3, [r7, #28]
    int16_t gz_raw = (int16_t)((value[4] << 8) | value[5]);
 800063e:	4b75      	ldr	r3, [pc, #468]	@ (8000814 <gyro_signal+0x218>)
 8000640:	791b      	ldrb	r3, [r3, #4]
 8000642:	021b      	lsls	r3, r3, #8
 8000644:	b21a      	sxth	r2, r3
 8000646:	4b73      	ldr	r3, [pc, #460]	@ (8000814 <gyro_signal+0x218>)
 8000648:	795b      	ldrb	r3, [r3, #5]
 800064a:	b21b      	sxth	r3, r3
 800064c:	4313      	orrs	r3, r2
 800064e:	837b      	strh	r3, [r7, #26]
    const float sens = 65.5f; // LSB per (deg/s) for FS_SEL=1
 8000650:	4b73      	ldr	r3, [pc, #460]	@ (8000820 <gyro_signal+0x224>)
 8000652:	617b      	str	r3, [r7, #20]
    RateRoll  = gx_raw / sens;
 8000654:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000658:	ee07 3a90 	vmov	s15, r3
 800065c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000660:	ed97 7a05 	vldr	s14, [r7, #20]
 8000664:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000668:	4b6e      	ldr	r3, [pc, #440]	@ (8000824 <gyro_signal+0x228>)
 800066a:	edc3 7a00 	vstr	s15, [r3]
    RatePitch = gy_raw / sens;
 800066e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000672:	ee07 3a90 	vmov	s15, r3
 8000676:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800067a:	ed97 7a05 	vldr	s14, [r7, #20]
 800067e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000682:	4b69      	ldr	r3, [pc, #420]	@ (8000828 <gyro_signal+0x22c>)
 8000684:	edc3 7a00 	vstr	s15, [r3]
    RateYaw   = gz_raw / sens;
 8000688:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800068c:	ee07 3a90 	vmov	s15, r3
 8000690:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000694:	ed97 7a05 	vldr	s14, [r7, #20]
 8000698:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800069c:	4b63      	ldr	r3, [pc, #396]	@ (800082c <gyro_signal+0x230>)
 800069e:	edc3 7a00 	vstr	s15, [r3]
  }

  //doc accelerometer
  if (rd(&hi2c1, 0x3B, value, 6) == HAL_OK) {
 80006a2:	2306      	movs	r3, #6
 80006a4:	4a5b      	ldr	r2, [pc, #364]	@ (8000814 <gyro_signal+0x218>)
 80006a6:	213b      	movs	r1, #59	@ 0x3b
 80006a8:	485b      	ldr	r0, [pc, #364]	@ (8000818 <gyro_signal+0x21c>)
 80006aa:	f7ff ff27 	bl	80004fc <rd>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	f040 80ab 	bne.w	800080c <gyro_signal+0x210>
	mpu6050_acc_flag = 1;
 80006b6:	4b5e      	ldr	r3, [pc, #376]	@ (8000830 <gyro_signal+0x234>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	701a      	strb	r2, [r3, #0]
	int16_t AccXLSB = (int16_t)((value[0] << 8) | value[1]);
 80006bc:	4b55      	ldr	r3, [pc, #340]	@ (8000814 <gyro_signal+0x218>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	021b      	lsls	r3, r3, #8
 80006c2:	b21a      	sxth	r2, r3
 80006c4:	4b53      	ldr	r3, [pc, #332]	@ (8000814 <gyro_signal+0x218>)
 80006c6:	785b      	ldrb	r3, [r3, #1]
 80006c8:	b21b      	sxth	r3, r3
 80006ca:	4313      	orrs	r3, r2
 80006cc:	827b      	strh	r3, [r7, #18]
	int16_t AccYLSB = (int16_t)((value[2] << 8) | value[3]);
 80006ce:	4b51      	ldr	r3, [pc, #324]	@ (8000814 <gyro_signal+0x218>)
 80006d0:	789b      	ldrb	r3, [r3, #2]
 80006d2:	021b      	lsls	r3, r3, #8
 80006d4:	b21a      	sxth	r2, r3
 80006d6:	4b4f      	ldr	r3, [pc, #316]	@ (8000814 <gyro_signal+0x218>)
 80006d8:	78db      	ldrb	r3, [r3, #3]
 80006da:	b21b      	sxth	r3, r3
 80006dc:	4313      	orrs	r3, r2
 80006de:	823b      	strh	r3, [r7, #16]
	int16_t AccZLSB = (int16_t)((value[4] << 8) | value[5]);
 80006e0:	4b4c      	ldr	r3, [pc, #304]	@ (8000814 <gyro_signal+0x218>)
 80006e2:	791b      	ldrb	r3, [r3, #4]
 80006e4:	021b      	lsls	r3, r3, #8
 80006e6:	b21a      	sxth	r2, r3
 80006e8:	4b4a      	ldr	r3, [pc, #296]	@ (8000814 <gyro_signal+0x218>)
 80006ea:	795b      	ldrb	r3, [r3, #5]
 80006ec:	b21b      	sxth	r3, r3
 80006ee:	4313      	orrs	r3, r2
 80006f0:	81fb      	strh	r3, [r7, #14]


	AccX=(float)AccXLSB/4096;
 80006f2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80006f6:	ee07 3a90 	vmov	s15, r3
 80006fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006fe:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 8000834 <gyro_signal+0x238>
 8000702:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000706:	4b4c      	ldr	r3, [pc, #304]	@ (8000838 <gyro_signal+0x23c>)
 8000708:	edc3 7a00 	vstr	s15, [r3]
	AccY=(float)AccYLSB/4096;
 800070c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000710:	ee07 3a90 	vmov	s15, r3
 8000714:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000718:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8000834 <gyro_signal+0x238>
 800071c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000720:	4b46      	ldr	r3, [pc, #280]	@ (800083c <gyro_signal+0x240>)
 8000722:	edc3 7a00 	vstr	s15, [r3]
	AccZ=(float)AccZLSB/4096;
 8000726:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800072a:	ee07 3a90 	vmov	s15, r3
 800072e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000732:	eddf 6a40 	vldr	s13, [pc, #256]	@ 8000834 <gyro_signal+0x238>
 8000736:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800073a:	4b41      	ldr	r3, [pc, #260]	@ (8000840 <gyro_signal+0x244>)
 800073c:	edc3 7a00 	vstr	s15, [r3]
	float denomR = sqrtf(AccX*AccX + AccZ*AccZ) + 1e-6f; // tranh chia cho 0
 8000740:	4b3d      	ldr	r3, [pc, #244]	@ (8000838 <gyro_signal+0x23c>)
 8000742:	ed93 7a00 	vldr	s14, [r3]
 8000746:	4b3c      	ldr	r3, [pc, #240]	@ (8000838 <gyro_signal+0x23c>)
 8000748:	edd3 7a00 	vldr	s15, [r3]
 800074c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000750:	4b3b      	ldr	r3, [pc, #236]	@ (8000840 <gyro_signal+0x244>)
 8000752:	edd3 6a00 	vldr	s13, [r3]
 8000756:	4b3a      	ldr	r3, [pc, #232]	@ (8000840 <gyro_signal+0x244>)
 8000758:	edd3 7a00 	vldr	s15, [r3]
 800075c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000760:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000764:	eeb0 0a67 	vmov.f32	s0, s15
 8000768:	f006 f8dc 	bl	8006924 <sqrtf>
 800076c:	eef0 7a40 	vmov.f32	s15, s0
 8000770:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8000844 <gyro_signal+0x248>
 8000774:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000778:	edc7 7a02 	vstr	s15, [r7, #8]
	float denomP = sqrtf(AccY*AccY + AccZ*AccZ) + 1e-6f;
 800077c:	4b2f      	ldr	r3, [pc, #188]	@ (800083c <gyro_signal+0x240>)
 800077e:	ed93 7a00 	vldr	s14, [r3]
 8000782:	4b2e      	ldr	r3, [pc, #184]	@ (800083c <gyro_signal+0x240>)
 8000784:	edd3 7a00 	vldr	s15, [r3]
 8000788:	ee27 7a27 	vmul.f32	s14, s14, s15
 800078c:	4b2c      	ldr	r3, [pc, #176]	@ (8000840 <gyro_signal+0x244>)
 800078e:	edd3 6a00 	vldr	s13, [r3]
 8000792:	4b2b      	ldr	r3, [pc, #172]	@ (8000840 <gyro_signal+0x244>)
 8000794:	edd3 7a00 	vldr	s15, [r3]
 8000798:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800079c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007a0:	eeb0 0a67 	vmov.f32	s0, s15
 80007a4:	f006 f8be 	bl	8006924 <sqrtf>
 80007a8:	eef0 7a40 	vmov.f32	s15, s0
 80007ac:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8000844 <gyro_signal+0x248>
 80007b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80007b4:	edc7 7a01 	vstr	s15, [r7, #4]
	AngleRoll  = atanf(AccY / denomR) * RAD2DEG;
 80007b8:	4b20      	ldr	r3, [pc, #128]	@ (800083c <gyro_signal+0x240>)
 80007ba:	ed93 7a00 	vldr	s14, [r3]
 80007be:	edd7 7a02 	vldr	s15, [r7, #8]
 80007c2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80007c6:	eeb0 0a66 	vmov.f32	s0, s13
 80007ca:	f006 f8c9 	bl	8006960 <atanf>
 80007ce:	eef0 7a40 	vmov.f32	s15, s0
 80007d2:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8000848 <gyro_signal+0x24c>
 80007d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007da:	4b1c      	ldr	r3, [pc, #112]	@ (800084c <gyro_signal+0x250>)
 80007dc:	edc3 7a00 	vstr	s15, [r3]
	AnglePitch = -atanf(AccX / denomP) * RAD2DEG;
 80007e0:	4b15      	ldr	r3, [pc, #84]	@ (8000838 <gyro_signal+0x23c>)
 80007e2:	ed93 7a00 	vldr	s14, [r3]
 80007e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80007ea:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80007ee:	eeb0 0a66 	vmov.f32	s0, s13
 80007f2:	f006 f8b5 	bl	8006960 <atanf>
 80007f6:	eef0 7a40 	vmov.f32	s15, s0
 80007fa:	eef1 7a67 	vneg.f32	s15, s15
 80007fe:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8000848 <gyro_signal+0x24c>
 8000802:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000806:	4b12      	ldr	r3, [pc, #72]	@ (8000850 <gyro_signal+0x254>)
 8000808:	edc3 7a00 	vstr	s15, [r3]
  }
} 
 800080c:	bf00      	nop
 800080e:	3720      	adds	r7, #32
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	20000294 	.word	0x20000294
 8000818:	2000009c 	.word	0x2000009c
 800081c:	20000274 	.word	0x20000274
 8000820:	42830000 	.word	0x42830000
 8000824:	20000278 	.word	0x20000278
 8000828:	2000027c 	.word	0x2000027c
 800082c:	20000280 	.word	0x20000280
 8000830:	2000029a 	.word	0x2000029a
 8000834:	45800000 	.word	0x45800000
 8000838:	2000029c 	.word	0x2000029c
 800083c:	200002a0 	.word	0x200002a0
 8000840:	200002a4 	.word	0x200002a4
 8000844:	358637bd 	.word	0x358637bd
 8000848:	42652ee1 	.word	0x42652ee1
 800084c:	200002a8 	.word	0x200002a8
 8000850:	200002ac 	.word	0x200002ac

08000854 <pid_equation>:

//pid tranh I bao hoa, tich luy qua nhieu, vuot gioi han i_limit
// tranh gia tri pid out vuot gioi han out_limit
void pid_equation(float Error, float P , float I, float D, 
                  float PrevError, float PrevIterm, float dt_s,
                  float i_limit, float out_limit) {
 8000854:	b480      	push	{r7}
 8000856:	b091      	sub	sp, #68	@ 0x44
 8000858:	af00      	add	r7, sp, #0
 800085a:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 800085e:	edc7 0a08 	vstr	s1, [r7, #32]
 8000862:	ed87 1a07 	vstr	s2, [r7, #28]
 8000866:	edc7 1a06 	vstr	s3, [r7, #24]
 800086a:	ed87 2a05 	vstr	s4, [r7, #20]
 800086e:	edc7 2a04 	vstr	s5, [r7, #16]
 8000872:	ed87 3a03 	vstr	s6, [r7, #12]
 8000876:	edc7 3a02 	vstr	s7, [r7, #8]
 800087a:	ed87 4a01 	vstr	s8, [r7, #4]
  float Pterm = P * Error;
 800087e:	ed97 7a08 	vldr	s14, [r7, #32]
 8000882:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800088a:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

  // D dùng dt có chặn đáy
  float deriv_dt = (dt_s > 0.0005f) ? dt_s : 0.0005f; //tranh dt qua nho ~ 0 thi chia bi loi
 800088e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000892:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 8000a40 <pid_equation+0x1ec>
 8000896:	eef4 7ac7 	vcmpe.f32	s15, s14
 800089a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800089e:	dd01      	ble.n	80008a4 <pid_equation+0x50>
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	e000      	b.n	80008a6 <pid_equation+0x52>
 80008a4:	4b67      	ldr	r3, [pc, #412]	@ (8000a44 <pid_equation+0x1f0>)
 80008a6:	633b      	str	r3, [r7, #48]	@ 0x30
  float Dterm = D * (Error - PrevError) / deriv_dt;
 80008a8:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80008ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80008b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80008b4:	edd7 7a06 	vldr	s15, [r7, #24]
 80008b8:	ee67 6a27 	vmul.f32	s13, s14, s15
 80008bc:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80008c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80008c4:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

  // Tính output tạm thời (chưa tích I) để xét bão hòa
  float pre = Pterm + PrevIterm + Dterm;
 80008c8:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80008cc:	edd7 7a04 	vldr	s15, [r7, #16]
 80008d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008d4:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80008d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008dc:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

  float Iterm = PrevIterm;
 80008e0:	693b      	ldr	r3, [r7, #16]
 80008e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  // Nếu đang bão hòa và lỗi cùng chiều → không tích I (anti-windup)
  if (!((pre >=  out_limit && Error >  0) ||
 80008e4:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80008e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80008ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80008f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008f4:	bfac      	ite	ge
 80008f6:	2301      	movge	r3, #1
 80008f8:	2300      	movlt	r3, #0
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	f083 0301 	eor.w	r3, r3, #1
 8000900:	b2db      	uxtb	r3, r3
 8000902:	2b00      	cmp	r3, #0
 8000904:	d10e      	bne.n	8000924 <pid_equation+0xd0>
 8000906:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800090a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800090e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000912:	bfcc      	ite	gt
 8000914:	2301      	movgt	r3, #1
 8000916:	2300      	movle	r3, #0
 8000918:	b2db      	uxtb	r3, r3
 800091a:	f083 0301 	eor.w	r3, r3, #1
 800091e:	b2db      	uxtb	r3, r3
 8000920:	2b00      	cmp	r3, #0
 8000922:	d055      	beq.n	80009d0 <pid_equation+0x17c>
        (pre <= -out_limit && Error <  0))) {
 8000924:	edd7 7a01 	vldr	s15, [r7, #4]
 8000928:	eef1 7a67 	vneg.f32	s15, s15
 800092c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8000930:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000938:	bf94      	ite	ls
 800093a:	2301      	movls	r3, #1
 800093c:	2300      	movhi	r3, #0
 800093e:	b2db      	uxtb	r3, r3
 8000940:	f083 0301 	eor.w	r3, r3, #1
 8000944:	b2db      	uxtb	r3, r3
  if (!((pre >=  out_limit && Error >  0) ||
 8000946:	2b00      	cmp	r3, #0
 8000948:	d10e      	bne.n	8000968 <pid_equation+0x114>
        (pre <= -out_limit && Error <  0))) {
 800094a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800094e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000956:	bf4c      	ite	mi
 8000958:	2301      	movmi	r3, #1
 800095a:	2300      	movpl	r3, #0
 800095c:	b2db      	uxtb	r3, r3
 800095e:	f083 0301 	eor.w	r3, r3, #1
 8000962:	b2db      	uxtb	r3, r3
 8000964:	2b00      	cmp	r3, #0
 8000966:	d033      	beq.n	80009d0 <pid_equation+0x17c>
    Iterm = PrevIterm + I * (Error + PrevError) * (dt_s * 0.5f); // dien tich hinh thang = (f(k-1) + f(k))*dt/2
 8000968:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800096c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000970:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000974:	edd7 7a07 	vldr	s15, [r7, #28]
 8000978:	ee27 7a27 	vmul.f32	s14, s14, s15
 800097c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000980:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8000984:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000988:	ee67 7a27 	vmul.f32	s15, s14, s15
 800098c:	ed97 7a04 	vldr	s14, [r7, #16]
 8000990:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000994:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    if (Iterm >  i_limit) Iterm =  i_limit;
 8000998:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800099c:	edd7 7a02 	vldr	s15, [r7, #8]
 80009a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80009a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009a8:	dd01      	ble.n	80009ae <pid_equation+0x15a>
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (Iterm < -i_limit) Iterm = -i_limit;
 80009ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80009b2:	eef1 7a67 	vneg.f32	s15, s15
 80009b6:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80009ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80009be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009c2:	d505      	bpl.n	80009d0 <pid_equation+0x17c>
 80009c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80009c8:	eef1 7a67 	vneg.f32	s15, s15
 80009cc:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
  }

  float out = Pterm + Iterm + Dterm; //gia tri pid
 80009d0:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80009d4:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80009d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009dc:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80009e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009e4:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
  if (out >  out_limit) out =  out_limit;
 80009e8:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80009ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80009f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80009f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009f8:	dd01      	ble.n	80009fe <pid_equation+0x1aa>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (out < -out_limit) out = -out_limit;
 80009fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a02:	eef1 7a67 	vneg.f32	s15, s15
 8000a06:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8000a0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a12:	d505      	bpl.n	8000a20 <pid_equation+0x1cc>
 8000a14:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a18:	eef1 7a67 	vneg.f32	s15, s15
 8000a1c:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

  PIDReturn[0] = out;
 8000a20:	4a09      	ldr	r2, [pc, #36]	@ (8000a48 <pid_equation+0x1f4>)
 8000a22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000a24:	6013      	str	r3, [r2, #0]
  PIDReturn[1] = Error;
 8000a26:	4a08      	ldr	r2, [pc, #32]	@ (8000a48 <pid_equation+0x1f4>)
 8000a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a2a:	6053      	str	r3, [r2, #4]
  PIDReturn[2] = Iterm;
 8000a2c:	4a06      	ldr	r2, [pc, #24]	@ (8000a48 <pid_equation+0x1f4>)
 8000a2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000a30:	6093      	str	r3, [r2, #8]
}
 8000a32:	bf00      	nop
 8000a34:	3744      	adds	r7, #68	@ 0x44
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	3a03126f 	.word	0x3a03126f
 8000a44:	3a03126f 	.word	0x3a03126f
 8000a48:	200002c0 	.word	0x200002c0

08000a4c <reset_pid>:

void reset_pid(void) {
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
	PrevErrorRateRoll=0; PrevErrorRatePitch=0;	PrevErrorRateYaw=0;
 8000a50:	4b16      	ldr	r3, [pc, #88]	@ (8000aac <reset_pid+0x60>)
 8000a52:	f04f 0200 	mov.w	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	4b15      	ldr	r3, [pc, #84]	@ (8000ab0 <reset_pid+0x64>)
 8000a5a:	f04f 0200 	mov.w	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	4b14      	ldr	r3, [pc, #80]	@ (8000ab4 <reset_pid+0x68>)
 8000a62:	f04f 0200 	mov.w	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
	PrevItermRateRoll=0; PrevItermRatePitch=0;	PrevItermRateYaw=0;
 8000a68:	4b13      	ldr	r3, [pc, #76]	@ (8000ab8 <reset_pid+0x6c>)
 8000a6a:	f04f 0200 	mov.w	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	4b12      	ldr	r3, [pc, #72]	@ (8000abc <reset_pid+0x70>)
 8000a72:	f04f 0200 	mov.w	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	4b11      	ldr	r3, [pc, #68]	@ (8000ac0 <reset_pid+0x74>)
 8000a7a:	f04f 0200 	mov.w	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
	PrevErrorAngleRoll=0; PrevErrorAnglePitch=0;
 8000a80:	4b10      	ldr	r3, [pc, #64]	@ (8000ac4 <reset_pid+0x78>)
 8000a82:	f04f 0200 	mov.w	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac8 <reset_pid+0x7c>)
 8000a8a:	f04f 0200 	mov.w	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
	PrevItermAngleRoll=0; PrevItermAnglePitch=0;
 8000a90:	4b0e      	ldr	r3, [pc, #56]	@ (8000acc <reset_pid+0x80>)
 8000a92:	f04f 0200 	mov.w	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	4b0d      	ldr	r3, [pc, #52]	@ (8000ad0 <reset_pid+0x84>)
 8000a9a:	f04f 0200 	mov.w	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	200002f0 	.word	0x200002f0
 8000ab0:	200002f4 	.word	0x200002f4
 8000ab4:	200002f8 	.word	0x200002f8
 8000ab8:	200002fc 	.word	0x200002fc
 8000abc:	20000300 	.word	0x20000300
 8000ac0:	20000304 	.word	0x20000304
 8000ac4:	20000330 	.word	0x20000330
 8000ac8:	20000334 	.word	0x20000334
 8000acc:	20000338 	.word	0x20000338
 8000ad0:	2000033c 	.word	0x2000033c

08000ad4 <pulse_saturate>:

//gioi han gia tri power (us) gui ve esc
static inline uint16_t pulse_saturate(int v) {
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  if (v < 10) v = 10;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2b09      	cmp	r3, #9
 8000ae0:	dc01      	bgt.n	8000ae6 <pulse_saturate+0x12>
 8000ae2:	230a      	movs	r3, #10
 8000ae4:	607b      	str	r3, [r7, #4]
  if (v > 100) v = 100;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2b64      	cmp	r3, #100	@ 0x64
 8000aea:	dd01      	ble.n	8000af0 <pulse_saturate+0x1c>
 8000aec:	2364      	movs	r3, #100	@ 0x64
 8000aee:	607b      	str	r3, [r7, #4]
  return (uint16_t)v;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	b29b      	uxth	r3, r3
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <sbus_decode>:




//giai ma sbus data raw vao rc_channel[16]
void sbus_decode(volatile uint8_t* sbus_frame, uint16_t* channels) {
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	6039      	str	r1, [r7, #0]
    // Kiểm tra Start Byte và End Byte, end byte co loa 0x00 co loai 0x04
    if (sbus_frame[0] != SBUS_START_BYTE || (sbus_frame[24] != SBUS_END_BYTE && sbus_frame[24] != SBUS_END_BYTE2)) {
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	2b0f      	cmp	r3, #15
 8000b12:	f040 8189 	bne.w	8000e28 <sbus_decode+0x328>
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	3318      	adds	r3, #24
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d006      	beq.n	8000b30 <sbus_decode+0x30>
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	3318      	adds	r3, #24
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	2b04      	cmp	r3, #4
 8000b2c:	f040 817c 	bne.w	8000e28 <sbus_decode+0x328>
        return; // Gói tin không hợp lệ
    }

    // Giải mã 16 kênh (mỗi kênh 11 bit)
    channels[0]  = (uint16_t)((sbus_frame[1]    | sbus_frame[2] << 8) & 0x07FF);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	3301      	adds	r3, #1
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	b21a      	sxth	r2, r3
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	3302      	adds	r3, #2
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	021b      	lsls	r3, r3, #8
 8000b44:	b21b      	sxth	r3, r3
 8000b46:	4313      	orrs	r3, r2
 8000b48:	b21b      	sxth	r3, r3
 8000b4a:	b29b      	uxth	r3, r3
 8000b4c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000b50:	b29a      	uxth	r2, r3
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	801a      	strh	r2, [r3, #0]
    channels[1]  = (uint16_t)((sbus_frame[2] >> 3 | sbus_frame[3] << 5) & 0x07FF);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	3302      	adds	r3, #2
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	08db      	lsrs	r3, r3, #3
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	b21a      	sxth	r2, r3
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	3303      	adds	r3, #3
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	015b      	lsls	r3, r3, #5
 8000b6e:	b21b      	sxth	r3, r3
 8000b70:	4313      	orrs	r3, r2
 8000b72:	b21b      	sxth	r3, r3
 8000b74:	b29a      	uxth	r2, r3
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	3302      	adds	r3, #2
 8000b7a:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8000b7e:	b292      	uxth	r2, r2
 8000b80:	801a      	strh	r2, [r3, #0]
    channels[2]  = (uint16_t)((sbus_frame[3] >> 6 | sbus_frame[4] << 2 | sbus_frame[5] << 10) & 0x07FF);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	3303      	adds	r3, #3
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	099b      	lsrs	r3, r3, #6
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	b21a      	sxth	r2, r3
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	3304      	adds	r3, #4
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	b21b      	sxth	r3, r3
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	b21a      	sxth	r2, r3
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	3305      	adds	r3, #5
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	029b      	lsls	r3, r3, #10
 8000baa:	b21b      	sxth	r3, r3
 8000bac:	4313      	orrs	r3, r2
 8000bae:	b21b      	sxth	r3, r3
 8000bb0:	b29a      	uxth	r2, r3
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	3304      	adds	r3, #4
 8000bb6:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8000bba:	b292      	uxth	r2, r2
 8000bbc:	801a      	strh	r2, [r3, #0]
    channels[3]  = (uint16_t)((sbus_frame[5] >> 1 | sbus_frame[6] << 7) & 0x07FF);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	3305      	adds	r3, #5
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	085b      	lsrs	r3, r3, #1
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	b21a      	sxth	r2, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	3306      	adds	r3, #6
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	01db      	lsls	r3, r3, #7
 8000bd6:	b21b      	sxth	r3, r3
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	b21b      	sxth	r3, r3
 8000bdc:	b29a      	uxth	r2, r3
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	3306      	adds	r3, #6
 8000be2:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8000be6:	b292      	uxth	r2, r2
 8000be8:	801a      	strh	r2, [r3, #0]
    channels[4]  = (uint16_t)((sbus_frame[6] >> 4 | sbus_frame[7] << 4) & 0x07FF);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	3306      	adds	r3, #6
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	091b      	lsrs	r3, r3, #4
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	b21a      	sxth	r2, r3
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	3307      	adds	r3, #7
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	011b      	lsls	r3, r3, #4
 8000c02:	b21b      	sxth	r3, r3
 8000c04:	4313      	orrs	r3, r2
 8000c06:	b21b      	sxth	r3, r3
 8000c08:	b29a      	uxth	r2, r3
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	3308      	adds	r3, #8
 8000c0e:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8000c12:	b292      	uxth	r2, r2
 8000c14:	801a      	strh	r2, [r3, #0]
    channels[5]  = (uint16_t)((sbus_frame[7] >> 7 | sbus_frame[8] << 1 | sbus_frame[9] << 9) & 0x07FF);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	3307      	adds	r3, #7
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	09db      	lsrs	r3, r3, #7
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	b21a      	sxth	r2, r3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	3308      	adds	r3, #8
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	005b      	lsls	r3, r3, #1
 8000c2e:	b21b      	sxth	r3, r3
 8000c30:	4313      	orrs	r3, r2
 8000c32:	b21a      	sxth	r2, r3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	3309      	adds	r3, #9
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	025b      	lsls	r3, r3, #9
 8000c3e:	b21b      	sxth	r3, r3
 8000c40:	4313      	orrs	r3, r2
 8000c42:	b21b      	sxth	r3, r3
 8000c44:	b29a      	uxth	r2, r3
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	330a      	adds	r3, #10
 8000c4a:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8000c4e:	b292      	uxth	r2, r2
 8000c50:	801a      	strh	r2, [r3, #0]
    channels[6]  = (uint16_t)((sbus_frame[9] >> 2 | sbus_frame[10] << 6) & 0x07FF);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	3309      	adds	r3, #9
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	089b      	lsrs	r3, r3, #2
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	b21a      	sxth	r2, r3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	330a      	adds	r3, #10
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	019b      	lsls	r3, r3, #6
 8000c6a:	b21b      	sxth	r3, r3
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	b21b      	sxth	r3, r3
 8000c70:	b29a      	uxth	r2, r3
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	330c      	adds	r3, #12
 8000c76:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8000c7a:	b292      	uxth	r2, r2
 8000c7c:	801a      	strh	r2, [r3, #0]
    channels[7]  = (uint16_t)((sbus_frame[10] >> 5 | sbus_frame[11] << 3) & 0x07FF);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	330a      	adds	r3, #10
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	095b      	lsrs	r3, r3, #5
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	b21a      	sxth	r2, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	330b      	adds	r3, #11
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	00db      	lsls	r3, r3, #3
 8000c96:	b21b      	sxth	r3, r3
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	b21b      	sxth	r3, r3
 8000c9c:	b29a      	uxth	r2, r3
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	330e      	adds	r3, #14
 8000ca2:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8000ca6:	b292      	uxth	r2, r2
 8000ca8:	801a      	strh	r2, [r3, #0]
    channels[8]  = (uint16_t)((sbus_frame[12]   | sbus_frame[13] << 8) & 0x07FF);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	330c      	adds	r3, #12
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	b21a      	sxth	r2, r3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	330d      	adds	r3, #13
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	021b      	lsls	r3, r3, #8
 8000cbe:	b21b      	sxth	r3, r3
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	b21b      	sxth	r3, r3
 8000cc4:	b29a      	uxth	r2, r3
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	3310      	adds	r3, #16
 8000cca:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8000cce:	b292      	uxth	r2, r2
 8000cd0:	801a      	strh	r2, [r3, #0]
    channels[9]  = (uint16_t)((sbus_frame[13] >> 3 | sbus_frame[14] << 5) & 0x07FF);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	330d      	adds	r3, #13
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	08db      	lsrs	r3, r3, #3
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	b21a      	sxth	r2, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	330e      	adds	r3, #14
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	015b      	lsls	r3, r3, #5
 8000cea:	b21b      	sxth	r3, r3
 8000cec:	4313      	orrs	r3, r2
 8000cee:	b21b      	sxth	r3, r3
 8000cf0:	b29a      	uxth	r2, r3
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	3312      	adds	r3, #18
 8000cf6:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8000cfa:	b292      	uxth	r2, r2
 8000cfc:	801a      	strh	r2, [r3, #0]
    channels[10] = (uint16_t)((sbus_frame[14] >> 6 | sbus_frame[15] << 2 | sbus_frame[16] << 10) & 0x07FF);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	330e      	adds	r3, #14
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	099b      	lsrs	r3, r3, #6
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	b21a      	sxth	r2, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	330f      	adds	r3, #15
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	b21b      	sxth	r3, r3
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	b21a      	sxth	r2, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	3310      	adds	r3, #16
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	029b      	lsls	r3, r3, #10
 8000d26:	b21b      	sxth	r3, r3
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	b21b      	sxth	r3, r3
 8000d2c:	b29a      	uxth	r2, r3
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	3314      	adds	r3, #20
 8000d32:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8000d36:	b292      	uxth	r2, r2
 8000d38:	801a      	strh	r2, [r3, #0]
    channels[11] = (uint16_t)((sbus_frame[16] >> 1 | sbus_frame[17] << 7) & 0x07FF);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	3310      	adds	r3, #16
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	085b      	lsrs	r3, r3, #1
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	b21a      	sxth	r2, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	3311      	adds	r3, #17
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	01db      	lsls	r3, r3, #7
 8000d52:	b21b      	sxth	r3, r3
 8000d54:	4313      	orrs	r3, r2
 8000d56:	b21b      	sxth	r3, r3
 8000d58:	b29a      	uxth	r2, r3
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	3316      	adds	r3, #22
 8000d5e:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8000d62:	b292      	uxth	r2, r2
 8000d64:	801a      	strh	r2, [r3, #0]
    channels[12] = (uint16_t)((sbus_frame[17] >> 4 | sbus_frame[18] << 4) & 0x07FF);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	3311      	adds	r3, #17
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	091b      	lsrs	r3, r3, #4
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	b21a      	sxth	r2, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3312      	adds	r3, #18
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	011b      	lsls	r3, r3, #4
 8000d7e:	b21b      	sxth	r3, r3
 8000d80:	4313      	orrs	r3, r2
 8000d82:	b21b      	sxth	r3, r3
 8000d84:	b29a      	uxth	r2, r3
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	3318      	adds	r3, #24
 8000d8a:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8000d8e:	b292      	uxth	r2, r2
 8000d90:	801a      	strh	r2, [r3, #0]
    channels[13] = (uint16_t)((sbus_frame[18] >> 7 | sbus_frame[19] << 1 | sbus_frame[20] << 9) & 0x07FF);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	3312      	adds	r3, #18
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	09db      	lsrs	r3, r3, #7
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	b21a      	sxth	r2, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	3313      	adds	r3, #19
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	b21b      	sxth	r3, r3
 8000dac:	4313      	orrs	r3, r2
 8000dae:	b21a      	sxth	r2, r3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	3314      	adds	r3, #20
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	025b      	lsls	r3, r3, #9
 8000dba:	b21b      	sxth	r3, r3
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	b21b      	sxth	r3, r3
 8000dc0:	b29a      	uxth	r2, r3
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	331a      	adds	r3, #26
 8000dc6:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8000dca:	b292      	uxth	r2, r2
 8000dcc:	801a      	strh	r2, [r3, #0]
    channels[14] = (uint16_t)((sbus_frame[20] >> 2 | sbus_frame[21] << 6) & 0x07FF);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	3314      	adds	r3, #20
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	089b      	lsrs	r3, r3, #2
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	b21a      	sxth	r2, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	3315      	adds	r3, #21
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	019b      	lsls	r3, r3, #6
 8000de6:	b21b      	sxth	r3, r3
 8000de8:	4313      	orrs	r3, r2
 8000dea:	b21b      	sxth	r3, r3
 8000dec:	b29a      	uxth	r2, r3
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	331c      	adds	r3, #28
 8000df2:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8000df6:	b292      	uxth	r2, r2
 8000df8:	801a      	strh	r2, [r3, #0]
    channels[15] = (uint16_t)((sbus_frame[21] >> 5 | sbus_frame[22] << 3) & 0x07FF);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	3315      	adds	r3, #21
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	095b      	lsrs	r3, r3, #5
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	b21a      	sxth	r2, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	3316      	adds	r3, #22
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	00db      	lsls	r3, r3, #3
 8000e12:	b21b      	sxth	r3, r3
 8000e14:	4313      	orrs	r3, r2
 8000e16:	b21b      	sxth	r3, r3
 8000e18:	b29a      	uxth	r2, r3
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	331e      	adds	r3, #30
 8000e1e:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8000e22:	b292      	uxth	r2, r2
 8000e24:	801a      	strh	r2, [r3, #0]
 8000e26:	e000      	b.n	8000e2a <sbus_decode+0x32a>
        return; // Gói tin không hợp lệ
 8000e28:	bf00      	nop
}
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <HAL_UARTEx_RxEventCallback>:
  return (uint16_t)(1000 + (v - SBUS_MIN) * (1000.0f / (SBUS_MAX - SBUS_MIN)));
}

//ham call back RX khi nhan data 
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a11      	ldr	r2, [pc, #68]	@ (8000e8c <HAL_UARTEx_RxEventCallback+0x58>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d11b      	bne.n	8000e82 <HAL_UARTEx_RxEventCallback+0x4e>
	{
		if (Size >= SBUS_FRAME_SIZE)
 8000e4a:	887b      	ldrh	r3, [r7, #2]
 8000e4c:	2b18      	cmp	r3, #24
 8000e4e:	d90b      	bls.n	8000e68 <HAL_UARTEx_RxEventCallback+0x34>
		{
			sbus_decode(sbus_rx_buffer, rc_channels);
 8000e50:	490f      	ldr	r1, [pc, #60]	@ (8000e90 <HAL_UARTEx_RxEventCallback+0x5c>)
 8000e52:	4810      	ldr	r0, [pc, #64]	@ (8000e94 <HAL_UARTEx_RxEventCallback+0x60>)
 8000e54:	f7ff fe54 	bl	8000b00 <sbus_decode>
			sbus_data_ready_flag = 1; //dat co trong while
 8000e58:	4b0f      	ldr	r3, [pc, #60]	@ (8000e98 <HAL_UARTEx_RxEventCallback+0x64>)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	701a      	strb	r2, [r3, #0]
      last_sbus_ms = HAL_GetTick(); //dat moc decode xong SBUS
 8000e5e:	f001 fa73 	bl	8002348 <HAL_GetTick>
 8000e62:	4603      	mov	r3, r0
 8000e64:	4a0d      	ldr	r2, [pc, #52]	@ (8000e9c <HAL_UARTEx_RxEventCallback+0x68>)
 8000e66:	6013      	str	r3, [r2, #0]
		}
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, sbus_rx_buffer, SBUS_FRAME_SIZE);
 8000e68:	2219      	movs	r2, #25
 8000e6a:	490a      	ldr	r1, [pc, #40]	@ (8000e94 <HAL_UARTEx_RxEventCallback+0x60>)
 8000e6c:	480c      	ldr	r0, [pc, #48]	@ (8000ea0 <HAL_UARTEx_RxEventCallback+0x6c>)
 8000e6e:	f004 fc21 	bl	80056b4 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT); // tránh callback nửa khung
 8000e72:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea4 <HAL_UARTEx_RxEventCallback+0x70>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea4 <HAL_UARTEx_RxEventCallback+0x70>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f022 0208 	bic.w	r2, r2, #8
 8000e80:	601a      	str	r2, [r3, #0]
	}
}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40004400 	.word	0x40004400
 8000e90:	20000374 	.word	0x20000374
 8000e94:	20000358 	.word	0x20000358
 8000e98:	20000394 	.word	0x20000394
 8000e9c:	20000398 	.word	0x20000398
 8000ea0:	20000180 	.word	0x20000180
 8000ea4:	20000210 	.word	0x20000210

08000ea8 <map>:

//map gia tri trong khoang [in_min,in_max] -> [out_min, out_max]
long map(long value, long in_min, long in_max, long out_min, long out_max) {
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
 8000eb4:	603b      	str	r3, [r7, #0]
  return (value - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000eb6:	68fa      	ldr	r2, [r7, #12]
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	1ad3      	subs	r3, r2, r3
 8000ebc:	69b9      	ldr	r1, [r7, #24]
 8000ebe:	683a      	ldr	r2, [r7, #0]
 8000ec0:	1a8a      	subs	r2, r1, r2
 8000ec2:	fb03 f202 	mul.w	r2, r3, r2
 8000ec6:	6879      	ldr	r1, [r7, #4]
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	1acb      	subs	r3, r1, r3
 8000ecc:	fb92 f2f3 	sdiv	r2, r2, r3
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	4413      	add	r3, r2
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3714      	adds	r7, #20
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <fmap>:

static inline float fmap(long value, long in_min, long in_max, float out_min, float out_max) {
 8000ee0:	b480      	push	{r7}
 8000ee2:	b087      	sub	sp, #28
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6178      	str	r0, [r7, #20]
 8000ee8:	6139      	str	r1, [r7, #16]
 8000eea:	60fa      	str	r2, [r7, #12]
 8000eec:	ed87 0a02 	vstr	s0, [r7, #8]
 8000ef0:	edc7 0a01 	vstr	s1, [r7, #4]
  return out_min + (float)(value - in_min) * (out_max - out_min) / (float)(in_max - in_min);
 8000ef4:	697a      	ldr	r2, [r7, #20]
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	ee07 3a90 	vmov	s15, r3
 8000efe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f02:	edd7 6a01 	vldr	s13, [r7, #4]
 8000f06:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f0a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000f0e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000f12:	68fa      	ldr	r2, [r7, #12]
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	1ad3      	subs	r3, r2, r3
 8000f18:	ee07 3a90 	vmov	s15, r3
 8000f1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000f24:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f28:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000f2c:	eeb0 0a67 	vmov.f32	s0, s15
 8000f30:	371c      	adds	r7, #28
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
	...

08000f3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f42:	f001 f99b 	bl	800227c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f46:	f000 fd43 	bl	80019d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f4a:	f000 ff11 	bl	8001d70 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f4e:	f000 feef 	bl	8001d30 <MX_DMA_Init>
  MX_I2C1_Init();
 8000f52:	f000 fda5 	bl	8001aa0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000f56:	f000 fe69 	bl	8001c2c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000f5a:	f000 fdcf 	bl	8001afc <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000f5e:	f000 fe8f 	bl	8001c80 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000f62:	f000 febb 	bl	8001cdc <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000f66:	2100      	movs	r1, #0
 8000f68:	4870      	ldr	r0, [pc, #448]	@ (800112c <main+0x1f0>)
 8000f6a:	f003 fdd9 	bl	8004b20 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000f6e:	2104      	movs	r1, #4
 8000f70:	486e      	ldr	r0, [pc, #440]	@ (800112c <main+0x1f0>)
 8000f72:	f003 fdd5 	bl	8004b20 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000f76:	2108      	movs	r1, #8
 8000f78:	486c      	ldr	r0, [pc, #432]	@ (800112c <main+0x1f0>)
 8000f7a:	f003 fdd1 	bl	8004b20 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000f7e:	210c      	movs	r1, #12
 8000f80:	486a      	ldr	r0, [pc, #424]	@ (800112c <main+0x1f0>)
 8000f82:	f003 fdcd 	bl	8004b20 <HAL_TIM_PWM_Start>

  #if Calibrate
		TIM3->CCR1=ESC_MAX_CCR; //set the maximum (2ms)
 8000f86:	4b6a      	ldr	r3, [pc, #424]	@ (8001130 <main+0x1f4>)
 8000f88:	2264      	movs	r2, #100	@ 0x64
 8000f8a:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM3->CCR2=ESC_MAX_CCR;
 8000f8c:	4b68      	ldr	r3, [pc, #416]	@ (8001130 <main+0x1f4>)
 8000f8e:	2264      	movs	r2, #100	@ 0x64
 8000f90:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM3->CCR3=ESC_MAX_CCR;
 8000f92:	4b67      	ldr	r3, [pc, #412]	@ (8001130 <main+0x1f4>)
 8000f94:	2264      	movs	r2, #100	@ 0x64
 8000f96:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM3->CCR4=ESC_MAX_CCR;
 8000f98:	4b65      	ldr	r3, [pc, #404]	@ (8001130 <main+0x1f4>)
 8000f9a:	2264      	movs	r2, #100	@ 0x64
 8000f9c:	641a      	str	r2, [r3, #64]	@ 0x40

		HAL_Delay(3000); //wait for 1 beep
 8000f9e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000fa2:	f001 f9dd 	bl	8002360 <HAL_Delay>
		TIM3->CCR1=ESC_MIN_CCR; //set the minimum (2ms)
 8000fa6:	4b62      	ldr	r3, [pc, #392]	@ (8001130 <main+0x1f4>)
 8000fa8:	2232      	movs	r2, #50	@ 0x32
 8000faa:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM3->CCR2=ESC_MIN_CCR;
 8000fac:	4b60      	ldr	r3, [pc, #384]	@ (8001130 <main+0x1f4>)
 8000fae:	2232      	movs	r2, #50	@ 0x32
 8000fb0:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM3->CCR3=ESC_MIN_CCR;
 8000fb2:	4b5f      	ldr	r3, [pc, #380]	@ (8001130 <main+0x1f4>)
 8000fb4:	2232      	movs	r2, #50	@ 0x32
 8000fb6:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM3->CCR4=ESC_MIN_CCR;
 8000fb8:	4b5d      	ldr	r3, [pc, #372]	@ (8001130 <main+0x1f4>)
 8000fba:	2232      	movs	r2, #50	@ 0x32
 8000fbc:	641a      	str	r2, [r3, #64]	@ 0x40
		HAL_Delay(3000); //wait for 1 beep
 8000fbe:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000fc2:	f001 f9cd 	bl	8002360 <HAL_Delay>
	#endif

  HAL_Delay(250);
 8000fc6:	20fa      	movs	r0, #250	@ 0xfa
 8000fc8:	f001 f9ca 	bl	8002360 <HAL_Delay>
  (void)wr8(&hi2c1, 0x6B, 0x00);  // wake mpu 
 8000fcc:	2200      	movs	r2, #0
 8000fce:	216b      	movs	r1, #107	@ 0x6b
 8000fd0:	4858      	ldr	r0, [pc, #352]	@ (8001134 <main+0x1f8>)
 8000fd2:	f7ff fa79 	bl	80004c8 <wr8>
  (void)wr8(&hi2c1, 0x1A,0x03); // cho thanh ghi 0x1A = 0x03 => low pass filter ~44hz
 8000fd6:	2203      	movs	r2, #3
 8000fd8:	211a      	movs	r1, #26
 8000fda:	4856      	ldr	r0, [pc, #344]	@ (8001134 <main+0x1f8>)
 8000fdc:	f7ff fa74 	bl	80004c8 <wr8>
  (void)wr8(&hi2c1, 0x1B,0x08); // config sensing scale factor la *65.5*/ do/s
 8000fe0:	2208      	movs	r2, #8
 8000fe2:	211b      	movs	r1, #27
 8000fe4:	4853      	ldr	r0, [pc, #332]	@ (8001134 <main+0x1f8>)
 8000fe6:	f7ff fa6f 	bl	80004c8 <wr8>
  //sample rate cua cam bien binh thuong la 8khz, neu bat lowpassfilter thi doc la 1000hz
  (void)wr8(&hi2c1, 0x19, 0x03); // Set Sample Rate cua cam bien 250hz
 8000fea:	2203      	movs	r2, #3
 8000fec:	2119      	movs	r1, #25
 8000fee:	4851      	ldr	r0, [pc, #324]	@ (8001134 <main+0x1f8>)
 8000ff0:	f7ff fa6a 	bl	80004c8 <wr8>
  (void)wr8(&hi2c1, 0x1C, 0x10); // set full scale range cua accelerometer la +-8g
 8000ff4:	2210      	movs	r2, #16
 8000ff6:	211c      	movs	r1, #28
 8000ff8:	484e      	ldr	r0, [pc, #312]	@ (8001134 <main+0x1f8>)
 8000ffa:	f7ff fa65 	bl	80004c8 <wr8>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, sbus_rx_buffer, SBUS_FRAME_SIZE); //bat callback
 8000ffe:	2219      	movs	r2, #25
 8001000:	494d      	ldr	r1, [pc, #308]	@ (8001138 <main+0x1fc>)
 8001002:	484e      	ldr	r0, [pc, #312]	@ (800113c <main+0x200>)
 8001004:	f004 fb56 	bl	80056b4 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);   // tắt ngat giua chung khi dang doc tin nhan uart
 8001008:	4b4d      	ldr	r3, [pc, #308]	@ (8001140 <main+0x204>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	4b4c      	ldr	r3, [pc, #304]	@ (8001140 <main+0x204>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f022 0208 	bic.w	r2, r2, #8
 8001016:	601a      	str	r2, [r3, #0]


  //calibrate gyro && accelerometer
  // doc 2000 lan, tinh trung binh roi tru di gia tri trung binh do
  for (RateCalibrationNumber = 0;
 8001018:	4b4a      	ldr	r3, [pc, #296]	@ (8001144 <main+0x208>)
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	e040      	b.n	80010a2 <main+0x166>
	  RateCalibrationNumber < 2000;
	  RateCalibrationNumber++)
  {
	  gyro_signal();
 8001020:	f7ff faec 	bl	80005fc <gyro_signal>
	  RateCalibrationPitch += RatePitch;
 8001024:	4b48      	ldr	r3, [pc, #288]	@ (8001148 <main+0x20c>)
 8001026:	ed93 7a00 	vldr	s14, [r3]
 800102a:	4b48      	ldr	r3, [pc, #288]	@ (800114c <main+0x210>)
 800102c:	edd3 7a00 	vldr	s15, [r3]
 8001030:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001034:	4b44      	ldr	r3, [pc, #272]	@ (8001148 <main+0x20c>)
 8001036:	edc3 7a00 	vstr	s15, [r3]
	  RateCalibrationRoll += RateRoll;
 800103a:	4b45      	ldr	r3, [pc, #276]	@ (8001150 <main+0x214>)
 800103c:	ed93 7a00 	vldr	s14, [r3]
 8001040:	4b44      	ldr	r3, [pc, #272]	@ (8001154 <main+0x218>)
 8001042:	edd3 7a00 	vldr	s15, [r3]
 8001046:	ee77 7a27 	vadd.f32	s15, s14, s15
 800104a:	4b41      	ldr	r3, [pc, #260]	@ (8001150 <main+0x214>)
 800104c:	edc3 7a00 	vstr	s15, [r3]
	  RateCalibrationYaw += RateYaw;
 8001050:	4b41      	ldr	r3, [pc, #260]	@ (8001158 <main+0x21c>)
 8001052:	ed93 7a00 	vldr	s14, [r3]
 8001056:	4b41      	ldr	r3, [pc, #260]	@ (800115c <main+0x220>)
 8001058:	edd3 7a00 	vldr	s15, [r3]
 800105c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001060:	4b3d      	ldr	r3, [pc, #244]	@ (8001158 <main+0x21c>)
 8001062:	edc3 7a00 	vstr	s15, [r3]

	  AngleCalibrationPitch += AnglePitch;
 8001066:	4b3e      	ldr	r3, [pc, #248]	@ (8001160 <main+0x224>)
 8001068:	ed93 7a00 	vldr	s14, [r3]
 800106c:	4b3d      	ldr	r3, [pc, #244]	@ (8001164 <main+0x228>)
 800106e:	edd3 7a00 	vldr	s15, [r3]
 8001072:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001076:	4b3a      	ldr	r3, [pc, #232]	@ (8001160 <main+0x224>)
 8001078:	edc3 7a00 	vstr	s15, [r3]
	  AngleCalibrationRoll += AngleRoll;
 800107c:	4b3a      	ldr	r3, [pc, #232]	@ (8001168 <main+0x22c>)
 800107e:	ed93 7a00 	vldr	s14, [r3]
 8001082:	4b3a      	ldr	r3, [pc, #232]	@ (800116c <main+0x230>)
 8001084:	edd3 7a00 	vldr	s15, [r3]
 8001088:	ee77 7a27 	vadd.f32	s15, s14, s15
 800108c:	4b36      	ldr	r3, [pc, #216]	@ (8001168 <main+0x22c>)
 800108e:	edc3 7a00 	vstr	s15, [r3]
	  HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f001 f964 	bl	8002360 <HAL_Delay>
	  RateCalibrationNumber++)
 8001098:	4b2a      	ldr	r3, [pc, #168]	@ (8001144 <main+0x208>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	3301      	adds	r3, #1
 800109e:	4a29      	ldr	r2, [pc, #164]	@ (8001144 <main+0x208>)
 80010a0:	6013      	str	r3, [r2, #0]
	  RateCalibrationNumber < 2000;
 80010a2:	4b28      	ldr	r3, [pc, #160]	@ (8001144 <main+0x208>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80010aa:	dbb9      	blt.n	8001020 <main+0xe4>
  }
  //gia tri calib
	RateCalibrationPitch/=2000;
 80010ac:	4b26      	ldr	r3, [pc, #152]	@ (8001148 <main+0x20c>)
 80010ae:	ed93 7a00 	vldr	s14, [r3]
 80010b2:	eddf 6a2f 	vldr	s13, [pc, #188]	@ 8001170 <main+0x234>
 80010b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010ba:	4b23      	ldr	r3, [pc, #140]	@ (8001148 <main+0x20c>)
 80010bc:	edc3 7a00 	vstr	s15, [r3]
	RateCalibrationRoll/=2000;
 80010c0:	4b23      	ldr	r3, [pc, #140]	@ (8001150 <main+0x214>)
 80010c2:	ed93 7a00 	vldr	s14, [r3]
 80010c6:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8001170 <main+0x234>
 80010ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010ce:	4b20      	ldr	r3, [pc, #128]	@ (8001150 <main+0x214>)
 80010d0:	edc3 7a00 	vstr	s15, [r3]
	RateCalibrationYaw/=2000;
 80010d4:	4b20      	ldr	r3, [pc, #128]	@ (8001158 <main+0x21c>)
 80010d6:	ed93 7a00 	vldr	s14, [r3]
 80010da:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8001170 <main+0x234>
 80010de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001158 <main+0x21c>)
 80010e4:	edc3 7a00 	vstr	s15, [r3]
	AngleCalibrationPitch /= 2000;
 80010e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001160 <main+0x224>)
 80010ea:	ed93 7a00 	vldr	s14, [r3]
 80010ee:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8001170 <main+0x234>
 80010f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001160 <main+0x224>)
 80010f8:	edc3 7a00 	vstr	s15, [r3]
	AngleCalibrationRoll /= 2000;
 80010fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001168 <main+0x22c>)
 80010fe:	ed93 7a00 	vldr	s14, [r3]
 8001102:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 8001170 <main+0x234>
 8001106:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800110a:	4b17      	ldr	r3, [pc, #92]	@ (8001168 <main+0x22c>)
 800110c:	edc3 7a00 	vstr	s15, [r3]
  
  //chan an toan khi chua khoi dong, can phai gat can throttle ve min roi moi bay duoc
  // Chờ tín hiệu SBUS đầu tiên
// Chờ tín hiệu SBUS đầu tiên
  while (sbus_data_ready_flag == 0) { HAL_Delay(1); }
 8001110:	e002      	b.n	8001118 <main+0x1dc>
 8001112:	2001      	movs	r0, #1
 8001114:	f001 f924 	bl	8002360 <HAL_Delay>
 8001118:	4b16      	ldr	r3, [pc, #88]	@ (8001174 <main+0x238>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	b2db      	uxtb	r3, r3
 800111e:	2b00      	cmp	r3, #0
 8001120:	d0f7      	beq.n	8001112 <main+0x1d6>
  // Chờ ga về min
  while ( (uint16_t)map(rc_channels[2], SBUS_MIN, SBUS_MAX, ESC_MIN_CCR, 99) > ESC_MIN_CCR+5 ) {
 8001122:	e031      	b.n	8001188 <main+0x24c>
  sbus_data_ready_flag = 0;
 8001124:	4b13      	ldr	r3, [pc, #76]	@ (8001174 <main+0x238>)
 8001126:	2200      	movs	r2, #0
 8001128:	701a      	strb	r2, [r3, #0]
  while (sbus_data_ready_flag == 0) { HAL_Delay(1); }
 800112a:	e028      	b.n	800117e <main+0x242>
 800112c:	200000f0 	.word	0x200000f0
 8001130:	40000400 	.word	0x40000400
 8001134:	2000009c 	.word	0x2000009c
 8001138:	20000358 	.word	0x20000358
 800113c:	20000180 	.word	0x20000180
 8001140:	20000210 	.word	0x20000210
 8001144:	20000290 	.word	0x20000290
 8001148:	20000288 	.word	0x20000288
 800114c:	2000027c 	.word	0x2000027c
 8001150:	20000284 	.word	0x20000284
 8001154:	20000278 	.word	0x20000278
 8001158:	2000028c 	.word	0x2000028c
 800115c:	20000280 	.word	0x20000280
 8001160:	200002b4 	.word	0x200002b4
 8001164:	200002ac 	.word	0x200002ac
 8001168:	200002b0 	.word	0x200002b0
 800116c:	200002a8 	.word	0x200002a8
 8001170:	44fa0000 	.word	0x44fa0000
 8001174:	20000394 	.word	0x20000394
 8001178:	2001      	movs	r0, #1
 800117a:	f001 f8f1 	bl	8002360 <HAL_Delay>
 800117e:	4b92      	ldr	r3, [pc, #584]	@ (80013c8 <main+0x48c>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	b2db      	uxtb	r3, r3
 8001184:	2b00      	cmp	r3, #0
 8001186:	d0f7      	beq.n	8001178 <main+0x23c>
  while ( (uint16_t)map(rc_channels[2], SBUS_MIN, SBUS_MAX, ESC_MIN_CCR, 99) > ESC_MIN_CCR+5 ) {
 8001188:	4b90      	ldr	r3, [pc, #576]	@ (80013cc <main+0x490>)
 800118a:	889b      	ldrh	r3, [r3, #4]
 800118c:	b29b      	uxth	r3, r3
 800118e:	4618      	mov	r0, r3
 8001190:	2363      	movs	r3, #99	@ 0x63
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	2332      	movs	r3, #50	@ 0x32
 8001196:	f240 6269 	movw	r2, #1641	@ 0x669
 800119a:	2109      	movs	r1, #9
 800119c:	f7ff fe84 	bl	8000ea8 <map>
 80011a0:	4603      	mov	r3, r0
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	2b37      	cmp	r3, #55	@ 0x37
 80011a6:	d8bd      	bhi.n	8001124 <main+0x1e8>
}

  reset_pid();
 80011a8:	f7ff fc50 	bl	8000a4c <reset_pid>
	LoopTimer = HAL_GetTick();
 80011ac:	f001 f8cc 	bl	8002348 <HAL_GetTick>
 80011b0:	4603      	mov	r3, r0
 80011b2:	4a87      	ldr	r2, [pc, #540]	@ (80013d0 <main+0x494>)
 80011b4:	6013      	str	r3, [r2, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // f he thong ~250 Hz
    while ((HAL_GetTick() - LoopTimer) < 4) {}
 80011b6:	bf00      	nop
 80011b8:	f001 f8c6 	bl	8002348 <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	4b84      	ldr	r3, [pc, #528]	@ (80013d0 <main+0x494>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	2b03      	cmp	r3, #3
 80011c6:	d9f7      	bls.n	80011b8 <main+0x27c>
    uint32_t now = HAL_GetTick();
 80011c8:	f001 f8be 	bl	8002348 <HAL_GetTick>
 80011cc:	6078      	str	r0, [r7, #4]
    dt = (now - LoopTimer) * 0.001f; // miliseconds -> second
 80011ce:	4b80      	ldr	r3, [pc, #512]	@ (80013d0 <main+0x494>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	ee07 3a90 	vmov	s15, r3
 80011da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011de:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 80013d4 <main+0x498>
 80011e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011e6:	4b7c      	ldr	r3, [pc, #496]	@ (80013d8 <main+0x49c>)
 80011e8:	edc3 7a00 	vstr	s15, [r3]
    if (dt < 0.001f) dt = 0.001f;    // clamp to avoid div-by-zero/noise
 80011ec:	4b7a      	ldr	r3, [pc, #488]	@ (80013d8 <main+0x49c>)
 80011ee:	edd3 7a00 	vldr	s15, [r3]
 80011f2:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 80013d4 <main+0x498>
 80011f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011fe:	d502      	bpl.n	8001206 <main+0x2ca>
 8001200:	4b75      	ldr	r3, [pc, #468]	@ (80013d8 <main+0x49c>)
 8001202:	4a76      	ldr	r2, [pc, #472]	@ (80013dc <main+0x4a0>)
 8001204:	601a      	str	r2, [r3, #0]
    if (dt > 0.05f)  dt = 0.05f;  // chan tren de tranh dt lon lam thanh phan I lon,
 8001206:	4b74      	ldr	r3, [pc, #464]	@ (80013d8 <main+0x49c>)
 8001208:	edd3 7a00 	vldr	s15, [r3]
 800120c:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 80013e0 <main+0x4a4>
 8001210:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001218:	dd02      	ble.n	8001220 <main+0x2e4>
 800121a:	4b6f      	ldr	r3, [pc, #444]	@ (80013d8 <main+0x49c>)
 800121c:	4a71      	ldr	r2, [pc, #452]	@ (80013e4 <main+0x4a8>)
 800121e:	601a      	str	r2, [r3, #0]
    LoopTimer = now;   
 8001220:	4a6b      	ldr	r2, [pc, #428]	@ (80013d0 <main+0x494>)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6013      	str	r3, [r2, #0]

    if (sbus_data_ready_flag) {
 8001226:	4b68      	ldr	r3, [pc, #416]	@ (80013c8 <main+0x48c>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	b2db      	uxtb	r3, r3
 800122c:	2b00      	cmp	r3, #0
 800122e:	d05f      	beq.n	80012f0 <main+0x3b4>
      sbus_data_ready_flag = 0;
 8001230:	4b65      	ldr	r3, [pc, #404]	@ (80013c8 <main+0x48c>)
 8001232:	2200      	movs	r2, #0
 8001234:	701a      	strb	r2, [r3, #0]
      throttle_channel_value = (uint16_t)map(rc_channels[2], SBUS_MIN, SBUS_MAX, ESC_MIN_CCR, 99);
 8001236:	4b65      	ldr	r3, [pc, #404]	@ (80013cc <main+0x490>)
 8001238:	889b      	ldrh	r3, [r3, #4]
 800123a:	b29b      	uxth	r3, r3
 800123c:	4618      	mov	r0, r3
 800123e:	2363      	movs	r3, #99	@ 0x63
 8001240:	9300      	str	r3, [sp, #0]
 8001242:	2332      	movs	r3, #50	@ 0x32
 8001244:	f240 6269 	movw	r2, #1641	@ 0x669
 8001248:	2109      	movs	r1, #9
 800124a:	f7ff fe2d 	bl	8000ea8 <map>
 800124e:	4603      	mov	r3, r0
 8001250:	b29a      	uxth	r2, r3
 8001252:	4b65      	ldr	r3, [pc, #404]	@ (80013e8 <main+0x4ac>)
 8001254:	801a      	strh	r2, [r3, #0]
      // Dùng bộ lọc EMA để làm mượt ga ??? co can cai nay khong
      throttle_pulse_filt = (throttle_pulse_filt * 0.75f) + (throttle_channel_value * 0.25f);
 8001256:	4b65      	ldr	r3, [pc, #404]	@ (80013ec <main+0x4b0>)
 8001258:	edd3 7a00 	vldr	s15, [r3]
 800125c:	eeb6 7a08 	vmov.f32	s14, #104	@ 0x3f400000  0.750
 8001260:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001264:	4b60      	ldr	r3, [pc, #384]	@ (80013e8 <main+0x4ac>)
 8001266:	881b      	ldrh	r3, [r3, #0]
 8001268:	b29b      	uxth	r3, r3
 800126a:	ee07 3a90 	vmov	s15, r3
 800126e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001272:	eef5 6a00 	vmov.f32	s13, #80	@ 0x3e800000  0.250
 8001276:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800127a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800127e:	4b5b      	ldr	r3, [pc, #364]	@ (80013ec <main+0x4b0>)
 8001280:	edc3 7a00 	vstr	s15, [r3]

      // 2. Ánh xạ các kênh điều khiển (Roll, Pitch, Yaw)
      DesiredAngleRoll = fmap(rc_channels[0], SBUS_MIN, SBUS_MAX, -30, 30);
 8001284:	4b51      	ldr	r3, [pc, #324]	@ (80013cc <main+0x490>)
 8001286:	881b      	ldrh	r3, [r3, #0]
 8001288:	b29b      	uxth	r3, r3
 800128a:	eef3 0a0e 	vmov.f32	s1, #62	@ 0x41f00000  30.0
 800128e:	eebb 0a0e 	vmov.f32	s0, #190	@ 0xc1f00000 -30.0
 8001292:	f240 6269 	movw	r2, #1641	@ 0x669
 8001296:	2109      	movs	r1, #9
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff fe21 	bl	8000ee0 <fmap>
 800129e:	eef0 7a40 	vmov.f32	s15, s0
 80012a2:	4b53      	ldr	r3, [pc, #332]	@ (80013f0 <main+0x4b4>)
 80012a4:	edc3 7a00 	vstr	s15, [r3]
      DesiredAnglePitch = fmap(rc_channels[1], SBUS_MIN, SBUS_MAX, -30, 30);
 80012a8:	4b48      	ldr	r3, [pc, #288]	@ (80013cc <main+0x490>)
 80012aa:	885b      	ldrh	r3, [r3, #2]
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	eef3 0a0e 	vmov.f32	s1, #62	@ 0x41f00000  30.0
 80012b2:	eebb 0a0e 	vmov.f32	s0, #190	@ 0xc1f00000 -30.0
 80012b6:	f240 6269 	movw	r2, #1641	@ 0x669
 80012ba:	2109      	movs	r1, #9
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff fe0f 	bl	8000ee0 <fmap>
 80012c2:	eef0 7a40 	vmov.f32	s15, s0
 80012c6:	4b4b      	ldr	r3, [pc, #300]	@ (80013f4 <main+0x4b8>)
 80012c8:	edc3 7a00 	vstr	s15, [r3]
      DesiredRateYaw = fmap(rc_channels[3], SBUS_MIN, SBUS_MAX, -150, 150);
 80012cc:	4b3f      	ldr	r3, [pc, #252]	@ (80013cc <main+0x490>)
 80012ce:	88db      	ldrh	r3, [r3, #6]
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	eddf 0a49 	vldr	s1, [pc, #292]	@ 80013f8 <main+0x4bc>
 80012d6:	ed9f 0a49 	vldr	s0, [pc, #292]	@ 80013fc <main+0x4c0>
 80012da:	f240 6269 	movw	r2, #1641	@ 0x669
 80012de:	2109      	movs	r1, #9
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff fdfd 	bl	8000ee0 <fmap>
 80012e6:	eef0 7a40 	vmov.f32	s15, s0
 80012ea:	4b45      	ldr	r3, [pc, #276]	@ (8001400 <main+0x4c4>)
 80012ec:	edc3 7a00 	vstr	s15, [r3]
    }
        // nhan input roi nhung cu hardcode test truoc
    DesiredAngleRoll  = 0.0f;
 80012f0:	4b3f      	ldr	r3, [pc, #252]	@ (80013f0 <main+0x4b4>)
 80012f2:	f04f 0200 	mov.w	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
    DesiredAnglePitch = 0.0f;
 80012f8:	4b3e      	ldr	r3, [pc, #248]	@ (80013f4 <main+0x4b8>)
 80012fa:	f04f 0200 	mov.w	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
    DesiredRateYaw    = 0.0f;
 8001300:	4b3f      	ldr	r3, [pc, #252]	@ (8001400 <main+0x4c4>)
 8001302:	f04f 0200 	mov.w	r2, #0
 8001306:	601a      	str	r2, [r3, #0]

    // Logic Fail 1: Mat song >50ms
    bool fs = (HAL_GetTick() - last_sbus_ms) > 50;
 8001308:	f001 f81e 	bl	8002348 <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	4b3d      	ldr	r3, [pc, #244]	@ (8001404 <main+0x4c8>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	2b32      	cmp	r3, #50	@ 0x32
 8001316:	bf8c      	ite	hi
 8001318:	2301      	movhi	r3, #1
 800131a:	2300      	movls	r3, #0
 800131c:	70fb      	strb	r3, [r7, #3]
    if(fs) {throttle_channel_value = ESC_MIN_CCR;} // neu khong nhan tin hieu lau qua thi tat??? o day nen co logic fail safe khac
 800131e:	78fb      	ldrb	r3, [r7, #3]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d003      	beq.n	800132c <main+0x3f0>
 8001324:	4b30      	ldr	r3, [pc, #192]	@ (80013e8 <main+0x4ac>)
 8001326:	2232      	movs	r2, #50	@ 0x32
 8001328:	801a      	strh	r2, [r3, #0]
 800132a:	e009      	b.n	8001340 <main+0x404>
    else {throttle_channel_value = (uint16_t)throttle_pulse_filt;}
 800132c:	4b2f      	ldr	r3, [pc, #188]	@ (80013ec <main+0x4b0>)
 800132e:	edd3 7a00 	vldr	s15, [r3]
 8001332:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001336:	ee17 3a90 	vmov	r3, s15
 800133a:	b29a      	uxth	r2, r3
 800133c:	4b2a      	ldr	r3, [pc, #168]	@ (80013e8 <main+0x4ac>)
 800133e:	801a      	strh	r2, [r3, #0]

    //Logic Fail 2: Tat dong co thu cong
      if (throttle_channel_value < 60) 
 8001340:	4b29      	ldr	r3, [pc, #164]	@ (80013e8 <main+0x4ac>)
 8001342:	881b      	ldrh	r3, [r3, #0]
 8001344:	b29b      	uxth	r3, r3
 8001346:	2b3b      	cmp	r3, #59	@ 0x3b
 8001348:	d86e      	bhi.n	8001428 <main+0x4ec>
      {
        throttle_channel_value = ESC_MIN_CCR; // tat dong co
 800134a:	4b27      	ldr	r3, [pc, #156]	@ (80013e8 <main+0x4ac>)
 800134c:	2232      	movs	r2, #50	@ 0x32
 800134e:	801a      	strh	r2, [r3, #0]
        reset_pid();
 8001350:	f7ff fb7c 	bl	8000a4c <reset_pid>
        InputRoll = 0; // Tắt điều khiển khi disarm
 8001354:	4b2c      	ldr	r3, [pc, #176]	@ (8001408 <main+0x4cc>)
 8001356:	f04f 0200 	mov.w	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
        InputPitch = 0;
 800135c:	4b2b      	ldr	r3, [pc, #172]	@ (800140c <main+0x4d0>)
 800135e:	f04f 0200 	mov.w	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
        InputYaw = 0;
 8001364:	4b2a      	ldr	r3, [pc, #168]	@ (8001410 <main+0x4d4>)
 8001366:	f04f 0200 	mov.w	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
        DesiredAngleRoll = 0.0f;
 800136c:	4b20      	ldr	r3, [pc, #128]	@ (80013f0 <main+0x4b4>)
 800136e:	f04f 0200 	mov.w	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
        DesiredAnglePitch = 0.0f;
 8001374:	4b1f      	ldr	r3, [pc, #124]	@ (80013f4 <main+0x4b8>)
 8001376:	f04f 0200 	mov.w	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
        DesiredRateYaw = 0.0f;
 800137c:	4b20      	ldr	r3, [pc, #128]	@ (8001400 <main+0x4c4>)
 800137e:	f04f 0200 	mov.w	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
        m1=ESC_MIN_CCR;
 8001384:	4b23      	ldr	r3, [pc, #140]	@ (8001414 <main+0x4d8>)
 8001386:	2232      	movs	r2, #50	@ 0x32
 8001388:	801a      	strh	r2, [r3, #0]
        m2=ESC_MIN_CCR;
 800138a:	4b23      	ldr	r3, [pc, #140]	@ (8001418 <main+0x4dc>)
 800138c:	2232      	movs	r2, #50	@ 0x32
 800138e:	801a      	strh	r2, [r3, #0]
        m3=ESC_MIN_CCR;
 8001390:	4b22      	ldr	r3, [pc, #136]	@ (800141c <main+0x4e0>)
 8001392:	2232      	movs	r2, #50	@ 0x32
 8001394:	801a      	strh	r2, [r3, #0]
        m4=ESC_MIN_CCR;
 8001396:	4b22      	ldr	r3, [pc, #136]	@ (8001420 <main+0x4e4>)
 8001398:	2232      	movs	r2, #50	@ 0x32
 800139a:	801a      	strh	r2, [r3, #0]
        TIM3->CCR1 = throttle_channel_value;
 800139c:	4b12      	ldr	r3, [pc, #72]	@ (80013e8 <main+0x4ac>)
 800139e:	881b      	ldrh	r3, [r3, #0]
 80013a0:	b29a      	uxth	r2, r3
 80013a2:	4b20      	ldr	r3, [pc, #128]	@ (8001424 <main+0x4e8>)
 80013a4:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3->CCR2 = throttle_channel_value;
 80013a6:	4b10      	ldr	r3, [pc, #64]	@ (80013e8 <main+0x4ac>)
 80013a8:	881b      	ldrh	r3, [r3, #0]
 80013aa:	b29a      	uxth	r2, r3
 80013ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001424 <main+0x4e8>)
 80013ae:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3->CCR3 = throttle_channel_value;
 80013b0:	4b0d      	ldr	r3, [pc, #52]	@ (80013e8 <main+0x4ac>)
 80013b2:	881b      	ldrh	r3, [r3, #0]
 80013b4:	b29a      	uxth	r2, r3
 80013b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001424 <main+0x4e8>)
 80013b8:	63da      	str	r2, [r3, #60]	@ 0x3c
        TIM3->CCR4 = throttle_channel_value;
 80013ba:	4b0b      	ldr	r3, [pc, #44]	@ (80013e8 <main+0x4ac>)
 80013bc:	881b      	ldrh	r3, [r3, #0]
 80013be:	b29a      	uxth	r2, r3
 80013c0:	4b18      	ldr	r3, [pc, #96]	@ (8001424 <main+0x4e8>)
 80013c2:	641a      	str	r2, [r3, #64]	@ 0x40
        continue;
 80013c4:	e2e4      	b.n	8001990 <main+0xa54>
 80013c6:	bf00      	nop
 80013c8:	20000394 	.word	0x20000394
 80013cc:	20000374 	.word	0x20000374
 80013d0:	20000270 	.word	0x20000270
 80013d4:	3a83126f 	.word	0x3a83126f
 80013d8:	20000000 	.word	0x20000000
 80013dc:	3a83126f 	.word	0x3a83126f
 80013e0:	3d4ccccd 	.word	0x3d4ccccd
 80013e4:	3d4ccccd 	.word	0x3d4ccccd
 80013e8:	20000396 	.word	0x20000396
 80013ec:	20000020 	.word	0x20000020
 80013f0:	20000320 	.word	0x20000320
 80013f4:	20000324 	.word	0x20000324
 80013f8:	43160000 	.word	0x43160000
 80013fc:	c3160000 	.word	0xc3160000
 8001400:	200002d4 	.word	0x200002d4
 8001404:	20000398 	.word	0x20000398
 8001408:	200002e4 	.word	0x200002e4
 800140c:	200002e8 	.word	0x200002e8
 8001410:	200002ec 	.word	0x200002ec
 8001414:	20000350 	.word	0x20000350
 8001418:	20000352 	.word	0x20000352
 800141c:	20000354 	.word	0x20000354
 8001420:	20000356 	.word	0x20000356
 8001424:	40000400 	.word	0x40000400
      }
          
    gyro_signal();
 8001428:	f7ff f8e8 	bl	80005fc <gyro_signal>
    //calib gyro && accelerometer
    if (mpu6050_gyro_flag){
 800142c:	4bbe      	ldr	r3, [pc, #760]	@ (8001728 <main+0x7ec>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d023      	beq.n	800147c <main+0x540>
    	mpu6050_gyro_flag = 0;
 8001434:	4bbc      	ldr	r3, [pc, #752]	@ (8001728 <main+0x7ec>)
 8001436:	2200      	movs	r2, #0
 8001438:	701a      	strb	r2, [r3, #0]
    	RatePitch -= RateCalibrationPitch;
 800143a:	4bbc      	ldr	r3, [pc, #752]	@ (800172c <main+0x7f0>)
 800143c:	ed93 7a00 	vldr	s14, [r3]
 8001440:	4bbb      	ldr	r3, [pc, #748]	@ (8001730 <main+0x7f4>)
 8001442:	edd3 7a00 	vldr	s15, [r3]
 8001446:	ee77 7a67 	vsub.f32	s15, s14, s15
 800144a:	4bb8      	ldr	r3, [pc, #736]	@ (800172c <main+0x7f0>)
 800144c:	edc3 7a00 	vstr	s15, [r3]
		RateRoll -= RateCalibrationRoll;
 8001450:	4bb8      	ldr	r3, [pc, #736]	@ (8001734 <main+0x7f8>)
 8001452:	ed93 7a00 	vldr	s14, [r3]
 8001456:	4bb8      	ldr	r3, [pc, #736]	@ (8001738 <main+0x7fc>)
 8001458:	edd3 7a00 	vldr	s15, [r3]
 800145c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001460:	4bb4      	ldr	r3, [pc, #720]	@ (8001734 <main+0x7f8>)
 8001462:	edc3 7a00 	vstr	s15, [r3]
		RateYaw -= RateCalibrationYaw;
 8001466:	4bb5      	ldr	r3, [pc, #724]	@ (800173c <main+0x800>)
 8001468:	ed93 7a00 	vldr	s14, [r3]
 800146c:	4bb4      	ldr	r3, [pc, #720]	@ (8001740 <main+0x804>)
 800146e:	edd3 7a00 	vldr	s15, [r3]
 8001472:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001476:	4bb1      	ldr	r3, [pc, #708]	@ (800173c <main+0x800>)
 8001478:	edc3 7a00 	vstr	s15, [r3]

    }
    if (mpu6050_acc_flag) {
 800147c:	4bb1      	ldr	r3, [pc, #708]	@ (8001744 <main+0x808>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d018      	beq.n	80014b6 <main+0x57a>
    	mpu6050_acc_flag = 0;
 8001484:	4baf      	ldr	r3, [pc, #700]	@ (8001744 <main+0x808>)
 8001486:	2200      	movs	r2, #0
 8001488:	701a      	strb	r2, [r3, #0]
		AnglePitch -= AngleCalibrationPitch;
 800148a:	4baf      	ldr	r3, [pc, #700]	@ (8001748 <main+0x80c>)
 800148c:	ed93 7a00 	vldr	s14, [r3]
 8001490:	4bae      	ldr	r3, [pc, #696]	@ (800174c <main+0x810>)
 8001492:	edd3 7a00 	vldr	s15, [r3]
 8001496:	ee77 7a67 	vsub.f32	s15, s14, s15
 800149a:	4bab      	ldr	r3, [pc, #684]	@ (8001748 <main+0x80c>)
 800149c:	edc3 7a00 	vstr	s15, [r3]
		AngleRoll -= AngleCalibrationRoll;
 80014a0:	4bab      	ldr	r3, [pc, #684]	@ (8001750 <main+0x814>)
 80014a2:	ed93 7a00 	vldr	s14, [r3]
 80014a6:	4bab      	ldr	r3, [pc, #684]	@ (8001754 <main+0x818>)
 80014a8:	edd3 7a00 	vldr	s15, [r3]
 80014ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014b0:	4ba7      	ldr	r3, [pc, #668]	@ (8001750 <main+0x814>)
 80014b2:	edc3 7a00 	vstr	s15, [r3]
    }


    kalman_1d(&KalmanAngleRoll,  &KalmanUncertaintyAngleRoll,  RateRoll,  AngleRoll,  dt);
 80014b6:	4b9f      	ldr	r3, [pc, #636]	@ (8001734 <main+0x7f8>)
 80014b8:	edd3 7a00 	vldr	s15, [r3]
 80014bc:	4ba4      	ldr	r3, [pc, #656]	@ (8001750 <main+0x814>)
 80014be:	ed93 7a00 	vldr	s14, [r3]
 80014c2:	4ba5      	ldr	r3, [pc, #660]	@ (8001758 <main+0x81c>)
 80014c4:	edd3 6a00 	vldr	s13, [r3]
 80014c8:	eeb0 1a66 	vmov.f32	s2, s13
 80014cc:	eef0 0a47 	vmov.f32	s1, s14
 80014d0:	eeb0 0a67 	vmov.f32	s0, s15
 80014d4:	49a1      	ldr	r1, [pc, #644]	@ (800175c <main+0x820>)
 80014d6:	48a2      	ldr	r0, [pc, #648]	@ (8001760 <main+0x824>)
 80014d8:	f7ff f82c 	bl	8000534 <kalman_1d>
    kalman_1d(&KalmanAnglePitch, &KalmanUncertaintyAnglePitch, RatePitch, AnglePitch, dt);    
 80014dc:	4b93      	ldr	r3, [pc, #588]	@ (800172c <main+0x7f0>)
 80014de:	edd3 7a00 	vldr	s15, [r3]
 80014e2:	4b99      	ldr	r3, [pc, #612]	@ (8001748 <main+0x80c>)
 80014e4:	ed93 7a00 	vldr	s14, [r3]
 80014e8:	4b9b      	ldr	r3, [pc, #620]	@ (8001758 <main+0x81c>)
 80014ea:	edd3 6a00 	vldr	s13, [r3]
 80014ee:	eeb0 1a66 	vmov.f32	s2, s13
 80014f2:	eef0 0a47 	vmov.f32	s1, s14
 80014f6:	eeb0 0a67 	vmov.f32	s0, s15
 80014fa:	499a      	ldr	r1, [pc, #616]	@ (8001764 <main+0x828>)
 80014fc:	489a      	ldr	r0, [pc, #616]	@ (8001768 <main+0x82c>)
 80014fe:	f7ff f819 	bl	8000534 <kalman_1d>
    


    //PID outer Loop
    ErrorAngleRoll = DesiredAngleRoll - KalmanAngleRoll;
 8001502:	4b9a      	ldr	r3, [pc, #616]	@ (800176c <main+0x830>)
 8001504:	ed93 7a00 	vldr	s14, [r3]
 8001508:	4b95      	ldr	r3, [pc, #596]	@ (8001760 <main+0x824>)
 800150a:	edd3 7a00 	vldr	s15, [r3]
 800150e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001512:	4b97      	ldr	r3, [pc, #604]	@ (8001770 <main+0x834>)
 8001514:	edc3 7a00 	vstr	s15, [r3]
    ErrorAnglePitch = DesiredAnglePitch - KalmanAnglePitch;
 8001518:	4b96      	ldr	r3, [pc, #600]	@ (8001774 <main+0x838>)
 800151a:	ed93 7a00 	vldr	s14, [r3]
 800151e:	4b92      	ldr	r3, [pc, #584]	@ (8001768 <main+0x82c>)
 8001520:	edd3 7a00 	vldr	s15, [r3]
 8001524:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001528:	4b93      	ldr	r3, [pc, #588]	@ (8001778 <main+0x83c>)
 800152a:	edc3 7a00 	vstr	s15, [r3]

    pid_equation(ErrorAngleRoll, PAngleRoll, IAngleRoll, DAngleRoll,
 800152e:	4b90      	ldr	r3, [pc, #576]	@ (8001770 <main+0x834>)
 8001530:	edd3 7a00 	vldr	s15, [r3]
 8001534:	4b91      	ldr	r3, [pc, #580]	@ (800177c <main+0x840>)
 8001536:	ed93 7a00 	vldr	s14, [r3]
 800153a:	4b91      	ldr	r3, [pc, #580]	@ (8001780 <main+0x844>)
 800153c:	edd3 6a00 	vldr	s13, [r3]
 8001540:	4b90      	ldr	r3, [pc, #576]	@ (8001784 <main+0x848>)
 8001542:	ed93 6a00 	vldr	s12, [r3]
 8001546:	4b90      	ldr	r3, [pc, #576]	@ (8001788 <main+0x84c>)
 8001548:	edd3 5a00 	vldr	s11, [r3]
 800154c:	4b8f      	ldr	r3, [pc, #572]	@ (800178c <main+0x850>)
 800154e:	ed93 5a00 	vldr	s10, [r3]
 8001552:	4b81      	ldr	r3, [pc, #516]	@ (8001758 <main+0x81c>)
 8001554:	edd3 4a00 	vldr	s9, [r3]
 8001558:	ed9f 4a8d 	vldr	s8, [pc, #564]	@ 8001790 <main+0x854>
 800155c:	eddf 3a8d 	vldr	s7, [pc, #564]	@ 8001794 <main+0x858>
 8001560:	eeb0 3a64 	vmov.f32	s6, s9
 8001564:	eef0 2a45 	vmov.f32	s5, s10
 8001568:	eeb0 2a65 	vmov.f32	s4, s11
 800156c:	eef0 1a46 	vmov.f32	s3, s12
 8001570:	eeb0 1a66 	vmov.f32	s2, s13
 8001574:	eef0 0a47 	vmov.f32	s1, s14
 8001578:	eeb0 0a67 	vmov.f32	s0, s15
 800157c:	f7ff f96a 	bl	8000854 <pid_equation>
                 PrevErrorAngleRoll, PrevItermAngleRoll, dt,
                 ANGLE_I_LIMIT, ANGLE_RATE_LIMIT); 
    DesiredRateRoll = PIDReturn[0];
 8001580:	4b85      	ldr	r3, [pc, #532]	@ (8001798 <main+0x85c>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a85      	ldr	r2, [pc, #532]	@ (800179c <main+0x860>)
 8001586:	6013      	str	r3, [r2, #0]
    PrevErrorAngleRoll = PIDReturn[1];
 8001588:	4b83      	ldr	r3, [pc, #524]	@ (8001798 <main+0x85c>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	4a7e      	ldr	r2, [pc, #504]	@ (8001788 <main+0x84c>)
 800158e:	6013      	str	r3, [r2, #0]
    PrevItermAngleRoll = PIDReturn[2];
 8001590:	4b81      	ldr	r3, [pc, #516]	@ (8001798 <main+0x85c>)
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	4a7d      	ldr	r2, [pc, #500]	@ (800178c <main+0x850>)
 8001596:	6013      	str	r3, [r2, #0]

    pid_equation(ErrorAnglePitch, PAnglePitch, IAnglePitch, DAnglePitch,
 8001598:	4b77      	ldr	r3, [pc, #476]	@ (8001778 <main+0x83c>)
 800159a:	edd3 7a00 	vldr	s15, [r3]
 800159e:	4b80      	ldr	r3, [pc, #512]	@ (80017a0 <main+0x864>)
 80015a0:	ed93 7a00 	vldr	s14, [r3]
 80015a4:	4b7f      	ldr	r3, [pc, #508]	@ (80017a4 <main+0x868>)
 80015a6:	edd3 6a00 	vldr	s13, [r3]
 80015aa:	4b7f      	ldr	r3, [pc, #508]	@ (80017a8 <main+0x86c>)
 80015ac:	ed93 6a00 	vldr	s12, [r3]
 80015b0:	4b7e      	ldr	r3, [pc, #504]	@ (80017ac <main+0x870>)
 80015b2:	edd3 5a00 	vldr	s11, [r3]
 80015b6:	4b7e      	ldr	r3, [pc, #504]	@ (80017b0 <main+0x874>)
 80015b8:	ed93 5a00 	vldr	s10, [r3]
 80015bc:	4b66      	ldr	r3, [pc, #408]	@ (8001758 <main+0x81c>)
 80015be:	edd3 4a00 	vldr	s9, [r3]
 80015c2:	ed9f 4a73 	vldr	s8, [pc, #460]	@ 8001790 <main+0x854>
 80015c6:	eddf 3a73 	vldr	s7, [pc, #460]	@ 8001794 <main+0x858>
 80015ca:	eeb0 3a64 	vmov.f32	s6, s9
 80015ce:	eef0 2a45 	vmov.f32	s5, s10
 80015d2:	eeb0 2a65 	vmov.f32	s4, s11
 80015d6:	eef0 1a46 	vmov.f32	s3, s12
 80015da:	eeb0 1a66 	vmov.f32	s2, s13
 80015de:	eef0 0a47 	vmov.f32	s1, s14
 80015e2:	eeb0 0a67 	vmov.f32	s0, s15
 80015e6:	f7ff f935 	bl	8000854 <pid_equation>
                 PrevErrorAnglePitch, PrevItermAnglePitch, dt,
                 ANGLE_I_LIMIT, ANGLE_RATE_LIMIT); 
    DesiredRatePitch = PIDReturn[0];
 80015ea:	4b6b      	ldr	r3, [pc, #428]	@ (8001798 <main+0x85c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a71      	ldr	r2, [pc, #452]	@ (80017b4 <main+0x878>)
 80015f0:	6013      	str	r3, [r2, #0]
    PrevErrorAnglePitch = PIDReturn[1];
 80015f2:	4b69      	ldr	r3, [pc, #420]	@ (8001798 <main+0x85c>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	4a6d      	ldr	r2, [pc, #436]	@ (80017ac <main+0x870>)
 80015f8:	6013      	str	r3, [r2, #0]
    PrevItermAnglePitch = PIDReturn[2];
 80015fa:	4b67      	ldr	r3, [pc, #412]	@ (8001798 <main+0x85c>)
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	4a6c      	ldr	r2, [pc, #432]	@ (80017b0 <main+0x874>)
 8001600:	6013      	str	r3, [r2, #0]

    //PID inner Loop
    ErrorRateRoll = DesiredRateRoll - RateRoll;
 8001602:	4b66      	ldr	r3, [pc, #408]	@ (800179c <main+0x860>)
 8001604:	ed93 7a00 	vldr	s14, [r3]
 8001608:	4b4a      	ldr	r3, [pc, #296]	@ (8001734 <main+0x7f8>)
 800160a:	edd3 7a00 	vldr	s15, [r3]
 800160e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001612:	4b69      	ldr	r3, [pc, #420]	@ (80017b8 <main+0x87c>)
 8001614:	edc3 7a00 	vstr	s15, [r3]
    ErrorRatePitch = DesiredRatePitch - RatePitch;
 8001618:	4b66      	ldr	r3, [pc, #408]	@ (80017b4 <main+0x878>)
 800161a:	ed93 7a00 	vldr	s14, [r3]
 800161e:	4b43      	ldr	r3, [pc, #268]	@ (800172c <main+0x7f0>)
 8001620:	edd3 7a00 	vldr	s15, [r3]
 8001624:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001628:	4b64      	ldr	r3, [pc, #400]	@ (80017bc <main+0x880>)
 800162a:	edc3 7a00 	vstr	s15, [r3]
    ErrorRateYaw = DesiredRateYaw - RateYaw;
 800162e:	4b64      	ldr	r3, [pc, #400]	@ (80017c0 <main+0x884>)
 8001630:	ed93 7a00 	vldr	s14, [r3]
 8001634:	4b41      	ldr	r3, [pc, #260]	@ (800173c <main+0x800>)
 8001636:	edd3 7a00 	vldr	s15, [r3]
 800163a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800163e:	4b61      	ldr	r3, [pc, #388]	@ (80017c4 <main+0x888>)
 8001640:	edc3 7a00 	vstr	s15, [r3]
    
    pid_equation(ErrorRateRoll, PRateRoll, IRateRoll, DRateRoll,
 8001644:	4b5c      	ldr	r3, [pc, #368]	@ (80017b8 <main+0x87c>)
 8001646:	edd3 7a00 	vldr	s15, [r3]
 800164a:	4b5f      	ldr	r3, [pc, #380]	@ (80017c8 <main+0x88c>)
 800164c:	ed93 7a00 	vldr	s14, [r3]
 8001650:	4b5e      	ldr	r3, [pc, #376]	@ (80017cc <main+0x890>)
 8001652:	edd3 6a00 	vldr	s13, [r3]
 8001656:	4b5e      	ldr	r3, [pc, #376]	@ (80017d0 <main+0x894>)
 8001658:	ed93 6a00 	vldr	s12, [r3]
 800165c:	4b5d      	ldr	r3, [pc, #372]	@ (80017d4 <main+0x898>)
 800165e:	edd3 5a00 	vldr	s11, [r3]
 8001662:	4b5d      	ldr	r3, [pc, #372]	@ (80017d8 <main+0x89c>)
 8001664:	ed93 5a00 	vldr	s10, [r3]
 8001668:	4b3b      	ldr	r3, [pc, #236]	@ (8001758 <main+0x81c>)
 800166a:	edd3 4a00 	vldr	s9, [r3]
 800166e:	eeb3 4a04 	vmov.f32	s8, #52	@ 0x41a00000  20.0
 8001672:	eef3 3a04 	vmov.f32	s7, #52	@ 0x41a00000  20.0
 8001676:	eeb0 3a64 	vmov.f32	s6, s9
 800167a:	eef0 2a45 	vmov.f32	s5, s10
 800167e:	eeb0 2a65 	vmov.f32	s4, s11
 8001682:	eef0 1a46 	vmov.f32	s3, s12
 8001686:	eeb0 1a66 	vmov.f32	s2, s13
 800168a:	eef0 0a47 	vmov.f32	s1, s14
 800168e:	eeb0 0a67 	vmov.f32	s0, s15
 8001692:	f7ff f8df 	bl	8000854 <pid_equation>
                 PrevErrorRateRoll, PrevItermRateRoll, dt,
                 RATE_I_LIMIT, RATE_OUT_LIMIT); 
    InputRoll = PIDReturn[0];
 8001696:	4b40      	ldr	r3, [pc, #256]	@ (8001798 <main+0x85c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a50      	ldr	r2, [pc, #320]	@ (80017dc <main+0x8a0>)
 800169c:	6013      	str	r3, [r2, #0]
    PrevErrorRateRoll = PIDReturn[1];
 800169e:	4b3e      	ldr	r3, [pc, #248]	@ (8001798 <main+0x85c>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	4a4c      	ldr	r2, [pc, #304]	@ (80017d4 <main+0x898>)
 80016a4:	6013      	str	r3, [r2, #0]
    PrevItermRateRoll = PIDReturn[2];
 80016a6:	4b3c      	ldr	r3, [pc, #240]	@ (8001798 <main+0x85c>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	4a4b      	ldr	r2, [pc, #300]	@ (80017d8 <main+0x89c>)
 80016ac:	6013      	str	r3, [r2, #0]

    pid_equation(ErrorRatePitch, PRatePitch, IRatePitch, DRatePitch,
 80016ae:	4b43      	ldr	r3, [pc, #268]	@ (80017bc <main+0x880>)
 80016b0:	edd3 7a00 	vldr	s15, [r3]
 80016b4:	4b4a      	ldr	r3, [pc, #296]	@ (80017e0 <main+0x8a4>)
 80016b6:	ed93 7a00 	vldr	s14, [r3]
 80016ba:	4b4a      	ldr	r3, [pc, #296]	@ (80017e4 <main+0x8a8>)
 80016bc:	edd3 6a00 	vldr	s13, [r3]
 80016c0:	4b49      	ldr	r3, [pc, #292]	@ (80017e8 <main+0x8ac>)
 80016c2:	ed93 6a00 	vldr	s12, [r3]
 80016c6:	4b49      	ldr	r3, [pc, #292]	@ (80017ec <main+0x8b0>)
 80016c8:	edd3 5a00 	vldr	s11, [r3]
 80016cc:	4b48      	ldr	r3, [pc, #288]	@ (80017f0 <main+0x8b4>)
 80016ce:	ed93 5a00 	vldr	s10, [r3]
 80016d2:	4b21      	ldr	r3, [pc, #132]	@ (8001758 <main+0x81c>)
 80016d4:	edd3 4a00 	vldr	s9, [r3]
 80016d8:	eeb3 4a04 	vmov.f32	s8, #52	@ 0x41a00000  20.0
 80016dc:	eef3 3a04 	vmov.f32	s7, #52	@ 0x41a00000  20.0
 80016e0:	eeb0 3a64 	vmov.f32	s6, s9
 80016e4:	eef0 2a45 	vmov.f32	s5, s10
 80016e8:	eeb0 2a65 	vmov.f32	s4, s11
 80016ec:	eef0 1a46 	vmov.f32	s3, s12
 80016f0:	eeb0 1a66 	vmov.f32	s2, s13
 80016f4:	eef0 0a47 	vmov.f32	s1, s14
 80016f8:	eeb0 0a67 	vmov.f32	s0, s15
 80016fc:	f7ff f8aa 	bl	8000854 <pid_equation>
                 PrevErrorRatePitch, PrevItermRatePitch, dt,
                 RATE_I_LIMIT, RATE_OUT_LIMIT); 
    InputPitch = PIDReturn[0];
 8001700:	4b25      	ldr	r3, [pc, #148]	@ (8001798 <main+0x85c>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a3b      	ldr	r2, [pc, #236]	@ (80017f4 <main+0x8b8>)
 8001706:	6013      	str	r3, [r2, #0]
    PrevErrorRatePitch = PIDReturn[1];
 8001708:	4b23      	ldr	r3, [pc, #140]	@ (8001798 <main+0x85c>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	4a37      	ldr	r2, [pc, #220]	@ (80017ec <main+0x8b0>)
 800170e:	6013      	str	r3, [r2, #0]
    PrevItermRatePitch = PIDReturn[2];
 8001710:	4b21      	ldr	r3, [pc, #132]	@ (8001798 <main+0x85c>)
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	4a36      	ldr	r2, [pc, #216]	@ (80017f0 <main+0x8b4>)
 8001716:	6013      	str	r3, [r2, #0]

    pid_equation(ErrorRateYaw, PRateYaw, IRateYaw, DRateYaw,
 8001718:	4b2a      	ldr	r3, [pc, #168]	@ (80017c4 <main+0x888>)
 800171a:	edd3 7a00 	vldr	s15, [r3]
 800171e:	4b36      	ldr	r3, [pc, #216]	@ (80017f8 <main+0x8bc>)
 8001720:	ed93 7a00 	vldr	s14, [r3]
 8001724:	e06a      	b.n	80017fc <main+0x8c0>
 8001726:	bf00      	nop
 8001728:	20000274 	.word	0x20000274
 800172c:	2000027c 	.word	0x2000027c
 8001730:	20000288 	.word	0x20000288
 8001734:	20000278 	.word	0x20000278
 8001738:	20000284 	.word	0x20000284
 800173c:	20000280 	.word	0x20000280
 8001740:	2000028c 	.word	0x2000028c
 8001744:	2000029a 	.word	0x2000029a
 8001748:	200002ac 	.word	0x200002ac
 800174c:	200002b4 	.word	0x200002b4
 8001750:	200002a8 	.word	0x200002a8
 8001754:	200002b0 	.word	0x200002b0
 8001758:	20000000 	.word	0x20000000
 800175c:	20000004 	.word	0x20000004
 8001760:	200002b8 	.word	0x200002b8
 8001764:	20000008 	.word	0x20000008
 8001768:	200002bc 	.word	0x200002bc
 800176c:	20000320 	.word	0x20000320
 8001770:	20000328 	.word	0x20000328
 8001774:	20000324 	.word	0x20000324
 8001778:	2000032c 	.word	0x2000032c
 800177c:	20000018 	.word	0x20000018
 8001780:	20000340 	.word	0x20000340
 8001784:	20000348 	.word	0x20000348
 8001788:	20000330 	.word	0x20000330
 800178c:	20000338 	.word	0x20000338
 8001790:	437a0000 	.word	0x437a0000
 8001794:	42c80000 	.word	0x42c80000
 8001798:	200002c0 	.word	0x200002c0
 800179c:	200002cc 	.word	0x200002cc
 80017a0:	2000001c 	.word	0x2000001c
 80017a4:	20000344 	.word	0x20000344
 80017a8:	2000034c 	.word	0x2000034c
 80017ac:	20000334 	.word	0x20000334
 80017b0:	2000033c 	.word	0x2000033c
 80017b4:	200002d0 	.word	0x200002d0
 80017b8:	200002d8 	.word	0x200002d8
 80017bc:	200002dc 	.word	0x200002dc
 80017c0:	200002d4 	.word	0x200002d4
 80017c4:	200002e0 	.word	0x200002e0
 80017c8:	2000000c 	.word	0x2000000c
 80017cc:	20000308 	.word	0x20000308
 80017d0:	20000314 	.word	0x20000314
 80017d4:	200002f0 	.word	0x200002f0
 80017d8:	200002fc 	.word	0x200002fc
 80017dc:	200002e4 	.word	0x200002e4
 80017e0:	20000010 	.word	0x20000010
 80017e4:	2000030c 	.word	0x2000030c
 80017e8:	20000318 	.word	0x20000318
 80017ec:	200002f4 	.word	0x200002f4
 80017f0:	20000300 	.word	0x20000300
 80017f4:	200002e8 	.word	0x200002e8
 80017f8:	20000014 	.word	0x20000014
 80017fc:	4b65      	ldr	r3, [pc, #404]	@ (8001994 <main+0xa58>)
 80017fe:	edd3 6a00 	vldr	s13, [r3]
 8001802:	4b65      	ldr	r3, [pc, #404]	@ (8001998 <main+0xa5c>)
 8001804:	ed93 6a00 	vldr	s12, [r3]
 8001808:	4b64      	ldr	r3, [pc, #400]	@ (800199c <main+0xa60>)
 800180a:	edd3 5a00 	vldr	s11, [r3]
 800180e:	4b64      	ldr	r3, [pc, #400]	@ (80019a0 <main+0xa64>)
 8001810:	ed93 5a00 	vldr	s10, [r3]
 8001814:	4b63      	ldr	r3, [pc, #396]	@ (80019a4 <main+0xa68>)
 8001816:	edd3 4a00 	vldr	s9, [r3]
 800181a:	eeb3 4a04 	vmov.f32	s8, #52	@ 0x41a00000  20.0
 800181e:	eef3 3a04 	vmov.f32	s7, #52	@ 0x41a00000  20.0
 8001822:	eeb0 3a64 	vmov.f32	s6, s9
 8001826:	eef0 2a45 	vmov.f32	s5, s10
 800182a:	eeb0 2a65 	vmov.f32	s4, s11
 800182e:	eef0 1a46 	vmov.f32	s3, s12
 8001832:	eeb0 1a66 	vmov.f32	s2, s13
 8001836:	eef0 0a47 	vmov.f32	s1, s14
 800183a:	eeb0 0a67 	vmov.f32	s0, s15
 800183e:	f7ff f809 	bl	8000854 <pid_equation>
                 PrevErrorRateYaw, PrevItermRateYaw, dt,
                 RATE_I_LIMIT, RATE_OUT_LIMIT); 
    InputYaw = PIDReturn[0];
 8001842:	4b59      	ldr	r3, [pc, #356]	@ (80019a8 <main+0xa6c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a59      	ldr	r2, [pc, #356]	@ (80019ac <main+0xa70>)
 8001848:	6013      	str	r3, [r2, #0]
    PrevErrorRateYaw = PIDReturn[1];
 800184a:	4b57      	ldr	r3, [pc, #348]	@ (80019a8 <main+0xa6c>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	4a53      	ldr	r2, [pc, #332]	@ (800199c <main+0xa60>)
 8001850:	6013      	str	r3, [r2, #0]
    PrevItermRateYaw = PIDReturn[2];
 8001852:	4b55      	ldr	r3, [pc, #340]	@ (80019a8 <main+0xa6c>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	4a52      	ldr	r2, [pc, #328]	@ (80019a0 <main+0xa64>)
 8001858:	6013      	str	r3, [r2, #0]
    throttle_channel_value = 60;
 800185a:	4b55      	ldr	r3, [pc, #340]	@ (80019b0 <main+0xa74>)
 800185c:	223c      	movs	r2, #60	@ 0x3c
 800185e:	801a      	strh	r2, [r3, #0]
    m1 = pulse_saturate((uint16_t)(throttle_channel_value - InputRoll - InputPitch - InputYaw));
 8001860:	4b53      	ldr	r3, [pc, #332]	@ (80019b0 <main+0xa74>)
 8001862:	881b      	ldrh	r3, [r3, #0]
 8001864:	b29b      	uxth	r3, r3
 8001866:	ee07 3a90 	vmov	s15, r3
 800186a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800186e:	4b51      	ldr	r3, [pc, #324]	@ (80019b4 <main+0xa78>)
 8001870:	edd3 7a00 	vldr	s15, [r3]
 8001874:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001878:	4b4f      	ldr	r3, [pc, #316]	@ (80019b8 <main+0xa7c>)
 800187a:	edd3 7a00 	vldr	s15, [r3]
 800187e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001882:	4b4a      	ldr	r3, [pc, #296]	@ (80019ac <main+0xa70>)
 8001884:	edd3 7a00 	vldr	s15, [r3]
 8001888:	ee77 7a67 	vsub.f32	s15, s14, s15
 800188c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001890:	ee17 3a90 	vmov	r3, s15
 8001894:	b29b      	uxth	r3, r3
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff f91c 	bl	8000ad4 <pulse_saturate>
 800189c:	4603      	mov	r3, r0
 800189e:	461a      	mov	r2, r3
 80018a0:	4b46      	ldr	r3, [pc, #280]	@ (80019bc <main+0xa80>)
 80018a2:	801a      	strh	r2, [r3, #0]
    m2 = pulse_saturate((uint16_t)(throttle_channel_value - InputRoll + InputPitch + InputYaw));
 80018a4:	4b42      	ldr	r3, [pc, #264]	@ (80019b0 <main+0xa74>)
 80018a6:	881b      	ldrh	r3, [r3, #0]
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	ee07 3a90 	vmov	s15, r3
 80018ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018b2:	4b40      	ldr	r3, [pc, #256]	@ (80019b4 <main+0xa78>)
 80018b4:	edd3 7a00 	vldr	s15, [r3]
 80018b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018bc:	4b3e      	ldr	r3, [pc, #248]	@ (80019b8 <main+0xa7c>)
 80018be:	edd3 7a00 	vldr	s15, [r3]
 80018c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018c6:	4b39      	ldr	r3, [pc, #228]	@ (80019ac <main+0xa70>)
 80018c8:	edd3 7a00 	vldr	s15, [r3]
 80018cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018d4:	ee17 3a90 	vmov	r3, s15
 80018d8:	b29b      	uxth	r3, r3
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff f8fa 	bl	8000ad4 <pulse_saturate>
 80018e0:	4603      	mov	r3, r0
 80018e2:	461a      	mov	r2, r3
 80018e4:	4b36      	ldr	r3, [pc, #216]	@ (80019c0 <main+0xa84>)
 80018e6:	801a      	strh	r2, [r3, #0]
    m3 = pulse_saturate((uint16_t)(throttle_channel_value + InputRoll + InputPitch - InputYaw));
 80018e8:	4b31      	ldr	r3, [pc, #196]	@ (80019b0 <main+0xa74>)
 80018ea:	881b      	ldrh	r3, [r3, #0]
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	ee07 3a90 	vmov	s15, r3
 80018f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018f6:	4b2f      	ldr	r3, [pc, #188]	@ (80019b4 <main+0xa78>)
 80018f8:	edd3 7a00 	vldr	s15, [r3]
 80018fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001900:	4b2d      	ldr	r3, [pc, #180]	@ (80019b8 <main+0xa7c>)
 8001902:	edd3 7a00 	vldr	s15, [r3]
 8001906:	ee37 7a27 	vadd.f32	s14, s14, s15
 800190a:	4b28      	ldr	r3, [pc, #160]	@ (80019ac <main+0xa70>)
 800190c:	edd3 7a00 	vldr	s15, [r3]
 8001910:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001914:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001918:	ee17 3a90 	vmov	r3, s15
 800191c:	b29b      	uxth	r3, r3
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff f8d8 	bl	8000ad4 <pulse_saturate>
 8001924:	4603      	mov	r3, r0
 8001926:	461a      	mov	r2, r3
 8001928:	4b26      	ldr	r3, [pc, #152]	@ (80019c4 <main+0xa88>)
 800192a:	801a      	strh	r2, [r3, #0]
    m4 = pulse_saturate((uint16_t)(throttle_channel_value + InputRoll - InputPitch + InputYaw));
 800192c:	4b20      	ldr	r3, [pc, #128]	@ (80019b0 <main+0xa74>)
 800192e:	881b      	ldrh	r3, [r3, #0]
 8001930:	b29b      	uxth	r3, r3
 8001932:	ee07 3a90 	vmov	s15, r3
 8001936:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800193a:	4b1e      	ldr	r3, [pc, #120]	@ (80019b4 <main+0xa78>)
 800193c:	edd3 7a00 	vldr	s15, [r3]
 8001940:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001944:	4b1c      	ldr	r3, [pc, #112]	@ (80019b8 <main+0xa7c>)
 8001946:	edd3 7a00 	vldr	s15, [r3]
 800194a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800194e:	4b17      	ldr	r3, [pc, #92]	@ (80019ac <main+0xa70>)
 8001950:	edd3 7a00 	vldr	s15, [r3]
 8001954:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001958:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800195c:	ee17 3a90 	vmov	r3, s15
 8001960:	b29b      	uxth	r3, r3
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff f8b6 	bl	8000ad4 <pulse_saturate>
 8001968:	4603      	mov	r3, r0
 800196a:	461a      	mov	r2, r3
 800196c:	4b16      	ldr	r3, [pc, #88]	@ (80019c8 <main+0xa8c>)
 800196e:	801a      	strh	r2, [r3, #0]

    //gui cho dong co power (us)
    TIM3->CCR1 = m1;
 8001970:	4b12      	ldr	r3, [pc, #72]	@ (80019bc <main+0xa80>)
 8001972:	881a      	ldrh	r2, [r3, #0]
 8001974:	4b15      	ldr	r3, [pc, #84]	@ (80019cc <main+0xa90>)
 8001976:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3->CCR2 = m2;
 8001978:	4b11      	ldr	r3, [pc, #68]	@ (80019c0 <main+0xa84>)
 800197a:	881a      	ldrh	r2, [r3, #0]
 800197c:	4b13      	ldr	r3, [pc, #76]	@ (80019cc <main+0xa90>)
 800197e:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3->CCR3 = m3;
 8001980:	4b10      	ldr	r3, [pc, #64]	@ (80019c4 <main+0xa88>)
 8001982:	881a      	ldrh	r2, [r3, #0]
 8001984:	4b11      	ldr	r3, [pc, #68]	@ (80019cc <main+0xa90>)
 8001986:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM3->CCR4 = m4;
 8001988:	4b0f      	ldr	r3, [pc, #60]	@ (80019c8 <main+0xa8c>)
 800198a:	881a      	ldrh	r2, [r3, #0]
 800198c:	4b0f      	ldr	r3, [pc, #60]	@ (80019cc <main+0xa90>)
 800198e:	641a      	str	r2, [r3, #64]	@ 0x40
  {
 8001990:	e411      	b.n	80011b6 <main+0x27a>
 8001992:	bf00      	nop
 8001994:	20000310 	.word	0x20000310
 8001998:	2000031c 	.word	0x2000031c
 800199c:	200002f8 	.word	0x200002f8
 80019a0:	20000304 	.word	0x20000304
 80019a4:	20000000 	.word	0x20000000
 80019a8:	200002c0 	.word	0x200002c0
 80019ac:	200002ec 	.word	0x200002ec
 80019b0:	20000396 	.word	0x20000396
 80019b4:	200002e4 	.word	0x200002e4
 80019b8:	200002e8 	.word	0x200002e8
 80019bc:	20000350 	.word	0x20000350
 80019c0:	20000352 	.word	0x20000352
 80019c4:	20000354 	.word	0x20000354
 80019c8:	20000356 	.word	0x20000356
 80019cc:	40000400 	.word	0x40000400

080019d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b094      	sub	sp, #80	@ 0x50
 80019d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019d6:	f107 0320 	add.w	r3, r7, #32
 80019da:	2230      	movs	r2, #48	@ 0x30
 80019dc:	2100      	movs	r1, #0
 80019de:	4618      	mov	r0, r3
 80019e0:	f004 ff6e 	bl	80068c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019e4:	f107 030c 	add.w	r3, r7, #12
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
 80019f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019f4:	2300      	movs	r3, #0
 80019f6:	60bb      	str	r3, [r7, #8]
 80019f8:	4b27      	ldr	r3, [pc, #156]	@ (8001a98 <SystemClock_Config+0xc8>)
 80019fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fc:	4a26      	ldr	r2, [pc, #152]	@ (8001a98 <SystemClock_Config+0xc8>)
 80019fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a02:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a04:	4b24      	ldr	r3, [pc, #144]	@ (8001a98 <SystemClock_Config+0xc8>)
 8001a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a0c:	60bb      	str	r3, [r7, #8]
 8001a0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a10:	2300      	movs	r3, #0
 8001a12:	607b      	str	r3, [r7, #4]
 8001a14:	4b21      	ldr	r3, [pc, #132]	@ (8001a9c <SystemClock_Config+0xcc>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a20      	ldr	r2, [pc, #128]	@ (8001a9c <SystemClock_Config+0xcc>)
 8001a1a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001a1e:	6013      	str	r3, [r2, #0]
 8001a20:	4b1e      	ldr	r3, [pc, #120]	@ (8001a9c <SystemClock_Config+0xcc>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001a28:	607b      	str	r3, [r7, #4]
 8001a2a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a30:	2301      	movs	r3, #1
 8001a32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a34:	2310      	movs	r3, #16
 8001a36:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a40:	2308      	movs	r3, #8
 8001a42:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001a44:	2364      	movs	r3, #100	@ 0x64
 8001a46:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a4c:	2304      	movs	r3, #4
 8001a4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a50:	f107 0320 	add.w	r3, r7, #32
 8001a54:	4618      	mov	r0, r3
 8001a56:	f002 fb63 	bl	8004120 <HAL_RCC_OscConfig>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a60:	f000 f9ae 	bl	8001dc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a64:	230f      	movs	r3, #15
 8001a66:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a74:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a76:	2300      	movs	r3, #0
 8001a78:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001a7a:	f107 030c 	add.w	r3, r7, #12
 8001a7e:	2103      	movs	r1, #3
 8001a80:	4618      	mov	r0, r3
 8001a82:	f002 fdc5 	bl	8004610 <HAL_RCC_ClockConfig>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001a8c:	f000 f998 	bl	8001dc0 <Error_Handler>
  }
}
 8001a90:	bf00      	nop
 8001a92:	3750      	adds	r7, #80	@ 0x50
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	40007000 	.word	0x40007000

08001aa0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001aa4:	4b12      	ldr	r3, [pc, #72]	@ (8001af0 <MX_I2C1_Init+0x50>)
 8001aa6:	4a13      	ldr	r2, [pc, #76]	@ (8001af4 <MX_I2C1_Init+0x54>)
 8001aa8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001aaa:	4b11      	ldr	r3, [pc, #68]	@ (8001af0 <MX_I2C1_Init+0x50>)
 8001aac:	4a12      	ldr	r2, [pc, #72]	@ (8001af8 <MX_I2C1_Init+0x58>)
 8001aae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ab0:	4b0f      	ldr	r3, [pc, #60]	@ (8001af0 <MX_I2C1_Init+0x50>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8001af0 <MX_I2C1_Init+0x50>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001abc:	4b0c      	ldr	r3, [pc, #48]	@ (8001af0 <MX_I2C1_Init+0x50>)
 8001abe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ac2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8001af0 <MX_I2C1_Init+0x50>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001aca:	4b09      	ldr	r3, [pc, #36]	@ (8001af0 <MX_I2C1_Init+0x50>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ad0:	4b07      	ldr	r3, [pc, #28]	@ (8001af0 <MX_I2C1_Init+0x50>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ad6:	4b06      	ldr	r3, [pc, #24]	@ (8001af0 <MX_I2C1_Init+0x50>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001adc:	4804      	ldr	r0, [pc, #16]	@ (8001af0 <MX_I2C1_Init+0x50>)
 8001ade:	f001 fafb 	bl	80030d8 <HAL_I2C_Init>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ae8:	f000 f96a 	bl	8001dc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001aec:	bf00      	nop
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	2000009c 	.word	0x2000009c
 8001af4:	40005400 	.word	0x40005400
 8001af8:	000186a0 	.word	0x000186a0

08001afc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b08e      	sub	sp, #56	@ 0x38
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b02:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	605a      	str	r2, [r3, #4]
 8001b0c:	609a      	str	r2, [r3, #8]
 8001b0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b10:	f107 0320 	add.w	r3, r7, #32
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b1a:	1d3b      	adds	r3, r7, #4
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	609a      	str	r2, [r3, #8]
 8001b24:	60da      	str	r2, [r3, #12]
 8001b26:	611a      	str	r2, [r3, #16]
 8001b28:	615a      	str	r2, [r3, #20]
 8001b2a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b2c:	4b3d      	ldr	r3, [pc, #244]	@ (8001c24 <MX_TIM3_Init+0x128>)
 8001b2e:	4a3e      	ldr	r2, [pc, #248]	@ (8001c28 <MX_TIM3_Init+0x12c>)
 8001b30:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2000-1;
 8001b32:	4b3c      	ldr	r3, [pc, #240]	@ (8001c24 <MX_TIM3_Init+0x128>)
 8001b34:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001b38:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b3a:	4b3a      	ldr	r3, [pc, #232]	@ (8001c24 <MX_TIM3_Init+0x128>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001b40:	4b38      	ldr	r3, [pc, #224]	@ (8001c24 <MX_TIM3_Init+0x128>)
 8001b42:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b46:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b48:	4b36      	ldr	r3, [pc, #216]	@ (8001c24 <MX_TIM3_Init+0x128>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b4e:	4b35      	ldr	r3, [pc, #212]	@ (8001c24 <MX_TIM3_Init+0x128>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b54:	4833      	ldr	r0, [pc, #204]	@ (8001c24 <MX_TIM3_Init+0x128>)
 8001b56:	f002 ff3b 	bl	80049d0 <HAL_TIM_Base_Init>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001b60:	f000 f92e 	bl	8001dc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b68:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b6a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b6e:	4619      	mov	r1, r3
 8001b70:	482c      	ldr	r0, [pc, #176]	@ (8001c24 <MX_TIM3_Init+0x128>)
 8001b72:	f003 f947 	bl	8004e04 <HAL_TIM_ConfigClockSource>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001b7c:	f000 f920 	bl	8001dc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001b80:	4828      	ldr	r0, [pc, #160]	@ (8001c24 <MX_TIM3_Init+0x128>)
 8001b82:	f002 ff74 	bl	8004a6e <HAL_TIM_PWM_Init>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001b8c:	f000 f918 	bl	8001dc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b90:	2300      	movs	r3, #0
 8001b92:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b94:	2300      	movs	r3, #0
 8001b96:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b98:	f107 0320 	add.w	r3, r7, #32
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4821      	ldr	r0, [pc, #132]	@ (8001c24 <MX_TIM3_Init+0x128>)
 8001ba0:	f003 fcca 	bl	8005538 <HAL_TIMEx_MasterConfigSynchronization>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001baa:	f000 f909 	bl	8001dc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bae:	2360      	movs	r3, #96	@ 0x60
 8001bb0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 8001bb2:	2332      	movs	r3, #50	@ 0x32
 8001bb4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bbe:	1d3b      	adds	r3, r7, #4
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4817      	ldr	r0, [pc, #92]	@ (8001c24 <MX_TIM3_Init+0x128>)
 8001bc6:	f003 f85b 	bl	8004c80 <HAL_TIM_PWM_ConfigChannel>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001bd0:	f000 f8f6 	bl	8001dc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001bd4:	1d3b      	adds	r3, r7, #4
 8001bd6:	2204      	movs	r2, #4
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4812      	ldr	r0, [pc, #72]	@ (8001c24 <MX_TIM3_Init+0x128>)
 8001bdc:	f003 f850 	bl	8004c80 <HAL_TIM_PWM_ConfigChannel>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001be6:	f000 f8eb 	bl	8001dc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001bea:	1d3b      	adds	r3, r7, #4
 8001bec:	2208      	movs	r2, #8
 8001bee:	4619      	mov	r1, r3
 8001bf0:	480c      	ldr	r0, [pc, #48]	@ (8001c24 <MX_TIM3_Init+0x128>)
 8001bf2:	f003 f845 	bl	8004c80 <HAL_TIM_PWM_ConfigChannel>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001bfc:	f000 f8e0 	bl	8001dc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c00:	1d3b      	adds	r3, r7, #4
 8001c02:	220c      	movs	r2, #12
 8001c04:	4619      	mov	r1, r3
 8001c06:	4807      	ldr	r0, [pc, #28]	@ (8001c24 <MX_TIM3_Init+0x128>)
 8001c08:	f003 f83a 	bl	8004c80 <HAL_TIM_PWM_ConfigChannel>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8001c12:	f000 f8d5 	bl	8001dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001c16:	4803      	ldr	r0, [pc, #12]	@ (8001c24 <MX_TIM3_Init+0x128>)
 8001c18:	f000 f96a 	bl	8001ef0 <HAL_TIM_MspPostInit>

}
 8001c1c:	bf00      	nop
 8001c1e:	3738      	adds	r7, #56	@ 0x38
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	200000f0 	.word	0x200000f0
 8001c28:	40000400 	.word	0x40000400

08001c2c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c30:	4b11      	ldr	r3, [pc, #68]	@ (8001c78 <MX_USART1_UART_Init+0x4c>)
 8001c32:	4a12      	ldr	r2, [pc, #72]	@ (8001c7c <MX_USART1_UART_Init+0x50>)
 8001c34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c36:	4b10      	ldr	r3, [pc, #64]	@ (8001c78 <MX_USART1_UART_Init+0x4c>)
 8001c38:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c78 <MX_USART1_UART_Init+0x4c>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c44:	4b0c      	ldr	r3, [pc, #48]	@ (8001c78 <MX_USART1_UART_Init+0x4c>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c78 <MX_USART1_UART_Init+0x4c>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c50:	4b09      	ldr	r3, [pc, #36]	@ (8001c78 <MX_USART1_UART_Init+0x4c>)
 8001c52:	220c      	movs	r2, #12
 8001c54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c56:	4b08      	ldr	r3, [pc, #32]	@ (8001c78 <MX_USART1_UART_Init+0x4c>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c5c:	4b06      	ldr	r3, [pc, #24]	@ (8001c78 <MX_USART1_UART_Init+0x4c>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c62:	4805      	ldr	r0, [pc, #20]	@ (8001c78 <MX_USART1_UART_Init+0x4c>)
 8001c64:	f003 fcd6 	bl	8005614 <HAL_UART_Init>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001c6e:	f000 f8a7 	bl	8001dc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	20000138 	.word	0x20000138
 8001c7c:	40011000 	.word	0x40011000

08001c80 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c84:	4b12      	ldr	r3, [pc, #72]	@ (8001cd0 <MX_USART2_UART_Init+0x50>)
 8001c86:	4a13      	ldr	r2, [pc, #76]	@ (8001cd4 <MX_USART2_UART_Init+0x54>)
 8001c88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 100000;
 8001c8a:	4b11      	ldr	r3, [pc, #68]	@ (8001cd0 <MX_USART2_UART_Init+0x50>)
 8001c8c:	4a12      	ldr	r2, [pc, #72]	@ (8001cd8 <MX_USART2_UART_Init+0x58>)
 8001c8e:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001c90:	4b0f      	ldr	r3, [pc, #60]	@ (8001cd0 <MX_USART2_UART_Init+0x50>)
 8001c92:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 8001c98:	4b0d      	ldr	r3, [pc, #52]	@ (8001cd0 <MX_USART2_UART_Init+0x50>)
 8001c9a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c9e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd0 <MX_USART2_UART_Init+0x50>)
 8001ca2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ca6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ca8:	4b09      	ldr	r3, [pc, #36]	@ (8001cd0 <MX_USART2_UART_Init+0x50>)
 8001caa:	220c      	movs	r2, #12
 8001cac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cae:	4b08      	ldr	r3, [pc, #32]	@ (8001cd0 <MX_USART2_UART_Init+0x50>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cb4:	4b06      	ldr	r3, [pc, #24]	@ (8001cd0 <MX_USART2_UART_Init+0x50>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cba:	4805      	ldr	r0, [pc, #20]	@ (8001cd0 <MX_USART2_UART_Init+0x50>)
 8001cbc:	f003 fcaa 	bl	8005614 <HAL_UART_Init>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8001cc6:	f000 f87b 	bl	8001dc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	20000180 	.word	0x20000180
 8001cd4:	40004400 	.word	0x40004400
 8001cd8:	000186a0 	.word	0x000186a0

08001cdc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001ce0:	4b11      	ldr	r3, [pc, #68]	@ (8001d28 <MX_USART6_UART_Init+0x4c>)
 8001ce2:	4a12      	ldr	r2, [pc, #72]	@ (8001d2c <MX_USART6_UART_Init+0x50>)
 8001ce4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001ce6:	4b10      	ldr	r3, [pc, #64]	@ (8001d28 <MX_USART6_UART_Init+0x4c>)
 8001ce8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001cec:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001cee:	4b0e      	ldr	r3, [pc, #56]	@ (8001d28 <MX_USART6_UART_Init+0x4c>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8001d28 <MX_USART6_UART_Init+0x4c>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8001d28 <MX_USART6_UART_Init+0x4c>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001d00:	4b09      	ldr	r3, [pc, #36]	@ (8001d28 <MX_USART6_UART_Init+0x4c>)
 8001d02:	220c      	movs	r2, #12
 8001d04:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d06:	4b08      	ldr	r3, [pc, #32]	@ (8001d28 <MX_USART6_UART_Init+0x4c>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d0c:	4b06      	ldr	r3, [pc, #24]	@ (8001d28 <MX_USART6_UART_Init+0x4c>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001d12:	4805      	ldr	r0, [pc, #20]	@ (8001d28 <MX_USART6_UART_Init+0x4c>)
 8001d14:	f003 fc7e 	bl	8005614 <HAL_UART_Init>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001d1e:	f000 f84f 	bl	8001dc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001d22:	bf00      	nop
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	200001c8 	.word	0x200001c8
 8001d2c:	40011400 	.word	0x40011400

08001d30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	607b      	str	r3, [r7, #4]
 8001d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d6c <MX_DMA_Init+0x3c>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3e:	4a0b      	ldr	r2, [pc, #44]	@ (8001d6c <MX_DMA_Init+0x3c>)
 8001d40:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d46:	4b09      	ldr	r3, [pc, #36]	@ (8001d6c <MX_DMA_Init+0x3c>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d4e:	607b      	str	r3, [r7, #4]
 8001d50:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001d52:	2200      	movs	r2, #0
 8001d54:	2100      	movs	r1, #0
 8001d56:	2010      	movs	r0, #16
 8001d58:	f000 fc01 	bl	800255e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001d5c:	2010      	movs	r0, #16
 8001d5e:	f000 fc1a 	bl	8002596 <HAL_NVIC_EnableIRQ>

}
 8001d62:	bf00      	nop
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40023800 	.word	0x40023800

08001d70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	607b      	str	r3, [r7, #4]
 8001d7a:	4b10      	ldr	r3, [pc, #64]	@ (8001dbc <MX_GPIO_Init+0x4c>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7e:	4a0f      	ldr	r2, [pc, #60]	@ (8001dbc <MX_GPIO_Init+0x4c>)
 8001d80:	f043 0301 	orr.w	r3, r3, #1
 8001d84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d86:	4b0d      	ldr	r3, [pc, #52]	@ (8001dbc <MX_GPIO_Init+0x4c>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	607b      	str	r3, [r7, #4]
 8001d90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	603b      	str	r3, [r7, #0]
 8001d96:	4b09      	ldr	r3, [pc, #36]	@ (8001dbc <MX_GPIO_Init+0x4c>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9a:	4a08      	ldr	r2, [pc, #32]	@ (8001dbc <MX_GPIO_Init+0x4c>)
 8001d9c:	f043 0302 	orr.w	r3, r3, #2
 8001da0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001da2:	4b06      	ldr	r3, [pc, #24]	@ (8001dbc <MX_GPIO_Init+0x4c>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	603b      	str	r3, [r7, #0]
 8001dac:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	40023800 	.word	0x40023800

08001dc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dc4:	b672      	cpsid	i
}
 8001dc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dc8:	bf00      	nop
 8001dca:	e7fd      	b.n	8001dc8 <Error_Handler+0x8>

08001dcc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	607b      	str	r3, [r7, #4]
 8001dd6:	4b10      	ldr	r3, [pc, #64]	@ (8001e18 <HAL_MspInit+0x4c>)
 8001dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dda:	4a0f      	ldr	r2, [pc, #60]	@ (8001e18 <HAL_MspInit+0x4c>)
 8001ddc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001de0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001de2:	4b0d      	ldr	r3, [pc, #52]	@ (8001e18 <HAL_MspInit+0x4c>)
 8001de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dea:	607b      	str	r3, [r7, #4]
 8001dec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dee:	2300      	movs	r3, #0
 8001df0:	603b      	str	r3, [r7, #0]
 8001df2:	4b09      	ldr	r3, [pc, #36]	@ (8001e18 <HAL_MspInit+0x4c>)
 8001df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df6:	4a08      	ldr	r2, [pc, #32]	@ (8001e18 <HAL_MspInit+0x4c>)
 8001df8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dfe:	4b06      	ldr	r3, [pc, #24]	@ (8001e18 <HAL_MspInit+0x4c>)
 8001e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e06:	603b      	str	r3, [r7, #0]
 8001e08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	40023800 	.word	0x40023800

08001e1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b08a      	sub	sp, #40	@ 0x28
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e24:	f107 0314 	add.w	r3, r7, #20
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	605a      	str	r2, [r3, #4]
 8001e2e:	609a      	str	r2, [r3, #8]
 8001e30:	60da      	str	r2, [r3, #12]
 8001e32:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a19      	ldr	r2, [pc, #100]	@ (8001ea0 <HAL_I2C_MspInit+0x84>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d12b      	bne.n	8001e96 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	613b      	str	r3, [r7, #16]
 8001e42:	4b18      	ldr	r3, [pc, #96]	@ (8001ea4 <HAL_I2C_MspInit+0x88>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e46:	4a17      	ldr	r2, [pc, #92]	@ (8001ea4 <HAL_I2C_MspInit+0x88>)
 8001e48:	f043 0302 	orr.w	r3, r3, #2
 8001e4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e4e:	4b15      	ldr	r3, [pc, #84]	@ (8001ea4 <HAL_I2C_MspInit+0x88>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	613b      	str	r3, [r7, #16]
 8001e58:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e5a:	23c0      	movs	r3, #192	@ 0xc0
 8001e5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e5e:	2312      	movs	r3, #18
 8001e60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e62:	2300      	movs	r3, #0
 8001e64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e66:	2303      	movs	r3, #3
 8001e68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e6a:	2304      	movs	r3, #4
 8001e6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e6e:	f107 0314 	add.w	r3, r7, #20
 8001e72:	4619      	mov	r1, r3
 8001e74:	480c      	ldr	r0, [pc, #48]	@ (8001ea8 <HAL_I2C_MspInit+0x8c>)
 8001e76:	f000 ffab 	bl	8002dd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60fb      	str	r3, [r7, #12]
 8001e7e:	4b09      	ldr	r3, [pc, #36]	@ (8001ea4 <HAL_I2C_MspInit+0x88>)
 8001e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e82:	4a08      	ldr	r2, [pc, #32]	@ (8001ea4 <HAL_I2C_MspInit+0x88>)
 8001e84:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e88:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e8a:	4b06      	ldr	r3, [pc, #24]	@ (8001ea4 <HAL_I2C_MspInit+0x88>)
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001e96:	bf00      	nop
 8001e98:	3728      	adds	r7, #40	@ 0x28
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40005400 	.word	0x40005400
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	40020400 	.word	0x40020400

08001eac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a0b      	ldr	r2, [pc, #44]	@ (8001ee8 <HAL_TIM_Base_MspInit+0x3c>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d10d      	bne.n	8001eda <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60fb      	str	r3, [r7, #12]
 8001ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8001eec <HAL_TIM_Base_MspInit+0x40>)
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec6:	4a09      	ldr	r2, [pc, #36]	@ (8001eec <HAL_TIM_Base_MspInit+0x40>)
 8001ec8:	f043 0302 	orr.w	r3, r3, #2
 8001ecc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ece:	4b07      	ldr	r3, [pc, #28]	@ (8001eec <HAL_TIM_Base_MspInit+0x40>)
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001eda:	bf00      	nop
 8001edc:	3714      	adds	r7, #20
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	40000400 	.word	0x40000400
 8001eec:	40023800 	.word	0x40023800

08001ef0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b08a      	sub	sp, #40	@ 0x28
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef8:	f107 0314 	add.w	r3, r7, #20
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	609a      	str	r2, [r3, #8]
 8001f04:	60da      	str	r2, [r3, #12]
 8001f06:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a21      	ldr	r2, [pc, #132]	@ (8001f94 <HAL_TIM_MspPostInit+0xa4>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d13b      	bne.n	8001f8a <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f12:	2300      	movs	r3, #0
 8001f14:	613b      	str	r3, [r7, #16]
 8001f16:	4b20      	ldr	r3, [pc, #128]	@ (8001f98 <HAL_TIM_MspPostInit+0xa8>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f1a:	4a1f      	ldr	r2, [pc, #124]	@ (8001f98 <HAL_TIM_MspPostInit+0xa8>)
 8001f1c:	f043 0301 	orr.w	r3, r3, #1
 8001f20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f22:	4b1d      	ldr	r3, [pc, #116]	@ (8001f98 <HAL_TIM_MspPostInit+0xa8>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	613b      	str	r3, [r7, #16]
 8001f2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60fb      	str	r3, [r7, #12]
 8001f32:	4b19      	ldr	r3, [pc, #100]	@ (8001f98 <HAL_TIM_MspPostInit+0xa8>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f36:	4a18      	ldr	r2, [pc, #96]	@ (8001f98 <HAL_TIM_MspPostInit+0xa8>)
 8001f38:	f043 0302 	orr.w	r3, r3, #2
 8001f3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f3e:	4b16      	ldr	r3, [pc, #88]	@ (8001f98 <HAL_TIM_MspPostInit+0xa8>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f4a:	23c0      	movs	r3, #192	@ 0xc0
 8001f4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f52:	2300      	movs	r3, #0
 8001f54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f56:	2300      	movs	r3, #0
 8001f58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f5e:	f107 0314 	add.w	r3, r7, #20
 8001f62:	4619      	mov	r1, r3
 8001f64:	480d      	ldr	r0, [pc, #52]	@ (8001f9c <HAL_TIM_MspPostInit+0xac>)
 8001f66:	f000 ff33 	bl	8002dd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6e:	2302      	movs	r3, #2
 8001f70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f72:	2300      	movs	r3, #0
 8001f74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f76:	2300      	movs	r3, #0
 8001f78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f7e:	f107 0314 	add.w	r3, r7, #20
 8001f82:	4619      	mov	r1, r3
 8001f84:	4806      	ldr	r0, [pc, #24]	@ (8001fa0 <HAL_TIM_MspPostInit+0xb0>)
 8001f86:	f000 ff23 	bl	8002dd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001f8a:	bf00      	nop
 8001f8c:	3728      	adds	r7, #40	@ 0x28
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	40000400 	.word	0x40000400
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	40020000 	.word	0x40020000
 8001fa0:	40020400 	.word	0x40020400

08001fa4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b08e      	sub	sp, #56	@ 0x38
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	605a      	str	r2, [r3, #4]
 8001fb6:	609a      	str	r2, [r3, #8]
 8001fb8:	60da      	str	r2, [r3, #12]
 8001fba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a67      	ldr	r2, [pc, #412]	@ (8002160 <HAL_UART_MspInit+0x1bc>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d12d      	bne.n	8002022 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	623b      	str	r3, [r7, #32]
 8001fca:	4b66      	ldr	r3, [pc, #408]	@ (8002164 <HAL_UART_MspInit+0x1c0>)
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fce:	4a65      	ldr	r2, [pc, #404]	@ (8002164 <HAL_UART_MspInit+0x1c0>)
 8001fd0:	f043 0310 	orr.w	r3, r3, #16
 8001fd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fd6:	4b63      	ldr	r3, [pc, #396]	@ (8002164 <HAL_UART_MspInit+0x1c0>)
 8001fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fda:	f003 0310 	and.w	r3, r3, #16
 8001fde:	623b      	str	r3, [r7, #32]
 8001fe0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	61fb      	str	r3, [r7, #28]
 8001fe6:	4b5f      	ldr	r3, [pc, #380]	@ (8002164 <HAL_UART_MspInit+0x1c0>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fea:	4a5e      	ldr	r2, [pc, #376]	@ (8002164 <HAL_UART_MspInit+0x1c0>)
 8001fec:	f043 0301 	orr.w	r3, r3, #1
 8001ff0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ff2:	4b5c      	ldr	r3, [pc, #368]	@ (8002164 <HAL_UART_MspInit+0x1c0>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	61fb      	str	r3, [r7, #28]
 8001ffc:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ffe:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002002:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002004:	2302      	movs	r3, #2
 8002006:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002008:	2300      	movs	r3, #0
 800200a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800200c:	2303      	movs	r3, #3
 800200e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002010:	2307      	movs	r3, #7
 8002012:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002014:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002018:	4619      	mov	r1, r3
 800201a:	4853      	ldr	r0, [pc, #332]	@ (8002168 <HAL_UART_MspInit+0x1c4>)
 800201c:	f000 fed8 	bl	8002dd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002020:	e09a      	b.n	8002158 <HAL_UART_MspInit+0x1b4>
  else if(huart->Instance==USART2)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a51      	ldr	r2, [pc, #324]	@ (800216c <HAL_UART_MspInit+0x1c8>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d163      	bne.n	80020f4 <HAL_UART_MspInit+0x150>
    __HAL_RCC_USART2_CLK_ENABLE();
 800202c:	2300      	movs	r3, #0
 800202e:	61bb      	str	r3, [r7, #24]
 8002030:	4b4c      	ldr	r3, [pc, #304]	@ (8002164 <HAL_UART_MspInit+0x1c0>)
 8002032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002034:	4a4b      	ldr	r2, [pc, #300]	@ (8002164 <HAL_UART_MspInit+0x1c0>)
 8002036:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800203a:	6413      	str	r3, [r2, #64]	@ 0x40
 800203c:	4b49      	ldr	r3, [pc, #292]	@ (8002164 <HAL_UART_MspInit+0x1c0>)
 800203e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002040:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002044:	61bb      	str	r3, [r7, #24]
 8002046:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002048:	2300      	movs	r3, #0
 800204a:	617b      	str	r3, [r7, #20]
 800204c:	4b45      	ldr	r3, [pc, #276]	@ (8002164 <HAL_UART_MspInit+0x1c0>)
 800204e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002050:	4a44      	ldr	r2, [pc, #272]	@ (8002164 <HAL_UART_MspInit+0x1c0>)
 8002052:	f043 0301 	orr.w	r3, r3, #1
 8002056:	6313      	str	r3, [r2, #48]	@ 0x30
 8002058:	4b42      	ldr	r3, [pc, #264]	@ (8002164 <HAL_UART_MspInit+0x1c0>)
 800205a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	617b      	str	r3, [r7, #20]
 8002062:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002064:	230c      	movs	r3, #12
 8002066:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002068:	2302      	movs	r3, #2
 800206a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206c:	2300      	movs	r3, #0
 800206e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002070:	2303      	movs	r3, #3
 8002072:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002074:	2307      	movs	r3, #7
 8002076:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002078:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800207c:	4619      	mov	r1, r3
 800207e:	483a      	ldr	r0, [pc, #232]	@ (8002168 <HAL_UART_MspInit+0x1c4>)
 8002080:	f000 fea6 	bl	8002dd0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002084:	4b3a      	ldr	r3, [pc, #232]	@ (8002170 <HAL_UART_MspInit+0x1cc>)
 8002086:	4a3b      	ldr	r2, [pc, #236]	@ (8002174 <HAL_UART_MspInit+0x1d0>)
 8002088:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800208a:	4b39      	ldr	r3, [pc, #228]	@ (8002170 <HAL_UART_MspInit+0x1cc>)
 800208c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002090:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002092:	4b37      	ldr	r3, [pc, #220]	@ (8002170 <HAL_UART_MspInit+0x1cc>)
 8002094:	2200      	movs	r2, #0
 8002096:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002098:	4b35      	ldr	r3, [pc, #212]	@ (8002170 <HAL_UART_MspInit+0x1cc>)
 800209a:	2200      	movs	r2, #0
 800209c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800209e:	4b34      	ldr	r3, [pc, #208]	@ (8002170 <HAL_UART_MspInit+0x1cc>)
 80020a0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80020a4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020a6:	4b32      	ldr	r3, [pc, #200]	@ (8002170 <HAL_UART_MspInit+0x1cc>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020ac:	4b30      	ldr	r3, [pc, #192]	@ (8002170 <HAL_UART_MspInit+0x1cc>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80020b2:	4b2f      	ldr	r3, [pc, #188]	@ (8002170 <HAL_UART_MspInit+0x1cc>)
 80020b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020b8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80020ba:	4b2d      	ldr	r3, [pc, #180]	@ (8002170 <HAL_UART_MspInit+0x1cc>)
 80020bc:	2200      	movs	r2, #0
 80020be:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020c0:	4b2b      	ldr	r3, [pc, #172]	@ (8002170 <HAL_UART_MspInit+0x1cc>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80020c6:	482a      	ldr	r0, [pc, #168]	@ (8002170 <HAL_UART_MspInit+0x1cc>)
 80020c8:	f000 fa80 	bl	80025cc <HAL_DMA_Init>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <HAL_UART_MspInit+0x132>
      Error_Handler();
 80020d2:	f7ff fe75 	bl	8001dc0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a25      	ldr	r2, [pc, #148]	@ (8002170 <HAL_UART_MspInit+0x1cc>)
 80020da:	63da      	str	r2, [r3, #60]	@ 0x3c
 80020dc:	4a24      	ldr	r2, [pc, #144]	@ (8002170 <HAL_UART_MspInit+0x1cc>)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 80020e2:	2200      	movs	r2, #0
 80020e4:	2101      	movs	r1, #1
 80020e6:	2026      	movs	r0, #38	@ 0x26
 80020e8:	f000 fa39 	bl	800255e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80020ec:	2026      	movs	r0, #38	@ 0x26
 80020ee:	f000 fa52 	bl	8002596 <HAL_NVIC_EnableIRQ>
}
 80020f2:	e031      	b.n	8002158 <HAL_UART_MspInit+0x1b4>
  else if(huart->Instance==USART6)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a1f      	ldr	r2, [pc, #124]	@ (8002178 <HAL_UART_MspInit+0x1d4>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d12c      	bne.n	8002158 <HAL_UART_MspInit+0x1b4>
    __HAL_RCC_USART6_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	613b      	str	r3, [r7, #16]
 8002102:	4b18      	ldr	r3, [pc, #96]	@ (8002164 <HAL_UART_MspInit+0x1c0>)
 8002104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002106:	4a17      	ldr	r2, [pc, #92]	@ (8002164 <HAL_UART_MspInit+0x1c0>)
 8002108:	f043 0320 	orr.w	r3, r3, #32
 800210c:	6453      	str	r3, [r2, #68]	@ 0x44
 800210e:	4b15      	ldr	r3, [pc, #84]	@ (8002164 <HAL_UART_MspInit+0x1c0>)
 8002110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002112:	f003 0320 	and.w	r3, r3, #32
 8002116:	613b      	str	r3, [r7, #16]
 8002118:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800211a:	2300      	movs	r3, #0
 800211c:	60fb      	str	r3, [r7, #12]
 800211e:	4b11      	ldr	r3, [pc, #68]	@ (8002164 <HAL_UART_MspInit+0x1c0>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002122:	4a10      	ldr	r2, [pc, #64]	@ (8002164 <HAL_UART_MspInit+0x1c0>)
 8002124:	f043 0301 	orr.w	r3, r3, #1
 8002128:	6313      	str	r3, [r2, #48]	@ 0x30
 800212a:	4b0e      	ldr	r3, [pc, #56]	@ (8002164 <HAL_UART_MspInit+0x1c0>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	60fb      	str	r3, [r7, #12]
 8002134:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002136:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800213a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213c:	2302      	movs	r3, #2
 800213e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002140:	2300      	movs	r3, #0
 8002142:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002144:	2303      	movs	r3, #3
 8002146:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002148:	2308      	movs	r3, #8
 800214a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800214c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002150:	4619      	mov	r1, r3
 8002152:	4805      	ldr	r0, [pc, #20]	@ (8002168 <HAL_UART_MspInit+0x1c4>)
 8002154:	f000 fe3c 	bl	8002dd0 <HAL_GPIO_Init>
}
 8002158:	bf00      	nop
 800215a:	3738      	adds	r7, #56	@ 0x38
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40011000 	.word	0x40011000
 8002164:	40023800 	.word	0x40023800
 8002168:	40020000 	.word	0x40020000
 800216c:	40004400 	.word	0x40004400
 8002170:	20000210 	.word	0x20000210
 8002174:	40026088 	.word	0x40026088
 8002178:	40011400 	.word	0x40011400

0800217c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002180:	bf00      	nop
 8002182:	e7fd      	b.n	8002180 <NMI_Handler+0x4>

08002184 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002188:	bf00      	nop
 800218a:	e7fd      	b.n	8002188 <HardFault_Handler+0x4>

0800218c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002190:	bf00      	nop
 8002192:	e7fd      	b.n	8002190 <MemManage_Handler+0x4>

08002194 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002198:	bf00      	nop
 800219a:	e7fd      	b.n	8002198 <BusFault_Handler+0x4>

0800219c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021a0:	bf00      	nop
 80021a2:	e7fd      	b.n	80021a0 <UsageFault_Handler+0x4>

080021a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021a8:	bf00      	nop
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr

080021b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021b2:	b480      	push	{r7}
 80021b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021b6:	bf00      	nop
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021c4:	bf00      	nop
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021d2:	f000 f8a5 	bl	8002320 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021d6:	bf00      	nop
 80021d8:	bd80      	pop	{r7, pc}
	...

080021dc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80021e0:	4802      	ldr	r0, [pc, #8]	@ (80021ec <DMA1_Stream5_IRQHandler+0x10>)
 80021e2:	f000 fb8b 	bl	80028fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80021e6:	bf00      	nop
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	20000210 	.word	0x20000210

080021f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80021f4:	4802      	ldr	r0, [pc, #8]	@ (8002200 <USART2_IRQHandler+0x10>)
 80021f6:	f003 fab7 	bl	8005768 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80021fa:	bf00      	nop
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	20000180 	.word	0x20000180

08002204 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002208:	4b06      	ldr	r3, [pc, #24]	@ (8002224 <SystemInit+0x20>)
 800220a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800220e:	4a05      	ldr	r2, [pc, #20]	@ (8002224 <SystemInit+0x20>)
 8002210:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002214:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002218:	bf00      	nop
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	e000ed00 	.word	0xe000ed00

08002228 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002228:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002260 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800222c:	f7ff ffea 	bl	8002204 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002230:	480c      	ldr	r0, [pc, #48]	@ (8002264 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002232:	490d      	ldr	r1, [pc, #52]	@ (8002268 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002234:	4a0d      	ldr	r2, [pc, #52]	@ (800226c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002236:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002238:	e002      	b.n	8002240 <LoopCopyDataInit>

0800223a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800223a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800223c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800223e:	3304      	adds	r3, #4

08002240 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002240:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002242:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002244:	d3f9      	bcc.n	800223a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002246:	4a0a      	ldr	r2, [pc, #40]	@ (8002270 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002248:	4c0a      	ldr	r4, [pc, #40]	@ (8002274 <LoopFillZerobss+0x22>)
  movs r3, #0
 800224a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800224c:	e001      	b.n	8002252 <LoopFillZerobss>

0800224e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800224e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002250:	3204      	adds	r2, #4

08002252 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002252:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002254:	d3fb      	bcc.n	800224e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002256:	f004 fb41 	bl	80068dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800225a:	f7fe fe6f 	bl	8000f3c <main>
  bx  lr    
 800225e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002260:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002264:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002268:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 800226c:	08006b84 	.word	0x08006b84
  ldr r2, =_sbss
 8002270:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002274:	200004d8 	.word	0x200004d8

08002278 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002278:	e7fe      	b.n	8002278 <ADC_IRQHandler>
	...

0800227c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002280:	4b0e      	ldr	r3, [pc, #56]	@ (80022bc <HAL_Init+0x40>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a0d      	ldr	r2, [pc, #52]	@ (80022bc <HAL_Init+0x40>)
 8002286:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800228a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800228c:	4b0b      	ldr	r3, [pc, #44]	@ (80022bc <HAL_Init+0x40>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a0a      	ldr	r2, [pc, #40]	@ (80022bc <HAL_Init+0x40>)
 8002292:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002296:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002298:	4b08      	ldr	r3, [pc, #32]	@ (80022bc <HAL_Init+0x40>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a07      	ldr	r2, [pc, #28]	@ (80022bc <HAL_Init+0x40>)
 800229e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022a4:	2003      	movs	r0, #3
 80022a6:	f000 f94f 	bl	8002548 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022aa:	200f      	movs	r0, #15
 80022ac:	f000 f808 	bl	80022c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022b0:	f7ff fd8c 	bl	8001dcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40023c00 	.word	0x40023c00

080022c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022c8:	4b12      	ldr	r3, [pc, #72]	@ (8002314 <HAL_InitTick+0x54>)
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	4b12      	ldr	r3, [pc, #72]	@ (8002318 <HAL_InitTick+0x58>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	4619      	mov	r1, r3
 80022d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80022da:	fbb2 f3f3 	udiv	r3, r2, r3
 80022de:	4618      	mov	r0, r3
 80022e0:	f000 f967 	bl	80025b2 <HAL_SYSTICK_Config>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e00e      	b.n	800230c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2b0f      	cmp	r3, #15
 80022f2:	d80a      	bhi.n	800230a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022f4:	2200      	movs	r2, #0
 80022f6:	6879      	ldr	r1, [r7, #4]
 80022f8:	f04f 30ff 	mov.w	r0, #4294967295
 80022fc:	f000 f92f 	bl	800255e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002300:	4a06      	ldr	r2, [pc, #24]	@ (800231c <HAL_InitTick+0x5c>)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002306:	2300      	movs	r3, #0
 8002308:	e000      	b.n	800230c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
}
 800230c:	4618      	mov	r0, r3
 800230e:	3708      	adds	r7, #8
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	20000024 	.word	0x20000024
 8002318:	2000002c 	.word	0x2000002c
 800231c:	20000028 	.word	0x20000028

08002320 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002324:	4b06      	ldr	r3, [pc, #24]	@ (8002340 <HAL_IncTick+0x20>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	461a      	mov	r2, r3
 800232a:	4b06      	ldr	r3, [pc, #24]	@ (8002344 <HAL_IncTick+0x24>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4413      	add	r3, r2
 8002330:	4a04      	ldr	r2, [pc, #16]	@ (8002344 <HAL_IncTick+0x24>)
 8002332:	6013      	str	r3, [r2, #0]
}
 8002334:	bf00      	nop
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	2000002c 	.word	0x2000002c
 8002344:	2000039c 	.word	0x2000039c

08002348 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  return uwTick;
 800234c:	4b03      	ldr	r3, [pc, #12]	@ (800235c <HAL_GetTick+0x14>)
 800234e:	681b      	ldr	r3, [r3, #0]
}
 8002350:	4618      	mov	r0, r3
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	2000039c 	.word	0x2000039c

08002360 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002368:	f7ff ffee 	bl	8002348 <HAL_GetTick>
 800236c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002378:	d005      	beq.n	8002386 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800237a:	4b0a      	ldr	r3, [pc, #40]	@ (80023a4 <HAL_Delay+0x44>)
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	461a      	mov	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	4413      	add	r3, r2
 8002384:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002386:	bf00      	nop
 8002388:	f7ff ffde 	bl	8002348 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	429a      	cmp	r2, r3
 8002396:	d8f7      	bhi.n	8002388 <HAL_Delay+0x28>
  {
  }
}
 8002398:	bf00      	nop
 800239a:	bf00      	nop
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	2000002c 	.word	0x2000002c

080023a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f003 0307 	and.w	r3, r3, #7
 80023b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023b8:	4b0c      	ldr	r3, [pc, #48]	@ (80023ec <__NVIC_SetPriorityGrouping+0x44>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023be:	68ba      	ldr	r2, [r7, #8]
 80023c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023c4:	4013      	ands	r3, r2
 80023c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023da:	4a04      	ldr	r2, [pc, #16]	@ (80023ec <__NVIC_SetPriorityGrouping+0x44>)
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	60d3      	str	r3, [r2, #12]
}
 80023e0:	bf00      	nop
 80023e2:	3714      	adds	r7, #20
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	e000ed00 	.word	0xe000ed00

080023f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023f4:	4b04      	ldr	r3, [pc, #16]	@ (8002408 <__NVIC_GetPriorityGrouping+0x18>)
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	0a1b      	lsrs	r3, r3, #8
 80023fa:	f003 0307 	and.w	r3, r3, #7
}
 80023fe:	4618      	mov	r0, r3
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr
 8002408:	e000ed00 	.word	0xe000ed00

0800240c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241a:	2b00      	cmp	r3, #0
 800241c:	db0b      	blt.n	8002436 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800241e:	79fb      	ldrb	r3, [r7, #7]
 8002420:	f003 021f 	and.w	r2, r3, #31
 8002424:	4907      	ldr	r1, [pc, #28]	@ (8002444 <__NVIC_EnableIRQ+0x38>)
 8002426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242a:	095b      	lsrs	r3, r3, #5
 800242c:	2001      	movs	r0, #1
 800242e:	fa00 f202 	lsl.w	r2, r0, r2
 8002432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002436:	bf00      	nop
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	e000e100 	.word	0xe000e100

08002448 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	4603      	mov	r3, r0
 8002450:	6039      	str	r1, [r7, #0]
 8002452:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002458:	2b00      	cmp	r3, #0
 800245a:	db0a      	blt.n	8002472 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	b2da      	uxtb	r2, r3
 8002460:	490c      	ldr	r1, [pc, #48]	@ (8002494 <__NVIC_SetPriority+0x4c>)
 8002462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002466:	0112      	lsls	r2, r2, #4
 8002468:	b2d2      	uxtb	r2, r2
 800246a:	440b      	add	r3, r1
 800246c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002470:	e00a      	b.n	8002488 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	b2da      	uxtb	r2, r3
 8002476:	4908      	ldr	r1, [pc, #32]	@ (8002498 <__NVIC_SetPriority+0x50>)
 8002478:	79fb      	ldrb	r3, [r7, #7]
 800247a:	f003 030f 	and.w	r3, r3, #15
 800247e:	3b04      	subs	r3, #4
 8002480:	0112      	lsls	r2, r2, #4
 8002482:	b2d2      	uxtb	r2, r2
 8002484:	440b      	add	r3, r1
 8002486:	761a      	strb	r2, [r3, #24]
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	e000e100 	.word	0xe000e100
 8002498:	e000ed00 	.word	0xe000ed00

0800249c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800249c:	b480      	push	{r7}
 800249e:	b089      	sub	sp, #36	@ 0x24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f003 0307 	and.w	r3, r3, #7
 80024ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	f1c3 0307 	rsb	r3, r3, #7
 80024b6:	2b04      	cmp	r3, #4
 80024b8:	bf28      	it	cs
 80024ba:	2304      	movcs	r3, #4
 80024bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	3304      	adds	r3, #4
 80024c2:	2b06      	cmp	r3, #6
 80024c4:	d902      	bls.n	80024cc <NVIC_EncodePriority+0x30>
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	3b03      	subs	r3, #3
 80024ca:	e000      	b.n	80024ce <NVIC_EncodePriority+0x32>
 80024cc:	2300      	movs	r3, #0
 80024ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d0:	f04f 32ff 	mov.w	r2, #4294967295
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	fa02 f303 	lsl.w	r3, r2, r3
 80024da:	43da      	mvns	r2, r3
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	401a      	ands	r2, r3
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024e4:	f04f 31ff 	mov.w	r1, #4294967295
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	fa01 f303 	lsl.w	r3, r1, r3
 80024ee:	43d9      	mvns	r1, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024f4:	4313      	orrs	r3, r2
         );
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3724      	adds	r7, #36	@ 0x24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
	...

08002504 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3b01      	subs	r3, #1
 8002510:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002514:	d301      	bcc.n	800251a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002516:	2301      	movs	r3, #1
 8002518:	e00f      	b.n	800253a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800251a:	4a0a      	ldr	r2, [pc, #40]	@ (8002544 <SysTick_Config+0x40>)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3b01      	subs	r3, #1
 8002520:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002522:	210f      	movs	r1, #15
 8002524:	f04f 30ff 	mov.w	r0, #4294967295
 8002528:	f7ff ff8e 	bl	8002448 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800252c:	4b05      	ldr	r3, [pc, #20]	@ (8002544 <SysTick_Config+0x40>)
 800252e:	2200      	movs	r2, #0
 8002530:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002532:	4b04      	ldr	r3, [pc, #16]	@ (8002544 <SysTick_Config+0x40>)
 8002534:	2207      	movs	r2, #7
 8002536:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	e000e010 	.word	0xe000e010

08002548 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f7ff ff29 	bl	80023a8 <__NVIC_SetPriorityGrouping>
}
 8002556:	bf00      	nop
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800255e:	b580      	push	{r7, lr}
 8002560:	b086      	sub	sp, #24
 8002562:	af00      	add	r7, sp, #0
 8002564:	4603      	mov	r3, r0
 8002566:	60b9      	str	r1, [r7, #8]
 8002568:	607a      	str	r2, [r7, #4]
 800256a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800256c:	2300      	movs	r3, #0
 800256e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002570:	f7ff ff3e 	bl	80023f0 <__NVIC_GetPriorityGrouping>
 8002574:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	68b9      	ldr	r1, [r7, #8]
 800257a:	6978      	ldr	r0, [r7, #20]
 800257c:	f7ff ff8e 	bl	800249c <NVIC_EncodePriority>
 8002580:	4602      	mov	r2, r0
 8002582:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002586:	4611      	mov	r1, r2
 8002588:	4618      	mov	r0, r3
 800258a:	f7ff ff5d 	bl	8002448 <__NVIC_SetPriority>
}
 800258e:	bf00      	nop
 8002590:	3718      	adds	r7, #24
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b082      	sub	sp, #8
 800259a:	af00      	add	r7, sp, #0
 800259c:	4603      	mov	r3, r0
 800259e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7ff ff31 	bl	800240c <__NVIC_EnableIRQ>
}
 80025aa:	bf00      	nop
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b082      	sub	sp, #8
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f7ff ffa2 	bl	8002504 <SysTick_Config>
 80025c0:	4603      	mov	r3, r0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
	...

080025cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80025d4:	2300      	movs	r3, #0
 80025d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80025d8:	f7ff feb6 	bl	8002348 <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d101      	bne.n	80025e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e099      	b.n	800271c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2202      	movs	r2, #2
 80025ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f022 0201 	bic.w	r2, r2, #1
 8002606:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002608:	e00f      	b.n	800262a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800260a:	f7ff fe9d 	bl	8002348 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b05      	cmp	r3, #5
 8002616:	d908      	bls.n	800262a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2220      	movs	r2, #32
 800261c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2203      	movs	r2, #3
 8002622:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e078      	b.n	800271c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1e8      	bne.n	800260a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002640:	697a      	ldr	r2, [r7, #20]
 8002642:	4b38      	ldr	r3, [pc, #224]	@ (8002724 <HAL_DMA_Init+0x158>)
 8002644:	4013      	ands	r3, r2
 8002646:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685a      	ldr	r2, [r3, #4]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002656:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002662:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800266e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a1b      	ldr	r3, [r3, #32]
 8002674:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	4313      	orrs	r3, r2
 800267a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002680:	2b04      	cmp	r3, #4
 8002682:	d107      	bne.n	8002694 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268c:	4313      	orrs	r3, r2
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	4313      	orrs	r3, r2
 8002692:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	697a      	ldr	r2, [r7, #20]
 800269a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	f023 0307 	bic.w	r3, r3, #7
 80026aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b0:	697a      	ldr	r2, [r7, #20]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ba:	2b04      	cmp	r3, #4
 80026bc:	d117      	bne.n	80026ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d00e      	beq.n	80026ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f000 fb01 	bl	8002cd8 <DMA_CheckFifoParam>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d008      	beq.n	80026ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2240      	movs	r2, #64	@ 0x40
 80026e0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2201      	movs	r2, #1
 80026e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80026ea:	2301      	movs	r3, #1
 80026ec:	e016      	b.n	800271c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	697a      	ldr	r2, [r7, #20]
 80026f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 fab8 	bl	8002c6c <DMA_CalcBaseAndBitshift>
 80026fc:	4603      	mov	r3, r0
 80026fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002704:	223f      	movs	r2, #63	@ 0x3f
 8002706:	409a      	lsls	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2201      	movs	r2, #1
 8002716:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	3718      	adds	r7, #24
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	f010803f 	.word	0xf010803f

08002728 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
 8002734:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002736:	2300      	movs	r3, #0
 8002738:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800273e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002746:	2b01      	cmp	r3, #1
 8002748:	d101      	bne.n	800274e <HAL_DMA_Start_IT+0x26>
 800274a:	2302      	movs	r3, #2
 800274c:	e040      	b.n	80027d0 <HAL_DMA_Start_IT+0xa8>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2201      	movs	r2, #1
 8002752:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b01      	cmp	r3, #1
 8002760:	d12f      	bne.n	80027c2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2202      	movs	r2, #2
 8002766:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	68b9      	ldr	r1, [r7, #8]
 8002776:	68f8      	ldr	r0, [r7, #12]
 8002778:	f000 fa4a 	bl	8002c10 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002780:	223f      	movs	r2, #63	@ 0x3f
 8002782:	409a      	lsls	r2, r3
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f042 0216 	orr.w	r2, r2, #22
 8002796:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279c:	2b00      	cmp	r3, #0
 800279e:	d007      	beq.n	80027b0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f042 0208 	orr.w	r2, r2, #8
 80027ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f042 0201 	orr.w	r2, r2, #1
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	e005      	b.n	80027ce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80027ca:	2302      	movs	r3, #2
 80027cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80027ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3718      	adds	r7, #24
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027e4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80027e6:	f7ff fdaf 	bl	8002348 <HAL_GetTick>
 80027ea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d008      	beq.n	800280a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2280      	movs	r2, #128	@ 0x80
 80027fc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e052      	b.n	80028b0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f022 0216 	bic.w	r2, r2, #22
 8002818:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	695a      	ldr	r2, [r3, #20]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002828:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282e:	2b00      	cmp	r3, #0
 8002830:	d103      	bne.n	800283a <HAL_DMA_Abort+0x62>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002836:	2b00      	cmp	r3, #0
 8002838:	d007      	beq.n	800284a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 0208 	bic.w	r2, r2, #8
 8002848:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f022 0201 	bic.w	r2, r2, #1
 8002858:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800285a:	e013      	b.n	8002884 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800285c:	f7ff fd74 	bl	8002348 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b05      	cmp	r3, #5
 8002868:	d90c      	bls.n	8002884 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2220      	movs	r2, #32
 800286e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2203      	movs	r2, #3
 8002874:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e015      	b.n	80028b0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1e4      	bne.n	800285c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002896:	223f      	movs	r2, #63	@ 0x3f
 8002898:	409a      	lsls	r2, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2201      	movs	r2, #1
 80028a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3710      	adds	r7, #16
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d004      	beq.n	80028d6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2280      	movs	r2, #128	@ 0x80
 80028d0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e00c      	b.n	80028f0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2205      	movs	r2, #5
 80028da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f022 0201 	bic.w	r2, r2, #1
 80028ec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b086      	sub	sp, #24
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002904:	2300      	movs	r3, #0
 8002906:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002908:	4b8e      	ldr	r3, [pc, #568]	@ (8002b44 <HAL_DMA_IRQHandler+0x248>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a8e      	ldr	r2, [pc, #568]	@ (8002b48 <HAL_DMA_IRQHandler+0x24c>)
 800290e:	fba2 2303 	umull	r2, r3, r2, r3
 8002912:	0a9b      	lsrs	r3, r3, #10
 8002914:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800291a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002926:	2208      	movs	r2, #8
 8002928:	409a      	lsls	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	4013      	ands	r3, r2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d01a      	beq.n	8002968 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0304 	and.w	r3, r3, #4
 800293c:	2b00      	cmp	r3, #0
 800293e:	d013      	beq.n	8002968 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f022 0204 	bic.w	r2, r2, #4
 800294e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002954:	2208      	movs	r2, #8
 8002956:	409a      	lsls	r2, r3
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002960:	f043 0201 	orr.w	r2, r3, #1
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800296c:	2201      	movs	r2, #1
 800296e:	409a      	lsls	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	4013      	ands	r3, r2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d012      	beq.n	800299e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002982:	2b00      	cmp	r3, #0
 8002984:	d00b      	beq.n	800299e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800298a:	2201      	movs	r2, #1
 800298c:	409a      	lsls	r2, r3
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002996:	f043 0202 	orr.w	r2, r3, #2
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029a2:	2204      	movs	r2, #4
 80029a4:	409a      	lsls	r2, r3
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	4013      	ands	r3, r2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d012      	beq.n	80029d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0302 	and.w	r3, r3, #2
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d00b      	beq.n	80029d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029c0:	2204      	movs	r2, #4
 80029c2:	409a      	lsls	r2, r3
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029cc:	f043 0204 	orr.w	r2, r3, #4
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029d8:	2210      	movs	r2, #16
 80029da:	409a      	lsls	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	4013      	ands	r3, r2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d043      	beq.n	8002a6c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0308 	and.w	r3, r3, #8
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d03c      	beq.n	8002a6c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029f6:	2210      	movs	r2, #16
 80029f8:	409a      	lsls	r2, r3
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d018      	beq.n	8002a3e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d108      	bne.n	8002a2c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d024      	beq.n	8002a6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	4798      	blx	r3
 8002a2a:	e01f      	b.n	8002a6c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d01b      	beq.n	8002a6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	4798      	blx	r3
 8002a3c:	e016      	b.n	8002a6c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d107      	bne.n	8002a5c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f022 0208 	bic.w	r2, r2, #8
 8002a5a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d003      	beq.n	8002a6c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a70:	2220      	movs	r2, #32
 8002a72:	409a      	lsls	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	4013      	ands	r3, r2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f000 808f 	beq.w	8002b9c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0310 	and.w	r3, r3, #16
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f000 8087 	beq.w	8002b9c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a92:	2220      	movs	r2, #32
 8002a94:	409a      	lsls	r2, r3
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b05      	cmp	r3, #5
 8002aa4:	d136      	bne.n	8002b14 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f022 0216 	bic.w	r2, r2, #22
 8002ab4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	695a      	ldr	r2, [r3, #20]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ac4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d103      	bne.n	8002ad6 <HAL_DMA_IRQHandler+0x1da>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d007      	beq.n	8002ae6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f022 0208 	bic.w	r2, r2, #8
 8002ae4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aea:	223f      	movs	r2, #63	@ 0x3f
 8002aec:	409a      	lsls	r2, r3
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d07e      	beq.n	8002c08 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	4798      	blx	r3
        }
        return;
 8002b12:	e079      	b.n	8002c08 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d01d      	beq.n	8002b5e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d10d      	bne.n	8002b4c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d031      	beq.n	8002b9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	4798      	blx	r3
 8002b40:	e02c      	b.n	8002b9c <HAL_DMA_IRQHandler+0x2a0>
 8002b42:	bf00      	nop
 8002b44:	20000024 	.word	0x20000024
 8002b48:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d023      	beq.n	8002b9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	4798      	blx	r3
 8002b5c:	e01e      	b.n	8002b9c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d10f      	bne.n	8002b8c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f022 0210 	bic.w	r2, r2, #16
 8002b7a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d003      	beq.n	8002b9c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d032      	beq.n	8002c0a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d022      	beq.n	8002bf6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2205      	movs	r2, #5
 8002bb4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f022 0201 	bic.w	r2, r2, #1
 8002bc6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	3301      	adds	r3, #1
 8002bcc:	60bb      	str	r3, [r7, #8]
 8002bce:	697a      	ldr	r2, [r7, #20]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d307      	bcc.n	8002be4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1f2      	bne.n	8002bc8 <HAL_DMA_IRQHandler+0x2cc>
 8002be2:	e000      	b.n	8002be6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002be4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2201      	movs	r2, #1
 8002bea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d005      	beq.n	8002c0a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	4798      	blx	r3
 8002c06:	e000      	b.n	8002c0a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002c08:	bf00      	nop
    }
  }
}
 8002c0a:	3718      	adds	r7, #24
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
 8002c1c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002c2c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	683a      	ldr	r2, [r7, #0]
 8002c34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	2b40      	cmp	r3, #64	@ 0x40
 8002c3c:	d108      	bne.n	8002c50 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68ba      	ldr	r2, [r7, #8]
 8002c4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002c4e:	e007      	b.n	8002c60 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68ba      	ldr	r2, [r7, #8]
 8002c56:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	60da      	str	r2, [r3, #12]
}
 8002c60:	bf00      	nop
 8002c62:	3714      	adds	r7, #20
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	3b10      	subs	r3, #16
 8002c7c:	4a14      	ldr	r2, [pc, #80]	@ (8002cd0 <DMA_CalcBaseAndBitshift+0x64>)
 8002c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c82:	091b      	lsrs	r3, r3, #4
 8002c84:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c86:	4a13      	ldr	r2, [pc, #76]	@ (8002cd4 <DMA_CalcBaseAndBitshift+0x68>)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	461a      	mov	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2b03      	cmp	r3, #3
 8002c98:	d909      	bls.n	8002cae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002ca2:	f023 0303 	bic.w	r3, r3, #3
 8002ca6:	1d1a      	adds	r2, r3, #4
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	659a      	str	r2, [r3, #88]	@ 0x58
 8002cac:	e007      	b.n	8002cbe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002cb6:	f023 0303 	bic.w	r3, r3, #3
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3714      	adds	r7, #20
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	aaaaaaab 	.word	0xaaaaaaab
 8002cd4:	08006b4c 	.word	0x08006b4c

08002cd8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ce8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d11f      	bne.n	8002d32 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	2b03      	cmp	r3, #3
 8002cf6:	d856      	bhi.n	8002da6 <DMA_CheckFifoParam+0xce>
 8002cf8:	a201      	add	r2, pc, #4	@ (adr r2, 8002d00 <DMA_CheckFifoParam+0x28>)
 8002cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cfe:	bf00      	nop
 8002d00:	08002d11 	.word	0x08002d11
 8002d04:	08002d23 	.word	0x08002d23
 8002d08:	08002d11 	.word	0x08002d11
 8002d0c:	08002da7 	.word	0x08002da7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d14:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d046      	beq.n	8002daa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d20:	e043      	b.n	8002daa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d26:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002d2a:	d140      	bne.n	8002dae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d30:	e03d      	b.n	8002dae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d3a:	d121      	bne.n	8002d80 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	2b03      	cmp	r3, #3
 8002d40:	d837      	bhi.n	8002db2 <DMA_CheckFifoParam+0xda>
 8002d42:	a201      	add	r2, pc, #4	@ (adr r2, 8002d48 <DMA_CheckFifoParam+0x70>)
 8002d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d48:	08002d59 	.word	0x08002d59
 8002d4c:	08002d5f 	.word	0x08002d5f
 8002d50:	08002d59 	.word	0x08002d59
 8002d54:	08002d71 	.word	0x08002d71
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d5c:	e030      	b.n	8002dc0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d62:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d025      	beq.n	8002db6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d6e:	e022      	b.n	8002db6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d74:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002d78:	d11f      	bne.n	8002dba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d7e:	e01c      	b.n	8002dba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d903      	bls.n	8002d8e <DMA_CheckFifoParam+0xb6>
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	2b03      	cmp	r3, #3
 8002d8a:	d003      	beq.n	8002d94 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d8c:	e018      	b.n	8002dc0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	73fb      	strb	r3, [r7, #15]
      break;
 8002d92:	e015      	b.n	8002dc0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d98:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d00e      	beq.n	8002dbe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	73fb      	strb	r3, [r7, #15]
      break;
 8002da4:	e00b      	b.n	8002dbe <DMA_CheckFifoParam+0xe6>
      break;
 8002da6:	bf00      	nop
 8002da8:	e00a      	b.n	8002dc0 <DMA_CheckFifoParam+0xe8>
      break;
 8002daa:	bf00      	nop
 8002dac:	e008      	b.n	8002dc0 <DMA_CheckFifoParam+0xe8>
      break;
 8002dae:	bf00      	nop
 8002db0:	e006      	b.n	8002dc0 <DMA_CheckFifoParam+0xe8>
      break;
 8002db2:	bf00      	nop
 8002db4:	e004      	b.n	8002dc0 <DMA_CheckFifoParam+0xe8>
      break;
 8002db6:	bf00      	nop
 8002db8:	e002      	b.n	8002dc0 <DMA_CheckFifoParam+0xe8>
      break;   
 8002dba:	bf00      	nop
 8002dbc:	e000      	b.n	8002dc0 <DMA_CheckFifoParam+0xe8>
      break;
 8002dbe:	bf00      	nop
    }
  } 
  
  return status; 
 8002dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3714      	adds	r7, #20
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop

08002dd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b089      	sub	sp, #36	@ 0x24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002dde:	2300      	movs	r3, #0
 8002de0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002de2:	2300      	movs	r3, #0
 8002de4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002de6:	2300      	movs	r3, #0
 8002de8:	61fb      	str	r3, [r7, #28]
 8002dea:	e159      	b.n	80030a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002dec:	2201      	movs	r2, #1
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	697a      	ldr	r2, [r7, #20]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e00:	693a      	ldr	r2, [r7, #16]
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	f040 8148 	bne.w	800309a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f003 0303 	and.w	r3, r3, #3
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d005      	beq.n	8002e22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d130      	bne.n	8002e84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	2203      	movs	r2, #3
 8002e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e32:	43db      	mvns	r3, r3
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	4013      	ands	r3, r2
 8002e38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	68da      	ldr	r2, [r3, #12]
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	fa02 f303 	lsl.w	r3, r2, r3
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	69ba      	ldr	r2, [r7, #24]
 8002e50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e58:	2201      	movs	r2, #1
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	43db      	mvns	r3, r3
 8002e62:	69ba      	ldr	r2, [r7, #24]
 8002e64:	4013      	ands	r3, r2
 8002e66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	091b      	lsrs	r3, r3, #4
 8002e6e:	f003 0201 	and.w	r2, r3, #1
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f003 0303 	and.w	r3, r3, #3
 8002e8c:	2b03      	cmp	r3, #3
 8002e8e:	d017      	beq.n	8002ec0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	2203      	movs	r2, #3
 8002e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea0:	43db      	mvns	r3, r3
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f003 0303 	and.w	r3, r3, #3
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d123      	bne.n	8002f14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	08da      	lsrs	r2, r3, #3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	3208      	adds	r2, #8
 8002ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	f003 0307 	and.w	r3, r3, #7
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	220f      	movs	r2, #15
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	43db      	mvns	r3, r3
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	4013      	ands	r3, r2
 8002eee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	691a      	ldr	r2, [r3, #16]
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	f003 0307 	and.w	r3, r3, #7
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	08da      	lsrs	r2, r3, #3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	3208      	adds	r2, #8
 8002f0e:	69b9      	ldr	r1, [r7, #24]
 8002f10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	2203      	movs	r2, #3
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	43db      	mvns	r3, r3
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f003 0203 	and.w	r2, r3, #3
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	005b      	lsls	r3, r3, #1
 8002f38:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	69ba      	ldr	r2, [r7, #24]
 8002f46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f000 80a2 	beq.w	800309a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f56:	2300      	movs	r3, #0
 8002f58:	60fb      	str	r3, [r7, #12]
 8002f5a:	4b57      	ldr	r3, [pc, #348]	@ (80030b8 <HAL_GPIO_Init+0x2e8>)
 8002f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f5e:	4a56      	ldr	r2, [pc, #344]	@ (80030b8 <HAL_GPIO_Init+0x2e8>)
 8002f60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f64:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f66:	4b54      	ldr	r3, [pc, #336]	@ (80030b8 <HAL_GPIO_Init+0x2e8>)
 8002f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f6e:	60fb      	str	r3, [r7, #12]
 8002f70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f72:	4a52      	ldr	r2, [pc, #328]	@ (80030bc <HAL_GPIO_Init+0x2ec>)
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	089b      	lsrs	r3, r3, #2
 8002f78:	3302      	adds	r3, #2
 8002f7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	f003 0303 	and.w	r3, r3, #3
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	220f      	movs	r2, #15
 8002f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8e:	43db      	mvns	r3, r3
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	4013      	ands	r3, r2
 8002f94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a49      	ldr	r2, [pc, #292]	@ (80030c0 <HAL_GPIO_Init+0x2f0>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d019      	beq.n	8002fd2 <HAL_GPIO_Init+0x202>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a48      	ldr	r2, [pc, #288]	@ (80030c4 <HAL_GPIO_Init+0x2f4>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d013      	beq.n	8002fce <HAL_GPIO_Init+0x1fe>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a47      	ldr	r2, [pc, #284]	@ (80030c8 <HAL_GPIO_Init+0x2f8>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d00d      	beq.n	8002fca <HAL_GPIO_Init+0x1fa>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a46      	ldr	r2, [pc, #280]	@ (80030cc <HAL_GPIO_Init+0x2fc>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d007      	beq.n	8002fc6 <HAL_GPIO_Init+0x1f6>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a45      	ldr	r2, [pc, #276]	@ (80030d0 <HAL_GPIO_Init+0x300>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d101      	bne.n	8002fc2 <HAL_GPIO_Init+0x1f2>
 8002fbe:	2304      	movs	r3, #4
 8002fc0:	e008      	b.n	8002fd4 <HAL_GPIO_Init+0x204>
 8002fc2:	2307      	movs	r3, #7
 8002fc4:	e006      	b.n	8002fd4 <HAL_GPIO_Init+0x204>
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e004      	b.n	8002fd4 <HAL_GPIO_Init+0x204>
 8002fca:	2302      	movs	r3, #2
 8002fcc:	e002      	b.n	8002fd4 <HAL_GPIO_Init+0x204>
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e000      	b.n	8002fd4 <HAL_GPIO_Init+0x204>
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	69fa      	ldr	r2, [r7, #28]
 8002fd6:	f002 0203 	and.w	r2, r2, #3
 8002fda:	0092      	lsls	r2, r2, #2
 8002fdc:	4093      	lsls	r3, r2
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fe4:	4935      	ldr	r1, [pc, #212]	@ (80030bc <HAL_GPIO_Init+0x2ec>)
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	089b      	lsrs	r3, r3, #2
 8002fea:	3302      	adds	r3, #2
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ff2:	4b38      	ldr	r3, [pc, #224]	@ (80030d4 <HAL_GPIO_Init+0x304>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	43db      	mvns	r3, r3
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	4013      	ands	r3, r2
 8003000:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d003      	beq.n	8003016 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800300e:	69ba      	ldr	r2, [r7, #24]
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	4313      	orrs	r3, r2
 8003014:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003016:	4a2f      	ldr	r2, [pc, #188]	@ (80030d4 <HAL_GPIO_Init+0x304>)
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800301c:	4b2d      	ldr	r3, [pc, #180]	@ (80030d4 <HAL_GPIO_Init+0x304>)
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	43db      	mvns	r3, r3
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	4013      	ands	r3, r2
 800302a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d003      	beq.n	8003040 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	4313      	orrs	r3, r2
 800303e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003040:	4a24      	ldr	r2, [pc, #144]	@ (80030d4 <HAL_GPIO_Init+0x304>)
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003046:	4b23      	ldr	r3, [pc, #140]	@ (80030d4 <HAL_GPIO_Init+0x304>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	43db      	mvns	r3, r3
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	4013      	ands	r3, r2
 8003054:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d003      	beq.n	800306a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	4313      	orrs	r3, r2
 8003068:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800306a:	4a1a      	ldr	r2, [pc, #104]	@ (80030d4 <HAL_GPIO_Init+0x304>)
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003070:	4b18      	ldr	r3, [pc, #96]	@ (80030d4 <HAL_GPIO_Init+0x304>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	43db      	mvns	r3, r3
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	4013      	ands	r3, r2
 800307e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d003      	beq.n	8003094 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800308c:	69ba      	ldr	r2, [r7, #24]
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	4313      	orrs	r3, r2
 8003092:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003094:	4a0f      	ldr	r2, [pc, #60]	@ (80030d4 <HAL_GPIO_Init+0x304>)
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	3301      	adds	r3, #1
 800309e:	61fb      	str	r3, [r7, #28]
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	2b0f      	cmp	r3, #15
 80030a4:	f67f aea2 	bls.w	8002dec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030a8:	bf00      	nop
 80030aa:	bf00      	nop
 80030ac:	3724      	adds	r7, #36	@ 0x24
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	40023800 	.word	0x40023800
 80030bc:	40013800 	.word	0x40013800
 80030c0:	40020000 	.word	0x40020000
 80030c4:	40020400 	.word	0x40020400
 80030c8:	40020800 	.word	0x40020800
 80030cc:	40020c00 	.word	0x40020c00
 80030d0:	40021000 	.word	0x40021000
 80030d4:	40013c00 	.word	0x40013c00

080030d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e12b      	b.n	8003342 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d106      	bne.n	8003104 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f7fe fe8c 	bl	8001e1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2224      	movs	r2, #36	@ 0x24
 8003108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f022 0201 	bic.w	r2, r2, #1
 800311a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800312a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800313a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800313c:	f001 fc20 	bl	8004980 <HAL_RCC_GetPCLK1Freq>
 8003140:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	4a81      	ldr	r2, [pc, #516]	@ (800334c <HAL_I2C_Init+0x274>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d807      	bhi.n	800315c <HAL_I2C_Init+0x84>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	4a80      	ldr	r2, [pc, #512]	@ (8003350 <HAL_I2C_Init+0x278>)
 8003150:	4293      	cmp	r3, r2
 8003152:	bf94      	ite	ls
 8003154:	2301      	movls	r3, #1
 8003156:	2300      	movhi	r3, #0
 8003158:	b2db      	uxtb	r3, r3
 800315a:	e006      	b.n	800316a <HAL_I2C_Init+0x92>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	4a7d      	ldr	r2, [pc, #500]	@ (8003354 <HAL_I2C_Init+0x27c>)
 8003160:	4293      	cmp	r3, r2
 8003162:	bf94      	ite	ls
 8003164:	2301      	movls	r3, #1
 8003166:	2300      	movhi	r3, #0
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e0e7      	b.n	8003342 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	4a78      	ldr	r2, [pc, #480]	@ (8003358 <HAL_I2C_Init+0x280>)
 8003176:	fba2 2303 	umull	r2, r3, r2, r3
 800317a:	0c9b      	lsrs	r3, r3, #18
 800317c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68ba      	ldr	r2, [r7, #8]
 800318e:	430a      	orrs	r2, r1
 8003190:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	6a1b      	ldr	r3, [r3, #32]
 8003198:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	4a6a      	ldr	r2, [pc, #424]	@ (800334c <HAL_I2C_Init+0x274>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d802      	bhi.n	80031ac <HAL_I2C_Init+0xd4>
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	3301      	adds	r3, #1
 80031aa:	e009      	b.n	80031c0 <HAL_I2C_Init+0xe8>
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80031b2:	fb02 f303 	mul.w	r3, r2, r3
 80031b6:	4a69      	ldr	r2, [pc, #420]	@ (800335c <HAL_I2C_Init+0x284>)
 80031b8:	fba2 2303 	umull	r2, r3, r2, r3
 80031bc:	099b      	lsrs	r3, r3, #6
 80031be:	3301      	adds	r3, #1
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	6812      	ldr	r2, [r2, #0]
 80031c4:	430b      	orrs	r3, r1
 80031c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	69db      	ldr	r3, [r3, #28]
 80031ce:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80031d2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	495c      	ldr	r1, [pc, #368]	@ (800334c <HAL_I2C_Init+0x274>)
 80031dc:	428b      	cmp	r3, r1
 80031de:	d819      	bhi.n	8003214 <HAL_I2C_Init+0x13c>
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	1e59      	subs	r1, r3, #1
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80031ee:	1c59      	adds	r1, r3, #1
 80031f0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80031f4:	400b      	ands	r3, r1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00a      	beq.n	8003210 <HAL_I2C_Init+0x138>
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	1e59      	subs	r1, r3, #1
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	fbb1 f3f3 	udiv	r3, r1, r3
 8003208:	3301      	adds	r3, #1
 800320a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800320e:	e051      	b.n	80032b4 <HAL_I2C_Init+0x1dc>
 8003210:	2304      	movs	r3, #4
 8003212:	e04f      	b.n	80032b4 <HAL_I2C_Init+0x1dc>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d111      	bne.n	8003240 <HAL_I2C_Init+0x168>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	1e58      	subs	r0, r3, #1
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6859      	ldr	r1, [r3, #4]
 8003224:	460b      	mov	r3, r1
 8003226:	005b      	lsls	r3, r3, #1
 8003228:	440b      	add	r3, r1
 800322a:	fbb0 f3f3 	udiv	r3, r0, r3
 800322e:	3301      	adds	r3, #1
 8003230:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003234:	2b00      	cmp	r3, #0
 8003236:	bf0c      	ite	eq
 8003238:	2301      	moveq	r3, #1
 800323a:	2300      	movne	r3, #0
 800323c:	b2db      	uxtb	r3, r3
 800323e:	e012      	b.n	8003266 <HAL_I2C_Init+0x18e>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	1e58      	subs	r0, r3, #1
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6859      	ldr	r1, [r3, #4]
 8003248:	460b      	mov	r3, r1
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	440b      	add	r3, r1
 800324e:	0099      	lsls	r1, r3, #2
 8003250:	440b      	add	r3, r1
 8003252:	fbb0 f3f3 	udiv	r3, r0, r3
 8003256:	3301      	adds	r3, #1
 8003258:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800325c:	2b00      	cmp	r3, #0
 800325e:	bf0c      	ite	eq
 8003260:	2301      	moveq	r3, #1
 8003262:	2300      	movne	r3, #0
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <HAL_I2C_Init+0x196>
 800326a:	2301      	movs	r3, #1
 800326c:	e022      	b.n	80032b4 <HAL_I2C_Init+0x1dc>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d10e      	bne.n	8003294 <HAL_I2C_Init+0x1bc>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	1e58      	subs	r0, r3, #1
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6859      	ldr	r1, [r3, #4]
 800327e:	460b      	mov	r3, r1
 8003280:	005b      	lsls	r3, r3, #1
 8003282:	440b      	add	r3, r1
 8003284:	fbb0 f3f3 	udiv	r3, r0, r3
 8003288:	3301      	adds	r3, #1
 800328a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800328e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003292:	e00f      	b.n	80032b4 <HAL_I2C_Init+0x1dc>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	1e58      	subs	r0, r3, #1
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6859      	ldr	r1, [r3, #4]
 800329c:	460b      	mov	r3, r1
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	440b      	add	r3, r1
 80032a2:	0099      	lsls	r1, r3, #2
 80032a4:	440b      	add	r3, r1
 80032a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80032aa:	3301      	adds	r3, #1
 80032ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80032b4:	6879      	ldr	r1, [r7, #4]
 80032b6:	6809      	ldr	r1, [r1, #0]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	69da      	ldr	r2, [r3, #28]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a1b      	ldr	r3, [r3, #32]
 80032ce:	431a      	orrs	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	430a      	orrs	r2, r1
 80032d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80032e2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	6911      	ldr	r1, [r2, #16]
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	68d2      	ldr	r2, [r2, #12]
 80032ee:	4311      	orrs	r1, r2
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	6812      	ldr	r2, [r2, #0]
 80032f4:	430b      	orrs	r3, r1
 80032f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	695a      	ldr	r2, [r3, #20]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	431a      	orrs	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	430a      	orrs	r2, r1
 8003312:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f042 0201 	orr.w	r2, r2, #1
 8003322:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2220      	movs	r2, #32
 800332e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3710      	adds	r7, #16
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	000186a0 	.word	0x000186a0
 8003350:	001e847f 	.word	0x001e847f
 8003354:	003d08ff 	.word	0x003d08ff
 8003358:	431bde83 	.word	0x431bde83
 800335c:	10624dd3 	.word	0x10624dd3

08003360 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b088      	sub	sp, #32
 8003364:	af02      	add	r7, sp, #8
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	4608      	mov	r0, r1
 800336a:	4611      	mov	r1, r2
 800336c:	461a      	mov	r2, r3
 800336e:	4603      	mov	r3, r0
 8003370:	817b      	strh	r3, [r7, #10]
 8003372:	460b      	mov	r3, r1
 8003374:	813b      	strh	r3, [r7, #8]
 8003376:	4613      	mov	r3, r2
 8003378:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800337a:	f7fe ffe5 	bl	8002348 <HAL_GetTick>
 800337e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003386:	b2db      	uxtb	r3, r3
 8003388:	2b20      	cmp	r3, #32
 800338a:	f040 80d9 	bne.w	8003540 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	9300      	str	r3, [sp, #0]
 8003392:	2319      	movs	r3, #25
 8003394:	2201      	movs	r2, #1
 8003396:	496d      	ldr	r1, [pc, #436]	@ (800354c <HAL_I2C_Mem_Write+0x1ec>)
 8003398:	68f8      	ldr	r0, [r7, #12]
 800339a:	f000 fc8b 	bl	8003cb4 <I2C_WaitOnFlagUntilTimeout>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d001      	beq.n	80033a8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80033a4:	2302      	movs	r3, #2
 80033a6:	e0cc      	b.n	8003542 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d101      	bne.n	80033b6 <HAL_I2C_Mem_Write+0x56>
 80033b2:	2302      	movs	r3, #2
 80033b4:	e0c5      	b.n	8003542 <HAL_I2C_Mem_Write+0x1e2>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0301 	and.w	r3, r3, #1
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d007      	beq.n	80033dc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f042 0201 	orr.w	r2, r2, #1
 80033da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2221      	movs	r2, #33	@ 0x21
 80033f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2240      	movs	r2, #64	@ 0x40
 80033f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6a3a      	ldr	r2, [r7, #32]
 8003406:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800340c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003412:	b29a      	uxth	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	4a4d      	ldr	r2, [pc, #308]	@ (8003550 <HAL_I2C_Mem_Write+0x1f0>)
 800341c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800341e:	88f8      	ldrh	r0, [r7, #6]
 8003420:	893a      	ldrh	r2, [r7, #8]
 8003422:	8979      	ldrh	r1, [r7, #10]
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	9301      	str	r3, [sp, #4]
 8003428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800342a:	9300      	str	r3, [sp, #0]
 800342c:	4603      	mov	r3, r0
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f000 fac2 	bl	80039b8 <I2C_RequestMemoryWrite>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d052      	beq.n	80034e0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e081      	b.n	8003542 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800343e:	697a      	ldr	r2, [r7, #20]
 8003440:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	f000 fd50 	bl	8003ee8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00d      	beq.n	800346a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003452:	2b04      	cmp	r3, #4
 8003454:	d107      	bne.n	8003466 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003464:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e06b      	b.n	8003542 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800346e:	781a      	ldrb	r2, [r3, #0]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800347a:	1c5a      	adds	r2, r3, #1
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003484:	3b01      	subs	r3, #1
 8003486:	b29a      	uxth	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003490:	b29b      	uxth	r3, r3
 8003492:	3b01      	subs	r3, #1
 8003494:	b29a      	uxth	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	695b      	ldr	r3, [r3, #20]
 80034a0:	f003 0304 	and.w	r3, r3, #4
 80034a4:	2b04      	cmp	r3, #4
 80034a6:	d11b      	bne.n	80034e0 <HAL_I2C_Mem_Write+0x180>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d017      	beq.n	80034e0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b4:	781a      	ldrb	r2, [r3, #0]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c0:	1c5a      	adds	r2, r3, #1
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034ca:	3b01      	subs	r3, #1
 80034cc:	b29a      	uxth	r2, r3
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	3b01      	subs	r3, #1
 80034da:	b29a      	uxth	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d1aa      	bne.n	800343e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034e8:	697a      	ldr	r2, [r7, #20]
 80034ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80034ec:	68f8      	ldr	r0, [r7, #12]
 80034ee:	f000 fd43 	bl	8003f78 <I2C_WaitOnBTFFlagUntilTimeout>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d00d      	beq.n	8003514 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034fc:	2b04      	cmp	r3, #4
 80034fe:	d107      	bne.n	8003510 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800350e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e016      	b.n	8003542 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003522:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2220      	movs	r2, #32
 8003528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800353c:	2300      	movs	r3, #0
 800353e:	e000      	b.n	8003542 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003540:	2302      	movs	r3, #2
  }
}
 8003542:	4618      	mov	r0, r3
 8003544:	3718      	adds	r7, #24
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	00100002 	.word	0x00100002
 8003550:	ffff0000 	.word	0xffff0000

08003554 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b08c      	sub	sp, #48	@ 0x30
 8003558:	af02      	add	r7, sp, #8
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	4608      	mov	r0, r1
 800355e:	4611      	mov	r1, r2
 8003560:	461a      	mov	r2, r3
 8003562:	4603      	mov	r3, r0
 8003564:	817b      	strh	r3, [r7, #10]
 8003566:	460b      	mov	r3, r1
 8003568:	813b      	strh	r3, [r7, #8]
 800356a:	4613      	mov	r3, r2
 800356c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800356e:	f7fe feeb 	bl	8002348 <HAL_GetTick>
 8003572:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800357a:	b2db      	uxtb	r3, r3
 800357c:	2b20      	cmp	r3, #32
 800357e:	f040 8214 	bne.w	80039aa <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003584:	9300      	str	r3, [sp, #0]
 8003586:	2319      	movs	r3, #25
 8003588:	2201      	movs	r2, #1
 800358a:	497b      	ldr	r1, [pc, #492]	@ (8003778 <HAL_I2C_Mem_Read+0x224>)
 800358c:	68f8      	ldr	r0, [r7, #12]
 800358e:	f000 fb91 	bl	8003cb4 <I2C_WaitOnFlagUntilTimeout>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d001      	beq.n	800359c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003598:	2302      	movs	r3, #2
 800359a:	e207      	b.n	80039ac <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d101      	bne.n	80035aa <HAL_I2C_Mem_Read+0x56>
 80035a6:	2302      	movs	r3, #2
 80035a8:	e200      	b.n	80039ac <HAL_I2C_Mem_Read+0x458>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2201      	movs	r2, #1
 80035ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0301 	and.w	r3, r3, #1
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d007      	beq.n	80035d0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f042 0201 	orr.w	r2, r2, #1
 80035ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2222      	movs	r2, #34	@ 0x22
 80035e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2240      	movs	r2, #64	@ 0x40
 80035ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035fa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003600:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003606:	b29a      	uxth	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	4a5b      	ldr	r2, [pc, #364]	@ (800377c <HAL_I2C_Mem_Read+0x228>)
 8003610:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003612:	88f8      	ldrh	r0, [r7, #6]
 8003614:	893a      	ldrh	r2, [r7, #8]
 8003616:	8979      	ldrh	r1, [r7, #10]
 8003618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800361a:	9301      	str	r3, [sp, #4]
 800361c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800361e:	9300      	str	r3, [sp, #0]
 8003620:	4603      	mov	r3, r0
 8003622:	68f8      	ldr	r0, [r7, #12]
 8003624:	f000 fa5e 	bl	8003ae4 <I2C_RequestMemoryRead>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d001      	beq.n	8003632 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e1bc      	b.n	80039ac <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003636:	2b00      	cmp	r3, #0
 8003638:	d113      	bne.n	8003662 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800363a:	2300      	movs	r3, #0
 800363c:	623b      	str	r3, [r7, #32]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	695b      	ldr	r3, [r3, #20]
 8003644:	623b      	str	r3, [r7, #32]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	623b      	str	r3, [r7, #32]
 800364e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800365e:	601a      	str	r2, [r3, #0]
 8003660:	e190      	b.n	8003984 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003666:	2b01      	cmp	r3, #1
 8003668:	d11b      	bne.n	80036a2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003678:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800367a:	2300      	movs	r3, #0
 800367c:	61fb      	str	r3, [r7, #28]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	695b      	ldr	r3, [r3, #20]
 8003684:	61fb      	str	r3, [r7, #28]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	61fb      	str	r3, [r7, #28]
 800368e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800369e:	601a      	str	r2, [r3, #0]
 80036a0:	e170      	b.n	8003984 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d11b      	bne.n	80036e2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036b8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036ca:	2300      	movs	r3, #0
 80036cc:	61bb      	str	r3, [r7, #24]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	695b      	ldr	r3, [r3, #20]
 80036d4:	61bb      	str	r3, [r7, #24]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	61bb      	str	r3, [r7, #24]
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	e150      	b.n	8003984 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036e2:	2300      	movs	r3, #0
 80036e4:	617b      	str	r3, [r7, #20]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	695b      	ldr	r3, [r3, #20]
 80036ec:	617b      	str	r3, [r7, #20]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	617b      	str	r3, [r7, #20]
 80036f6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80036f8:	e144      	b.n	8003984 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036fe:	2b03      	cmp	r3, #3
 8003700:	f200 80f1 	bhi.w	80038e6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003708:	2b01      	cmp	r3, #1
 800370a:	d123      	bne.n	8003754 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800370c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800370e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003710:	68f8      	ldr	r0, [r7, #12]
 8003712:	f000 fc79 	bl	8004008 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d001      	beq.n	8003720 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e145      	b.n	80039ac <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	691a      	ldr	r2, [r3, #16]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800372a:	b2d2      	uxtb	r2, r2
 800372c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003732:	1c5a      	adds	r2, r3, #1
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800373c:	3b01      	subs	r3, #1
 800373e:	b29a      	uxth	r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003748:	b29b      	uxth	r3, r3
 800374a:	3b01      	subs	r3, #1
 800374c:	b29a      	uxth	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003752:	e117      	b.n	8003984 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003758:	2b02      	cmp	r3, #2
 800375a:	d14e      	bne.n	80037fa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800375c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800375e:	9300      	str	r3, [sp, #0]
 8003760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003762:	2200      	movs	r2, #0
 8003764:	4906      	ldr	r1, [pc, #24]	@ (8003780 <HAL_I2C_Mem_Read+0x22c>)
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f000 faa4 	bl	8003cb4 <I2C_WaitOnFlagUntilTimeout>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d008      	beq.n	8003784 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e11a      	b.n	80039ac <HAL_I2C_Mem_Read+0x458>
 8003776:	bf00      	nop
 8003778:	00100002 	.word	0x00100002
 800377c:	ffff0000 	.word	0xffff0000
 8003780:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003792:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	691a      	ldr	r2, [r3, #16]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800379e:	b2d2      	uxtb	r2, r2
 80037a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a6:	1c5a      	adds	r2, r3, #1
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037b0:	3b01      	subs	r3, #1
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037bc:	b29b      	uxth	r3, r3
 80037be:	3b01      	subs	r3, #1
 80037c0:	b29a      	uxth	r2, r3
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	691a      	ldr	r2, [r3, #16]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d0:	b2d2      	uxtb	r2, r2
 80037d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d8:	1c5a      	adds	r2, r3, #1
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037e2:	3b01      	subs	r3, #1
 80037e4:	b29a      	uxth	r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	3b01      	subs	r3, #1
 80037f2:	b29a      	uxth	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80037f8:	e0c4      	b.n	8003984 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037fc:	9300      	str	r3, [sp, #0]
 80037fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003800:	2200      	movs	r2, #0
 8003802:	496c      	ldr	r1, [pc, #432]	@ (80039b4 <HAL_I2C_Mem_Read+0x460>)
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f000 fa55 	bl	8003cb4 <I2C_WaitOnFlagUntilTimeout>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d001      	beq.n	8003814 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e0cb      	b.n	80039ac <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003822:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	691a      	ldr	r2, [r3, #16]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800382e:	b2d2      	uxtb	r2, r2
 8003830:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003836:	1c5a      	adds	r2, r3, #1
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003840:	3b01      	subs	r3, #1
 8003842:	b29a      	uxth	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800384c:	b29b      	uxth	r3, r3
 800384e:	3b01      	subs	r3, #1
 8003850:	b29a      	uxth	r2, r3
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003858:	9300      	str	r3, [sp, #0]
 800385a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800385c:	2200      	movs	r2, #0
 800385e:	4955      	ldr	r1, [pc, #340]	@ (80039b4 <HAL_I2C_Mem_Read+0x460>)
 8003860:	68f8      	ldr	r0, [r7, #12]
 8003862:	f000 fa27 	bl	8003cb4 <I2C_WaitOnFlagUntilTimeout>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d001      	beq.n	8003870 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e09d      	b.n	80039ac <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800387e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	691a      	ldr	r2, [r3, #16]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800388a:	b2d2      	uxtb	r2, r2
 800388c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003892:	1c5a      	adds	r2, r3, #1
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800389c:	3b01      	subs	r3, #1
 800389e:	b29a      	uxth	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	3b01      	subs	r3, #1
 80038ac:	b29a      	uxth	r2, r3
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	691a      	ldr	r2, [r3, #16]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038bc:	b2d2      	uxtb	r2, r2
 80038be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c4:	1c5a      	adds	r2, r3, #1
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038ce:	3b01      	subs	r3, #1
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038da:	b29b      	uxth	r3, r3
 80038dc:	3b01      	subs	r3, #1
 80038de:	b29a      	uxth	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80038e4:	e04e      	b.n	8003984 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038e8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80038ea:	68f8      	ldr	r0, [r7, #12]
 80038ec:	f000 fb8c 	bl	8004008 <I2C_WaitOnRXNEFlagUntilTimeout>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e058      	b.n	80039ac <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	691a      	ldr	r2, [r3, #16]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003904:	b2d2      	uxtb	r2, r2
 8003906:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800390c:	1c5a      	adds	r2, r3, #1
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003916:	3b01      	subs	r3, #1
 8003918:	b29a      	uxth	r2, r3
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003922:	b29b      	uxth	r3, r3
 8003924:	3b01      	subs	r3, #1
 8003926:	b29a      	uxth	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	695b      	ldr	r3, [r3, #20]
 8003932:	f003 0304 	and.w	r3, r3, #4
 8003936:	2b04      	cmp	r3, #4
 8003938:	d124      	bne.n	8003984 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800393e:	2b03      	cmp	r3, #3
 8003940:	d107      	bne.n	8003952 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003950:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	691a      	ldr	r2, [r3, #16]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800395c:	b2d2      	uxtb	r2, r2
 800395e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003964:	1c5a      	adds	r2, r3, #1
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800396e:	3b01      	subs	r3, #1
 8003970:	b29a      	uxth	r2, r3
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800397a:	b29b      	uxth	r3, r3
 800397c:	3b01      	subs	r3, #1
 800397e:	b29a      	uxth	r2, r3
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003988:	2b00      	cmp	r3, #0
 800398a:	f47f aeb6 	bne.w	80036fa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2220      	movs	r2, #32
 8003992:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80039a6:	2300      	movs	r3, #0
 80039a8:	e000      	b.n	80039ac <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80039aa:	2302      	movs	r3, #2
  }
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3728      	adds	r7, #40	@ 0x28
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	00010004 	.word	0x00010004

080039b8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b088      	sub	sp, #32
 80039bc:	af02      	add	r7, sp, #8
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	4608      	mov	r0, r1
 80039c2:	4611      	mov	r1, r2
 80039c4:	461a      	mov	r2, r3
 80039c6:	4603      	mov	r3, r0
 80039c8:	817b      	strh	r3, [r7, #10]
 80039ca:	460b      	mov	r3, r1
 80039cc:	813b      	strh	r3, [r7, #8]
 80039ce:	4613      	mov	r3, r2
 80039d0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e4:	9300      	str	r3, [sp, #0]
 80039e6:	6a3b      	ldr	r3, [r7, #32]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	f000 f960 	bl	8003cb4 <I2C_WaitOnFlagUntilTimeout>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00d      	beq.n	8003a16 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a08:	d103      	bne.n	8003a12 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a10:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e05f      	b.n	8003ad6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a16:	897b      	ldrh	r3, [r7, #10]
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003a24:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a28:	6a3a      	ldr	r2, [r7, #32]
 8003a2a:	492d      	ldr	r1, [pc, #180]	@ (8003ae0 <I2C_RequestMemoryWrite+0x128>)
 8003a2c:	68f8      	ldr	r0, [r7, #12]
 8003a2e:	f000 f9bb 	bl	8003da8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d001      	beq.n	8003a3c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e04c      	b.n	8003ad6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	617b      	str	r3, [r7, #20]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	695b      	ldr	r3, [r3, #20]
 8003a46:	617b      	str	r3, [r7, #20]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	617b      	str	r3, [r7, #20]
 8003a50:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a54:	6a39      	ldr	r1, [r7, #32]
 8003a56:	68f8      	ldr	r0, [r7, #12]
 8003a58:	f000 fa46 	bl	8003ee8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00d      	beq.n	8003a7e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a66:	2b04      	cmp	r3, #4
 8003a68:	d107      	bne.n	8003a7a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a78:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e02b      	b.n	8003ad6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a7e:	88fb      	ldrh	r3, [r7, #6]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d105      	bne.n	8003a90 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a84:	893b      	ldrh	r3, [r7, #8]
 8003a86:	b2da      	uxtb	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	611a      	str	r2, [r3, #16]
 8003a8e:	e021      	b.n	8003ad4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003a90:	893b      	ldrh	r3, [r7, #8]
 8003a92:	0a1b      	lsrs	r3, r3, #8
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	b2da      	uxtb	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003aa0:	6a39      	ldr	r1, [r7, #32]
 8003aa2:	68f8      	ldr	r0, [r7, #12]
 8003aa4:	f000 fa20 	bl	8003ee8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00d      	beq.n	8003aca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab2:	2b04      	cmp	r3, #4
 8003ab4:	d107      	bne.n	8003ac6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ac4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e005      	b.n	8003ad6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003aca:	893b      	ldrh	r3, [r7, #8]
 8003acc:	b2da      	uxtb	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3718      	adds	r7, #24
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	00010002 	.word	0x00010002

08003ae4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b088      	sub	sp, #32
 8003ae8:	af02      	add	r7, sp, #8
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	4608      	mov	r0, r1
 8003aee:	4611      	mov	r1, r2
 8003af0:	461a      	mov	r2, r3
 8003af2:	4603      	mov	r3, r0
 8003af4:	817b      	strh	r3, [r7, #10]
 8003af6:	460b      	mov	r3, r1
 8003af8:	813b      	strh	r3, [r7, #8]
 8003afa:	4613      	mov	r3, r2
 8003afc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003b0c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b1c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b20:	9300      	str	r3, [sp, #0]
 8003b22:	6a3b      	ldr	r3, [r7, #32]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003b2a:	68f8      	ldr	r0, [r7, #12]
 8003b2c:	f000 f8c2 	bl	8003cb4 <I2C_WaitOnFlagUntilTimeout>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00d      	beq.n	8003b52 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b44:	d103      	bne.n	8003b4e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b4c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e0aa      	b.n	8003ca8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b52:	897b      	ldrh	r3, [r7, #10]
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	461a      	mov	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003b60:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b64:	6a3a      	ldr	r2, [r7, #32]
 8003b66:	4952      	ldr	r1, [pc, #328]	@ (8003cb0 <I2C_RequestMemoryRead+0x1cc>)
 8003b68:	68f8      	ldr	r0, [r7, #12]
 8003b6a:	f000 f91d 	bl	8003da8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d001      	beq.n	8003b78 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e097      	b.n	8003ca8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b78:	2300      	movs	r3, #0
 8003b7a:	617b      	str	r3, [r7, #20]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	617b      	str	r3, [r7, #20]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	617b      	str	r3, [r7, #20]
 8003b8c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b90:	6a39      	ldr	r1, [r7, #32]
 8003b92:	68f8      	ldr	r0, [r7, #12]
 8003b94:	f000 f9a8 	bl	8003ee8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00d      	beq.n	8003bba <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba2:	2b04      	cmp	r3, #4
 8003ba4:	d107      	bne.n	8003bb6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bb4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e076      	b.n	8003ca8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003bba:	88fb      	ldrh	r3, [r7, #6]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d105      	bne.n	8003bcc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003bc0:	893b      	ldrh	r3, [r7, #8]
 8003bc2:	b2da      	uxtb	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	611a      	str	r2, [r3, #16]
 8003bca:	e021      	b.n	8003c10 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003bcc:	893b      	ldrh	r3, [r7, #8]
 8003bce:	0a1b      	lsrs	r3, r3, #8
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	b2da      	uxtb	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bdc:	6a39      	ldr	r1, [r7, #32]
 8003bde:	68f8      	ldr	r0, [r7, #12]
 8003be0:	f000 f982 	bl	8003ee8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00d      	beq.n	8003c06 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bee:	2b04      	cmp	r3, #4
 8003bf0:	d107      	bne.n	8003c02 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c00:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e050      	b.n	8003ca8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c06:	893b      	ldrh	r3, [r7, #8]
 8003c08:	b2da      	uxtb	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c12:	6a39      	ldr	r1, [r7, #32]
 8003c14:	68f8      	ldr	r0, [r7, #12]
 8003c16:	f000 f967 	bl	8003ee8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d00d      	beq.n	8003c3c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c24:	2b04      	cmp	r3, #4
 8003c26:	d107      	bne.n	8003c38 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c36:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e035      	b.n	8003ca8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c4a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c4e:	9300      	str	r3, [sp, #0]
 8003c50:	6a3b      	ldr	r3, [r7, #32]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003c58:	68f8      	ldr	r0, [r7, #12]
 8003c5a:	f000 f82b 	bl	8003cb4 <I2C_WaitOnFlagUntilTimeout>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00d      	beq.n	8003c80 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c72:	d103      	bne.n	8003c7c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c7a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e013      	b.n	8003ca8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003c80:	897b      	ldrh	r3, [r7, #10]
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	f043 0301 	orr.w	r3, r3, #1
 8003c88:	b2da      	uxtb	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c92:	6a3a      	ldr	r2, [r7, #32]
 8003c94:	4906      	ldr	r1, [pc, #24]	@ (8003cb0 <I2C_RequestMemoryRead+0x1cc>)
 8003c96:	68f8      	ldr	r0, [r7, #12]
 8003c98:	f000 f886 	bl	8003da8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d001      	beq.n	8003ca6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e000      	b.n	8003ca8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3718      	adds	r7, #24
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	00010002 	.word	0x00010002

08003cb4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	603b      	str	r3, [r7, #0]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cc4:	e048      	b.n	8003d58 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ccc:	d044      	beq.n	8003d58 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cce:	f7fe fb3b 	bl	8002348 <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	683a      	ldr	r2, [r7, #0]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d302      	bcc.n	8003ce4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d139      	bne.n	8003d58 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	0c1b      	lsrs	r3, r3, #16
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d10d      	bne.n	8003d0a <I2C_WaitOnFlagUntilTimeout+0x56>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	695b      	ldr	r3, [r3, #20]
 8003cf4:	43da      	mvns	r2, r3
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	bf0c      	ite	eq
 8003d00:	2301      	moveq	r3, #1
 8003d02:	2300      	movne	r3, #0
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	461a      	mov	r2, r3
 8003d08:	e00c      	b.n	8003d24 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	43da      	mvns	r2, r3
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	4013      	ands	r3, r2
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	bf0c      	ite	eq
 8003d1c:	2301      	moveq	r3, #1
 8003d1e:	2300      	movne	r3, #0
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	461a      	mov	r2, r3
 8003d24:	79fb      	ldrb	r3, [r7, #7]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d116      	bne.n	8003d58 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2220      	movs	r2, #32
 8003d34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d44:	f043 0220 	orr.w	r2, r3, #32
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e023      	b.n	8003da0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	0c1b      	lsrs	r3, r3, #16
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d10d      	bne.n	8003d7e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	695b      	ldr	r3, [r3, #20]
 8003d68:	43da      	mvns	r2, r3
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	bf0c      	ite	eq
 8003d74:	2301      	moveq	r3, #1
 8003d76:	2300      	movne	r3, #0
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	e00c      	b.n	8003d98 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	43da      	mvns	r2, r3
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	4013      	ands	r3, r2
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	bf0c      	ite	eq
 8003d90:	2301      	moveq	r3, #1
 8003d92:	2300      	movne	r3, #0
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	461a      	mov	r2, r3
 8003d98:	79fb      	ldrb	r3, [r7, #7]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d093      	beq.n	8003cc6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
 8003db4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003db6:	e071      	b.n	8003e9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dc6:	d123      	bne.n	8003e10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dd6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003de0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2220      	movs	r2, #32
 8003dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dfc:	f043 0204 	orr.w	r2, r3, #4
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e067      	b.n	8003ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e16:	d041      	beq.n	8003e9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e18:	f7fe fa96 	bl	8002348 <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d302      	bcc.n	8003e2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d136      	bne.n	8003e9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	0c1b      	lsrs	r3, r3, #16
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d10c      	bne.n	8003e52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	43da      	mvns	r2, r3
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	4013      	ands	r3, r2
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	bf14      	ite	ne
 8003e4a:	2301      	movne	r3, #1
 8003e4c:	2300      	moveq	r3, #0
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	e00b      	b.n	8003e6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	699b      	ldr	r3, [r3, #24]
 8003e58:	43da      	mvns	r2, r3
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	bf14      	ite	ne
 8003e64:	2301      	movne	r3, #1
 8003e66:	2300      	moveq	r3, #0
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d016      	beq.n	8003e9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2220      	movs	r2, #32
 8003e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e88:	f043 0220 	orr.w	r2, r3, #32
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e021      	b.n	8003ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	0c1b      	lsrs	r3, r3, #16
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d10c      	bne.n	8003ec0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	695b      	ldr	r3, [r3, #20]
 8003eac:	43da      	mvns	r2, r3
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	bf14      	ite	ne
 8003eb8:	2301      	movne	r3, #1
 8003eba:	2300      	moveq	r3, #0
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	e00b      	b.n	8003ed8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	43da      	mvns	r2, r3
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	4013      	ands	r3, r2
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	bf14      	ite	ne
 8003ed2:	2301      	movne	r3, #1
 8003ed4:	2300      	moveq	r3, #0
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f47f af6d 	bne.w	8003db8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	60b9      	str	r1, [r7, #8]
 8003ef2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ef4:	e034      	b.n	8003f60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	f000 f8e3 	bl	80040c2 <I2C_IsAcknowledgeFailed>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d001      	beq.n	8003f06 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e034      	b.n	8003f70 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f0c:	d028      	beq.n	8003f60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f0e:	f7fe fa1b 	bl	8002348 <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	68ba      	ldr	r2, [r7, #8]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d302      	bcc.n	8003f24 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d11d      	bne.n	8003f60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f2e:	2b80      	cmp	r3, #128	@ 0x80
 8003f30:	d016      	beq.n	8003f60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2220      	movs	r2, #32
 8003f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f4c:	f043 0220 	orr.w	r2, r3, #32
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e007      	b.n	8003f70 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f6a:	2b80      	cmp	r3, #128	@ 0x80
 8003f6c:	d1c3      	bne.n	8003ef6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3710      	adds	r7, #16
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f84:	e034      	b.n	8003ff0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f86:	68f8      	ldr	r0, [r7, #12]
 8003f88:	f000 f89b 	bl	80040c2 <I2C_IsAcknowledgeFailed>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e034      	b.n	8004000 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f9c:	d028      	beq.n	8003ff0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f9e:	f7fe f9d3 	bl	8002348 <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	68ba      	ldr	r2, [r7, #8]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d302      	bcc.n	8003fb4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d11d      	bne.n	8003ff0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	f003 0304 	and.w	r3, r3, #4
 8003fbe:	2b04      	cmp	r3, #4
 8003fc0:	d016      	beq.n	8003ff0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2220      	movs	r2, #32
 8003fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fdc:	f043 0220 	orr.w	r2, r3, #32
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e007      	b.n	8004000 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	f003 0304 	and.w	r3, r3, #4
 8003ffa:	2b04      	cmp	r3, #4
 8003ffc:	d1c3      	bne.n	8003f86 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003ffe:	2300      	movs	r3, #0
}
 8004000:	4618      	mov	r0, r3
 8004002:	3710      	adds	r7, #16
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004014:	e049      	b.n	80040aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	695b      	ldr	r3, [r3, #20]
 800401c:	f003 0310 	and.w	r3, r3, #16
 8004020:	2b10      	cmp	r3, #16
 8004022:	d119      	bne.n	8004058 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f06f 0210 	mvn.w	r2, #16
 800402c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2200      	movs	r2, #0
 8004032:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2220      	movs	r2, #32
 8004038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e030      	b.n	80040ba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004058:	f7fe f976 	bl	8002348 <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	68ba      	ldr	r2, [r7, #8]
 8004064:	429a      	cmp	r2, r3
 8004066:	d302      	bcc.n	800406e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d11d      	bne.n	80040aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	695b      	ldr	r3, [r3, #20]
 8004074:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004078:	2b40      	cmp	r3, #64	@ 0x40
 800407a:	d016      	beq.n	80040aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2220      	movs	r2, #32
 8004086:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004096:	f043 0220 	orr.w	r2, r3, #32
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e007      	b.n	80040ba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	695b      	ldr	r3, [r3, #20]
 80040b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040b4:	2b40      	cmp	r3, #64	@ 0x40
 80040b6:	d1ae      	bne.n	8004016 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3710      	adds	r7, #16
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}

080040c2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80040c2:	b480      	push	{r7}
 80040c4:	b083      	sub	sp, #12
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	695b      	ldr	r3, [r3, #20]
 80040d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040d8:	d11b      	bne.n	8004112 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80040e2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2220      	movs	r2, #32
 80040ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040fe:	f043 0204 	orr.w	r2, r3, #4
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e000      	b.n	8004114 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004112:	2300      	movs	r3, #0
}
 8004114:	4618      	mov	r0, r3
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b086      	sub	sp, #24
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e267      	b.n	8004602 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	2b00      	cmp	r3, #0
 800413c:	d075      	beq.n	800422a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800413e:	4b88      	ldr	r3, [pc, #544]	@ (8004360 <HAL_RCC_OscConfig+0x240>)
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f003 030c 	and.w	r3, r3, #12
 8004146:	2b04      	cmp	r3, #4
 8004148:	d00c      	beq.n	8004164 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800414a:	4b85      	ldr	r3, [pc, #532]	@ (8004360 <HAL_RCC_OscConfig+0x240>)
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004152:	2b08      	cmp	r3, #8
 8004154:	d112      	bne.n	800417c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004156:	4b82      	ldr	r3, [pc, #520]	@ (8004360 <HAL_RCC_OscConfig+0x240>)
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800415e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004162:	d10b      	bne.n	800417c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004164:	4b7e      	ldr	r3, [pc, #504]	@ (8004360 <HAL_RCC_OscConfig+0x240>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d05b      	beq.n	8004228 <HAL_RCC_OscConfig+0x108>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d157      	bne.n	8004228 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e242      	b.n	8004602 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004184:	d106      	bne.n	8004194 <HAL_RCC_OscConfig+0x74>
 8004186:	4b76      	ldr	r3, [pc, #472]	@ (8004360 <HAL_RCC_OscConfig+0x240>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a75      	ldr	r2, [pc, #468]	@ (8004360 <HAL_RCC_OscConfig+0x240>)
 800418c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004190:	6013      	str	r3, [r2, #0]
 8004192:	e01d      	b.n	80041d0 <HAL_RCC_OscConfig+0xb0>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800419c:	d10c      	bne.n	80041b8 <HAL_RCC_OscConfig+0x98>
 800419e:	4b70      	ldr	r3, [pc, #448]	@ (8004360 <HAL_RCC_OscConfig+0x240>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a6f      	ldr	r2, [pc, #444]	@ (8004360 <HAL_RCC_OscConfig+0x240>)
 80041a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041a8:	6013      	str	r3, [r2, #0]
 80041aa:	4b6d      	ldr	r3, [pc, #436]	@ (8004360 <HAL_RCC_OscConfig+0x240>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a6c      	ldr	r2, [pc, #432]	@ (8004360 <HAL_RCC_OscConfig+0x240>)
 80041b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041b4:	6013      	str	r3, [r2, #0]
 80041b6:	e00b      	b.n	80041d0 <HAL_RCC_OscConfig+0xb0>
 80041b8:	4b69      	ldr	r3, [pc, #420]	@ (8004360 <HAL_RCC_OscConfig+0x240>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a68      	ldr	r2, [pc, #416]	@ (8004360 <HAL_RCC_OscConfig+0x240>)
 80041be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041c2:	6013      	str	r3, [r2, #0]
 80041c4:	4b66      	ldr	r3, [pc, #408]	@ (8004360 <HAL_RCC_OscConfig+0x240>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a65      	ldr	r2, [pc, #404]	@ (8004360 <HAL_RCC_OscConfig+0x240>)
 80041ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d013      	beq.n	8004200 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d8:	f7fe f8b6 	bl	8002348 <HAL_GetTick>
 80041dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041de:	e008      	b.n	80041f2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041e0:	f7fe f8b2 	bl	8002348 <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	2b64      	cmp	r3, #100	@ 0x64
 80041ec:	d901      	bls.n	80041f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e207      	b.n	8004602 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041f2:	4b5b      	ldr	r3, [pc, #364]	@ (8004360 <HAL_RCC_OscConfig+0x240>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d0f0      	beq.n	80041e0 <HAL_RCC_OscConfig+0xc0>
 80041fe:	e014      	b.n	800422a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004200:	f7fe f8a2 	bl	8002348 <HAL_GetTick>
 8004204:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004206:	e008      	b.n	800421a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004208:	f7fe f89e 	bl	8002348 <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	2b64      	cmp	r3, #100	@ 0x64
 8004214:	d901      	bls.n	800421a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e1f3      	b.n	8004602 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800421a:	4b51      	ldr	r3, [pc, #324]	@ (8004360 <HAL_RCC_OscConfig+0x240>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1f0      	bne.n	8004208 <HAL_RCC_OscConfig+0xe8>
 8004226:	e000      	b.n	800422a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004228:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0302 	and.w	r3, r3, #2
 8004232:	2b00      	cmp	r3, #0
 8004234:	d063      	beq.n	80042fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004236:	4b4a      	ldr	r3, [pc, #296]	@ (8004360 <HAL_RCC_OscConfig+0x240>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f003 030c 	and.w	r3, r3, #12
 800423e:	2b00      	cmp	r3, #0
 8004240:	d00b      	beq.n	800425a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004242:	4b47      	ldr	r3, [pc, #284]	@ (8004360 <HAL_RCC_OscConfig+0x240>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800424a:	2b08      	cmp	r3, #8
 800424c:	d11c      	bne.n	8004288 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800424e:	4b44      	ldr	r3, [pc, #272]	@ (8004360 <HAL_RCC_OscConfig+0x240>)
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d116      	bne.n	8004288 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800425a:	4b41      	ldr	r3, [pc, #260]	@ (8004360 <HAL_RCC_OscConfig+0x240>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0302 	and.w	r3, r3, #2
 8004262:	2b00      	cmp	r3, #0
 8004264:	d005      	beq.n	8004272 <HAL_RCC_OscConfig+0x152>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	2b01      	cmp	r3, #1
 800426c:	d001      	beq.n	8004272 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e1c7      	b.n	8004602 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004272:	4b3b      	ldr	r3, [pc, #236]	@ (8004360 <HAL_RCC_OscConfig+0x240>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	4937      	ldr	r1, [pc, #220]	@ (8004360 <HAL_RCC_OscConfig+0x240>)
 8004282:	4313      	orrs	r3, r2
 8004284:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004286:	e03a      	b.n	80042fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d020      	beq.n	80042d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004290:	4b34      	ldr	r3, [pc, #208]	@ (8004364 <HAL_RCC_OscConfig+0x244>)
 8004292:	2201      	movs	r2, #1
 8004294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004296:	f7fe f857 	bl	8002348 <HAL_GetTick>
 800429a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800429c:	e008      	b.n	80042b0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800429e:	f7fe f853 	bl	8002348 <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d901      	bls.n	80042b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e1a8      	b.n	8004602 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042b0:	4b2b      	ldr	r3, [pc, #172]	@ (8004360 <HAL_RCC_OscConfig+0x240>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0302 	and.w	r3, r3, #2
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d0f0      	beq.n	800429e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042bc:	4b28      	ldr	r3, [pc, #160]	@ (8004360 <HAL_RCC_OscConfig+0x240>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	00db      	lsls	r3, r3, #3
 80042ca:	4925      	ldr	r1, [pc, #148]	@ (8004360 <HAL_RCC_OscConfig+0x240>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	600b      	str	r3, [r1, #0]
 80042d0:	e015      	b.n	80042fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042d2:	4b24      	ldr	r3, [pc, #144]	@ (8004364 <HAL_RCC_OscConfig+0x244>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d8:	f7fe f836 	bl	8002348 <HAL_GetTick>
 80042dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042de:	e008      	b.n	80042f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042e0:	f7fe f832 	bl	8002348 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d901      	bls.n	80042f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e187      	b.n	8004602 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042f2:	4b1b      	ldr	r3, [pc, #108]	@ (8004360 <HAL_RCC_OscConfig+0x240>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1f0      	bne.n	80042e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0308 	and.w	r3, r3, #8
 8004306:	2b00      	cmp	r3, #0
 8004308:	d036      	beq.n	8004378 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	695b      	ldr	r3, [r3, #20]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d016      	beq.n	8004340 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004312:	4b15      	ldr	r3, [pc, #84]	@ (8004368 <HAL_RCC_OscConfig+0x248>)
 8004314:	2201      	movs	r2, #1
 8004316:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004318:	f7fe f816 	bl	8002348 <HAL_GetTick>
 800431c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800431e:	e008      	b.n	8004332 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004320:	f7fe f812 	bl	8002348 <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	2b02      	cmp	r3, #2
 800432c:	d901      	bls.n	8004332 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e167      	b.n	8004602 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004332:	4b0b      	ldr	r3, [pc, #44]	@ (8004360 <HAL_RCC_OscConfig+0x240>)
 8004334:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	2b00      	cmp	r3, #0
 800433c:	d0f0      	beq.n	8004320 <HAL_RCC_OscConfig+0x200>
 800433e:	e01b      	b.n	8004378 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004340:	4b09      	ldr	r3, [pc, #36]	@ (8004368 <HAL_RCC_OscConfig+0x248>)
 8004342:	2200      	movs	r2, #0
 8004344:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004346:	f7fd ffff 	bl	8002348 <HAL_GetTick>
 800434a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800434c:	e00e      	b.n	800436c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800434e:	f7fd fffb 	bl	8002348 <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	2b02      	cmp	r3, #2
 800435a:	d907      	bls.n	800436c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e150      	b.n	8004602 <HAL_RCC_OscConfig+0x4e2>
 8004360:	40023800 	.word	0x40023800
 8004364:	42470000 	.word	0x42470000
 8004368:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800436c:	4b88      	ldr	r3, [pc, #544]	@ (8004590 <HAL_RCC_OscConfig+0x470>)
 800436e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004370:	f003 0302 	and.w	r3, r3, #2
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1ea      	bne.n	800434e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0304 	and.w	r3, r3, #4
 8004380:	2b00      	cmp	r3, #0
 8004382:	f000 8097 	beq.w	80044b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004386:	2300      	movs	r3, #0
 8004388:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800438a:	4b81      	ldr	r3, [pc, #516]	@ (8004590 <HAL_RCC_OscConfig+0x470>)
 800438c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800438e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d10f      	bne.n	80043b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004396:	2300      	movs	r3, #0
 8004398:	60bb      	str	r3, [r7, #8]
 800439a:	4b7d      	ldr	r3, [pc, #500]	@ (8004590 <HAL_RCC_OscConfig+0x470>)
 800439c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800439e:	4a7c      	ldr	r2, [pc, #496]	@ (8004590 <HAL_RCC_OscConfig+0x470>)
 80043a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80043a6:	4b7a      	ldr	r3, [pc, #488]	@ (8004590 <HAL_RCC_OscConfig+0x470>)
 80043a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043ae:	60bb      	str	r3, [r7, #8]
 80043b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043b2:	2301      	movs	r3, #1
 80043b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043b6:	4b77      	ldr	r3, [pc, #476]	@ (8004594 <HAL_RCC_OscConfig+0x474>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d118      	bne.n	80043f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043c2:	4b74      	ldr	r3, [pc, #464]	@ (8004594 <HAL_RCC_OscConfig+0x474>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a73      	ldr	r2, [pc, #460]	@ (8004594 <HAL_RCC_OscConfig+0x474>)
 80043c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043ce:	f7fd ffbb 	bl	8002348 <HAL_GetTick>
 80043d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043d4:	e008      	b.n	80043e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043d6:	f7fd ffb7 	bl	8002348 <HAL_GetTick>
 80043da:	4602      	mov	r2, r0
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d901      	bls.n	80043e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e10c      	b.n	8004602 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043e8:	4b6a      	ldr	r3, [pc, #424]	@ (8004594 <HAL_RCC_OscConfig+0x474>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d0f0      	beq.n	80043d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d106      	bne.n	800440a <HAL_RCC_OscConfig+0x2ea>
 80043fc:	4b64      	ldr	r3, [pc, #400]	@ (8004590 <HAL_RCC_OscConfig+0x470>)
 80043fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004400:	4a63      	ldr	r2, [pc, #396]	@ (8004590 <HAL_RCC_OscConfig+0x470>)
 8004402:	f043 0301 	orr.w	r3, r3, #1
 8004406:	6713      	str	r3, [r2, #112]	@ 0x70
 8004408:	e01c      	b.n	8004444 <HAL_RCC_OscConfig+0x324>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	2b05      	cmp	r3, #5
 8004410:	d10c      	bne.n	800442c <HAL_RCC_OscConfig+0x30c>
 8004412:	4b5f      	ldr	r3, [pc, #380]	@ (8004590 <HAL_RCC_OscConfig+0x470>)
 8004414:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004416:	4a5e      	ldr	r2, [pc, #376]	@ (8004590 <HAL_RCC_OscConfig+0x470>)
 8004418:	f043 0304 	orr.w	r3, r3, #4
 800441c:	6713      	str	r3, [r2, #112]	@ 0x70
 800441e:	4b5c      	ldr	r3, [pc, #368]	@ (8004590 <HAL_RCC_OscConfig+0x470>)
 8004420:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004422:	4a5b      	ldr	r2, [pc, #364]	@ (8004590 <HAL_RCC_OscConfig+0x470>)
 8004424:	f043 0301 	orr.w	r3, r3, #1
 8004428:	6713      	str	r3, [r2, #112]	@ 0x70
 800442a:	e00b      	b.n	8004444 <HAL_RCC_OscConfig+0x324>
 800442c:	4b58      	ldr	r3, [pc, #352]	@ (8004590 <HAL_RCC_OscConfig+0x470>)
 800442e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004430:	4a57      	ldr	r2, [pc, #348]	@ (8004590 <HAL_RCC_OscConfig+0x470>)
 8004432:	f023 0301 	bic.w	r3, r3, #1
 8004436:	6713      	str	r3, [r2, #112]	@ 0x70
 8004438:	4b55      	ldr	r3, [pc, #340]	@ (8004590 <HAL_RCC_OscConfig+0x470>)
 800443a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800443c:	4a54      	ldr	r2, [pc, #336]	@ (8004590 <HAL_RCC_OscConfig+0x470>)
 800443e:	f023 0304 	bic.w	r3, r3, #4
 8004442:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d015      	beq.n	8004478 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800444c:	f7fd ff7c 	bl	8002348 <HAL_GetTick>
 8004450:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004452:	e00a      	b.n	800446a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004454:	f7fd ff78 	bl	8002348 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004462:	4293      	cmp	r3, r2
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e0cb      	b.n	8004602 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800446a:	4b49      	ldr	r3, [pc, #292]	@ (8004590 <HAL_RCC_OscConfig+0x470>)
 800446c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800446e:	f003 0302 	and.w	r3, r3, #2
 8004472:	2b00      	cmp	r3, #0
 8004474:	d0ee      	beq.n	8004454 <HAL_RCC_OscConfig+0x334>
 8004476:	e014      	b.n	80044a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004478:	f7fd ff66 	bl	8002348 <HAL_GetTick>
 800447c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800447e:	e00a      	b.n	8004496 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004480:	f7fd ff62 	bl	8002348 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800448e:	4293      	cmp	r3, r2
 8004490:	d901      	bls.n	8004496 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e0b5      	b.n	8004602 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004496:	4b3e      	ldr	r3, [pc, #248]	@ (8004590 <HAL_RCC_OscConfig+0x470>)
 8004498:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800449a:	f003 0302 	and.w	r3, r3, #2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1ee      	bne.n	8004480 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80044a2:	7dfb      	ldrb	r3, [r7, #23]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d105      	bne.n	80044b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044a8:	4b39      	ldr	r3, [pc, #228]	@ (8004590 <HAL_RCC_OscConfig+0x470>)
 80044aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ac:	4a38      	ldr	r2, [pc, #224]	@ (8004590 <HAL_RCC_OscConfig+0x470>)
 80044ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044b2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	f000 80a1 	beq.w	8004600 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044be:	4b34      	ldr	r3, [pc, #208]	@ (8004590 <HAL_RCC_OscConfig+0x470>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f003 030c 	and.w	r3, r3, #12
 80044c6:	2b08      	cmp	r3, #8
 80044c8:	d05c      	beq.n	8004584 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d141      	bne.n	8004556 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044d2:	4b31      	ldr	r3, [pc, #196]	@ (8004598 <HAL_RCC_OscConfig+0x478>)
 80044d4:	2200      	movs	r2, #0
 80044d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d8:	f7fd ff36 	bl	8002348 <HAL_GetTick>
 80044dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044de:	e008      	b.n	80044f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044e0:	f7fd ff32 	bl	8002348 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d901      	bls.n	80044f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e087      	b.n	8004602 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044f2:	4b27      	ldr	r3, [pc, #156]	@ (8004590 <HAL_RCC_OscConfig+0x470>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1f0      	bne.n	80044e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	69da      	ldr	r2, [r3, #28]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a1b      	ldr	r3, [r3, #32]
 8004506:	431a      	orrs	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800450c:	019b      	lsls	r3, r3, #6
 800450e:	431a      	orrs	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004514:	085b      	lsrs	r3, r3, #1
 8004516:	3b01      	subs	r3, #1
 8004518:	041b      	lsls	r3, r3, #16
 800451a:	431a      	orrs	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004520:	061b      	lsls	r3, r3, #24
 8004522:	491b      	ldr	r1, [pc, #108]	@ (8004590 <HAL_RCC_OscConfig+0x470>)
 8004524:	4313      	orrs	r3, r2
 8004526:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004528:	4b1b      	ldr	r3, [pc, #108]	@ (8004598 <HAL_RCC_OscConfig+0x478>)
 800452a:	2201      	movs	r2, #1
 800452c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800452e:	f7fd ff0b 	bl	8002348 <HAL_GetTick>
 8004532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004534:	e008      	b.n	8004548 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004536:	f7fd ff07 	bl	8002348 <HAL_GetTick>
 800453a:	4602      	mov	r2, r0
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	2b02      	cmp	r3, #2
 8004542:	d901      	bls.n	8004548 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e05c      	b.n	8004602 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004548:	4b11      	ldr	r3, [pc, #68]	@ (8004590 <HAL_RCC_OscConfig+0x470>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d0f0      	beq.n	8004536 <HAL_RCC_OscConfig+0x416>
 8004554:	e054      	b.n	8004600 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004556:	4b10      	ldr	r3, [pc, #64]	@ (8004598 <HAL_RCC_OscConfig+0x478>)
 8004558:	2200      	movs	r2, #0
 800455a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800455c:	f7fd fef4 	bl	8002348 <HAL_GetTick>
 8004560:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004562:	e008      	b.n	8004576 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004564:	f7fd fef0 	bl	8002348 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b02      	cmp	r3, #2
 8004570:	d901      	bls.n	8004576 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e045      	b.n	8004602 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004576:	4b06      	ldr	r3, [pc, #24]	@ (8004590 <HAL_RCC_OscConfig+0x470>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1f0      	bne.n	8004564 <HAL_RCC_OscConfig+0x444>
 8004582:	e03d      	b.n	8004600 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	699b      	ldr	r3, [r3, #24]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d107      	bne.n	800459c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e038      	b.n	8004602 <HAL_RCC_OscConfig+0x4e2>
 8004590:	40023800 	.word	0x40023800
 8004594:	40007000 	.word	0x40007000
 8004598:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800459c:	4b1b      	ldr	r3, [pc, #108]	@ (800460c <HAL_RCC_OscConfig+0x4ec>)
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d028      	beq.n	80045fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d121      	bne.n	80045fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d11a      	bne.n	80045fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80045cc:	4013      	ands	r3, r2
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80045d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d111      	bne.n	80045fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045e2:	085b      	lsrs	r3, r3, #1
 80045e4:	3b01      	subs	r3, #1
 80045e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d107      	bne.n	80045fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d001      	beq.n	8004600 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e000      	b.n	8004602 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3718      	adds	r7, #24
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	40023800 	.word	0x40023800

08004610 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d101      	bne.n	8004624 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e0cc      	b.n	80047be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004624:	4b68      	ldr	r3, [pc, #416]	@ (80047c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0307 	and.w	r3, r3, #7
 800462c:	683a      	ldr	r2, [r7, #0]
 800462e:	429a      	cmp	r2, r3
 8004630:	d90c      	bls.n	800464c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004632:	4b65      	ldr	r3, [pc, #404]	@ (80047c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004634:	683a      	ldr	r2, [r7, #0]
 8004636:	b2d2      	uxtb	r2, r2
 8004638:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800463a:	4b63      	ldr	r3, [pc, #396]	@ (80047c8 <HAL_RCC_ClockConfig+0x1b8>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0307 	and.w	r3, r3, #7
 8004642:	683a      	ldr	r2, [r7, #0]
 8004644:	429a      	cmp	r2, r3
 8004646:	d001      	beq.n	800464c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e0b8      	b.n	80047be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0302 	and.w	r3, r3, #2
 8004654:	2b00      	cmp	r3, #0
 8004656:	d020      	beq.n	800469a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0304 	and.w	r3, r3, #4
 8004660:	2b00      	cmp	r3, #0
 8004662:	d005      	beq.n	8004670 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004664:	4b59      	ldr	r3, [pc, #356]	@ (80047cc <HAL_RCC_ClockConfig+0x1bc>)
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	4a58      	ldr	r2, [pc, #352]	@ (80047cc <HAL_RCC_ClockConfig+0x1bc>)
 800466a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800466e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0308 	and.w	r3, r3, #8
 8004678:	2b00      	cmp	r3, #0
 800467a:	d005      	beq.n	8004688 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800467c:	4b53      	ldr	r3, [pc, #332]	@ (80047cc <HAL_RCC_ClockConfig+0x1bc>)
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	4a52      	ldr	r2, [pc, #328]	@ (80047cc <HAL_RCC_ClockConfig+0x1bc>)
 8004682:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004686:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004688:	4b50      	ldr	r3, [pc, #320]	@ (80047cc <HAL_RCC_ClockConfig+0x1bc>)
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	494d      	ldr	r1, [pc, #308]	@ (80047cc <HAL_RCC_ClockConfig+0x1bc>)
 8004696:	4313      	orrs	r3, r2
 8004698:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d044      	beq.n	8004730 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d107      	bne.n	80046be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ae:	4b47      	ldr	r3, [pc, #284]	@ (80047cc <HAL_RCC_ClockConfig+0x1bc>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d119      	bne.n	80046ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e07f      	b.n	80047be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d003      	beq.n	80046ce <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046ca:	2b03      	cmp	r3, #3
 80046cc:	d107      	bne.n	80046de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046ce:	4b3f      	ldr	r3, [pc, #252]	@ (80047cc <HAL_RCC_ClockConfig+0x1bc>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d109      	bne.n	80046ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e06f      	b.n	80047be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046de:	4b3b      	ldr	r3, [pc, #236]	@ (80047cc <HAL_RCC_ClockConfig+0x1bc>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0302 	and.w	r3, r3, #2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e067      	b.n	80047be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046ee:	4b37      	ldr	r3, [pc, #220]	@ (80047cc <HAL_RCC_ClockConfig+0x1bc>)
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f023 0203 	bic.w	r2, r3, #3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	4934      	ldr	r1, [pc, #208]	@ (80047cc <HAL_RCC_ClockConfig+0x1bc>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004700:	f7fd fe22 	bl	8002348 <HAL_GetTick>
 8004704:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004706:	e00a      	b.n	800471e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004708:	f7fd fe1e 	bl	8002348 <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004716:	4293      	cmp	r3, r2
 8004718:	d901      	bls.n	800471e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e04f      	b.n	80047be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800471e:	4b2b      	ldr	r3, [pc, #172]	@ (80047cc <HAL_RCC_ClockConfig+0x1bc>)
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f003 020c 	and.w	r2, r3, #12
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	429a      	cmp	r2, r3
 800472e:	d1eb      	bne.n	8004708 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004730:	4b25      	ldr	r3, [pc, #148]	@ (80047c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0307 	and.w	r3, r3, #7
 8004738:	683a      	ldr	r2, [r7, #0]
 800473a:	429a      	cmp	r2, r3
 800473c:	d20c      	bcs.n	8004758 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800473e:	4b22      	ldr	r3, [pc, #136]	@ (80047c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004740:	683a      	ldr	r2, [r7, #0]
 8004742:	b2d2      	uxtb	r2, r2
 8004744:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004746:	4b20      	ldr	r3, [pc, #128]	@ (80047c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0307 	and.w	r3, r3, #7
 800474e:	683a      	ldr	r2, [r7, #0]
 8004750:	429a      	cmp	r2, r3
 8004752:	d001      	beq.n	8004758 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e032      	b.n	80047be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0304 	and.w	r3, r3, #4
 8004760:	2b00      	cmp	r3, #0
 8004762:	d008      	beq.n	8004776 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004764:	4b19      	ldr	r3, [pc, #100]	@ (80047cc <HAL_RCC_ClockConfig+0x1bc>)
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	4916      	ldr	r1, [pc, #88]	@ (80047cc <HAL_RCC_ClockConfig+0x1bc>)
 8004772:	4313      	orrs	r3, r2
 8004774:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0308 	and.w	r3, r3, #8
 800477e:	2b00      	cmp	r3, #0
 8004780:	d009      	beq.n	8004796 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004782:	4b12      	ldr	r3, [pc, #72]	@ (80047cc <HAL_RCC_ClockConfig+0x1bc>)
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	00db      	lsls	r3, r3, #3
 8004790:	490e      	ldr	r1, [pc, #56]	@ (80047cc <HAL_RCC_ClockConfig+0x1bc>)
 8004792:	4313      	orrs	r3, r2
 8004794:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004796:	f000 f821 	bl	80047dc <HAL_RCC_GetSysClockFreq>
 800479a:	4602      	mov	r2, r0
 800479c:	4b0b      	ldr	r3, [pc, #44]	@ (80047cc <HAL_RCC_ClockConfig+0x1bc>)
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	091b      	lsrs	r3, r3, #4
 80047a2:	f003 030f 	and.w	r3, r3, #15
 80047a6:	490a      	ldr	r1, [pc, #40]	@ (80047d0 <HAL_RCC_ClockConfig+0x1c0>)
 80047a8:	5ccb      	ldrb	r3, [r1, r3]
 80047aa:	fa22 f303 	lsr.w	r3, r2, r3
 80047ae:	4a09      	ldr	r2, [pc, #36]	@ (80047d4 <HAL_RCC_ClockConfig+0x1c4>)
 80047b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80047b2:	4b09      	ldr	r3, [pc, #36]	@ (80047d8 <HAL_RCC_ClockConfig+0x1c8>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4618      	mov	r0, r3
 80047b8:	f7fd fd82 	bl	80022c0 <HAL_InitTick>

  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	40023c00 	.word	0x40023c00
 80047cc:	40023800 	.word	0x40023800
 80047d0:	08006b34 	.word	0x08006b34
 80047d4:	20000024 	.word	0x20000024
 80047d8:	20000028 	.word	0x20000028

080047dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047e0:	b090      	sub	sp, #64	@ 0x40
 80047e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80047e4:	2300      	movs	r3, #0
 80047e6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80047e8:	2300      	movs	r3, #0
 80047ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80047ec:	2300      	movs	r3, #0
 80047ee:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80047f0:	2300      	movs	r3, #0
 80047f2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047f4:	4b59      	ldr	r3, [pc, #356]	@ (800495c <HAL_RCC_GetSysClockFreq+0x180>)
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f003 030c 	and.w	r3, r3, #12
 80047fc:	2b08      	cmp	r3, #8
 80047fe:	d00d      	beq.n	800481c <HAL_RCC_GetSysClockFreq+0x40>
 8004800:	2b08      	cmp	r3, #8
 8004802:	f200 80a1 	bhi.w	8004948 <HAL_RCC_GetSysClockFreq+0x16c>
 8004806:	2b00      	cmp	r3, #0
 8004808:	d002      	beq.n	8004810 <HAL_RCC_GetSysClockFreq+0x34>
 800480a:	2b04      	cmp	r3, #4
 800480c:	d003      	beq.n	8004816 <HAL_RCC_GetSysClockFreq+0x3a>
 800480e:	e09b      	b.n	8004948 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004810:	4b53      	ldr	r3, [pc, #332]	@ (8004960 <HAL_RCC_GetSysClockFreq+0x184>)
 8004812:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004814:	e09b      	b.n	800494e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004816:	4b53      	ldr	r3, [pc, #332]	@ (8004964 <HAL_RCC_GetSysClockFreq+0x188>)
 8004818:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800481a:	e098      	b.n	800494e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800481c:	4b4f      	ldr	r3, [pc, #316]	@ (800495c <HAL_RCC_GetSysClockFreq+0x180>)
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004824:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004826:	4b4d      	ldr	r3, [pc, #308]	@ (800495c <HAL_RCC_GetSysClockFreq+0x180>)
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d028      	beq.n	8004884 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004832:	4b4a      	ldr	r3, [pc, #296]	@ (800495c <HAL_RCC_GetSysClockFreq+0x180>)
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	099b      	lsrs	r3, r3, #6
 8004838:	2200      	movs	r2, #0
 800483a:	623b      	str	r3, [r7, #32]
 800483c:	627a      	str	r2, [r7, #36]	@ 0x24
 800483e:	6a3b      	ldr	r3, [r7, #32]
 8004840:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004844:	2100      	movs	r1, #0
 8004846:	4b47      	ldr	r3, [pc, #284]	@ (8004964 <HAL_RCC_GetSysClockFreq+0x188>)
 8004848:	fb03 f201 	mul.w	r2, r3, r1
 800484c:	2300      	movs	r3, #0
 800484e:	fb00 f303 	mul.w	r3, r0, r3
 8004852:	4413      	add	r3, r2
 8004854:	4a43      	ldr	r2, [pc, #268]	@ (8004964 <HAL_RCC_GetSysClockFreq+0x188>)
 8004856:	fba0 1202 	umull	r1, r2, r0, r2
 800485a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800485c:	460a      	mov	r2, r1
 800485e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004860:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004862:	4413      	add	r3, r2
 8004864:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004866:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004868:	2200      	movs	r2, #0
 800486a:	61bb      	str	r3, [r7, #24]
 800486c:	61fa      	str	r2, [r7, #28]
 800486e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004872:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004876:	f7fb fcaf 	bl	80001d8 <__aeabi_uldivmod>
 800487a:	4602      	mov	r2, r0
 800487c:	460b      	mov	r3, r1
 800487e:	4613      	mov	r3, r2
 8004880:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004882:	e053      	b.n	800492c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004884:	4b35      	ldr	r3, [pc, #212]	@ (800495c <HAL_RCC_GetSysClockFreq+0x180>)
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	099b      	lsrs	r3, r3, #6
 800488a:	2200      	movs	r2, #0
 800488c:	613b      	str	r3, [r7, #16]
 800488e:	617a      	str	r2, [r7, #20]
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004896:	f04f 0b00 	mov.w	fp, #0
 800489a:	4652      	mov	r2, sl
 800489c:	465b      	mov	r3, fp
 800489e:	f04f 0000 	mov.w	r0, #0
 80048a2:	f04f 0100 	mov.w	r1, #0
 80048a6:	0159      	lsls	r1, r3, #5
 80048a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048ac:	0150      	lsls	r0, r2, #5
 80048ae:	4602      	mov	r2, r0
 80048b0:	460b      	mov	r3, r1
 80048b2:	ebb2 080a 	subs.w	r8, r2, sl
 80048b6:	eb63 090b 	sbc.w	r9, r3, fp
 80048ba:	f04f 0200 	mov.w	r2, #0
 80048be:	f04f 0300 	mov.w	r3, #0
 80048c2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80048c6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80048ca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80048ce:	ebb2 0408 	subs.w	r4, r2, r8
 80048d2:	eb63 0509 	sbc.w	r5, r3, r9
 80048d6:	f04f 0200 	mov.w	r2, #0
 80048da:	f04f 0300 	mov.w	r3, #0
 80048de:	00eb      	lsls	r3, r5, #3
 80048e0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048e4:	00e2      	lsls	r2, r4, #3
 80048e6:	4614      	mov	r4, r2
 80048e8:	461d      	mov	r5, r3
 80048ea:	eb14 030a 	adds.w	r3, r4, sl
 80048ee:	603b      	str	r3, [r7, #0]
 80048f0:	eb45 030b 	adc.w	r3, r5, fp
 80048f4:	607b      	str	r3, [r7, #4]
 80048f6:	f04f 0200 	mov.w	r2, #0
 80048fa:	f04f 0300 	mov.w	r3, #0
 80048fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004902:	4629      	mov	r1, r5
 8004904:	028b      	lsls	r3, r1, #10
 8004906:	4621      	mov	r1, r4
 8004908:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800490c:	4621      	mov	r1, r4
 800490e:	028a      	lsls	r2, r1, #10
 8004910:	4610      	mov	r0, r2
 8004912:	4619      	mov	r1, r3
 8004914:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004916:	2200      	movs	r2, #0
 8004918:	60bb      	str	r3, [r7, #8]
 800491a:	60fa      	str	r2, [r7, #12]
 800491c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004920:	f7fb fc5a 	bl	80001d8 <__aeabi_uldivmod>
 8004924:	4602      	mov	r2, r0
 8004926:	460b      	mov	r3, r1
 8004928:	4613      	mov	r3, r2
 800492a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800492c:	4b0b      	ldr	r3, [pc, #44]	@ (800495c <HAL_RCC_GetSysClockFreq+0x180>)
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	0c1b      	lsrs	r3, r3, #16
 8004932:	f003 0303 	and.w	r3, r3, #3
 8004936:	3301      	adds	r3, #1
 8004938:	005b      	lsls	r3, r3, #1
 800493a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800493c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800493e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004940:	fbb2 f3f3 	udiv	r3, r2, r3
 8004944:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004946:	e002      	b.n	800494e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004948:	4b05      	ldr	r3, [pc, #20]	@ (8004960 <HAL_RCC_GetSysClockFreq+0x184>)
 800494a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800494c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800494e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004950:	4618      	mov	r0, r3
 8004952:	3740      	adds	r7, #64	@ 0x40
 8004954:	46bd      	mov	sp, r7
 8004956:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800495a:	bf00      	nop
 800495c:	40023800 	.word	0x40023800
 8004960:	00f42400 	.word	0x00f42400
 8004964:	017d7840 	.word	0x017d7840

08004968 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004968:	b480      	push	{r7}
 800496a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800496c:	4b03      	ldr	r3, [pc, #12]	@ (800497c <HAL_RCC_GetHCLKFreq+0x14>)
 800496e:	681b      	ldr	r3, [r3, #0]
}
 8004970:	4618      	mov	r0, r3
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	20000024 	.word	0x20000024

08004980 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004984:	f7ff fff0 	bl	8004968 <HAL_RCC_GetHCLKFreq>
 8004988:	4602      	mov	r2, r0
 800498a:	4b05      	ldr	r3, [pc, #20]	@ (80049a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	0a9b      	lsrs	r3, r3, #10
 8004990:	f003 0307 	and.w	r3, r3, #7
 8004994:	4903      	ldr	r1, [pc, #12]	@ (80049a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004996:	5ccb      	ldrb	r3, [r1, r3]
 8004998:	fa22 f303 	lsr.w	r3, r2, r3
}
 800499c:	4618      	mov	r0, r3
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	40023800 	.word	0x40023800
 80049a4:	08006b44 	.word	0x08006b44

080049a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80049ac:	f7ff ffdc 	bl	8004968 <HAL_RCC_GetHCLKFreq>
 80049b0:	4602      	mov	r2, r0
 80049b2:	4b05      	ldr	r3, [pc, #20]	@ (80049c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	0b5b      	lsrs	r3, r3, #13
 80049b8:	f003 0307 	and.w	r3, r3, #7
 80049bc:	4903      	ldr	r1, [pc, #12]	@ (80049cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80049be:	5ccb      	ldrb	r3, [r1, r3]
 80049c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	40023800 	.word	0x40023800
 80049cc:	08006b44 	.word	0x08006b44

080049d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d101      	bne.n	80049e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e041      	b.n	8004a66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d106      	bne.n	80049fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f7fd fa58 	bl	8001eac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2202      	movs	r2, #2
 8004a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	3304      	adds	r3, #4
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	4610      	mov	r0, r2
 8004a10:	f000 fac0 	bl	8004f94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3708      	adds	r7, #8
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}

08004a6e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b082      	sub	sp, #8
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d101      	bne.n	8004a80 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e041      	b.n	8004b04 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d106      	bne.n	8004a9a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f000 f839 	bl	8004b0c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2202      	movs	r2, #2
 8004a9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	3304      	adds	r3, #4
 8004aaa:	4619      	mov	r1, r3
 8004aac:	4610      	mov	r0, r2
 8004aae:	f000 fa71 	bl	8004f94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2201      	movs	r2, #1
 8004ade:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2201      	movs	r2, #1
 8004aee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2201      	movs	r2, #1
 8004af6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2201      	movs	r2, #1
 8004afe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3708      	adds	r7, #8
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d109      	bne.n	8004b44 <HAL_TIM_PWM_Start+0x24>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	bf14      	ite	ne
 8004b3c:	2301      	movne	r3, #1
 8004b3e:	2300      	moveq	r3, #0
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	e022      	b.n	8004b8a <HAL_TIM_PWM_Start+0x6a>
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	2b04      	cmp	r3, #4
 8004b48:	d109      	bne.n	8004b5e <HAL_TIM_PWM_Start+0x3e>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	bf14      	ite	ne
 8004b56:	2301      	movne	r3, #1
 8004b58:	2300      	moveq	r3, #0
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	e015      	b.n	8004b8a <HAL_TIM_PWM_Start+0x6a>
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	2b08      	cmp	r3, #8
 8004b62:	d109      	bne.n	8004b78 <HAL_TIM_PWM_Start+0x58>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	bf14      	ite	ne
 8004b70:	2301      	movne	r3, #1
 8004b72:	2300      	moveq	r3, #0
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	e008      	b.n	8004b8a <HAL_TIM_PWM_Start+0x6a>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	bf14      	ite	ne
 8004b84:	2301      	movne	r3, #1
 8004b86:	2300      	moveq	r3, #0
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d001      	beq.n	8004b92 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e068      	b.n	8004c64 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d104      	bne.n	8004ba2 <HAL_TIM_PWM_Start+0x82>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2202      	movs	r2, #2
 8004b9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ba0:	e013      	b.n	8004bca <HAL_TIM_PWM_Start+0xaa>
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	2b04      	cmp	r3, #4
 8004ba6:	d104      	bne.n	8004bb2 <HAL_TIM_PWM_Start+0x92>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2202      	movs	r2, #2
 8004bac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004bb0:	e00b      	b.n	8004bca <HAL_TIM_PWM_Start+0xaa>
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	2b08      	cmp	r3, #8
 8004bb6:	d104      	bne.n	8004bc2 <HAL_TIM_PWM_Start+0xa2>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2202      	movs	r2, #2
 8004bbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004bc0:	e003      	b.n	8004bca <HAL_TIM_PWM_Start+0xaa>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2202      	movs	r2, #2
 8004bc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	6839      	ldr	r1, [r7, #0]
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f000 fc8a 	bl	80054ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a23      	ldr	r2, [pc, #140]	@ (8004c6c <HAL_TIM_PWM_Start+0x14c>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d107      	bne.n	8004bf2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004bf0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a1d      	ldr	r2, [pc, #116]	@ (8004c6c <HAL_TIM_PWM_Start+0x14c>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d018      	beq.n	8004c2e <HAL_TIM_PWM_Start+0x10e>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c04:	d013      	beq.n	8004c2e <HAL_TIM_PWM_Start+0x10e>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a19      	ldr	r2, [pc, #100]	@ (8004c70 <HAL_TIM_PWM_Start+0x150>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d00e      	beq.n	8004c2e <HAL_TIM_PWM_Start+0x10e>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a17      	ldr	r2, [pc, #92]	@ (8004c74 <HAL_TIM_PWM_Start+0x154>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d009      	beq.n	8004c2e <HAL_TIM_PWM_Start+0x10e>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a16      	ldr	r2, [pc, #88]	@ (8004c78 <HAL_TIM_PWM_Start+0x158>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d004      	beq.n	8004c2e <HAL_TIM_PWM_Start+0x10e>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a14      	ldr	r2, [pc, #80]	@ (8004c7c <HAL_TIM_PWM_Start+0x15c>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d111      	bne.n	8004c52 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	f003 0307 	and.w	r3, r3, #7
 8004c38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2b06      	cmp	r3, #6
 8004c3e:	d010      	beq.n	8004c62 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f042 0201 	orr.w	r2, r2, #1
 8004c4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c50:	e007      	b.n	8004c62 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f042 0201 	orr.w	r2, r2, #1
 8004c60:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3710      	adds	r7, #16
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	40010000 	.word	0x40010000
 8004c70:	40000400 	.word	0x40000400
 8004c74:	40000800 	.word	0x40000800
 8004c78:	40000c00 	.word	0x40000c00
 8004c7c:	40014000 	.word	0x40014000

08004c80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b086      	sub	sp, #24
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d101      	bne.n	8004c9e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c9a:	2302      	movs	r3, #2
 8004c9c:	e0ae      	b.n	8004dfc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2b0c      	cmp	r3, #12
 8004caa:	f200 809f 	bhi.w	8004dec <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004cae:	a201      	add	r2, pc, #4	@ (adr r2, 8004cb4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb4:	08004ce9 	.word	0x08004ce9
 8004cb8:	08004ded 	.word	0x08004ded
 8004cbc:	08004ded 	.word	0x08004ded
 8004cc0:	08004ded 	.word	0x08004ded
 8004cc4:	08004d29 	.word	0x08004d29
 8004cc8:	08004ded 	.word	0x08004ded
 8004ccc:	08004ded 	.word	0x08004ded
 8004cd0:	08004ded 	.word	0x08004ded
 8004cd4:	08004d6b 	.word	0x08004d6b
 8004cd8:	08004ded 	.word	0x08004ded
 8004cdc:	08004ded 	.word	0x08004ded
 8004ce0:	08004ded 	.word	0x08004ded
 8004ce4:	08004dab 	.word	0x08004dab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68b9      	ldr	r1, [r7, #8]
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f000 f9d6 	bl	80050a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	699a      	ldr	r2, [r3, #24]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f042 0208 	orr.w	r2, r2, #8
 8004d02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	699a      	ldr	r2, [r3, #24]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f022 0204 	bic.w	r2, r2, #4
 8004d12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	6999      	ldr	r1, [r3, #24]
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	691a      	ldr	r2, [r3, #16]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	430a      	orrs	r2, r1
 8004d24:	619a      	str	r2, [r3, #24]
      break;
 8004d26:	e064      	b.n	8004df2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68b9      	ldr	r1, [r7, #8]
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f000 fa1c 	bl	800516c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	699a      	ldr	r2, [r3, #24]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	699a      	ldr	r2, [r3, #24]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	6999      	ldr	r1, [r3, #24]
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	021a      	lsls	r2, r3, #8
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	430a      	orrs	r2, r1
 8004d66:	619a      	str	r2, [r3, #24]
      break;
 8004d68:	e043      	b.n	8004df2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	68b9      	ldr	r1, [r7, #8]
 8004d70:	4618      	mov	r0, r3
 8004d72:	f000 fa67 	bl	8005244 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	69da      	ldr	r2, [r3, #28]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f042 0208 	orr.w	r2, r2, #8
 8004d84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	69da      	ldr	r2, [r3, #28]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f022 0204 	bic.w	r2, r2, #4
 8004d94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	69d9      	ldr	r1, [r3, #28]
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	691a      	ldr	r2, [r3, #16]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	430a      	orrs	r2, r1
 8004da6:	61da      	str	r2, [r3, #28]
      break;
 8004da8:	e023      	b.n	8004df2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	68b9      	ldr	r1, [r7, #8]
 8004db0:	4618      	mov	r0, r3
 8004db2:	f000 fab1 	bl	8005318 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	69da      	ldr	r2, [r3, #28]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004dc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	69da      	ldr	r2, [r3, #28]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004dd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	69d9      	ldr	r1, [r3, #28]
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	021a      	lsls	r2, r3, #8
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	430a      	orrs	r2, r1
 8004de8:	61da      	str	r2, [r3, #28]
      break;
 8004dea:	e002      	b.n	8004df2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	75fb      	strb	r3, [r7, #23]
      break;
 8004df0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2200      	movs	r2, #0
 8004df6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004dfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3718      	adds	r7, #24
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d101      	bne.n	8004e20 <HAL_TIM_ConfigClockSource+0x1c>
 8004e1c:	2302      	movs	r3, #2
 8004e1e:	e0b4      	b.n	8004f8a <HAL_TIM_ConfigClockSource+0x186>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2202      	movs	r2, #2
 8004e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004e3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004e46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68ba      	ldr	r2, [r7, #8]
 8004e4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e58:	d03e      	beq.n	8004ed8 <HAL_TIM_ConfigClockSource+0xd4>
 8004e5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e5e:	f200 8087 	bhi.w	8004f70 <HAL_TIM_ConfigClockSource+0x16c>
 8004e62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e66:	f000 8086 	beq.w	8004f76 <HAL_TIM_ConfigClockSource+0x172>
 8004e6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e6e:	d87f      	bhi.n	8004f70 <HAL_TIM_ConfigClockSource+0x16c>
 8004e70:	2b70      	cmp	r3, #112	@ 0x70
 8004e72:	d01a      	beq.n	8004eaa <HAL_TIM_ConfigClockSource+0xa6>
 8004e74:	2b70      	cmp	r3, #112	@ 0x70
 8004e76:	d87b      	bhi.n	8004f70 <HAL_TIM_ConfigClockSource+0x16c>
 8004e78:	2b60      	cmp	r3, #96	@ 0x60
 8004e7a:	d050      	beq.n	8004f1e <HAL_TIM_ConfigClockSource+0x11a>
 8004e7c:	2b60      	cmp	r3, #96	@ 0x60
 8004e7e:	d877      	bhi.n	8004f70 <HAL_TIM_ConfigClockSource+0x16c>
 8004e80:	2b50      	cmp	r3, #80	@ 0x50
 8004e82:	d03c      	beq.n	8004efe <HAL_TIM_ConfigClockSource+0xfa>
 8004e84:	2b50      	cmp	r3, #80	@ 0x50
 8004e86:	d873      	bhi.n	8004f70 <HAL_TIM_ConfigClockSource+0x16c>
 8004e88:	2b40      	cmp	r3, #64	@ 0x40
 8004e8a:	d058      	beq.n	8004f3e <HAL_TIM_ConfigClockSource+0x13a>
 8004e8c:	2b40      	cmp	r3, #64	@ 0x40
 8004e8e:	d86f      	bhi.n	8004f70 <HAL_TIM_ConfigClockSource+0x16c>
 8004e90:	2b30      	cmp	r3, #48	@ 0x30
 8004e92:	d064      	beq.n	8004f5e <HAL_TIM_ConfigClockSource+0x15a>
 8004e94:	2b30      	cmp	r3, #48	@ 0x30
 8004e96:	d86b      	bhi.n	8004f70 <HAL_TIM_ConfigClockSource+0x16c>
 8004e98:	2b20      	cmp	r3, #32
 8004e9a:	d060      	beq.n	8004f5e <HAL_TIM_ConfigClockSource+0x15a>
 8004e9c:	2b20      	cmp	r3, #32
 8004e9e:	d867      	bhi.n	8004f70 <HAL_TIM_ConfigClockSource+0x16c>
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d05c      	beq.n	8004f5e <HAL_TIM_ConfigClockSource+0x15a>
 8004ea4:	2b10      	cmp	r3, #16
 8004ea6:	d05a      	beq.n	8004f5e <HAL_TIM_ConfigClockSource+0x15a>
 8004ea8:	e062      	b.n	8004f70 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004eba:	f000 faf7 	bl	80054ac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004ecc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68ba      	ldr	r2, [r7, #8]
 8004ed4:	609a      	str	r2, [r3, #8]
      break;
 8004ed6:	e04f      	b.n	8004f78 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ee8:	f000 fae0 	bl	80054ac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	689a      	ldr	r2, [r3, #8]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004efa:	609a      	str	r2, [r3, #8]
      break;
 8004efc:	e03c      	b.n	8004f78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	f000 fa54 	bl	80053b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2150      	movs	r1, #80	@ 0x50
 8004f16:	4618      	mov	r0, r3
 8004f18:	f000 faad 	bl	8005476 <TIM_ITRx_SetConfig>
      break;
 8004f1c:	e02c      	b.n	8004f78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	f000 fa73 	bl	8005416 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2160      	movs	r1, #96	@ 0x60
 8004f36:	4618      	mov	r0, r3
 8004f38:	f000 fa9d 	bl	8005476 <TIM_ITRx_SetConfig>
      break;
 8004f3c:	e01c      	b.n	8004f78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	f000 fa34 	bl	80053b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2140      	movs	r1, #64	@ 0x40
 8004f56:	4618      	mov	r0, r3
 8004f58:	f000 fa8d 	bl	8005476 <TIM_ITRx_SetConfig>
      break;
 8004f5c:	e00c      	b.n	8004f78 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4619      	mov	r1, r3
 8004f68:	4610      	mov	r0, r2
 8004f6a:	f000 fa84 	bl	8005476 <TIM_ITRx_SetConfig>
      break;
 8004f6e:	e003      	b.n	8004f78 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	73fb      	strb	r3, [r7, #15]
      break;
 8004f74:	e000      	b.n	8004f78 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3710      	adds	r7, #16
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
	...

08004f94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b085      	sub	sp, #20
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a37      	ldr	r2, [pc, #220]	@ (8005084 <TIM_Base_SetConfig+0xf0>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d00f      	beq.n	8004fcc <TIM_Base_SetConfig+0x38>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fb2:	d00b      	beq.n	8004fcc <TIM_Base_SetConfig+0x38>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4a34      	ldr	r2, [pc, #208]	@ (8005088 <TIM_Base_SetConfig+0xf4>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d007      	beq.n	8004fcc <TIM_Base_SetConfig+0x38>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	4a33      	ldr	r2, [pc, #204]	@ (800508c <TIM_Base_SetConfig+0xf8>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d003      	beq.n	8004fcc <TIM_Base_SetConfig+0x38>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4a32      	ldr	r2, [pc, #200]	@ (8005090 <TIM_Base_SetConfig+0xfc>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d108      	bne.n	8004fde <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a28      	ldr	r2, [pc, #160]	@ (8005084 <TIM_Base_SetConfig+0xf0>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d01b      	beq.n	800501e <TIM_Base_SetConfig+0x8a>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fec:	d017      	beq.n	800501e <TIM_Base_SetConfig+0x8a>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a25      	ldr	r2, [pc, #148]	@ (8005088 <TIM_Base_SetConfig+0xf4>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d013      	beq.n	800501e <TIM_Base_SetConfig+0x8a>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a24      	ldr	r2, [pc, #144]	@ (800508c <TIM_Base_SetConfig+0xf8>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d00f      	beq.n	800501e <TIM_Base_SetConfig+0x8a>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a23      	ldr	r2, [pc, #140]	@ (8005090 <TIM_Base_SetConfig+0xfc>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d00b      	beq.n	800501e <TIM_Base_SetConfig+0x8a>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a22      	ldr	r2, [pc, #136]	@ (8005094 <TIM_Base_SetConfig+0x100>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d007      	beq.n	800501e <TIM_Base_SetConfig+0x8a>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a21      	ldr	r2, [pc, #132]	@ (8005098 <TIM_Base_SetConfig+0x104>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d003      	beq.n	800501e <TIM_Base_SetConfig+0x8a>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a20      	ldr	r2, [pc, #128]	@ (800509c <TIM_Base_SetConfig+0x108>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d108      	bne.n	8005030 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005024:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	4313      	orrs	r3, r2
 800502e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	4313      	orrs	r3, r2
 800503c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	689a      	ldr	r2, [r3, #8]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a0c      	ldr	r2, [pc, #48]	@ (8005084 <TIM_Base_SetConfig+0xf0>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d103      	bne.n	800505e <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	691a      	ldr	r2, [r3, #16]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f043 0204 	orr.w	r2, r3, #4
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2201      	movs	r2, #1
 800506e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	601a      	str	r2, [r3, #0]
}
 8005076:	bf00      	nop
 8005078:	3714      	adds	r7, #20
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop
 8005084:	40010000 	.word	0x40010000
 8005088:	40000400 	.word	0x40000400
 800508c:	40000800 	.word	0x40000800
 8005090:	40000c00 	.word	0x40000c00
 8005094:	40014000 	.word	0x40014000
 8005098:	40014400 	.word	0x40014400
 800509c:	40014800 	.word	0x40014800

080050a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b087      	sub	sp, #28
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a1b      	ldr	r3, [r3, #32]
 80050ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6a1b      	ldr	r3, [r3, #32]
 80050b4:	f023 0201 	bic.w	r2, r3, #1
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	699b      	ldr	r3, [r3, #24]
 80050c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f023 0303 	bic.w	r3, r3, #3
 80050d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	4313      	orrs	r3, r2
 80050e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	f023 0302 	bic.w	r3, r3, #2
 80050e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a1c      	ldr	r2, [pc, #112]	@ (8005168 <TIM_OC1_SetConfig+0xc8>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d10c      	bne.n	8005116 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	f023 0308 	bic.w	r3, r3, #8
 8005102:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	697a      	ldr	r2, [r7, #20]
 800510a:	4313      	orrs	r3, r2
 800510c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	f023 0304 	bic.w	r3, r3, #4
 8005114:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a13      	ldr	r2, [pc, #76]	@ (8005168 <TIM_OC1_SetConfig+0xc8>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d111      	bne.n	8005142 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005124:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800512c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	693a      	ldr	r2, [r7, #16]
 8005134:	4313      	orrs	r3, r2
 8005136:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	699b      	ldr	r3, [r3, #24]
 800513c:	693a      	ldr	r2, [r7, #16]
 800513e:	4313      	orrs	r3, r2
 8005140:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	693a      	ldr	r2, [r7, #16]
 8005146:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	68fa      	ldr	r2, [r7, #12]
 800514c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	685a      	ldr	r2, [r3, #4]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	697a      	ldr	r2, [r7, #20]
 800515a:	621a      	str	r2, [r3, #32]
}
 800515c:	bf00      	nop
 800515e:	371c      	adds	r7, #28
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr
 8005168:	40010000 	.word	0x40010000

0800516c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800516c:	b480      	push	{r7}
 800516e:	b087      	sub	sp, #28
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a1b      	ldr	r3, [r3, #32]
 800517a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a1b      	ldr	r3, [r3, #32]
 8005180:	f023 0210 	bic.w	r2, r3, #16
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	699b      	ldr	r3, [r3, #24]
 8005192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800519a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	021b      	lsls	r3, r3, #8
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	f023 0320 	bic.w	r3, r3, #32
 80051b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	011b      	lsls	r3, r3, #4
 80051be:	697a      	ldr	r2, [r7, #20]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a1e      	ldr	r2, [pc, #120]	@ (8005240 <TIM_OC2_SetConfig+0xd4>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d10d      	bne.n	80051e8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	011b      	lsls	r3, r3, #4
 80051da:	697a      	ldr	r2, [r7, #20]
 80051dc:	4313      	orrs	r3, r2
 80051de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a15      	ldr	r2, [pc, #84]	@ (8005240 <TIM_OC2_SetConfig+0xd4>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d113      	bne.n	8005218 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80051f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80051fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	695b      	ldr	r3, [r3, #20]
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	693a      	ldr	r2, [r7, #16]
 8005208:	4313      	orrs	r3, r2
 800520a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	699b      	ldr	r3, [r3, #24]
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	693a      	ldr	r2, [r7, #16]
 8005214:	4313      	orrs	r3, r2
 8005216:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	693a      	ldr	r2, [r7, #16]
 800521c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	685a      	ldr	r2, [r3, #4]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	697a      	ldr	r2, [r7, #20]
 8005230:	621a      	str	r2, [r3, #32]
}
 8005232:	bf00      	nop
 8005234:	371c      	adds	r7, #28
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop
 8005240:	40010000 	.word	0x40010000

08005244 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005244:	b480      	push	{r7}
 8005246:	b087      	sub	sp, #28
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a1b      	ldr	r3, [r3, #32]
 8005252:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a1b      	ldr	r3, [r3, #32]
 8005258:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	69db      	ldr	r3, [r3, #28]
 800526a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005272:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f023 0303 	bic.w	r3, r3, #3
 800527a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	4313      	orrs	r3, r2
 8005284:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800528c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	021b      	lsls	r3, r3, #8
 8005294:	697a      	ldr	r2, [r7, #20]
 8005296:	4313      	orrs	r3, r2
 8005298:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a1d      	ldr	r2, [pc, #116]	@ (8005314 <TIM_OC3_SetConfig+0xd0>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d10d      	bne.n	80052be <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80052a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	021b      	lsls	r3, r3, #8
 80052b0:	697a      	ldr	r2, [r7, #20]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80052bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a14      	ldr	r2, [pc, #80]	@ (8005314 <TIM_OC3_SetConfig+0xd0>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d113      	bne.n	80052ee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80052cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80052d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	011b      	lsls	r3, r3, #4
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	4313      	orrs	r3, r2
 80052e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	699b      	ldr	r3, [r3, #24]
 80052e6:	011b      	lsls	r3, r3, #4
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	693a      	ldr	r2, [r7, #16]
 80052f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	685a      	ldr	r2, [r3, #4]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	697a      	ldr	r2, [r7, #20]
 8005306:	621a      	str	r2, [r3, #32]
}
 8005308:	bf00      	nop
 800530a:	371c      	adds	r7, #28
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr
 8005314:	40010000 	.word	0x40010000

08005318 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005318:	b480      	push	{r7}
 800531a:	b087      	sub	sp, #28
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a1b      	ldr	r3, [r3, #32]
 8005326:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a1b      	ldr	r3, [r3, #32]
 800532c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	69db      	ldr	r3, [r3, #28]
 800533e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005346:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800534e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	021b      	lsls	r3, r3, #8
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	4313      	orrs	r3, r2
 800535a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005362:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	031b      	lsls	r3, r3, #12
 800536a:	693a      	ldr	r2, [r7, #16]
 800536c:	4313      	orrs	r3, r2
 800536e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a10      	ldr	r2, [pc, #64]	@ (80053b4 <TIM_OC4_SetConfig+0x9c>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d109      	bne.n	800538c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800537e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	695b      	ldr	r3, [r3, #20]
 8005384:	019b      	lsls	r3, r3, #6
 8005386:	697a      	ldr	r2, [r7, #20]
 8005388:	4313      	orrs	r3, r2
 800538a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	697a      	ldr	r2, [r7, #20]
 8005390:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	685a      	ldr	r2, [r3, #4]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	693a      	ldr	r2, [r7, #16]
 80053a4:	621a      	str	r2, [r3, #32]
}
 80053a6:	bf00      	nop
 80053a8:	371c      	adds	r7, #28
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	40010000 	.word	0x40010000

080053b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b087      	sub	sp, #28
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6a1b      	ldr	r3, [r3, #32]
 80053c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6a1b      	ldr	r3, [r3, #32]
 80053ce:	f023 0201 	bic.w	r2, r3, #1
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	699b      	ldr	r3, [r3, #24]
 80053da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80053e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	011b      	lsls	r3, r3, #4
 80053e8:	693a      	ldr	r2, [r7, #16]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	f023 030a 	bic.w	r3, r3, #10
 80053f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053f6:	697a      	ldr	r2, [r7, #20]
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	693a      	ldr	r2, [r7, #16]
 8005402:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	697a      	ldr	r2, [r7, #20]
 8005408:	621a      	str	r2, [r3, #32]
}
 800540a:	bf00      	nop
 800540c:	371c      	adds	r7, #28
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr

08005416 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005416:	b480      	push	{r7}
 8005418:	b087      	sub	sp, #28
 800541a:	af00      	add	r7, sp, #0
 800541c:	60f8      	str	r0, [r7, #12]
 800541e:	60b9      	str	r1, [r7, #8]
 8005420:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6a1b      	ldr	r3, [r3, #32]
 8005426:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6a1b      	ldr	r3, [r3, #32]
 800542c:	f023 0210 	bic.w	r2, r3, #16
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	699b      	ldr	r3, [r3, #24]
 8005438:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005440:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	031b      	lsls	r3, r3, #12
 8005446:	693a      	ldr	r2, [r7, #16]
 8005448:	4313      	orrs	r3, r2
 800544a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005452:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	011b      	lsls	r3, r3, #4
 8005458:	697a      	ldr	r2, [r7, #20]
 800545a:	4313      	orrs	r3, r2
 800545c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	693a      	ldr	r2, [r7, #16]
 8005462:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	697a      	ldr	r2, [r7, #20]
 8005468:	621a      	str	r2, [r3, #32]
}
 800546a:	bf00      	nop
 800546c:	371c      	adds	r7, #28
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr

08005476 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005476:	b480      	push	{r7}
 8005478:	b085      	sub	sp, #20
 800547a:	af00      	add	r7, sp, #0
 800547c:	6078      	str	r0, [r7, #4]
 800547e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800548c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800548e:	683a      	ldr	r2, [r7, #0]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	4313      	orrs	r3, r2
 8005494:	f043 0307 	orr.w	r3, r3, #7
 8005498:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	609a      	str	r2, [r3, #8]
}
 80054a0:	bf00      	nop
 80054a2:	3714      	adds	r7, #20
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr

080054ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b087      	sub	sp, #28
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	607a      	str	r2, [r7, #4]
 80054b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80054c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	021a      	lsls	r2, r3, #8
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	431a      	orrs	r2, r3
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	697a      	ldr	r2, [r7, #20]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	697a      	ldr	r2, [r7, #20]
 80054de:	609a      	str	r2, [r3, #8]
}
 80054e0:	bf00      	nop
 80054e2:	371c      	adds	r7, #28
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b087      	sub	sp, #28
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	f003 031f 	and.w	r3, r3, #31
 80054fe:	2201      	movs	r2, #1
 8005500:	fa02 f303 	lsl.w	r3, r2, r3
 8005504:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6a1a      	ldr	r2, [r3, #32]
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	43db      	mvns	r3, r3
 800550e:	401a      	ands	r2, r3
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6a1a      	ldr	r2, [r3, #32]
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	f003 031f 	and.w	r3, r3, #31
 800551e:	6879      	ldr	r1, [r7, #4]
 8005520:	fa01 f303 	lsl.w	r3, r1, r3
 8005524:	431a      	orrs	r2, r3
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	621a      	str	r2, [r3, #32]
}
 800552a:	bf00      	nop
 800552c:	371c      	adds	r7, #28
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr
	...

08005538 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005538:	b480      	push	{r7}
 800553a:	b085      	sub	sp, #20
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005548:	2b01      	cmp	r3, #1
 800554a:	d101      	bne.n	8005550 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800554c:	2302      	movs	r3, #2
 800554e:	e050      	b.n	80055f2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2202      	movs	r2, #2
 800555c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005576:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68fa      	ldr	r2, [r7, #12]
 800557e:	4313      	orrs	r3, r2
 8005580:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a1c      	ldr	r2, [pc, #112]	@ (8005600 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d018      	beq.n	80055c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800559c:	d013      	beq.n	80055c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a18      	ldr	r2, [pc, #96]	@ (8005604 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d00e      	beq.n	80055c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a16      	ldr	r2, [pc, #88]	@ (8005608 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d009      	beq.n	80055c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a15      	ldr	r2, [pc, #84]	@ (800560c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d004      	beq.n	80055c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a13      	ldr	r2, [pc, #76]	@ (8005610 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d10c      	bne.n	80055e0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	68ba      	ldr	r2, [r7, #8]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68ba      	ldr	r2, [r7, #8]
 80055de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3714      	adds	r7, #20
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr
 80055fe:	bf00      	nop
 8005600:	40010000 	.word	0x40010000
 8005604:	40000400 	.word	0x40000400
 8005608:	40000800 	.word	0x40000800
 800560c:	40000c00 	.word	0x40000c00
 8005610:	40014000 	.word	0x40014000

08005614 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d101      	bne.n	8005626 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e042      	b.n	80056ac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800562c:	b2db      	uxtb	r3, r3
 800562e:	2b00      	cmp	r3, #0
 8005630:	d106      	bne.n	8005640 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f7fc fcb2 	bl	8001fa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2224      	movs	r2, #36	@ 0x24
 8005644:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	68da      	ldr	r2, [r3, #12]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005656:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f000 febd 	bl	80063d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	691a      	ldr	r2, [r3, #16]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800566c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	695a      	ldr	r2, [r3, #20]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800567c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68da      	ldr	r2, [r3, #12]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800568c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2220      	movs	r2, #32
 8005698:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2220      	movs	r2, #32
 80056a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80056aa:	2300      	movs	r3, #0
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3708      	adds	r7, #8
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b08c      	sub	sp, #48	@ 0x30
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	4613      	mov	r3, r2
 80056c0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	2b20      	cmp	r3, #32
 80056cc:	d146      	bne.n	800575c <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d002      	beq.n	80056da <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80056d4:	88fb      	ldrh	r3, [r7, #6]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d101      	bne.n	80056de <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e03f      	b.n	800575e <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2201      	movs	r2, #1
 80056e2:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2200      	movs	r2, #0
 80056e8:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80056ea:	88fb      	ldrh	r3, [r7, #6]
 80056ec:	461a      	mov	r2, r3
 80056ee:	68b9      	ldr	r1, [r7, #8]
 80056f0:	68f8      	ldr	r0, [r7, #12]
 80056f2:	f000 fc09 	bl	8005f08 <UART_Start_Receive_DMA>
 80056f6:	4603      	mov	r3, r0
 80056f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005700:	2b01      	cmp	r3, #1
 8005702:	d125      	bne.n	8005750 <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005704:	2300      	movs	r3, #0
 8005706:	613b      	str	r3, [r7, #16]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	613b      	str	r3, [r7, #16]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	613b      	str	r3, [r7, #16]
 8005718:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	330c      	adds	r3, #12
 8005720:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	e853 3f00 	ldrex	r3, [r3]
 8005728:	617b      	str	r3, [r7, #20]
   return(result);
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	f043 0310 	orr.w	r3, r3, #16
 8005730:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	330c      	adds	r3, #12
 8005738:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800573a:	627a      	str	r2, [r7, #36]	@ 0x24
 800573c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800573e:	6a39      	ldr	r1, [r7, #32]
 8005740:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005742:	e841 2300 	strex	r3, r2, [r1]
 8005746:	61fb      	str	r3, [r7, #28]
   return(result);
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d1e5      	bne.n	800571a <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 800574e:	e002      	b.n	8005756 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 8005756:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800575a:	e000      	b.n	800575e <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 800575c:	2302      	movs	r3, #2
  }
}
 800575e:	4618      	mov	r0, r3
 8005760:	3730      	adds	r7, #48	@ 0x30
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
	...

08005768 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b0ba      	sub	sp, #232	@ 0xe8
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800578e:	2300      	movs	r3, #0
 8005790:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005794:	2300      	movs	r3, #0
 8005796:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800579a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800579e:	f003 030f 	and.w	r3, r3, #15
 80057a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80057a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d10f      	bne.n	80057ce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80057ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057b2:	f003 0320 	and.w	r3, r3, #32
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d009      	beq.n	80057ce <HAL_UART_IRQHandler+0x66>
 80057ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057be:	f003 0320 	and.w	r3, r3, #32
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d003      	beq.n	80057ce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 fd48 	bl	800625c <UART_Receive_IT>
      return;
 80057cc:	e273      	b.n	8005cb6 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80057ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	f000 80de 	beq.w	8005994 <HAL_UART_IRQHandler+0x22c>
 80057d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057dc:	f003 0301 	and.w	r3, r3, #1
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d106      	bne.n	80057f2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80057e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057e8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	f000 80d1 	beq.w	8005994 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80057f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057f6:	f003 0301 	and.w	r3, r3, #1
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00b      	beq.n	8005816 <HAL_UART_IRQHandler+0xae>
 80057fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005802:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005806:	2b00      	cmp	r3, #0
 8005808:	d005      	beq.n	8005816 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800580e:	f043 0201 	orr.w	r2, r3, #1
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800581a:	f003 0304 	and.w	r3, r3, #4
 800581e:	2b00      	cmp	r3, #0
 8005820:	d00b      	beq.n	800583a <HAL_UART_IRQHandler+0xd2>
 8005822:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005826:	f003 0301 	and.w	r3, r3, #1
 800582a:	2b00      	cmp	r3, #0
 800582c:	d005      	beq.n	800583a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005832:	f043 0202 	orr.w	r2, r3, #2
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800583a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800583e:	f003 0302 	and.w	r3, r3, #2
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00b      	beq.n	800585e <HAL_UART_IRQHandler+0xf6>
 8005846:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800584a:	f003 0301 	and.w	r3, r3, #1
 800584e:	2b00      	cmp	r3, #0
 8005850:	d005      	beq.n	800585e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005856:	f043 0204 	orr.w	r2, r3, #4
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800585e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005862:	f003 0308 	and.w	r3, r3, #8
 8005866:	2b00      	cmp	r3, #0
 8005868:	d011      	beq.n	800588e <HAL_UART_IRQHandler+0x126>
 800586a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800586e:	f003 0320 	and.w	r3, r3, #32
 8005872:	2b00      	cmp	r3, #0
 8005874:	d105      	bne.n	8005882 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005876:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800587a:	f003 0301 	and.w	r3, r3, #1
 800587e:	2b00      	cmp	r3, #0
 8005880:	d005      	beq.n	800588e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005886:	f043 0208 	orr.w	r2, r3, #8
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005892:	2b00      	cmp	r3, #0
 8005894:	f000 820a 	beq.w	8005cac <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005898:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800589c:	f003 0320 	and.w	r3, r3, #32
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d008      	beq.n	80058b6 <HAL_UART_IRQHandler+0x14e>
 80058a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058a8:	f003 0320 	and.w	r3, r3, #32
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d002      	beq.n	80058b6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f000 fcd3 	bl	800625c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	695b      	ldr	r3, [r3, #20]
 80058bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058c0:	2b40      	cmp	r3, #64	@ 0x40
 80058c2:	bf0c      	ite	eq
 80058c4:	2301      	moveq	r3, #1
 80058c6:	2300      	movne	r3, #0
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058d2:	f003 0308 	and.w	r3, r3, #8
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d103      	bne.n	80058e2 <HAL_UART_IRQHandler+0x17a>
 80058da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d04f      	beq.n	8005982 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 fbde 	bl	80060a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	695b      	ldr	r3, [r3, #20]
 80058ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058f2:	2b40      	cmp	r3, #64	@ 0x40
 80058f4:	d141      	bne.n	800597a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	3314      	adds	r3, #20
 80058fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005900:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005904:	e853 3f00 	ldrex	r3, [r3]
 8005908:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800590c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005910:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005914:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	3314      	adds	r3, #20
 800591e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005922:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005926:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800592a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800592e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005932:	e841 2300 	strex	r3, r2, [r1]
 8005936:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800593a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1d9      	bne.n	80058f6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005946:	2b00      	cmp	r3, #0
 8005948:	d013      	beq.n	8005972 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800594e:	4a8a      	ldr	r2, [pc, #552]	@ (8005b78 <HAL_UART_IRQHandler+0x410>)
 8005950:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005956:	4618      	mov	r0, r3
 8005958:	f7fc ffae 	bl	80028b8 <HAL_DMA_Abort_IT>
 800595c:	4603      	mov	r3, r0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d016      	beq.n	8005990 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005966:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800596c:	4610      	mov	r0, r2
 800596e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005970:	e00e      	b.n	8005990 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 f9c0 	bl	8005cf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005978:	e00a      	b.n	8005990 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 f9bc 	bl	8005cf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005980:	e006      	b.n	8005990 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 f9b8 	bl	8005cf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800598e:	e18d      	b.n	8005cac <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005990:	bf00      	nop
    return;
 8005992:	e18b      	b.n	8005cac <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005998:	2b01      	cmp	r3, #1
 800599a:	f040 8167 	bne.w	8005c6c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800599e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059a2:	f003 0310 	and.w	r3, r3, #16
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	f000 8160 	beq.w	8005c6c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80059ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059b0:	f003 0310 	and.w	r3, r3, #16
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f000 8159 	beq.w	8005c6c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80059ba:	2300      	movs	r3, #0
 80059bc:	60bb      	str	r3, [r7, #8]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	60bb      	str	r3, [r7, #8]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	60bb      	str	r3, [r7, #8]
 80059ce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	695b      	ldr	r3, [r3, #20]
 80059d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059da:	2b40      	cmp	r3, #64	@ 0x40
 80059dc:	f040 80ce 	bne.w	8005b7c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80059ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	f000 80a9 	beq.w	8005b48 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80059fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80059fe:	429a      	cmp	r2, r3
 8005a00:	f080 80a2 	bcs.w	8005b48 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a0a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a10:	69db      	ldr	r3, [r3, #28]
 8005a12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a16:	f000 8088 	beq.w	8005b2a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	330c      	adds	r3, #12
 8005a20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a24:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005a28:	e853 3f00 	ldrex	r3, [r3]
 8005a2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005a30:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005a34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	330c      	adds	r3, #12
 8005a42:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005a46:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005a4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a4e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005a52:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005a56:	e841 2300 	strex	r3, r2, [r1]
 8005a5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005a5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d1d9      	bne.n	8005a1a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	3314      	adds	r3, #20
 8005a6c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a70:	e853 3f00 	ldrex	r3, [r3]
 8005a74:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005a76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005a78:	f023 0301 	bic.w	r3, r3, #1
 8005a7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	3314      	adds	r3, #20
 8005a86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005a8a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005a8e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a90:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005a92:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005a96:	e841 2300 	strex	r3, r2, [r1]
 8005a9a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005a9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d1e1      	bne.n	8005a66 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	3314      	adds	r3, #20
 8005aa8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aaa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005aac:	e853 3f00 	ldrex	r3, [r3]
 8005ab0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005ab2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ab4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ab8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	3314      	adds	r3, #20
 8005ac2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005ac6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005ac8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005acc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005ace:	e841 2300 	strex	r3, r2, [r1]
 8005ad2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005ad4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d1e3      	bne.n	8005aa2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2220      	movs	r2, #32
 8005ade:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	330c      	adds	r3, #12
 8005aee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005af2:	e853 3f00 	ldrex	r3, [r3]
 8005af6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005af8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005afa:	f023 0310 	bic.w	r3, r3, #16
 8005afe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	330c      	adds	r3, #12
 8005b08:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005b0c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005b0e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b10:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005b12:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005b14:	e841 2300 	strex	r3, r2, [r1]
 8005b18:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005b1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d1e3      	bne.n	8005ae8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b24:	4618      	mov	r0, r3
 8005b26:	f7fc fe57 	bl	80027d8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2202      	movs	r2, #2
 8005b2e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	1ad3      	subs	r3, r2, r3
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	4619      	mov	r1, r3
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f7fb f977 	bl	8000e34 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005b46:	e0b3      	b.n	8005cb0 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005b4c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005b50:	429a      	cmp	r2, r3
 8005b52:	f040 80ad 	bne.w	8005cb0 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b5a:	69db      	ldr	r3, [r3, #28]
 8005b5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b60:	f040 80a6 	bne.w	8005cb0 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2202      	movs	r2, #2
 8005b68:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005b6e:	4619      	mov	r1, r3
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f7fb f95f 	bl	8000e34 <HAL_UARTEx_RxEventCallback>
      return;
 8005b76:	e09b      	b.n	8005cb0 <HAL_UART_IRQHandler+0x548>
 8005b78:	0800616b 	.word	0x0800616b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	1ad3      	subs	r3, r2, r3
 8005b88:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	f000 808e 	beq.w	8005cb4 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8005b98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	f000 8089 	beq.w	8005cb4 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	330c      	adds	r3, #12
 8005ba8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005baa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bac:	e853 3f00 	ldrex	r3, [r3]
 8005bb0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005bb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bb4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005bb8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	330c      	adds	r3, #12
 8005bc2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005bc6:	647a      	str	r2, [r7, #68]	@ 0x44
 8005bc8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005bcc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005bce:	e841 2300 	strex	r3, r2, [r1]
 8005bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005bd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d1e3      	bne.n	8005ba2 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	3314      	adds	r3, #20
 8005be0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be4:	e853 3f00 	ldrex	r3, [r3]
 8005be8:	623b      	str	r3, [r7, #32]
   return(result);
 8005bea:	6a3b      	ldr	r3, [r7, #32]
 8005bec:	f023 0301 	bic.w	r3, r3, #1
 8005bf0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	3314      	adds	r3, #20
 8005bfa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005bfe:	633a      	str	r2, [r7, #48]	@ 0x30
 8005c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c06:	e841 2300 	strex	r3, r2, [r1]
 8005c0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d1e3      	bne.n	8005bda <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2220      	movs	r2, #32
 8005c16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	330c      	adds	r3, #12
 8005c26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	e853 3f00 	ldrex	r3, [r3]
 8005c2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f023 0310 	bic.w	r3, r3, #16
 8005c36:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	330c      	adds	r3, #12
 8005c40:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005c44:	61fa      	str	r2, [r7, #28]
 8005c46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c48:	69b9      	ldr	r1, [r7, #24]
 8005c4a:	69fa      	ldr	r2, [r7, #28]
 8005c4c:	e841 2300 	strex	r3, r2, [r1]
 8005c50:	617b      	str	r3, [r7, #20]
   return(result);
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d1e3      	bne.n	8005c20 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2202      	movs	r2, #2
 8005c5c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c5e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005c62:	4619      	mov	r1, r3
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f7fb f8e5 	bl	8000e34 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c6a:	e023      	b.n	8005cb4 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005c6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d009      	beq.n	8005c8c <HAL_UART_IRQHandler+0x524>
 8005c78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d003      	beq.n	8005c8c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f000 fa81 	bl	800618c <UART_Transmit_IT>
    return;
 8005c8a:	e014      	b.n	8005cb6 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005c8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d00e      	beq.n	8005cb6 <HAL_UART_IRQHandler+0x54e>
 8005c98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d008      	beq.n	8005cb6 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f000 fac1 	bl	800622c <UART_EndTransmit_IT>
    return;
 8005caa:	e004      	b.n	8005cb6 <HAL_UART_IRQHandler+0x54e>
    return;
 8005cac:	bf00      	nop
 8005cae:	e002      	b.n	8005cb6 <HAL_UART_IRQHandler+0x54e>
      return;
 8005cb0:	bf00      	nop
 8005cb2:	e000      	b.n	8005cb6 <HAL_UART_IRQHandler+0x54e>
      return;
 8005cb4:	bf00      	nop
  }
}
 8005cb6:	37e8      	adds	r7, #232	@ 0xe8
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005cc4:	bf00      	nop
 8005cc6:	370c      	adds	r7, #12
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005cd8:	bf00      	nop
 8005cda:	370c      	adds	r7, #12
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005cec:	bf00      	nop
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr

08005cf8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005d00:	bf00      	nop
 8005d02:	370c      	adds	r7, #12
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b09c      	sub	sp, #112	@ 0x70
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d18:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d172      	bne.n	8005e0e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005d28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	330c      	adds	r3, #12
 8005d34:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d38:	e853 3f00 	ldrex	r3, [r3]
 8005d3c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005d3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d44:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	330c      	adds	r3, #12
 8005d4c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005d4e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005d50:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d52:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005d54:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005d56:	e841 2300 	strex	r3, r2, [r1]
 8005d5a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005d5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d1e5      	bne.n	8005d2e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	3314      	adds	r3, #20
 8005d68:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d6c:	e853 3f00 	ldrex	r3, [r3]
 8005d70:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005d72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d74:	f023 0301 	bic.w	r3, r3, #1
 8005d78:	667b      	str	r3, [r7, #100]	@ 0x64
 8005d7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	3314      	adds	r3, #20
 8005d80:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005d82:	647a      	str	r2, [r7, #68]	@ 0x44
 8005d84:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d86:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d8a:	e841 2300 	strex	r3, r2, [r1]
 8005d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005d90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d1e5      	bne.n	8005d62 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	3314      	adds	r3, #20
 8005d9c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da0:	e853 3f00 	ldrex	r3, [r3]
 8005da4:	623b      	str	r3, [r7, #32]
   return(result);
 8005da6:	6a3b      	ldr	r3, [r7, #32]
 8005da8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005dac:	663b      	str	r3, [r7, #96]	@ 0x60
 8005dae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	3314      	adds	r3, #20
 8005db4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005db6:	633a      	str	r2, [r7, #48]	@ 0x30
 8005db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005dbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005dbe:	e841 2300 	strex	r3, r2, [r1]
 8005dc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d1e5      	bne.n	8005d96 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005dca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005dcc:	2220      	movs	r2, #32
 8005dce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d119      	bne.n	8005e0e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	330c      	adds	r3, #12
 8005de0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	e853 3f00 	ldrex	r3, [r3]
 8005de8:	60fb      	str	r3, [r7, #12]
   return(result);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f023 0310 	bic.w	r3, r3, #16
 8005df0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005df2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	330c      	adds	r3, #12
 8005df8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005dfa:	61fa      	str	r2, [r7, #28]
 8005dfc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dfe:	69b9      	ldr	r1, [r7, #24]
 8005e00:	69fa      	ldr	r2, [r7, #28]
 8005e02:	e841 2300 	strex	r3, r2, [r1]
 8005e06:	617b      	str	r3, [r7, #20]
   return(result);
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d1e5      	bne.n	8005dda <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e10:	2200      	movs	r2, #0
 8005e12:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d106      	bne.n	8005e2a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e1e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005e20:	4619      	mov	r1, r3
 8005e22:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005e24:	f7fb f806 	bl	8000e34 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005e28:	e002      	b.n	8005e30 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005e2a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005e2c:	f7ff ff50 	bl	8005cd0 <HAL_UART_RxCpltCallback>
}
 8005e30:	bf00      	nop
 8005e32:	3770      	adds	r7, #112	@ 0x70
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e44:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d108      	bne.n	8005e66 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005e58:	085b      	lsrs	r3, r3, #1
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	68f8      	ldr	r0, [r7, #12]
 8005e60:	f7fa ffe8 	bl	8000e34 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005e64:	e002      	b.n	8005e6c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005e66:	68f8      	ldr	r0, [r7, #12]
 8005e68:	f7ff ff3c 	bl	8005ce4 <HAL_UART_RxHalfCpltCallback>
}
 8005e6c:	bf00      	nop
 8005e6e:	3710      	adds	r7, #16
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e84:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	695b      	ldr	r3, [r3, #20]
 8005e8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e90:	2b80      	cmp	r3, #128	@ 0x80
 8005e92:	bf0c      	ite	eq
 8005e94:	2301      	moveq	r3, #1
 8005e96:	2300      	movne	r3, #0
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	2b21      	cmp	r3, #33	@ 0x21
 8005ea6:	d108      	bne.n	8005eba <UART_DMAError+0x46>
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d005      	beq.n	8005eba <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005eb4:	68b8      	ldr	r0, [r7, #8]
 8005eb6:	f000 f8cd 	bl	8006054 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	695b      	ldr	r3, [r3, #20]
 8005ec0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ec4:	2b40      	cmp	r3, #64	@ 0x40
 8005ec6:	bf0c      	ite	eq
 8005ec8:	2301      	moveq	r3, #1
 8005eca:	2300      	movne	r3, #0
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	2b22      	cmp	r3, #34	@ 0x22
 8005eda:	d108      	bne.n	8005eee <UART_DMAError+0x7a>
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d005      	beq.n	8005eee <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005ee8:	68b8      	ldr	r0, [r7, #8]
 8005eea:	f000 f8db 	bl	80060a4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ef2:	f043 0210 	orr.w	r2, r3, #16
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005efa:	68b8      	ldr	r0, [r7, #8]
 8005efc:	f7ff fefc 	bl	8005cf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f00:	bf00      	nop
 8005f02:	3710      	adds	r7, #16
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}

08005f08 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b098      	sub	sp, #96	@ 0x60
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	60f8      	str	r0, [r7, #12]
 8005f10:	60b9      	str	r1, [r7, #8]
 8005f12:	4613      	mov	r3, r2
 8005f14:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005f16:	68ba      	ldr	r2, [r7, #8]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	88fa      	ldrh	r2, [r7, #6]
 8005f20:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2200      	movs	r2, #0
 8005f26:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2222      	movs	r2, #34	@ 0x22
 8005f2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f34:	4a44      	ldr	r2, [pc, #272]	@ (8006048 <UART_Start_Receive_DMA+0x140>)
 8005f36:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f3c:	4a43      	ldr	r2, [pc, #268]	@ (800604c <UART_Start_Receive_DMA+0x144>)
 8005f3e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f44:	4a42      	ldr	r2, [pc, #264]	@ (8006050 <UART_Start_Receive_DMA+0x148>)
 8005f46:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005f50:	f107 0308 	add.w	r3, r7, #8
 8005f54:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	3304      	adds	r3, #4
 8005f60:	4619      	mov	r1, r3
 8005f62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	88fb      	ldrh	r3, [r7, #6]
 8005f68:	f7fc fbde 	bl	8002728 <HAL_DMA_Start_IT>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d008      	beq.n	8005f84 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2210      	movs	r2, #16
 8005f76:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2220      	movs	r2, #32
 8005f7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	e05d      	b.n	8006040 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005f84:	2300      	movs	r3, #0
 8005f86:	613b      	str	r3, [r7, #16]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	613b      	str	r3, [r7, #16]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	613b      	str	r3, [r7, #16]
 8005f98:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d019      	beq.n	8005fd6 <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	330c      	adds	r3, #12
 8005fa8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005faa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fac:	e853 3f00 	ldrex	r3, [r3]
 8005fb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005fb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fb8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	330c      	adds	r3, #12
 8005fc0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005fc2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005fc4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005fc8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005fca:	e841 2300 	strex	r3, r2, [r1]
 8005fce:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005fd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d1e5      	bne.n	8005fa2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	3314      	adds	r3, #20
 8005fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fe0:	e853 3f00 	ldrex	r3, [r3]
 8005fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fe8:	f043 0301 	orr.w	r3, r3, #1
 8005fec:	657b      	str	r3, [r7, #84]	@ 0x54
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	3314      	adds	r3, #20
 8005ff4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005ff6:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005ff8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ffa:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005ffc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005ffe:	e841 2300 	strex	r3, r2, [r1]
 8006002:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006006:	2b00      	cmp	r3, #0
 8006008:	d1e5      	bne.n	8005fd6 <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	3314      	adds	r3, #20
 8006010:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	e853 3f00 	ldrex	r3, [r3]
 8006018:	617b      	str	r3, [r7, #20]
   return(result);
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006020:	653b      	str	r3, [r7, #80]	@ 0x50
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	3314      	adds	r3, #20
 8006028:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800602a:	627a      	str	r2, [r7, #36]	@ 0x24
 800602c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800602e:	6a39      	ldr	r1, [r7, #32]
 8006030:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006032:	e841 2300 	strex	r3, r2, [r1]
 8006036:	61fb      	str	r3, [r7, #28]
   return(result);
 8006038:	69fb      	ldr	r3, [r7, #28]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d1e5      	bne.n	800600a <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 800603e:	2300      	movs	r3, #0
}
 8006040:	4618      	mov	r0, r3
 8006042:	3760      	adds	r7, #96	@ 0x60
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}
 8006048:	08005d0d 	.word	0x08005d0d
 800604c:	08005e39 	.word	0x08005e39
 8006050:	08005e75 	.word	0x08005e75

08006054 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006054:	b480      	push	{r7}
 8006056:	b089      	sub	sp, #36	@ 0x24
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	330c      	adds	r3, #12
 8006062:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	e853 3f00 	ldrex	r3, [r3]
 800606a:	60bb      	str	r3, [r7, #8]
   return(result);
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006072:	61fb      	str	r3, [r7, #28]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	330c      	adds	r3, #12
 800607a:	69fa      	ldr	r2, [r7, #28]
 800607c:	61ba      	str	r2, [r7, #24]
 800607e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006080:	6979      	ldr	r1, [r7, #20]
 8006082:	69ba      	ldr	r2, [r7, #24]
 8006084:	e841 2300 	strex	r3, r2, [r1]
 8006088:	613b      	str	r3, [r7, #16]
   return(result);
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d1e5      	bne.n	800605c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2220      	movs	r2, #32
 8006094:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006098:	bf00      	nop
 800609a:	3724      	adds	r7, #36	@ 0x24
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr

080060a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b095      	sub	sp, #84	@ 0x54
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	330c      	adds	r3, #12
 80060b2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060b6:	e853 3f00 	ldrex	r3, [r3]
 80060ba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80060bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80060c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	330c      	adds	r3, #12
 80060ca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80060cc:	643a      	str	r2, [r7, #64]	@ 0x40
 80060ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80060d2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80060d4:	e841 2300 	strex	r3, r2, [r1]
 80060d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80060da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d1e5      	bne.n	80060ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	3314      	adds	r3, #20
 80060e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e8:	6a3b      	ldr	r3, [r7, #32]
 80060ea:	e853 3f00 	ldrex	r3, [r3]
 80060ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	f023 0301 	bic.w	r3, r3, #1
 80060f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	3314      	adds	r3, #20
 80060fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006100:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006102:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006104:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006106:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006108:	e841 2300 	strex	r3, r2, [r1]
 800610c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800610e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006110:	2b00      	cmp	r3, #0
 8006112:	d1e5      	bne.n	80060e0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006118:	2b01      	cmp	r3, #1
 800611a:	d119      	bne.n	8006150 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	330c      	adds	r3, #12
 8006122:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	e853 3f00 	ldrex	r3, [r3]
 800612a:	60bb      	str	r3, [r7, #8]
   return(result);
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	f023 0310 	bic.w	r3, r3, #16
 8006132:	647b      	str	r3, [r7, #68]	@ 0x44
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	330c      	adds	r3, #12
 800613a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800613c:	61ba      	str	r2, [r7, #24]
 800613e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006140:	6979      	ldr	r1, [r7, #20]
 8006142:	69ba      	ldr	r2, [r7, #24]
 8006144:	e841 2300 	strex	r3, r2, [r1]
 8006148:	613b      	str	r3, [r7, #16]
   return(result);
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d1e5      	bne.n	800611c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2220      	movs	r2, #32
 8006154:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800615e:	bf00      	nop
 8006160:	3754      	adds	r7, #84	@ 0x54
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr

0800616a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800616a:	b580      	push	{r7, lr}
 800616c:	b084      	sub	sp, #16
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006176:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2200      	movs	r2, #0
 800617c:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800617e:	68f8      	ldr	r0, [r7, #12]
 8006180:	f7ff fdba 	bl	8005cf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006184:	bf00      	nop
 8006186:	3710      	adds	r7, #16
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800618c:	b480      	push	{r7}
 800618e:	b085      	sub	sp, #20
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800619a:	b2db      	uxtb	r3, r3
 800619c:	2b21      	cmp	r3, #33	@ 0x21
 800619e:	d13e      	bne.n	800621e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061a8:	d114      	bne.n	80061d4 <UART_Transmit_IT+0x48>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d110      	bne.n	80061d4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a1b      	ldr	r3, [r3, #32]
 80061b6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	881b      	ldrh	r3, [r3, #0]
 80061bc:	461a      	mov	r2, r3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061c6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6a1b      	ldr	r3, [r3, #32]
 80061cc:	1c9a      	adds	r2, r3, #2
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	621a      	str	r2, [r3, #32]
 80061d2:	e008      	b.n	80061e6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6a1b      	ldr	r3, [r3, #32]
 80061d8:	1c59      	adds	r1, r3, #1
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	6211      	str	r1, [r2, #32]
 80061de:	781a      	ldrb	r2, [r3, #0]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	3b01      	subs	r3, #1
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	4619      	mov	r1, r3
 80061f4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d10f      	bne.n	800621a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	68da      	ldr	r2, [r3, #12]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006208:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	68da      	ldr	r2, [r3, #12]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006218:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800621a:	2300      	movs	r3, #0
 800621c:	e000      	b.n	8006220 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800621e:	2302      	movs	r3, #2
  }
}
 8006220:	4618      	mov	r0, r3
 8006222:	3714      	adds	r7, #20
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b082      	sub	sp, #8
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	68da      	ldr	r2, [r3, #12]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006242:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2220      	movs	r2, #32
 8006248:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f7ff fd35 	bl	8005cbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006252:	2300      	movs	r3, #0
}
 8006254:	4618      	mov	r0, r3
 8006256:	3708      	adds	r7, #8
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}

0800625c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b08c      	sub	sp, #48	@ 0x30
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8006264:	2300      	movs	r3, #0
 8006266:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8006268:	2300      	movs	r3, #0
 800626a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006272:	b2db      	uxtb	r3, r3
 8006274:	2b22      	cmp	r3, #34	@ 0x22
 8006276:	f040 80aa 	bne.w	80063ce <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006282:	d115      	bne.n	80062b0 <UART_Receive_IT+0x54>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d111      	bne.n	80062b0 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006290:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	b29b      	uxth	r3, r3
 800629a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800629e:	b29a      	uxth	r2, r3
 80062a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062a2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062a8:	1c9a      	adds	r2, r3, #2
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	629a      	str	r2, [r3, #40]	@ 0x28
 80062ae:	e024      	b.n	80062fa <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062be:	d007      	beq.n	80062d0 <UART_Receive_IT+0x74>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d10a      	bne.n	80062de <UART_Receive_IT+0x82>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	691b      	ldr	r3, [r3, #16]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d106      	bne.n	80062de <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	b2da      	uxtb	r2, r3
 80062d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062da:	701a      	strb	r2, [r3, #0]
 80062dc:	e008      	b.n	80062f0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80062ea:	b2da      	uxtb	r2, r3
 80062ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062ee:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062f4:	1c5a      	adds	r2, r3, #1
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80062fe:	b29b      	uxth	r3, r3
 8006300:	3b01      	subs	r3, #1
 8006302:	b29b      	uxth	r3, r3
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	4619      	mov	r1, r3
 8006308:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800630a:	2b00      	cmp	r3, #0
 800630c:	d15d      	bne.n	80063ca <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68da      	ldr	r2, [r3, #12]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f022 0220 	bic.w	r2, r2, #32
 800631c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	68da      	ldr	r2, [r3, #12]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800632c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	695a      	ldr	r2, [r3, #20]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f022 0201 	bic.w	r2, r2, #1
 800633c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2220      	movs	r2, #32
 8006342:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006350:	2b01      	cmp	r3, #1
 8006352:	d135      	bne.n	80063c0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	330c      	adds	r3, #12
 8006360:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	e853 3f00 	ldrex	r3, [r3]
 8006368:	613b      	str	r3, [r7, #16]
   return(result);
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	f023 0310 	bic.w	r3, r3, #16
 8006370:	627b      	str	r3, [r7, #36]	@ 0x24
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	330c      	adds	r3, #12
 8006378:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800637a:	623a      	str	r2, [r7, #32]
 800637c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800637e:	69f9      	ldr	r1, [r7, #28]
 8006380:	6a3a      	ldr	r2, [r7, #32]
 8006382:	e841 2300 	strex	r3, r2, [r1]
 8006386:	61bb      	str	r3, [r7, #24]
   return(result);
 8006388:	69bb      	ldr	r3, [r7, #24]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d1e5      	bne.n	800635a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 0310 	and.w	r3, r3, #16
 8006398:	2b10      	cmp	r3, #16
 800639a:	d10a      	bne.n	80063b2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800639c:	2300      	movs	r3, #0
 800639e:	60fb      	str	r3, [r7, #12]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	60fb      	str	r3, [r7, #12]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	60fb      	str	r3, [r7, #12]
 80063b0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80063b6:	4619      	mov	r1, r3
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f7fa fd3b 	bl	8000e34 <HAL_UARTEx_RxEventCallback>
 80063be:	e002      	b.n	80063c6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f7ff fc85 	bl	8005cd0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80063c6:	2300      	movs	r3, #0
 80063c8:	e002      	b.n	80063d0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80063ca:	2300      	movs	r3, #0
 80063cc:	e000      	b.n	80063d0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80063ce:	2302      	movs	r3, #2
  }
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3730      	adds	r7, #48	@ 0x30
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063dc:	b0c0      	sub	sp, #256	@ 0x100
 80063de:	af00      	add	r7, sp, #0
 80063e0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	691b      	ldr	r3, [r3, #16]
 80063ec:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80063f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063f4:	68d9      	ldr	r1, [r3, #12]
 80063f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	ea40 0301 	orr.w	r3, r0, r1
 8006400:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006406:	689a      	ldr	r2, [r3, #8]
 8006408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800640c:	691b      	ldr	r3, [r3, #16]
 800640e:	431a      	orrs	r2, r3
 8006410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006414:	695b      	ldr	r3, [r3, #20]
 8006416:	431a      	orrs	r2, r3
 8006418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800641c:	69db      	ldr	r3, [r3, #28]
 800641e:	4313      	orrs	r3, r2
 8006420:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006430:	f021 010c 	bic.w	r1, r1, #12
 8006434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800643e:	430b      	orrs	r3, r1
 8006440:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	695b      	ldr	r3, [r3, #20]
 800644a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800644e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006452:	6999      	ldr	r1, [r3, #24]
 8006454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	ea40 0301 	orr.w	r3, r0, r1
 800645e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	4b8f      	ldr	r3, [pc, #572]	@ (80066a4 <UART_SetConfig+0x2cc>)
 8006468:	429a      	cmp	r2, r3
 800646a:	d005      	beq.n	8006478 <UART_SetConfig+0xa0>
 800646c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	4b8d      	ldr	r3, [pc, #564]	@ (80066a8 <UART_SetConfig+0x2d0>)
 8006474:	429a      	cmp	r2, r3
 8006476:	d104      	bne.n	8006482 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006478:	f7fe fa96 	bl	80049a8 <HAL_RCC_GetPCLK2Freq>
 800647c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006480:	e003      	b.n	800648a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006482:	f7fe fa7d 	bl	8004980 <HAL_RCC_GetPCLK1Freq>
 8006486:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800648a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800648e:	69db      	ldr	r3, [r3, #28]
 8006490:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006494:	f040 810c 	bne.w	80066b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006498:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800649c:	2200      	movs	r2, #0
 800649e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80064a2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80064a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80064aa:	4622      	mov	r2, r4
 80064ac:	462b      	mov	r3, r5
 80064ae:	1891      	adds	r1, r2, r2
 80064b0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80064b2:	415b      	adcs	r3, r3
 80064b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80064b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80064ba:	4621      	mov	r1, r4
 80064bc:	eb12 0801 	adds.w	r8, r2, r1
 80064c0:	4629      	mov	r1, r5
 80064c2:	eb43 0901 	adc.w	r9, r3, r1
 80064c6:	f04f 0200 	mov.w	r2, #0
 80064ca:	f04f 0300 	mov.w	r3, #0
 80064ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80064d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80064d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80064da:	4690      	mov	r8, r2
 80064dc:	4699      	mov	r9, r3
 80064de:	4623      	mov	r3, r4
 80064e0:	eb18 0303 	adds.w	r3, r8, r3
 80064e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80064e8:	462b      	mov	r3, r5
 80064ea:	eb49 0303 	adc.w	r3, r9, r3
 80064ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80064f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	2200      	movs	r2, #0
 80064fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80064fe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006502:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006506:	460b      	mov	r3, r1
 8006508:	18db      	adds	r3, r3, r3
 800650a:	653b      	str	r3, [r7, #80]	@ 0x50
 800650c:	4613      	mov	r3, r2
 800650e:	eb42 0303 	adc.w	r3, r2, r3
 8006512:	657b      	str	r3, [r7, #84]	@ 0x54
 8006514:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006518:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800651c:	f7f9 fe5c 	bl	80001d8 <__aeabi_uldivmod>
 8006520:	4602      	mov	r2, r0
 8006522:	460b      	mov	r3, r1
 8006524:	4b61      	ldr	r3, [pc, #388]	@ (80066ac <UART_SetConfig+0x2d4>)
 8006526:	fba3 2302 	umull	r2, r3, r3, r2
 800652a:	095b      	lsrs	r3, r3, #5
 800652c:	011c      	lsls	r4, r3, #4
 800652e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006532:	2200      	movs	r2, #0
 8006534:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006538:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800653c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006540:	4642      	mov	r2, r8
 8006542:	464b      	mov	r3, r9
 8006544:	1891      	adds	r1, r2, r2
 8006546:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006548:	415b      	adcs	r3, r3
 800654a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800654c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006550:	4641      	mov	r1, r8
 8006552:	eb12 0a01 	adds.w	sl, r2, r1
 8006556:	4649      	mov	r1, r9
 8006558:	eb43 0b01 	adc.w	fp, r3, r1
 800655c:	f04f 0200 	mov.w	r2, #0
 8006560:	f04f 0300 	mov.w	r3, #0
 8006564:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006568:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800656c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006570:	4692      	mov	sl, r2
 8006572:	469b      	mov	fp, r3
 8006574:	4643      	mov	r3, r8
 8006576:	eb1a 0303 	adds.w	r3, sl, r3
 800657a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800657e:	464b      	mov	r3, r9
 8006580:	eb4b 0303 	adc.w	r3, fp, r3
 8006584:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006594:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006598:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800659c:	460b      	mov	r3, r1
 800659e:	18db      	adds	r3, r3, r3
 80065a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80065a2:	4613      	mov	r3, r2
 80065a4:	eb42 0303 	adc.w	r3, r2, r3
 80065a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80065aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80065ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80065b2:	f7f9 fe11 	bl	80001d8 <__aeabi_uldivmod>
 80065b6:	4602      	mov	r2, r0
 80065b8:	460b      	mov	r3, r1
 80065ba:	4611      	mov	r1, r2
 80065bc:	4b3b      	ldr	r3, [pc, #236]	@ (80066ac <UART_SetConfig+0x2d4>)
 80065be:	fba3 2301 	umull	r2, r3, r3, r1
 80065c2:	095b      	lsrs	r3, r3, #5
 80065c4:	2264      	movs	r2, #100	@ 0x64
 80065c6:	fb02 f303 	mul.w	r3, r2, r3
 80065ca:	1acb      	subs	r3, r1, r3
 80065cc:	00db      	lsls	r3, r3, #3
 80065ce:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80065d2:	4b36      	ldr	r3, [pc, #216]	@ (80066ac <UART_SetConfig+0x2d4>)
 80065d4:	fba3 2302 	umull	r2, r3, r3, r2
 80065d8:	095b      	lsrs	r3, r3, #5
 80065da:	005b      	lsls	r3, r3, #1
 80065dc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80065e0:	441c      	add	r4, r3
 80065e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065e6:	2200      	movs	r2, #0
 80065e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80065ec:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80065f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80065f4:	4642      	mov	r2, r8
 80065f6:	464b      	mov	r3, r9
 80065f8:	1891      	adds	r1, r2, r2
 80065fa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80065fc:	415b      	adcs	r3, r3
 80065fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006600:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006604:	4641      	mov	r1, r8
 8006606:	1851      	adds	r1, r2, r1
 8006608:	6339      	str	r1, [r7, #48]	@ 0x30
 800660a:	4649      	mov	r1, r9
 800660c:	414b      	adcs	r3, r1
 800660e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006610:	f04f 0200 	mov.w	r2, #0
 8006614:	f04f 0300 	mov.w	r3, #0
 8006618:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800661c:	4659      	mov	r1, fp
 800661e:	00cb      	lsls	r3, r1, #3
 8006620:	4651      	mov	r1, sl
 8006622:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006626:	4651      	mov	r1, sl
 8006628:	00ca      	lsls	r2, r1, #3
 800662a:	4610      	mov	r0, r2
 800662c:	4619      	mov	r1, r3
 800662e:	4603      	mov	r3, r0
 8006630:	4642      	mov	r2, r8
 8006632:	189b      	adds	r3, r3, r2
 8006634:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006638:	464b      	mov	r3, r9
 800663a:	460a      	mov	r2, r1
 800663c:	eb42 0303 	adc.w	r3, r2, r3
 8006640:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006650:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006654:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006658:	460b      	mov	r3, r1
 800665a:	18db      	adds	r3, r3, r3
 800665c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800665e:	4613      	mov	r3, r2
 8006660:	eb42 0303 	adc.w	r3, r2, r3
 8006664:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006666:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800666a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800666e:	f7f9 fdb3 	bl	80001d8 <__aeabi_uldivmod>
 8006672:	4602      	mov	r2, r0
 8006674:	460b      	mov	r3, r1
 8006676:	4b0d      	ldr	r3, [pc, #52]	@ (80066ac <UART_SetConfig+0x2d4>)
 8006678:	fba3 1302 	umull	r1, r3, r3, r2
 800667c:	095b      	lsrs	r3, r3, #5
 800667e:	2164      	movs	r1, #100	@ 0x64
 8006680:	fb01 f303 	mul.w	r3, r1, r3
 8006684:	1ad3      	subs	r3, r2, r3
 8006686:	00db      	lsls	r3, r3, #3
 8006688:	3332      	adds	r3, #50	@ 0x32
 800668a:	4a08      	ldr	r2, [pc, #32]	@ (80066ac <UART_SetConfig+0x2d4>)
 800668c:	fba2 2303 	umull	r2, r3, r2, r3
 8006690:	095b      	lsrs	r3, r3, #5
 8006692:	f003 0207 	and.w	r2, r3, #7
 8006696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4422      	add	r2, r4
 800669e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80066a0:	e106      	b.n	80068b0 <UART_SetConfig+0x4d8>
 80066a2:	bf00      	nop
 80066a4:	40011000 	.word	0x40011000
 80066a8:	40011400 	.word	0x40011400
 80066ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80066b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066b4:	2200      	movs	r2, #0
 80066b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80066ba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80066be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80066c2:	4642      	mov	r2, r8
 80066c4:	464b      	mov	r3, r9
 80066c6:	1891      	adds	r1, r2, r2
 80066c8:	6239      	str	r1, [r7, #32]
 80066ca:	415b      	adcs	r3, r3
 80066cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80066ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80066d2:	4641      	mov	r1, r8
 80066d4:	1854      	adds	r4, r2, r1
 80066d6:	4649      	mov	r1, r9
 80066d8:	eb43 0501 	adc.w	r5, r3, r1
 80066dc:	f04f 0200 	mov.w	r2, #0
 80066e0:	f04f 0300 	mov.w	r3, #0
 80066e4:	00eb      	lsls	r3, r5, #3
 80066e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80066ea:	00e2      	lsls	r2, r4, #3
 80066ec:	4614      	mov	r4, r2
 80066ee:	461d      	mov	r5, r3
 80066f0:	4643      	mov	r3, r8
 80066f2:	18e3      	adds	r3, r4, r3
 80066f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80066f8:	464b      	mov	r3, r9
 80066fa:	eb45 0303 	adc.w	r3, r5, r3
 80066fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800670e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006712:	f04f 0200 	mov.w	r2, #0
 8006716:	f04f 0300 	mov.w	r3, #0
 800671a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800671e:	4629      	mov	r1, r5
 8006720:	008b      	lsls	r3, r1, #2
 8006722:	4621      	mov	r1, r4
 8006724:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006728:	4621      	mov	r1, r4
 800672a:	008a      	lsls	r2, r1, #2
 800672c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006730:	f7f9 fd52 	bl	80001d8 <__aeabi_uldivmod>
 8006734:	4602      	mov	r2, r0
 8006736:	460b      	mov	r3, r1
 8006738:	4b60      	ldr	r3, [pc, #384]	@ (80068bc <UART_SetConfig+0x4e4>)
 800673a:	fba3 2302 	umull	r2, r3, r3, r2
 800673e:	095b      	lsrs	r3, r3, #5
 8006740:	011c      	lsls	r4, r3, #4
 8006742:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006746:	2200      	movs	r2, #0
 8006748:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800674c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006750:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006754:	4642      	mov	r2, r8
 8006756:	464b      	mov	r3, r9
 8006758:	1891      	adds	r1, r2, r2
 800675a:	61b9      	str	r1, [r7, #24]
 800675c:	415b      	adcs	r3, r3
 800675e:	61fb      	str	r3, [r7, #28]
 8006760:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006764:	4641      	mov	r1, r8
 8006766:	1851      	adds	r1, r2, r1
 8006768:	6139      	str	r1, [r7, #16]
 800676a:	4649      	mov	r1, r9
 800676c:	414b      	adcs	r3, r1
 800676e:	617b      	str	r3, [r7, #20]
 8006770:	f04f 0200 	mov.w	r2, #0
 8006774:	f04f 0300 	mov.w	r3, #0
 8006778:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800677c:	4659      	mov	r1, fp
 800677e:	00cb      	lsls	r3, r1, #3
 8006780:	4651      	mov	r1, sl
 8006782:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006786:	4651      	mov	r1, sl
 8006788:	00ca      	lsls	r2, r1, #3
 800678a:	4610      	mov	r0, r2
 800678c:	4619      	mov	r1, r3
 800678e:	4603      	mov	r3, r0
 8006790:	4642      	mov	r2, r8
 8006792:	189b      	adds	r3, r3, r2
 8006794:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006798:	464b      	mov	r3, r9
 800679a:	460a      	mov	r2, r1
 800679c:	eb42 0303 	adc.w	r3, r2, r3
 80067a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80067a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	67bb      	str	r3, [r7, #120]	@ 0x78
 80067ae:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80067b0:	f04f 0200 	mov.w	r2, #0
 80067b4:	f04f 0300 	mov.w	r3, #0
 80067b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80067bc:	4649      	mov	r1, r9
 80067be:	008b      	lsls	r3, r1, #2
 80067c0:	4641      	mov	r1, r8
 80067c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80067c6:	4641      	mov	r1, r8
 80067c8:	008a      	lsls	r2, r1, #2
 80067ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80067ce:	f7f9 fd03 	bl	80001d8 <__aeabi_uldivmod>
 80067d2:	4602      	mov	r2, r0
 80067d4:	460b      	mov	r3, r1
 80067d6:	4611      	mov	r1, r2
 80067d8:	4b38      	ldr	r3, [pc, #224]	@ (80068bc <UART_SetConfig+0x4e4>)
 80067da:	fba3 2301 	umull	r2, r3, r3, r1
 80067de:	095b      	lsrs	r3, r3, #5
 80067e0:	2264      	movs	r2, #100	@ 0x64
 80067e2:	fb02 f303 	mul.w	r3, r2, r3
 80067e6:	1acb      	subs	r3, r1, r3
 80067e8:	011b      	lsls	r3, r3, #4
 80067ea:	3332      	adds	r3, #50	@ 0x32
 80067ec:	4a33      	ldr	r2, [pc, #204]	@ (80068bc <UART_SetConfig+0x4e4>)
 80067ee:	fba2 2303 	umull	r2, r3, r2, r3
 80067f2:	095b      	lsrs	r3, r3, #5
 80067f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80067f8:	441c      	add	r4, r3
 80067fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067fe:	2200      	movs	r2, #0
 8006800:	673b      	str	r3, [r7, #112]	@ 0x70
 8006802:	677a      	str	r2, [r7, #116]	@ 0x74
 8006804:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006808:	4642      	mov	r2, r8
 800680a:	464b      	mov	r3, r9
 800680c:	1891      	adds	r1, r2, r2
 800680e:	60b9      	str	r1, [r7, #8]
 8006810:	415b      	adcs	r3, r3
 8006812:	60fb      	str	r3, [r7, #12]
 8006814:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006818:	4641      	mov	r1, r8
 800681a:	1851      	adds	r1, r2, r1
 800681c:	6039      	str	r1, [r7, #0]
 800681e:	4649      	mov	r1, r9
 8006820:	414b      	adcs	r3, r1
 8006822:	607b      	str	r3, [r7, #4]
 8006824:	f04f 0200 	mov.w	r2, #0
 8006828:	f04f 0300 	mov.w	r3, #0
 800682c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006830:	4659      	mov	r1, fp
 8006832:	00cb      	lsls	r3, r1, #3
 8006834:	4651      	mov	r1, sl
 8006836:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800683a:	4651      	mov	r1, sl
 800683c:	00ca      	lsls	r2, r1, #3
 800683e:	4610      	mov	r0, r2
 8006840:	4619      	mov	r1, r3
 8006842:	4603      	mov	r3, r0
 8006844:	4642      	mov	r2, r8
 8006846:	189b      	adds	r3, r3, r2
 8006848:	66bb      	str	r3, [r7, #104]	@ 0x68
 800684a:	464b      	mov	r3, r9
 800684c:	460a      	mov	r2, r1
 800684e:	eb42 0303 	adc.w	r3, r2, r3
 8006852:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	663b      	str	r3, [r7, #96]	@ 0x60
 800685e:	667a      	str	r2, [r7, #100]	@ 0x64
 8006860:	f04f 0200 	mov.w	r2, #0
 8006864:	f04f 0300 	mov.w	r3, #0
 8006868:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800686c:	4649      	mov	r1, r9
 800686e:	008b      	lsls	r3, r1, #2
 8006870:	4641      	mov	r1, r8
 8006872:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006876:	4641      	mov	r1, r8
 8006878:	008a      	lsls	r2, r1, #2
 800687a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800687e:	f7f9 fcab 	bl	80001d8 <__aeabi_uldivmod>
 8006882:	4602      	mov	r2, r0
 8006884:	460b      	mov	r3, r1
 8006886:	4b0d      	ldr	r3, [pc, #52]	@ (80068bc <UART_SetConfig+0x4e4>)
 8006888:	fba3 1302 	umull	r1, r3, r3, r2
 800688c:	095b      	lsrs	r3, r3, #5
 800688e:	2164      	movs	r1, #100	@ 0x64
 8006890:	fb01 f303 	mul.w	r3, r1, r3
 8006894:	1ad3      	subs	r3, r2, r3
 8006896:	011b      	lsls	r3, r3, #4
 8006898:	3332      	adds	r3, #50	@ 0x32
 800689a:	4a08      	ldr	r2, [pc, #32]	@ (80068bc <UART_SetConfig+0x4e4>)
 800689c:	fba2 2303 	umull	r2, r3, r2, r3
 80068a0:	095b      	lsrs	r3, r3, #5
 80068a2:	f003 020f 	and.w	r2, r3, #15
 80068a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4422      	add	r2, r4
 80068ae:	609a      	str	r2, [r3, #8]
}
 80068b0:	bf00      	nop
 80068b2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80068b6:	46bd      	mov	sp, r7
 80068b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068bc:	51eb851f 	.word	0x51eb851f

080068c0 <memset>:
 80068c0:	4402      	add	r2, r0
 80068c2:	4603      	mov	r3, r0
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d100      	bne.n	80068ca <memset+0xa>
 80068c8:	4770      	bx	lr
 80068ca:	f803 1b01 	strb.w	r1, [r3], #1
 80068ce:	e7f9      	b.n	80068c4 <memset+0x4>

080068d0 <__errno>:
 80068d0:	4b01      	ldr	r3, [pc, #4]	@ (80068d8 <__errno+0x8>)
 80068d2:	6818      	ldr	r0, [r3, #0]
 80068d4:	4770      	bx	lr
 80068d6:	bf00      	nop
 80068d8:	20000030 	.word	0x20000030

080068dc <__libc_init_array>:
 80068dc:	b570      	push	{r4, r5, r6, lr}
 80068de:	4d0d      	ldr	r5, [pc, #52]	@ (8006914 <__libc_init_array+0x38>)
 80068e0:	4c0d      	ldr	r4, [pc, #52]	@ (8006918 <__libc_init_array+0x3c>)
 80068e2:	1b64      	subs	r4, r4, r5
 80068e4:	10a4      	asrs	r4, r4, #2
 80068e6:	2600      	movs	r6, #0
 80068e8:	42a6      	cmp	r6, r4
 80068ea:	d109      	bne.n	8006900 <__libc_init_array+0x24>
 80068ec:	4d0b      	ldr	r5, [pc, #44]	@ (800691c <__libc_init_array+0x40>)
 80068ee:	4c0c      	ldr	r4, [pc, #48]	@ (8006920 <__libc_init_array+0x44>)
 80068f0:	f000 f914 	bl	8006b1c <_init>
 80068f4:	1b64      	subs	r4, r4, r5
 80068f6:	10a4      	asrs	r4, r4, #2
 80068f8:	2600      	movs	r6, #0
 80068fa:	42a6      	cmp	r6, r4
 80068fc:	d105      	bne.n	800690a <__libc_init_array+0x2e>
 80068fe:	bd70      	pop	{r4, r5, r6, pc}
 8006900:	f855 3b04 	ldr.w	r3, [r5], #4
 8006904:	4798      	blx	r3
 8006906:	3601      	adds	r6, #1
 8006908:	e7ee      	b.n	80068e8 <__libc_init_array+0xc>
 800690a:	f855 3b04 	ldr.w	r3, [r5], #4
 800690e:	4798      	blx	r3
 8006910:	3601      	adds	r6, #1
 8006912:	e7f2      	b.n	80068fa <__libc_init_array+0x1e>
 8006914:	08006b7c 	.word	0x08006b7c
 8006918:	08006b7c 	.word	0x08006b7c
 800691c:	08006b7c 	.word	0x08006b7c
 8006920:	08006b80 	.word	0x08006b80

08006924 <sqrtf>:
 8006924:	b508      	push	{r3, lr}
 8006926:	ed2d 8b02 	vpush	{d8}
 800692a:	eeb0 8a40 	vmov.f32	s16, s0
 800692e:	f000 f8f2 	bl	8006b16 <__ieee754_sqrtf>
 8006932:	eeb4 8a48 	vcmp.f32	s16, s16
 8006936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800693a:	d60c      	bvs.n	8006956 <sqrtf+0x32>
 800693c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800695c <sqrtf+0x38>
 8006940:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8006944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006948:	d505      	bpl.n	8006956 <sqrtf+0x32>
 800694a:	f7ff ffc1 	bl	80068d0 <__errno>
 800694e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8006952:	2321      	movs	r3, #33	@ 0x21
 8006954:	6003      	str	r3, [r0, #0]
 8006956:	ecbd 8b02 	vpop	{d8}
 800695a:	bd08      	pop	{r3, pc}
 800695c:	00000000 	.word	0x00000000

08006960 <atanf>:
 8006960:	b538      	push	{r3, r4, r5, lr}
 8006962:	ee10 5a10 	vmov	r5, s0
 8006966:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800696a:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800696e:	eef0 7a40 	vmov.f32	s15, s0
 8006972:	d310      	bcc.n	8006996 <atanf+0x36>
 8006974:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8006978:	d904      	bls.n	8006984 <atanf+0x24>
 800697a:	ee70 7a00 	vadd.f32	s15, s0, s0
 800697e:	eeb0 0a67 	vmov.f32	s0, s15
 8006982:	bd38      	pop	{r3, r4, r5, pc}
 8006984:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8006abc <atanf+0x15c>
 8006988:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8006ac0 <atanf+0x160>
 800698c:	2d00      	cmp	r5, #0
 800698e:	bfc8      	it	gt
 8006990:	eef0 7a47 	vmovgt.f32	s15, s14
 8006994:	e7f3      	b.n	800697e <atanf+0x1e>
 8006996:	4b4b      	ldr	r3, [pc, #300]	@ (8006ac4 <atanf+0x164>)
 8006998:	429c      	cmp	r4, r3
 800699a:	d810      	bhi.n	80069be <atanf+0x5e>
 800699c:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 80069a0:	d20a      	bcs.n	80069b8 <atanf+0x58>
 80069a2:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8006ac8 <atanf+0x168>
 80069a6:	ee30 7a07 	vadd.f32	s14, s0, s14
 80069aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069ae:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80069b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069b6:	dce2      	bgt.n	800697e <atanf+0x1e>
 80069b8:	f04f 33ff 	mov.w	r3, #4294967295
 80069bc:	e013      	b.n	80069e6 <atanf+0x86>
 80069be:	f000 f8a3 	bl	8006b08 <fabsf>
 80069c2:	4b42      	ldr	r3, [pc, #264]	@ (8006acc <atanf+0x16c>)
 80069c4:	429c      	cmp	r4, r3
 80069c6:	d84f      	bhi.n	8006a68 <atanf+0x108>
 80069c8:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 80069cc:	429c      	cmp	r4, r3
 80069ce:	d841      	bhi.n	8006a54 <atanf+0xf4>
 80069d0:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80069d4:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80069d8:	eea0 7a27 	vfma.f32	s14, s0, s15
 80069dc:	2300      	movs	r3, #0
 80069de:	ee30 0a27 	vadd.f32	s0, s0, s15
 80069e2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80069e6:	1c5a      	adds	r2, r3, #1
 80069e8:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80069ec:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8006ad0 <atanf+0x170>
 80069f0:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8006ad4 <atanf+0x174>
 80069f4:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8006ad8 <atanf+0x178>
 80069f8:	ee66 6a06 	vmul.f32	s13, s12, s12
 80069fc:	eee6 5a87 	vfma.f32	s11, s13, s14
 8006a00:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8006adc <atanf+0x17c>
 8006a04:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8006a08:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8006ae0 <atanf+0x180>
 8006a0c:	eee7 5a26 	vfma.f32	s11, s14, s13
 8006a10:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8006ae4 <atanf+0x184>
 8006a14:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8006a18:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8006ae8 <atanf+0x188>
 8006a1c:	eee7 5a26 	vfma.f32	s11, s14, s13
 8006a20:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8006aec <atanf+0x18c>
 8006a24:	eea6 5a87 	vfma.f32	s10, s13, s14
 8006a28:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8006af0 <atanf+0x190>
 8006a2c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8006a30:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8006af4 <atanf+0x194>
 8006a34:	eea7 5a26 	vfma.f32	s10, s14, s13
 8006a38:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8006af8 <atanf+0x198>
 8006a3c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8006a40:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006a44:	eea5 7a86 	vfma.f32	s14, s11, s12
 8006a48:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006a4c:	d121      	bne.n	8006a92 <atanf+0x132>
 8006a4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006a52:	e794      	b.n	800697e <atanf+0x1e>
 8006a54:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8006a58:	ee30 7a67 	vsub.f32	s14, s0, s15
 8006a5c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006a60:	2301      	movs	r3, #1
 8006a62:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8006a66:	e7be      	b.n	80069e6 <atanf+0x86>
 8006a68:	4b24      	ldr	r3, [pc, #144]	@ (8006afc <atanf+0x19c>)
 8006a6a:	429c      	cmp	r4, r3
 8006a6c:	d80b      	bhi.n	8006a86 <atanf+0x126>
 8006a6e:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8006a72:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006a76:	eea0 7a27 	vfma.f32	s14, s0, s15
 8006a7a:	2302      	movs	r3, #2
 8006a7c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8006a80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a84:	e7af      	b.n	80069e6 <atanf+0x86>
 8006a86:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8006a8a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8006a8e:	2303      	movs	r3, #3
 8006a90:	e7a9      	b.n	80069e6 <atanf+0x86>
 8006a92:	4a1b      	ldr	r2, [pc, #108]	@ (8006b00 <atanf+0x1a0>)
 8006a94:	491b      	ldr	r1, [pc, #108]	@ (8006b04 <atanf+0x1a4>)
 8006a96:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8006a9a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8006a9e:	edd3 6a00 	vldr	s13, [r3]
 8006aa2:	ee37 7a66 	vsub.f32	s14, s14, s13
 8006aa6:	2d00      	cmp	r5, #0
 8006aa8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006aac:	edd2 7a00 	vldr	s15, [r2]
 8006ab0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006ab4:	bfb8      	it	lt
 8006ab6:	eef1 7a67 	vneglt.f32	s15, s15
 8006aba:	e760      	b.n	800697e <atanf+0x1e>
 8006abc:	bfc90fdb 	.word	0xbfc90fdb
 8006ac0:	3fc90fdb 	.word	0x3fc90fdb
 8006ac4:	3edfffff 	.word	0x3edfffff
 8006ac8:	7149f2ca 	.word	0x7149f2ca
 8006acc:	3f97ffff 	.word	0x3f97ffff
 8006ad0:	3c8569d7 	.word	0x3c8569d7
 8006ad4:	3d4bda59 	.word	0x3d4bda59
 8006ad8:	bd6ef16b 	.word	0xbd6ef16b
 8006adc:	3d886b35 	.word	0x3d886b35
 8006ae0:	3dba2e6e 	.word	0x3dba2e6e
 8006ae4:	3e124925 	.word	0x3e124925
 8006ae8:	3eaaaaab 	.word	0x3eaaaaab
 8006aec:	bd15a221 	.word	0xbd15a221
 8006af0:	bd9d8795 	.word	0xbd9d8795
 8006af4:	bde38e38 	.word	0xbde38e38
 8006af8:	be4ccccd 	.word	0xbe4ccccd
 8006afc:	401bffff 	.word	0x401bffff
 8006b00:	08006b64 	.word	0x08006b64
 8006b04:	08006b54 	.word	0x08006b54

08006b08 <fabsf>:
 8006b08:	ee10 3a10 	vmov	r3, s0
 8006b0c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006b10:	ee00 3a10 	vmov	s0, r3
 8006b14:	4770      	bx	lr

08006b16 <__ieee754_sqrtf>:
 8006b16:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8006b1a:	4770      	bx	lr

08006b1c <_init>:
 8006b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b1e:	bf00      	nop
 8006b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b22:	bc08      	pop	{r3}
 8006b24:	469e      	mov	lr, r3
 8006b26:	4770      	bx	lr

08006b28 <_fini>:
 8006b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b2a:	bf00      	nop
 8006b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b2e:	bc08      	pop	{r3}
 8006b30:	469e      	mov	lr, r3
 8006b32:	4770      	bx	lr
