
FlightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049d0  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004b68  08004b68  00005b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ba0  08004ba0  00006088  2**0
                  CONTENTS
  4 .ARM          00000008  08004ba0  08004ba0  00005ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ba8  08004ba8  00006088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ba8  08004ba8  00005ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004bac  08004bac  00005bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  08004bb0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b4  20000088  08004c38  00006088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000043c  08004c38  0000643c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eaf1  00000000  00000000  000060b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c3e  00000000  00000000  00014ba9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e98  00000000  00000000  000167e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ba2  00000000  00000000  00017680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001682d  00000000  00000000  00018222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010f6e  00000000  00000000  0002ea4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000910af  00000000  00000000  0003f9bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d0a6c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000414c  00000000  00000000  000d0ab0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000d4bfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000088 	.word	0x20000088
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004b50 	.word	0x08004b50

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000008c 	.word	0x2000008c
 80001d4:	08004b50 	.word	0x08004b50

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <wr8>:

#define I2C_TIMEOUT_MS 3 // vi vong lap 4ms nen de timeout 3ms

//2 ham user de ghi va doc vao i2c
// vi 0x68 co 7 bit ma ta dia chi can 8 bit nen ta dich 1 bit
static inline HAL_StatusTypeDef wr8(I2C_HandleTypeDef* hi2c, uint8_t reg, uint8_t val) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b086      	sub	sp, #24
 80004cc:	af04      	add	r7, sp, #16
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	460b      	mov	r3, r1
 80004d2:	70fb      	strb	r3, [r7, #3]
 80004d4:	4613      	mov	r3, r2
 80004d6:	70bb      	strb	r3, [r7, #2]
  return HAL_I2C_Mem_Write(hi2c, 0x68<<1, reg, I2C_MEMADD_SIZE_8BIT, &val, 1, I2C_TIMEOUT_MS);
 80004d8:	78fb      	ldrb	r3, [r7, #3]
 80004da:	b29a      	uxth	r2, r3
 80004dc:	2303      	movs	r3, #3
 80004de:	9302      	str	r3, [sp, #8]
 80004e0:	2301      	movs	r3, #1
 80004e2:	9301      	str	r3, [sp, #4]
 80004e4:	1cbb      	adds	r3, r7, #2
 80004e6:	9300      	str	r3, [sp, #0]
 80004e8:	2301      	movs	r3, #1
 80004ea:	21d0      	movs	r1, #208	@ 0xd0
 80004ec:	6878      	ldr	r0, [r7, #4]
 80004ee:	f001 ff9d 	bl	800242c <HAL_I2C_Mem_Write>
 80004f2:	4603      	mov	r3, r0
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	3708      	adds	r7, #8
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}

080004fc <rd>:
static inline HAL_StatusTypeDef rd(I2C_HandleTypeDef* hi2c, uint8_t reg, uint8_t* buf, uint16_t len) {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b088      	sub	sp, #32
 8000500:	af04      	add	r7, sp, #16
 8000502:	60f8      	str	r0, [r7, #12]
 8000504:	607a      	str	r2, [r7, #4]
 8000506:	461a      	mov	r2, r3
 8000508:	460b      	mov	r3, r1
 800050a:	72fb      	strb	r3, [r7, #11]
 800050c:	4613      	mov	r3, r2
 800050e:	813b      	strh	r3, [r7, #8]
  return HAL_I2C_Mem_Read(hi2c, 0x68<<1, reg, I2C_MEMADD_SIZE_8BIT, buf, len, I2C_TIMEOUT_MS);
 8000510:	7afb      	ldrb	r3, [r7, #11]
 8000512:	b29a      	uxth	r2, r3
 8000514:	2303      	movs	r3, #3
 8000516:	9302      	str	r3, [sp, #8]
 8000518:	893b      	ldrh	r3, [r7, #8]
 800051a:	9301      	str	r3, [sp, #4]
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	9300      	str	r3, [sp, #0]
 8000520:	2301      	movs	r3, #1
 8000522:	21d0      	movs	r1, #208	@ 0xd0
 8000524:	68f8      	ldr	r0, [r7, #12]
 8000526:	f002 f87b 	bl	8002620 <HAL_I2C_Mem_Read>
 800052a:	4603      	mov	r3, r0
}
 800052c:	4618      	mov	r0, r3
 800052e:	3710      	adds	r7, #16
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}

08000534 <kalman_1d>:

//kalman filter lay input la: gia tri truoc do, sai so truoc do, input(rate_gyro), gia tri measure (angle_accelerometer) 
void kalman_1d(float* pKalmanState, 
  float* pKalmanUncertainty, float KalmanInput, 
  float KalmanMeasurement, float dt_s) 
  {
 8000534:	b480      	push	{r7}
 8000536:	b08b      	sub	sp, #44	@ 0x2c
 8000538:	af00      	add	r7, sp, #0
 800053a:	6178      	str	r0, [r7, #20]
 800053c:	6139      	str	r1, [r7, #16]
 800053e:	ed87 0a03 	vstr	s0, [r7, #12]
 8000542:	edc7 0a02 	vstr	s1, [r7, #8]
 8000546:	ed87 1a01 	vstr	s2, [r7, #4]
    float KalmanState = *pKalmanState; //lay gia tri k-1
 800054a:	697b      	ldr	r3, [r7, #20]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	627b      	str	r3, [r7, #36]	@ 0x24
    float KalmanUncertainty = *pKalmanUncertainty; ////lay sai so k-1
 8000550:	693b      	ldr	r3, [r7, #16]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	623b      	str	r3, [r7, #32]
    KalmanState=KalmanState+dt_s*KalmanInput; //B1: du doan tho (raw) goc hien tai (angle(k) = angle(k-1) + dt*toc_do_goc )
 8000556:	ed97 7a01 	vldr	s14, [r7, #4]
 800055a:	edd7 7a03 	vldr	s15, [r7, #12]
 800055e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000562:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8000566:	ee77 7a27 	vadd.f32	s15, s14, s15
 800056a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    KalmanUncertainty=KalmanUncertainty + dt_s*dt_s * 4 * 4; //B2 du doan tho (raw) sai so hien tai
 800056e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000572:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000576:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800057a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800057e:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8000582:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000586:	ed97 7a08 	vldr	s14, [r7, #32]
 800058a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800058e:	edc7 7a08 	vstr	s15, [r7, #32]
    float KalmanGain=KalmanUncertainty * 1/(1*KalmanUncertainty + 3 * 3); //B3: tinh he so kalman gain
 8000592:	edd7 7a08 	vldr	s15, [r7, #32]
 8000596:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 800059a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800059e:	edd7 6a08 	vldr	s13, [r7, #32]
 80005a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80005a6:	edc7 7a07 	vstr	s15, [r7, #28]
    KalmanState=KalmanState+KalmanGain * (KalmanMeasurement-KalmanState); //B4: du doan toi uu goc hien tai (angle_kalman)
 80005aa:	ed97 7a02 	vldr	s14, [r7, #8]
 80005ae:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80005b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80005b6:	edd7 7a07 	vldr	s15, [r7, #28]
 80005ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80005be:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80005c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005c6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    KalmanUncertainty=(1-KalmanGain) *  KalmanUncertainty; //B5: du doan toi uu sai so hien tai (saiSo_kalman)
 80005ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80005ce:	edd7 7a07 	vldr	s15, [r7, #28]
 80005d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80005d6:	ed97 7a08 	vldr	s14, [r7, #32]
 80005da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80005de:	edc7 7a08 	vstr	s15, [r7, #32]
    *pKalmanState=KalmanState; //luu goc du doan_kalman hien tai
 80005e2:	697b      	ldr	r3, [r7, #20]
 80005e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80005e6:	601a      	str	r2, [r3, #0]
    *pKalmanUncertainty=KalmanUncertainty; //luu sai so du doan_kalman hien tai
 80005e8:	693b      	ldr	r3, [r7, #16]
 80005ea:	6a3a      	ldr	r2, [r7, #32]
 80005ec:	601a      	str	r2, [r3, #0]
 }
 80005ee:	bf00      	nop
 80005f0:	372c      	adds	r7, #44	@ 0x2c
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
	...

080005fc <gyro_signal>:
void gyro_signal(void){
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b08a      	sub	sp, #40	@ 0x28
 8000600:	af00      	add	r7, sp, #0

  // read register 0x43 -> 0x48 => 6 byte
  // save to b[6], vi data cua gyro 16bit
  //, ma chia ra 2 mang nen b[0] va b[1] la data day du cua rate_x, tuong tu y voi z
  // tuy nhien voi sensing scale factor 65.5/ do/s thi ta chia gia tri doc duoc cho 65.5 => toc do  
  if (rd(&hi2c1, 0x43, value, 6) == HAL_OK) {
 8000602:	1d3a      	adds	r2, r7, #4
 8000604:	2306      	movs	r3, #6
 8000606:	2143      	movs	r1, #67	@ 0x43
 8000608:	4879      	ldr	r0, [pc, #484]	@ (80007f0 <gyro_signal+0x1f4>)
 800060a:	f7ff ff77 	bl	80004fc <rd>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d13d      	bne.n	8000690 <gyro_signal+0x94>
    int16_t gx_raw = (int16_t)((value[0] << 8) | value[1]);
 8000614:	793b      	ldrb	r3, [r7, #4]
 8000616:	021b      	lsls	r3, r3, #8
 8000618:	b21a      	sxth	r2, r3
 800061a:	797b      	ldrb	r3, [r7, #5]
 800061c:	b21b      	sxth	r3, r3
 800061e:	4313      	orrs	r3, r2
 8000620:	84fb      	strh	r3, [r7, #38]	@ 0x26
    int16_t gy_raw = (int16_t)((value[2] << 8) | value[3]);
 8000622:	79bb      	ldrb	r3, [r7, #6]
 8000624:	021b      	lsls	r3, r3, #8
 8000626:	b21a      	sxth	r2, r3
 8000628:	79fb      	ldrb	r3, [r7, #7]
 800062a:	b21b      	sxth	r3, r3
 800062c:	4313      	orrs	r3, r2
 800062e:	84bb      	strh	r3, [r7, #36]	@ 0x24
    int16_t gz_raw = (int16_t)((value[4] << 8) | value[5]);
 8000630:	7a3b      	ldrb	r3, [r7, #8]
 8000632:	021b      	lsls	r3, r3, #8
 8000634:	b21a      	sxth	r2, r3
 8000636:	7a7b      	ldrb	r3, [r7, #9]
 8000638:	b21b      	sxth	r3, r3
 800063a:	4313      	orrs	r3, r2
 800063c:	847b      	strh	r3, [r7, #34]	@ 0x22
    const float sens = 65.5f; // LSB per (deg/s) for FS_SEL=1
 800063e:	4b6d      	ldr	r3, [pc, #436]	@ (80007f4 <gyro_signal+0x1f8>)
 8000640:	61fb      	str	r3, [r7, #28]
    RateRoll  = gx_raw / sens;
 8000642:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000646:	ee07 3a90 	vmov	s15, r3
 800064a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800064e:	ed97 7a07 	vldr	s14, [r7, #28]
 8000652:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000656:	4b68      	ldr	r3, [pc, #416]	@ (80007f8 <gyro_signal+0x1fc>)
 8000658:	edc3 7a00 	vstr	s15, [r3]
    RatePitch = gy_raw / sens;
 800065c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8000660:	ee07 3a90 	vmov	s15, r3
 8000664:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000668:	ed97 7a07 	vldr	s14, [r7, #28]
 800066c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000670:	4b62      	ldr	r3, [pc, #392]	@ (80007fc <gyro_signal+0x200>)
 8000672:	edc3 7a00 	vstr	s15, [r3]
    RateYaw   = gz_raw / sens;
 8000676:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800067a:	ee07 3a90 	vmov	s15, r3
 800067e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000682:	ed97 7a07 	vldr	s14, [r7, #28]
 8000686:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800068a:	4b5d      	ldr	r3, [pc, #372]	@ (8000800 <gyro_signal+0x204>)
 800068c:	edc3 7a00 	vstr	s15, [r3]
  }

  //doc accelerometer
  if (rd(&hi2c1, 0x3B, value, 6) == HAL_OK) {
 8000690:	1d3a      	adds	r2, r7, #4
 8000692:	2306      	movs	r3, #6
 8000694:	213b      	movs	r1, #59	@ 0x3b
 8000696:	4856      	ldr	r0, [pc, #344]	@ (80007f0 <gyro_signal+0x1f4>)
 8000698:	f7ff ff30 	bl	80004fc <rd>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	f040 80a2 	bne.w	80007e8 <gyro_signal+0x1ec>
	int16_t AccXLSB = (int16_t)((value[0] << 8) | value[1]);
 80006a4:	793b      	ldrb	r3, [r7, #4]
 80006a6:	021b      	lsls	r3, r3, #8
 80006a8:	b21a      	sxth	r2, r3
 80006aa:	797b      	ldrb	r3, [r7, #5]
 80006ac:	b21b      	sxth	r3, r3
 80006ae:	4313      	orrs	r3, r2
 80006b0:	837b      	strh	r3, [r7, #26]
	int16_t AccYLSB = (int16_t)((value[2] << 8) | value[3]);
 80006b2:	79bb      	ldrb	r3, [r7, #6]
 80006b4:	021b      	lsls	r3, r3, #8
 80006b6:	b21a      	sxth	r2, r3
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	b21b      	sxth	r3, r3
 80006bc:	4313      	orrs	r3, r2
 80006be:	833b      	strh	r3, [r7, #24]
	int16_t AccZLSB = (int16_t)((value[4] << 8) | value[5]);
 80006c0:	7a3b      	ldrb	r3, [r7, #8]
 80006c2:	021b      	lsls	r3, r3, #8
 80006c4:	b21a      	sxth	r2, r3
 80006c6:	7a7b      	ldrb	r3, [r7, #9]
 80006c8:	b21b      	sxth	r3, r3
 80006ca:	4313      	orrs	r3, r2
 80006cc:	82fb      	strh	r3, [r7, #22]


	AccX=(float)AccXLSB/4096;
 80006ce:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80006d2:	ee07 3a90 	vmov	s15, r3
 80006d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006da:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 8000804 <gyro_signal+0x208>
 80006de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006e2:	4b49      	ldr	r3, [pc, #292]	@ (8000808 <gyro_signal+0x20c>)
 80006e4:	edc3 7a00 	vstr	s15, [r3]
	AccY=(float)AccYLSB/4096;
 80006e8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80006ec:	ee07 3a90 	vmov	s15, r3
 80006f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006f4:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8000804 <gyro_signal+0x208>
 80006f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006fc:	4b43      	ldr	r3, [pc, #268]	@ (800080c <gyro_signal+0x210>)
 80006fe:	edc3 7a00 	vstr	s15, [r3]
	AccZ=(float)AccZLSB/4096;
 8000702:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000706:	ee07 3a90 	vmov	s15, r3
 800070a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800070e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8000804 <gyro_signal+0x208>
 8000712:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000716:	4b3e      	ldr	r3, [pc, #248]	@ (8000810 <gyro_signal+0x214>)
 8000718:	edc3 7a00 	vstr	s15, [r3]
	float denomR = sqrtf(AccX*AccX + AccZ*AccZ) + 1e-6f; // tranh chia cho 0
 800071c:	4b3a      	ldr	r3, [pc, #232]	@ (8000808 <gyro_signal+0x20c>)
 800071e:	ed93 7a00 	vldr	s14, [r3]
 8000722:	4b39      	ldr	r3, [pc, #228]	@ (8000808 <gyro_signal+0x20c>)
 8000724:	edd3 7a00 	vldr	s15, [r3]
 8000728:	ee27 7a27 	vmul.f32	s14, s14, s15
 800072c:	4b38      	ldr	r3, [pc, #224]	@ (8000810 <gyro_signal+0x214>)
 800072e:	edd3 6a00 	vldr	s13, [r3]
 8000732:	4b37      	ldr	r3, [pc, #220]	@ (8000810 <gyro_signal+0x214>)
 8000734:	edd3 7a00 	vldr	s15, [r3]
 8000738:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800073c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000740:	eeb0 0a67 	vmov.f32	s0, s15
 8000744:	f004 f908 	bl	8004958 <sqrtf>
 8000748:	eef0 7a40 	vmov.f32	s15, s0
 800074c:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8000814 <gyro_signal+0x218>
 8000750:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000754:	edc7 7a04 	vstr	s15, [r7, #16]
	float denomP = sqrtf(AccY*AccY + AccZ*AccZ) + 1e-6f;
 8000758:	4b2c      	ldr	r3, [pc, #176]	@ (800080c <gyro_signal+0x210>)
 800075a:	ed93 7a00 	vldr	s14, [r3]
 800075e:	4b2b      	ldr	r3, [pc, #172]	@ (800080c <gyro_signal+0x210>)
 8000760:	edd3 7a00 	vldr	s15, [r3]
 8000764:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000768:	4b29      	ldr	r3, [pc, #164]	@ (8000810 <gyro_signal+0x214>)
 800076a:	edd3 6a00 	vldr	s13, [r3]
 800076e:	4b28      	ldr	r3, [pc, #160]	@ (8000810 <gyro_signal+0x214>)
 8000770:	edd3 7a00 	vldr	s15, [r3]
 8000774:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000778:	ee77 7a27 	vadd.f32	s15, s14, s15
 800077c:	eeb0 0a67 	vmov.f32	s0, s15
 8000780:	f004 f8ea 	bl	8004958 <sqrtf>
 8000784:	eef0 7a40 	vmov.f32	s15, s0
 8000788:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8000814 <gyro_signal+0x218>
 800078c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000790:	edc7 7a03 	vstr	s15, [r7, #12]
	AngleRoll  = atanf(AccY / denomR) * RAD2DEG;
 8000794:	4b1d      	ldr	r3, [pc, #116]	@ (800080c <gyro_signal+0x210>)
 8000796:	ed93 7a00 	vldr	s14, [r3]
 800079a:	edd7 7a04 	vldr	s15, [r7, #16]
 800079e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80007a2:	eeb0 0a66 	vmov.f32	s0, s13
 80007a6:	f004 f8f5 	bl	8004994 <atanf>
 80007aa:	eef0 7a40 	vmov.f32	s15, s0
 80007ae:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8000818 <gyro_signal+0x21c>
 80007b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007b6:	4b19      	ldr	r3, [pc, #100]	@ (800081c <gyro_signal+0x220>)
 80007b8:	edc3 7a00 	vstr	s15, [r3]
	AnglePitch = -atanf(AccX / denomP) * RAD2DEG;
 80007bc:	4b12      	ldr	r3, [pc, #72]	@ (8000808 <gyro_signal+0x20c>)
 80007be:	ed93 7a00 	vldr	s14, [r3]
 80007c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80007c6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80007ca:	eeb0 0a66 	vmov.f32	s0, s13
 80007ce:	f004 f8e1 	bl	8004994 <atanf>
 80007d2:	eef0 7a40 	vmov.f32	s15, s0
 80007d6:	eef1 7a67 	vneg.f32	s15, s15
 80007da:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8000818 <gyro_signal+0x21c>
 80007de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000820 <gyro_signal+0x224>)
 80007e4:	edc3 7a00 	vstr	s15, [r3]
  }
} 
 80007e8:	bf00      	nop
 80007ea:	3728      	adds	r7, #40	@ 0x28
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	200000a4 	.word	0x200000a4
 80007f4:	42830000 	.word	0x42830000
 80007f8:	2000021c 	.word	0x2000021c
 80007fc:	20000220 	.word	0x20000220
 8000800:	20000224 	.word	0x20000224
 8000804:	45800000 	.word	0x45800000
 8000808:	20000238 	.word	0x20000238
 800080c:	2000023c 	.word	0x2000023c
 8000810:	20000240 	.word	0x20000240
 8000814:	358637bd 	.word	0x358637bd
 8000818:	42652ee1 	.word	0x42652ee1
 800081c:	20000244 	.word	0x20000244
 8000820:	20000248 	.word	0x20000248

08000824 <pid_equation>:

//pid tranh I bao hoa, tich luy qua nhieu, vuot gioi han i_limit
// tranh gia tri pid out vuot gioi han out_limit
void pid_equation(float Error, float P , float I, float D, 
                  float PrevError, float PrevIterm, float dt_s,
                  float i_limit, float out_limit) {
 8000824:	b480      	push	{r7}
 8000826:	b091      	sub	sp, #68	@ 0x44
 8000828:	af00      	add	r7, sp, #0
 800082a:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 800082e:	edc7 0a08 	vstr	s1, [r7, #32]
 8000832:	ed87 1a07 	vstr	s2, [r7, #28]
 8000836:	edc7 1a06 	vstr	s3, [r7, #24]
 800083a:	ed87 2a05 	vstr	s4, [r7, #20]
 800083e:	edc7 2a04 	vstr	s5, [r7, #16]
 8000842:	ed87 3a03 	vstr	s6, [r7, #12]
 8000846:	edc7 3a02 	vstr	s7, [r7, #8]
 800084a:	ed87 4a01 	vstr	s8, [r7, #4]
  float Pterm = P * Error;
 800084e:	ed97 7a08 	vldr	s14, [r7, #32]
 8000852:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800085a:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

  // D dùng dt có chặn đáy
  float deriv_dt = (dt_s > 0.0005f) ? dt_s : 0.0005f; //tranh dt qua nho ~ 0 thi chia bi loi
 800085e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000862:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 8000a10 <pid_equation+0x1ec>
 8000866:	eef4 7ac7 	vcmpe.f32	s15, s14
 800086a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800086e:	dd01      	ble.n	8000874 <pid_equation+0x50>
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	e000      	b.n	8000876 <pid_equation+0x52>
 8000874:	4b67      	ldr	r3, [pc, #412]	@ (8000a14 <pid_equation+0x1f0>)
 8000876:	633b      	str	r3, [r7, #48]	@ 0x30
  float Dterm = D * (Error - PrevError) / deriv_dt;
 8000878:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800087c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000880:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000884:	edd7 7a06 	vldr	s15, [r7, #24]
 8000888:	ee67 6a27 	vmul.f32	s13, s14, s15
 800088c:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8000890:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000894:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

  // Tính output tạm thời (chưa tích I) để xét bão hòa
  float pre = Pterm + PrevIterm + Dterm;
 8000898:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800089c:	edd7 7a04 	vldr	s15, [r7, #16]
 80008a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008a4:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80008a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008ac:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

  float Iterm = PrevIterm;
 80008b0:	693b      	ldr	r3, [r7, #16]
 80008b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  // Nếu đang bão hòa và lỗi cùng chiều → không tích I (anti-windup)
  if (!((pre >=  out_limit && Error >  0) ||
 80008b4:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80008b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80008bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80008c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008c4:	bfac      	ite	ge
 80008c6:	2301      	movge	r3, #1
 80008c8:	2300      	movlt	r3, #0
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	f083 0301 	eor.w	r3, r3, #1
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d10e      	bne.n	80008f4 <pid_equation+0xd0>
 80008d6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80008da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80008de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008e2:	bfcc      	ite	gt
 80008e4:	2301      	movgt	r3, #1
 80008e6:	2300      	movle	r3, #0
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	f083 0301 	eor.w	r3, r3, #1
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d055      	beq.n	80009a0 <pid_equation+0x17c>
        (pre <= -out_limit && Error <  0))) {
 80008f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80008f8:	eef1 7a67 	vneg.f32	s15, s15
 80008fc:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8000900:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000908:	bf94      	ite	ls
 800090a:	2301      	movls	r3, #1
 800090c:	2300      	movhi	r3, #0
 800090e:	b2db      	uxtb	r3, r3
 8000910:	f083 0301 	eor.w	r3, r3, #1
 8000914:	b2db      	uxtb	r3, r3
  if (!((pre >=  out_limit && Error >  0) ||
 8000916:	2b00      	cmp	r3, #0
 8000918:	d10e      	bne.n	8000938 <pid_equation+0x114>
        (pre <= -out_limit && Error <  0))) {
 800091a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800091e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000926:	bf4c      	ite	mi
 8000928:	2301      	movmi	r3, #1
 800092a:	2300      	movpl	r3, #0
 800092c:	b2db      	uxtb	r3, r3
 800092e:	f083 0301 	eor.w	r3, r3, #1
 8000932:	b2db      	uxtb	r3, r3
 8000934:	2b00      	cmp	r3, #0
 8000936:	d033      	beq.n	80009a0 <pid_equation+0x17c>
    Iterm = PrevIterm + I * (Error + PrevError) * (dt_s * 0.5f); // dien tich hinh thang = (f(k-1) + f(k))*dt/2
 8000938:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800093c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000940:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000944:	edd7 7a07 	vldr	s15, [r7, #28]
 8000948:	ee27 7a27 	vmul.f32	s14, s14, s15
 800094c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000950:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8000954:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000958:	ee67 7a27 	vmul.f32	s15, s14, s15
 800095c:	ed97 7a04 	vldr	s14, [r7, #16]
 8000960:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000964:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    if (Iterm >  i_limit) Iterm =  i_limit;
 8000968:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800096c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000970:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000978:	dd01      	ble.n	800097e <pid_equation+0x15a>
 800097a:	68bb      	ldr	r3, [r7, #8]
 800097c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (Iterm < -i_limit) Iterm = -i_limit;
 800097e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000982:	eef1 7a67 	vneg.f32	s15, s15
 8000986:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800098a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800098e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000992:	d505      	bpl.n	80009a0 <pid_equation+0x17c>
 8000994:	edd7 7a02 	vldr	s15, [r7, #8]
 8000998:	eef1 7a67 	vneg.f32	s15, s15
 800099c:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
  }

  float out = Pterm + Iterm + Dterm; //gia tri pid
 80009a0:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80009a4:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80009a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009ac:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80009b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009b4:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
  if (out >  out_limit) out =  out_limit;
 80009b8:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80009bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80009c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80009c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009c8:	dd01      	ble.n	80009ce <pid_equation+0x1aa>
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (out < -out_limit) out = -out_limit;
 80009ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80009d2:	eef1 7a67 	vneg.f32	s15, s15
 80009d6:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80009da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80009de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009e2:	d505      	bpl.n	80009f0 <pid_equation+0x1cc>
 80009e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80009e8:	eef1 7a67 	vneg.f32	s15, s15
 80009ec:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

  PIDReturn[0] = out;
 80009f0:	4a09      	ldr	r2, [pc, #36]	@ (8000a18 <pid_equation+0x1f4>)
 80009f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80009f4:	6013      	str	r3, [r2, #0]
  PIDReturn[1] = Error;
 80009f6:	4a08      	ldr	r2, [pc, #32]	@ (8000a18 <pid_equation+0x1f4>)
 80009f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009fa:	6053      	str	r3, [r2, #4]
  PIDReturn[2] = Iterm;
 80009fc:	4a06      	ldr	r2, [pc, #24]	@ (8000a18 <pid_equation+0x1f4>)
 80009fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000a00:	6093      	str	r3, [r2, #8]
}
 8000a02:	bf00      	nop
 8000a04:	3744      	adds	r7, #68	@ 0x44
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	3a03126f 	.word	0x3a03126f
 8000a14:	3a03126f 	.word	0x3a03126f
 8000a18:	2000025c 	.word	0x2000025c

08000a1c <reset_pid>:

void reset_pid(void) {
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
	PrevErrorRateRoll=0; PrevErrorRatePitch=0;	PrevErrorRateYaw=0;
 8000a20:	4b16      	ldr	r3, [pc, #88]	@ (8000a7c <reset_pid+0x60>)
 8000a22:	f04f 0200 	mov.w	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	4b15      	ldr	r3, [pc, #84]	@ (8000a80 <reset_pid+0x64>)
 8000a2a:	f04f 0200 	mov.w	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	4b14      	ldr	r3, [pc, #80]	@ (8000a84 <reset_pid+0x68>)
 8000a32:	f04f 0200 	mov.w	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
	PrevItermRateRoll=0; PrevItermRatePitch=0;	PrevItermRateYaw=0;
 8000a38:	4b13      	ldr	r3, [pc, #76]	@ (8000a88 <reset_pid+0x6c>)
 8000a3a:	f04f 0200 	mov.w	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	4b12      	ldr	r3, [pc, #72]	@ (8000a8c <reset_pid+0x70>)
 8000a42:	f04f 0200 	mov.w	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	4b11      	ldr	r3, [pc, #68]	@ (8000a90 <reset_pid+0x74>)
 8000a4a:	f04f 0200 	mov.w	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
	PrevErrorAngleRoll=0; PrevErrorAnglePitch=0;
 8000a50:	4b10      	ldr	r3, [pc, #64]	@ (8000a94 <reset_pid+0x78>)
 8000a52:	f04f 0200 	mov.w	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	4b0f      	ldr	r3, [pc, #60]	@ (8000a98 <reset_pid+0x7c>)
 8000a5a:	f04f 0200 	mov.w	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
	PrevItermAngleRoll=0; PrevItermAnglePitch=0;
 8000a60:	4b0e      	ldr	r3, [pc, #56]	@ (8000a9c <reset_pid+0x80>)
 8000a62:	f04f 0200 	mov.w	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	4b0d      	ldr	r3, [pc, #52]	@ (8000aa0 <reset_pid+0x84>)
 8000a6a:	f04f 0200 	mov.w	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	2000028c 	.word	0x2000028c
 8000a80:	20000290 	.word	0x20000290
 8000a84:	20000294 	.word	0x20000294
 8000a88:	20000298 	.word	0x20000298
 8000a8c:	2000029c 	.word	0x2000029c
 8000a90:	200002a0 	.word	0x200002a0
 8000a94:	200002cc 	.word	0x200002cc
 8000a98:	200002d0 	.word	0x200002d0
 8000a9c:	200002d4 	.word	0x200002d4
 8000aa0:	200002d8 	.word	0x200002d8

08000aa4 <us_saturate>:

//gioi han gia tri power (us) gui ve esc
static inline uint16_t us_saturate(int v) {
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  if (v < 1000) v = 1000;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000ab2:	da02      	bge.n	8000aba <us_saturate+0x16>
 8000ab4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ab8:	607b      	str	r3, [r7, #4]
  if (v > 2000) v = 2000;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000ac0:	dd02      	ble.n	8000ac8 <us_saturate+0x24>
 8000ac2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000ac6:	607b      	str	r3, [r7, #4]
  return (uint16_t)v;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	b29b      	uxth	r3, r3
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <set_motor_us>:

// gui power den dong co, thuong di chung voi us_saturate
static inline void set_motor_us(TIM_HandleTypeDef* htim, uint32_t ch, uint16_t us) {
 8000ad8:	b480      	push	{r7}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	60f8      	str	r0, [r7, #12]
 8000ae0:	60b9      	str	r1, [r7, #8]
 8000ae2:	4613      	mov	r3, r2
 8000ae4:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COMPARE(htim, ch, us); // 1 tick = 1 us
 8000ae6:	68bb      	ldr	r3, [r7, #8]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d104      	bne.n	8000af6 <set_motor_us+0x1e>
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	88fa      	ldrh	r2, [r7, #6]
 8000af2:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000af4:	e013      	b.n	8000b1e <set_motor_us+0x46>
  __HAL_TIM_SET_COMPARE(htim, ch, us); // 1 tick = 1 us
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	2b04      	cmp	r3, #4
 8000afa:	d104      	bne.n	8000b06 <set_motor_us+0x2e>
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	88fb      	ldrh	r3, [r7, #6]
 8000b02:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000b04:	e00b      	b.n	8000b1e <set_motor_us+0x46>
  __HAL_TIM_SET_COMPARE(htim, ch, us); // 1 tick = 1 us
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	2b08      	cmp	r3, #8
 8000b0a:	d104      	bne.n	8000b16 <set_motor_us+0x3e>
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	88fb      	ldrh	r3, [r7, #6]
 8000b12:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000b14:	e003      	b.n	8000b1e <set_motor_us+0x46>
  __HAL_TIM_SET_COMPARE(htim, ch, us); // 1 tick = 1 us
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	88fb      	ldrh	r3, [r7, #6]
 8000b1c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000b1e:	bf00      	nop
 8000b20:	3714      	adds	r7, #20
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
	...

08000b2c <us_to_percent>:

//De hien thi Monitor
static inline float us_to_percent(uint16_t us) {
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	80fb      	strh	r3, [r7, #6]
  if (us <= 1000) return 0.0f;
 8000b36:	88fb      	ldrh	r3, [r7, #6]
 8000b38:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000b3c:	d802      	bhi.n	8000b44 <us_to_percent+0x18>
 8000b3e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8000b78 <us_to_percent+0x4c>
 8000b42:	e011      	b.n	8000b68 <us_to_percent+0x3c>
  if (us >= 2000) return 100.0f;
 8000b44:	88fb      	ldrh	r3, [r7, #6]
 8000b46:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000b4a:	d302      	bcc.n	8000b52 <us_to_percent+0x26>
 8000b4c:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8000b7c <us_to_percent+0x50>
 8000b50:	e00a      	b.n	8000b68 <us_to_percent+0x3c>
  return (us - 1000) * 0.1f; // (us-1000)/1000*100
 8000b52:	88fb      	ldrh	r3, [r7, #6]
 8000b54:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8000b58:	ee07 3a90 	vmov	s15, r3
 8000b5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b60:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8000b80 <us_to_percent+0x54>
 8000b64:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000b68:	eeb0 0a67 	vmov.f32	s0, s15
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	00000000 	.word	0x00000000
 8000b7c:	42c80000 	.word	0x42c80000
 8000b80:	3dcccccd 	.word	0x3dcccccd

08000b84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b8a:	f001 f80b 	bl	8001ba4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b8e:	f000 fc41 	bl	8001414 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b92:	f000 fdcf 	bl	8001734 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000b96:	f000 fca5 	bl	80014e4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000b9a:	f000 fd4d 	bl	8001638 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000b9e:	f000 fccf 	bl	8001540 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000ba2:	f000 fd73 	bl	800168c <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000ba6:	f000 fd9b 	bl	80016e0 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000baa:	2100      	movs	r1, #0
 8000bac:	4823      	ldr	r0, [pc, #140]	@ (8000c3c <main+0xb8>)
 8000bae:	f002 ffc5 	bl	8003b3c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000bb2:	2104      	movs	r1, #4
 8000bb4:	4821      	ldr	r0, [pc, #132]	@ (8000c3c <main+0xb8>)
 8000bb6:	f002 ffc1 	bl	8003b3c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000bba:	2108      	movs	r1, #8
 8000bbc:	481f      	ldr	r0, [pc, #124]	@ (8000c3c <main+0xb8>)
 8000bbe:	f002 ffbd 	bl	8003b3c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000bc2:	210c      	movs	r1, #12
 8000bc4:	481d      	ldr	r0, [pc, #116]	@ (8000c3c <main+0xb8>)
 8000bc6:	f002 ffb9 	bl	8003b3c <HAL_TIM_PWM_Start>
  set_motor_us(&htim3,TIM_CHANNEL_1,1000);
 8000bca:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000bce:	2100      	movs	r1, #0
 8000bd0:	481a      	ldr	r0, [pc, #104]	@ (8000c3c <main+0xb8>)
 8000bd2:	f7ff ff81 	bl	8000ad8 <set_motor_us>
  set_motor_us(&htim3,TIM_CHANNEL_2,1000);
 8000bd6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000bda:	2104      	movs	r1, #4
 8000bdc:	4817      	ldr	r0, [pc, #92]	@ (8000c3c <main+0xb8>)
 8000bde:	f7ff ff7b 	bl	8000ad8 <set_motor_us>
  set_motor_us(&htim3,TIM_CHANNEL_3,1000);
 8000be2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000be6:	2108      	movs	r1, #8
 8000be8:	4814      	ldr	r0, [pc, #80]	@ (8000c3c <main+0xb8>)
 8000bea:	f7ff ff75 	bl	8000ad8 <set_motor_us>
  set_motor_us(&htim3,TIM_CHANNEL_4,1000);
 8000bee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000bf2:	210c      	movs	r1, #12
 8000bf4:	4811      	ldr	r0, [pc, #68]	@ (8000c3c <main+0xb8>)
 8000bf6:	f7ff ff6f 	bl	8000ad8 <set_motor_us>
  HAL_Delay(250);
 8000bfa:	20fa      	movs	r0, #250	@ 0xfa
 8000bfc:	f001 f844 	bl	8001c88 <HAL_Delay>
  (void)wr8(&hi2c1, 0x6B, 0x00);  // wake mpu 
 8000c00:	2200      	movs	r2, #0
 8000c02:	216b      	movs	r1, #107	@ 0x6b
 8000c04:	480e      	ldr	r0, [pc, #56]	@ (8000c40 <main+0xbc>)
 8000c06:	f7ff fc5f 	bl	80004c8 <wr8>
  (void)wr8(&hi2c1, 0x1A,0x03); // cho thanh ghi 0x1A = 0x03 => low pass filter ~44hz
 8000c0a:	2203      	movs	r2, #3
 8000c0c:	211a      	movs	r1, #26
 8000c0e:	480c      	ldr	r0, [pc, #48]	@ (8000c40 <main+0xbc>)
 8000c10:	f7ff fc5a 	bl	80004c8 <wr8>
  (void)wr8(&hi2c1, 0x1B,0x08); // config sensing scale factor la *65.5*/ do/s
 8000c14:	2208      	movs	r2, #8
 8000c16:	211b      	movs	r1, #27
 8000c18:	4809      	ldr	r0, [pc, #36]	@ (8000c40 <main+0xbc>)
 8000c1a:	f7ff fc55 	bl	80004c8 <wr8>
  //sample rate cua cam bien binh thuong la 8khz, neu bat lowpassfilter thi doc la 1000hz
  (void)wr8(&hi2c1, 0x19, 0x03); // Set Sample Rate cua cam bien 250hz
 8000c1e:	2203      	movs	r2, #3
 8000c20:	2119      	movs	r1, #25
 8000c22:	4807      	ldr	r0, [pc, #28]	@ (8000c40 <main+0xbc>)
 8000c24:	f7ff fc50 	bl	80004c8 <wr8>
  (void)wr8(&hi2c1, 0x1C, 0x10); // set full scale range cua accelerometer la +-8g
 8000c28:	2210      	movs	r2, #16
 8000c2a:	211c      	movs	r1, #28
 8000c2c:	4804      	ldr	r0, [pc, #16]	@ (8000c40 <main+0xbc>)
 8000c2e:	f7ff fc4b 	bl	80004c8 <wr8>
  
  //calibrate gyro && accelerometer
  // doc 2000 lan, tinh trung binh roi tru di gia tri trung binh do
  for (RateCalibrationNumber = 0;
 8000c32:	4b04      	ldr	r3, [pc, #16]	@ (8000c44 <main+0xc0>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	e047      	b.n	8000cca <main+0x146>
 8000c3a:	bf00      	nop
 8000c3c:	200000f8 	.word	0x200000f8
 8000c40:	200000a4 	.word	0x200000a4
 8000c44:	20000234 	.word	0x20000234
	  RateCalibrationNumber < 2000;
	  RateCalibrationNumber++)
  {
	  gyro_signal();
 8000c48:	f7ff fcd8 	bl	80005fc <gyro_signal>
	  RateCalibrationPitch += RatePitch;
 8000c4c:	4bc0      	ldr	r3, [pc, #768]	@ (8000f50 <main+0x3cc>)
 8000c4e:	ed93 7a00 	vldr	s14, [r3]
 8000c52:	4bc0      	ldr	r3, [pc, #768]	@ (8000f54 <main+0x3d0>)
 8000c54:	edd3 7a00 	vldr	s15, [r3]
 8000c58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c5c:	4bbc      	ldr	r3, [pc, #752]	@ (8000f50 <main+0x3cc>)
 8000c5e:	edc3 7a00 	vstr	s15, [r3]
	  RateCalibrationRoll += RateRoll;
 8000c62:	4bbd      	ldr	r3, [pc, #756]	@ (8000f58 <main+0x3d4>)
 8000c64:	ed93 7a00 	vldr	s14, [r3]
 8000c68:	4bbc      	ldr	r3, [pc, #752]	@ (8000f5c <main+0x3d8>)
 8000c6a:	edd3 7a00 	vldr	s15, [r3]
 8000c6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c72:	4bb9      	ldr	r3, [pc, #740]	@ (8000f58 <main+0x3d4>)
 8000c74:	edc3 7a00 	vstr	s15, [r3]
	  RateCalibrationYaw += RateYaw;
 8000c78:	4bb9      	ldr	r3, [pc, #740]	@ (8000f60 <main+0x3dc>)
 8000c7a:	ed93 7a00 	vldr	s14, [r3]
 8000c7e:	4bb9      	ldr	r3, [pc, #740]	@ (8000f64 <main+0x3e0>)
 8000c80:	edd3 7a00 	vldr	s15, [r3]
 8000c84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c88:	4bb5      	ldr	r3, [pc, #724]	@ (8000f60 <main+0x3dc>)
 8000c8a:	edc3 7a00 	vstr	s15, [r3]

	  AngleCalibrationPitch += AnglePitch;
 8000c8e:	4bb6      	ldr	r3, [pc, #728]	@ (8000f68 <main+0x3e4>)
 8000c90:	ed93 7a00 	vldr	s14, [r3]
 8000c94:	4bb5      	ldr	r3, [pc, #724]	@ (8000f6c <main+0x3e8>)
 8000c96:	edd3 7a00 	vldr	s15, [r3]
 8000c9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c9e:	4bb2      	ldr	r3, [pc, #712]	@ (8000f68 <main+0x3e4>)
 8000ca0:	edc3 7a00 	vstr	s15, [r3]
	  AngleCalibrationRoll += AngleRoll;
 8000ca4:	4bb2      	ldr	r3, [pc, #712]	@ (8000f70 <main+0x3ec>)
 8000ca6:	ed93 7a00 	vldr	s14, [r3]
 8000caa:	4bb2      	ldr	r3, [pc, #712]	@ (8000f74 <main+0x3f0>)
 8000cac:	edd3 7a00 	vldr	s15, [r3]
 8000cb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cb4:	4bae      	ldr	r3, [pc, #696]	@ (8000f70 <main+0x3ec>)
 8000cb6:	edc3 7a00 	vstr	s15, [r3]
	  HAL_Delay(1);
 8000cba:	2001      	movs	r0, #1
 8000cbc:	f000 ffe4 	bl	8001c88 <HAL_Delay>
	  RateCalibrationNumber++)
 8000cc0:	4bad      	ldr	r3, [pc, #692]	@ (8000f78 <main+0x3f4>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	4aac      	ldr	r2, [pc, #688]	@ (8000f78 <main+0x3f4>)
 8000cc8:	6013      	str	r3, [r2, #0]
	  RateCalibrationNumber < 2000;
 8000cca:	4bab      	ldr	r3, [pc, #684]	@ (8000f78 <main+0x3f4>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000cd2:	dbb9      	blt.n	8000c48 <main+0xc4>
  }
  //gia tri calib
	RateCalibrationPitch/=2000;
 8000cd4:	4b9e      	ldr	r3, [pc, #632]	@ (8000f50 <main+0x3cc>)
 8000cd6:	ed93 7a00 	vldr	s14, [r3]
 8000cda:	eddf 6aa8 	vldr	s13, [pc, #672]	@ 8000f7c <main+0x3f8>
 8000cde:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ce2:	4b9b      	ldr	r3, [pc, #620]	@ (8000f50 <main+0x3cc>)
 8000ce4:	edc3 7a00 	vstr	s15, [r3]
	RateCalibrationRoll/=2000;
 8000ce8:	4b9b      	ldr	r3, [pc, #620]	@ (8000f58 <main+0x3d4>)
 8000cea:	ed93 7a00 	vldr	s14, [r3]
 8000cee:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 8000f7c <main+0x3f8>
 8000cf2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000cf6:	4b98      	ldr	r3, [pc, #608]	@ (8000f58 <main+0x3d4>)
 8000cf8:	edc3 7a00 	vstr	s15, [r3]
	RateCalibrationYaw/=2000;
 8000cfc:	4b98      	ldr	r3, [pc, #608]	@ (8000f60 <main+0x3dc>)
 8000cfe:	ed93 7a00 	vldr	s14, [r3]
 8000d02:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 8000f7c <main+0x3f8>
 8000d06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d0a:	4b95      	ldr	r3, [pc, #596]	@ (8000f60 <main+0x3dc>)
 8000d0c:	edc3 7a00 	vstr	s15, [r3]
	AngleCalibrationPitch /= 2000;
 8000d10:	4b95      	ldr	r3, [pc, #596]	@ (8000f68 <main+0x3e4>)
 8000d12:	ed93 7a00 	vldr	s14, [r3]
 8000d16:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8000f7c <main+0x3f8>
 8000d1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d1e:	4b92      	ldr	r3, [pc, #584]	@ (8000f68 <main+0x3e4>)
 8000d20:	edc3 7a00 	vstr	s15, [r3]
	AngleCalibrationRoll /= 2000;
 8000d24:	4b92      	ldr	r3, [pc, #584]	@ (8000f70 <main+0x3ec>)
 8000d26:	ed93 7a00 	vldr	s14, [r3]
 8000d2a:	eddf 6a94 	vldr	s13, [pc, #592]	@ 8000f7c <main+0x3f8>
 8000d2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d32:	4b8f      	ldr	r3, [pc, #572]	@ (8000f70 <main+0x3ec>)
 8000d34:	edc3 7a00 	vstr	s15, [r3]

  reset_pid();
 8000d38:	f7ff fe70 	bl	8000a1c <reset_pid>
	LoopTimer = HAL_GetTick();
 8000d3c:	f000 ff98 	bl	8001c70 <HAL_GetTick>
 8000d40:	4603      	mov	r3, r0
 8000d42:	4a8f      	ldr	r2, [pc, #572]	@ (8000f80 <main+0x3fc>)
 8000d44:	6013      	str	r3, [r2, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // Timing gate at ~250 Hz
    while ((HAL_GetTick() - LoopTimer) < 4) {}
 8000d46:	bf00      	nop
 8000d48:	f000 ff92 	bl	8001c70 <HAL_GetTick>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	4b8c      	ldr	r3, [pc, #560]	@ (8000f80 <main+0x3fc>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	1ad3      	subs	r3, r2, r3
 8000d54:	2b03      	cmp	r3, #3
 8000d56:	d9f7      	bls.n	8000d48 <main+0x1c4>
    uint32_t now = HAL_GetTick();
 8000d58:	f000 ff8a 	bl	8001c70 <HAL_GetTick>
 8000d5c:	60f8      	str	r0, [r7, #12]
    dt = (now - LoopTimer) * 0.001f; // second -> miliseconds
 8000d5e:	4b88      	ldr	r3, [pc, #544]	@ (8000f80 <main+0x3fc>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	68fa      	ldr	r2, [r7, #12]
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	ee07 3a90 	vmov	s15, r3
 8000d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d6e:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 8000f84 <main+0x400>
 8000d72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d76:	4b84      	ldr	r3, [pc, #528]	@ (8000f88 <main+0x404>)
 8000d78:	edc3 7a00 	vstr	s15, [r3]
    if (dt < 0.001f) dt = 0.001f;    // clamp to avoid div-by-zero/noise
 8000d7c:	4b82      	ldr	r3, [pc, #520]	@ (8000f88 <main+0x404>)
 8000d7e:	edd3 7a00 	vldr	s15, [r3]
 8000d82:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8000f84 <main+0x400>
 8000d86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d8e:	d502      	bpl.n	8000d96 <main+0x212>
 8000d90:	4b7d      	ldr	r3, [pc, #500]	@ (8000f88 <main+0x404>)
 8000d92:	4a7e      	ldr	r2, [pc, #504]	@ (8000f8c <main+0x408>)
 8000d94:	601a      	str	r2, [r3, #0]
    if (dt > 0.02f)  dt = 0.02f;
 8000d96:	4b7c      	ldr	r3, [pc, #496]	@ (8000f88 <main+0x404>)
 8000d98:	edd3 7a00 	vldr	s15, [r3]
 8000d9c:	ed9f 7a7c 	vldr	s14, [pc, #496]	@ 8000f90 <main+0x40c>
 8000da0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000da8:	dd02      	ble.n	8000db0 <main+0x22c>
 8000daa:	4b77      	ldr	r3, [pc, #476]	@ (8000f88 <main+0x404>)
 8000dac:	4a79      	ldr	r2, [pc, #484]	@ (8000f94 <main+0x410>)
 8000dae:	601a      	str	r2, [r3, #0]
    LoopTimer = now;
 8000db0:	4a73      	ldr	r2, [pc, #460]	@ (8000f80 <main+0x3fc>)
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	6013      	str	r3, [r2, #0]

    gyro_signal();
 8000db6:	f7ff fc21 	bl	80005fc <gyro_signal>
    //calib gyro && accelerometer
    RatePitch -= RateCalibrationPitch;
 8000dba:	4b66      	ldr	r3, [pc, #408]	@ (8000f54 <main+0x3d0>)
 8000dbc:	ed93 7a00 	vldr	s14, [r3]
 8000dc0:	4b63      	ldr	r3, [pc, #396]	@ (8000f50 <main+0x3cc>)
 8000dc2:	edd3 7a00 	vldr	s15, [r3]
 8000dc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dca:	4b62      	ldr	r3, [pc, #392]	@ (8000f54 <main+0x3d0>)
 8000dcc:	edc3 7a00 	vstr	s15, [r3]
    RateRoll -= RateCalibrationRoll;
 8000dd0:	4b62      	ldr	r3, [pc, #392]	@ (8000f5c <main+0x3d8>)
 8000dd2:	ed93 7a00 	vldr	s14, [r3]
 8000dd6:	4b60      	ldr	r3, [pc, #384]	@ (8000f58 <main+0x3d4>)
 8000dd8:	edd3 7a00 	vldr	s15, [r3]
 8000ddc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000de0:	4b5e      	ldr	r3, [pc, #376]	@ (8000f5c <main+0x3d8>)
 8000de2:	edc3 7a00 	vstr	s15, [r3]
    RateYaw -= RateCalibrationYaw;
 8000de6:	4b5f      	ldr	r3, [pc, #380]	@ (8000f64 <main+0x3e0>)
 8000de8:	ed93 7a00 	vldr	s14, [r3]
 8000dec:	4b5c      	ldr	r3, [pc, #368]	@ (8000f60 <main+0x3dc>)
 8000dee:	edd3 7a00 	vldr	s15, [r3]
 8000df2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000df6:	4b5b      	ldr	r3, [pc, #364]	@ (8000f64 <main+0x3e0>)
 8000df8:	edc3 7a00 	vstr	s15, [r3]
    AnglePitch -= AngleCalibrationPitch;
 8000dfc:	4b5b      	ldr	r3, [pc, #364]	@ (8000f6c <main+0x3e8>)
 8000dfe:	ed93 7a00 	vldr	s14, [r3]
 8000e02:	4b59      	ldr	r3, [pc, #356]	@ (8000f68 <main+0x3e4>)
 8000e04:	edd3 7a00 	vldr	s15, [r3]
 8000e08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e0c:	4b57      	ldr	r3, [pc, #348]	@ (8000f6c <main+0x3e8>)
 8000e0e:	edc3 7a00 	vstr	s15, [r3]
	  AngleRoll -= AngleCalibrationRoll;
 8000e12:	4b58      	ldr	r3, [pc, #352]	@ (8000f74 <main+0x3f0>)
 8000e14:	ed93 7a00 	vldr	s14, [r3]
 8000e18:	4b55      	ldr	r3, [pc, #340]	@ (8000f70 <main+0x3ec>)
 8000e1a:	edd3 7a00 	vldr	s15, [r3]
 8000e1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e22:	4b54      	ldr	r3, [pc, #336]	@ (8000f74 <main+0x3f0>)
 8000e24:	edc3 7a00 	vstr	s15, [r3]

    kalman_1d(&KalmanAngleRoll,  &KalmanUncertaintyAngleRoll,  RateRoll,  AngleRoll,  dt);
 8000e28:	4b4c      	ldr	r3, [pc, #304]	@ (8000f5c <main+0x3d8>)
 8000e2a:	edd3 7a00 	vldr	s15, [r3]
 8000e2e:	4b51      	ldr	r3, [pc, #324]	@ (8000f74 <main+0x3f0>)
 8000e30:	ed93 7a00 	vldr	s14, [r3]
 8000e34:	4b54      	ldr	r3, [pc, #336]	@ (8000f88 <main+0x404>)
 8000e36:	edd3 6a00 	vldr	s13, [r3]
 8000e3a:	eeb0 1a66 	vmov.f32	s2, s13
 8000e3e:	eef0 0a47 	vmov.f32	s1, s14
 8000e42:	eeb0 0a67 	vmov.f32	s0, s15
 8000e46:	4954      	ldr	r1, [pc, #336]	@ (8000f98 <main+0x414>)
 8000e48:	4854      	ldr	r0, [pc, #336]	@ (8000f9c <main+0x418>)
 8000e4a:	f7ff fb73 	bl	8000534 <kalman_1d>
    kalman_1d(&KalmanAnglePitch, &KalmanUncertaintyAnglePitch, RatePitch, AnglePitch, dt);
 8000e4e:	4b41      	ldr	r3, [pc, #260]	@ (8000f54 <main+0x3d0>)
 8000e50:	edd3 7a00 	vldr	s15, [r3]
 8000e54:	4b45      	ldr	r3, [pc, #276]	@ (8000f6c <main+0x3e8>)
 8000e56:	ed93 7a00 	vldr	s14, [r3]
 8000e5a:	4b4b      	ldr	r3, [pc, #300]	@ (8000f88 <main+0x404>)
 8000e5c:	edd3 6a00 	vldr	s13, [r3]
 8000e60:	eeb0 1a66 	vmov.f32	s2, s13
 8000e64:	eef0 0a47 	vmov.f32	s1, s14
 8000e68:	eeb0 0a67 	vmov.f32	s0, s15
 8000e6c:	494c      	ldr	r1, [pc, #304]	@ (8000fa0 <main+0x41c>)
 8000e6e:	484d      	ldr	r0, [pc, #308]	@ (8000fa4 <main+0x420>)
 8000e70:	f7ff fb60 	bl	8000534 <kalman_1d>
    // DesiredRateYaw=0.15*(ReceiverValue[3]-1500);
    // InputThrottle=ReceiverValue[2];
    // DesiredRateYaw=0.15*(ReceiverValue[3]-1500);

    //hardcode test 
    DesiredAngleRoll  = 0.0f;
 8000e74:	4b4c      	ldr	r3, [pc, #304]	@ (8000fa8 <main+0x424>)
 8000e76:	f04f 0200 	mov.w	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
    DesiredAnglePitch = 0.0f;
 8000e7c:	4b4b      	ldr	r3, [pc, #300]	@ (8000fac <main+0x428>)
 8000e7e:	f04f 0200 	mov.w	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
    DesiredRateYaw    = 0.0f;
 8000e84:	4b4a      	ldr	r3, [pc, #296]	@ (8000fb0 <main+0x42c>)
 8000e86:	f04f 0200 	mov.w	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]

    //PID outer Loop
    ErrorAngleRoll = DesiredAngleRoll - KalmanAngleRoll;
 8000e8c:	4b46      	ldr	r3, [pc, #280]	@ (8000fa8 <main+0x424>)
 8000e8e:	ed93 7a00 	vldr	s14, [r3]
 8000e92:	4b42      	ldr	r3, [pc, #264]	@ (8000f9c <main+0x418>)
 8000e94:	edd3 7a00 	vldr	s15, [r3]
 8000e98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e9c:	4b45      	ldr	r3, [pc, #276]	@ (8000fb4 <main+0x430>)
 8000e9e:	edc3 7a00 	vstr	s15, [r3]
    ErrorAnglePitch = DesiredAnglePitch - KalmanAnglePitch;
 8000ea2:	4b42      	ldr	r3, [pc, #264]	@ (8000fac <main+0x428>)
 8000ea4:	ed93 7a00 	vldr	s14, [r3]
 8000ea8:	4b3e      	ldr	r3, [pc, #248]	@ (8000fa4 <main+0x420>)
 8000eaa:	edd3 7a00 	vldr	s15, [r3]
 8000eae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000eb2:	4b41      	ldr	r3, [pc, #260]	@ (8000fb8 <main+0x434>)
 8000eb4:	edc3 7a00 	vstr	s15, [r3]

    pid_equation(ErrorAngleRoll, PAngleRoll, IAngleRoll, DAngleRoll,
 8000eb8:	4b3e      	ldr	r3, [pc, #248]	@ (8000fb4 <main+0x430>)
 8000eba:	edd3 7a00 	vldr	s15, [r3]
 8000ebe:	4b3f      	ldr	r3, [pc, #252]	@ (8000fbc <main+0x438>)
 8000ec0:	ed93 7a00 	vldr	s14, [r3]
 8000ec4:	4b3e      	ldr	r3, [pc, #248]	@ (8000fc0 <main+0x43c>)
 8000ec6:	edd3 6a00 	vldr	s13, [r3]
 8000eca:	4b3e      	ldr	r3, [pc, #248]	@ (8000fc4 <main+0x440>)
 8000ecc:	ed93 6a00 	vldr	s12, [r3]
 8000ed0:	4b3d      	ldr	r3, [pc, #244]	@ (8000fc8 <main+0x444>)
 8000ed2:	edd3 5a00 	vldr	s11, [r3]
 8000ed6:	4b3d      	ldr	r3, [pc, #244]	@ (8000fcc <main+0x448>)
 8000ed8:	ed93 5a00 	vldr	s10, [r3]
 8000edc:	4b2a      	ldr	r3, [pc, #168]	@ (8000f88 <main+0x404>)
 8000ede:	edd3 4a00 	vldr	s9, [r3]
 8000ee2:	ed9f 4a42 	vldr	s8, [pc, #264]	@ 8000fec <main+0x468>
 8000ee6:	eddf 3a42 	vldr	s7, [pc, #264]	@ 8000ff0 <main+0x46c>
 8000eea:	eeb0 3a64 	vmov.f32	s6, s9
 8000eee:	eef0 2a45 	vmov.f32	s5, s10
 8000ef2:	eeb0 2a65 	vmov.f32	s4, s11
 8000ef6:	eef0 1a46 	vmov.f32	s3, s12
 8000efa:	eeb0 1a66 	vmov.f32	s2, s13
 8000efe:	eef0 0a47 	vmov.f32	s1, s14
 8000f02:	eeb0 0a67 	vmov.f32	s0, s15
 8000f06:	f7ff fc8d 	bl	8000824 <pid_equation>
                 PrevErrorAngleRoll, PrevItermAngleRoll, dt,
                 ANGLE_I_LIMIT, ANGLE_RATE_LIMIT); 
    DesiredRateRoll = PIDReturn[0];
 8000f0a:	4b31      	ldr	r3, [pc, #196]	@ (8000fd0 <main+0x44c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a31      	ldr	r2, [pc, #196]	@ (8000fd4 <main+0x450>)
 8000f10:	6013      	str	r3, [r2, #0]
    PrevErrorAngleRoll = PIDReturn[1];
 8000f12:	4b2f      	ldr	r3, [pc, #188]	@ (8000fd0 <main+0x44c>)
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	4a2c      	ldr	r2, [pc, #176]	@ (8000fc8 <main+0x444>)
 8000f18:	6013      	str	r3, [r2, #0]
    PrevItermAngleRoll = PIDReturn[2];
 8000f1a:	4b2d      	ldr	r3, [pc, #180]	@ (8000fd0 <main+0x44c>)
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	4a2b      	ldr	r2, [pc, #172]	@ (8000fcc <main+0x448>)
 8000f20:	6013      	str	r3, [r2, #0]

    pid_equation(ErrorAnglePitch, PAnglePitch, IAnglePitch, DAnglePitch,
 8000f22:	4b25      	ldr	r3, [pc, #148]	@ (8000fb8 <main+0x434>)
 8000f24:	edd3 7a00 	vldr	s15, [r3]
 8000f28:	4b2b      	ldr	r3, [pc, #172]	@ (8000fd8 <main+0x454>)
 8000f2a:	ed93 7a00 	vldr	s14, [r3]
 8000f2e:	4b2b      	ldr	r3, [pc, #172]	@ (8000fdc <main+0x458>)
 8000f30:	edd3 6a00 	vldr	s13, [r3]
 8000f34:	4b2a      	ldr	r3, [pc, #168]	@ (8000fe0 <main+0x45c>)
 8000f36:	ed93 6a00 	vldr	s12, [r3]
 8000f3a:	4b2a      	ldr	r3, [pc, #168]	@ (8000fe4 <main+0x460>)
 8000f3c:	edd3 5a00 	vldr	s11, [r3]
 8000f40:	4b29      	ldr	r3, [pc, #164]	@ (8000fe8 <main+0x464>)
 8000f42:	ed93 5a00 	vldr	s10, [r3]
 8000f46:	4b10      	ldr	r3, [pc, #64]	@ (8000f88 <main+0x404>)
 8000f48:	edd3 4a00 	vldr	s9, [r3]
 8000f4c:	e052      	b.n	8000ff4 <main+0x470>
 8000f4e:	bf00      	nop
 8000f50:	2000022c 	.word	0x2000022c
 8000f54:	20000220 	.word	0x20000220
 8000f58:	20000228 	.word	0x20000228
 8000f5c:	2000021c 	.word	0x2000021c
 8000f60:	20000230 	.word	0x20000230
 8000f64:	20000224 	.word	0x20000224
 8000f68:	20000250 	.word	0x20000250
 8000f6c:	20000248 	.word	0x20000248
 8000f70:	2000024c 	.word	0x2000024c
 8000f74:	20000244 	.word	0x20000244
 8000f78:	20000234 	.word	0x20000234
 8000f7c:	44fa0000 	.word	0x44fa0000
 8000f80:	20000218 	.word	0x20000218
 8000f84:	3a83126f 	.word	0x3a83126f
 8000f88:	20000000 	.word	0x20000000
 8000f8c:	3a83126f 	.word	0x3a83126f
 8000f90:	3ca3d70a 	.word	0x3ca3d70a
 8000f94:	3ca3d70a 	.word	0x3ca3d70a
 8000f98:	20000004 	.word	0x20000004
 8000f9c:	20000254 	.word	0x20000254
 8000fa0:	20000008 	.word	0x20000008
 8000fa4:	20000258 	.word	0x20000258
 8000fa8:	200002bc 	.word	0x200002bc
 8000fac:	200002c0 	.word	0x200002c0
 8000fb0:	20000270 	.word	0x20000270
 8000fb4:	200002c4 	.word	0x200002c4
 8000fb8:	200002c8 	.word	0x200002c8
 8000fbc:	20000018 	.word	0x20000018
 8000fc0:	200002dc 	.word	0x200002dc
 8000fc4:	200002e4 	.word	0x200002e4
 8000fc8:	200002cc 	.word	0x200002cc
 8000fcc:	200002d4 	.word	0x200002d4
 8000fd0:	2000025c 	.word	0x2000025c
 8000fd4:	20000268 	.word	0x20000268
 8000fd8:	2000001c 	.word	0x2000001c
 8000fdc:	200002e0 	.word	0x200002e0
 8000fe0:	200002e8 	.word	0x200002e8
 8000fe4:	200002d0 	.word	0x200002d0
 8000fe8:	200002d8 	.word	0x200002d8
 8000fec:	437a0000 	.word	0x437a0000
 8000ff0:	42c80000 	.word	0x42c80000
 8000ff4:	ed1f 4a03 	vldr	s8, [pc, #-12]	@ 8000fec <main+0x468>
 8000ff8:	ed5f 3a03 	vldr	s7, [pc, #-12]	@ 8000ff0 <main+0x46c>
 8000ffc:	eeb0 3a64 	vmov.f32	s6, s9
 8001000:	eef0 2a45 	vmov.f32	s5, s10
 8001004:	eeb0 2a65 	vmov.f32	s4, s11
 8001008:	eef0 1a46 	vmov.f32	s3, s12
 800100c:	eeb0 1a66 	vmov.f32	s2, s13
 8001010:	eef0 0a47 	vmov.f32	s1, s14
 8001014:	eeb0 0a67 	vmov.f32	s0, s15
 8001018:	f7ff fc04 	bl	8000824 <pid_equation>
                 PrevErrorAnglePitch, PrevItermAnglePitch, dt,
                 ANGLE_I_LIMIT, ANGLE_RATE_LIMIT); 
    DesiredRatePitch = PIDReturn[0];
 800101c:	4bbc      	ldr	r3, [pc, #752]	@ (8001310 <main+0x78c>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4abc      	ldr	r2, [pc, #752]	@ (8001314 <main+0x790>)
 8001022:	6013      	str	r3, [r2, #0]
    PrevErrorAnglePitch = PIDReturn[1];
 8001024:	4bba      	ldr	r3, [pc, #744]	@ (8001310 <main+0x78c>)
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	4abb      	ldr	r2, [pc, #748]	@ (8001318 <main+0x794>)
 800102a:	6013      	str	r3, [r2, #0]
    PrevItermAnglePitch = PIDReturn[2];
 800102c:	4bb8      	ldr	r3, [pc, #736]	@ (8001310 <main+0x78c>)
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	4aba      	ldr	r2, [pc, #744]	@ (800131c <main+0x798>)
 8001032:	6013      	str	r3, [r2, #0]

    //PID inner Loop
    ErrorRateRoll = DesiredRateRoll - RateRoll;
 8001034:	4bba      	ldr	r3, [pc, #744]	@ (8001320 <main+0x79c>)
 8001036:	ed93 7a00 	vldr	s14, [r3]
 800103a:	4bba      	ldr	r3, [pc, #744]	@ (8001324 <main+0x7a0>)
 800103c:	edd3 7a00 	vldr	s15, [r3]
 8001040:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001044:	4bb8      	ldr	r3, [pc, #736]	@ (8001328 <main+0x7a4>)
 8001046:	edc3 7a00 	vstr	s15, [r3]
    ErrorRatePitch = DesiredRatePitch - RatePitch;
 800104a:	4bb2      	ldr	r3, [pc, #712]	@ (8001314 <main+0x790>)
 800104c:	ed93 7a00 	vldr	s14, [r3]
 8001050:	4bb6      	ldr	r3, [pc, #728]	@ (800132c <main+0x7a8>)
 8001052:	edd3 7a00 	vldr	s15, [r3]
 8001056:	ee77 7a67 	vsub.f32	s15, s14, s15
 800105a:	4bb5      	ldr	r3, [pc, #724]	@ (8001330 <main+0x7ac>)
 800105c:	edc3 7a00 	vstr	s15, [r3]
    ErrorRateYaw = DesiredRateYaw - RateYaw;
 8001060:	4bb4      	ldr	r3, [pc, #720]	@ (8001334 <main+0x7b0>)
 8001062:	ed93 7a00 	vldr	s14, [r3]
 8001066:	4bb4      	ldr	r3, [pc, #720]	@ (8001338 <main+0x7b4>)
 8001068:	edd3 7a00 	vldr	s15, [r3]
 800106c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001070:	4bb2      	ldr	r3, [pc, #712]	@ (800133c <main+0x7b8>)
 8001072:	edc3 7a00 	vstr	s15, [r3]
    
    pid_equation(ErrorRateRoll, PRateRoll, IRateRoll, DRateRoll,
 8001076:	4bac      	ldr	r3, [pc, #688]	@ (8001328 <main+0x7a4>)
 8001078:	edd3 7a00 	vldr	s15, [r3]
 800107c:	4bb0      	ldr	r3, [pc, #704]	@ (8001340 <main+0x7bc>)
 800107e:	ed93 7a00 	vldr	s14, [r3]
 8001082:	4bb0      	ldr	r3, [pc, #704]	@ (8001344 <main+0x7c0>)
 8001084:	edd3 6a00 	vldr	s13, [r3]
 8001088:	4baf      	ldr	r3, [pc, #700]	@ (8001348 <main+0x7c4>)
 800108a:	ed93 6a00 	vldr	s12, [r3]
 800108e:	4baf      	ldr	r3, [pc, #700]	@ (800134c <main+0x7c8>)
 8001090:	edd3 5a00 	vldr	s11, [r3]
 8001094:	4bae      	ldr	r3, [pc, #696]	@ (8001350 <main+0x7cc>)
 8001096:	ed93 5a00 	vldr	s10, [r3]
 800109a:	4bae      	ldr	r3, [pc, #696]	@ (8001354 <main+0x7d0>)
 800109c:	edd3 4a00 	vldr	s9, [r3]
 80010a0:	ed9f 4aad 	vldr	s8, [pc, #692]	@ 8001358 <main+0x7d4>
 80010a4:	eddf 3aac 	vldr	s7, [pc, #688]	@ 8001358 <main+0x7d4>
 80010a8:	eeb0 3a64 	vmov.f32	s6, s9
 80010ac:	eef0 2a45 	vmov.f32	s5, s10
 80010b0:	eeb0 2a65 	vmov.f32	s4, s11
 80010b4:	eef0 1a46 	vmov.f32	s3, s12
 80010b8:	eeb0 1a66 	vmov.f32	s2, s13
 80010bc:	eef0 0a47 	vmov.f32	s1, s14
 80010c0:	eeb0 0a67 	vmov.f32	s0, s15
 80010c4:	f7ff fbae 	bl	8000824 <pid_equation>
                 PrevErrorRateRoll, PrevItermRateRoll, dt,
                 RATE_I_LIMIT, RATE_OUT_LIMIT); 
    InputRoll = PIDReturn[0];
 80010c8:	4b91      	ldr	r3, [pc, #580]	@ (8001310 <main+0x78c>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4aa3      	ldr	r2, [pc, #652]	@ (800135c <main+0x7d8>)
 80010ce:	6013      	str	r3, [r2, #0]
    PrevErrorRateRoll = PIDReturn[1];
 80010d0:	4b8f      	ldr	r3, [pc, #572]	@ (8001310 <main+0x78c>)
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	4a9d      	ldr	r2, [pc, #628]	@ (800134c <main+0x7c8>)
 80010d6:	6013      	str	r3, [r2, #0]
    PrevItermRateRoll = PIDReturn[2];
 80010d8:	4b8d      	ldr	r3, [pc, #564]	@ (8001310 <main+0x78c>)
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	4a9c      	ldr	r2, [pc, #624]	@ (8001350 <main+0x7cc>)
 80010de:	6013      	str	r3, [r2, #0]

    pid_equation(ErrorRatePitch, PRatePitch, IRatePitch, DRatePitch,
 80010e0:	4b93      	ldr	r3, [pc, #588]	@ (8001330 <main+0x7ac>)
 80010e2:	edd3 7a00 	vldr	s15, [r3]
 80010e6:	4b9e      	ldr	r3, [pc, #632]	@ (8001360 <main+0x7dc>)
 80010e8:	ed93 7a00 	vldr	s14, [r3]
 80010ec:	4b9d      	ldr	r3, [pc, #628]	@ (8001364 <main+0x7e0>)
 80010ee:	edd3 6a00 	vldr	s13, [r3]
 80010f2:	4b9d      	ldr	r3, [pc, #628]	@ (8001368 <main+0x7e4>)
 80010f4:	ed93 6a00 	vldr	s12, [r3]
 80010f8:	4b9c      	ldr	r3, [pc, #624]	@ (800136c <main+0x7e8>)
 80010fa:	edd3 5a00 	vldr	s11, [r3]
 80010fe:	4b9c      	ldr	r3, [pc, #624]	@ (8001370 <main+0x7ec>)
 8001100:	ed93 5a00 	vldr	s10, [r3]
 8001104:	4b93      	ldr	r3, [pc, #588]	@ (8001354 <main+0x7d0>)
 8001106:	edd3 4a00 	vldr	s9, [r3]
 800110a:	ed9f 4a93 	vldr	s8, [pc, #588]	@ 8001358 <main+0x7d4>
 800110e:	eddf 3a92 	vldr	s7, [pc, #584]	@ 8001358 <main+0x7d4>
 8001112:	eeb0 3a64 	vmov.f32	s6, s9
 8001116:	eef0 2a45 	vmov.f32	s5, s10
 800111a:	eeb0 2a65 	vmov.f32	s4, s11
 800111e:	eef0 1a46 	vmov.f32	s3, s12
 8001122:	eeb0 1a66 	vmov.f32	s2, s13
 8001126:	eef0 0a47 	vmov.f32	s1, s14
 800112a:	eeb0 0a67 	vmov.f32	s0, s15
 800112e:	f7ff fb79 	bl	8000824 <pid_equation>
                 PrevErrorRatePitch, PrevItermRatePitch, dt,
                 RATE_I_LIMIT, RATE_OUT_LIMIT); 
    InputPitch = PIDReturn[0];
 8001132:	4b77      	ldr	r3, [pc, #476]	@ (8001310 <main+0x78c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a8f      	ldr	r2, [pc, #572]	@ (8001374 <main+0x7f0>)
 8001138:	6013      	str	r3, [r2, #0]
    PrevErrorRatePitch = PIDReturn[1];
 800113a:	4b75      	ldr	r3, [pc, #468]	@ (8001310 <main+0x78c>)
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	4a8b      	ldr	r2, [pc, #556]	@ (800136c <main+0x7e8>)
 8001140:	6013      	str	r3, [r2, #0]
    PrevItermRatePitch = PIDReturn[2];
 8001142:	4b73      	ldr	r3, [pc, #460]	@ (8001310 <main+0x78c>)
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	4a8a      	ldr	r2, [pc, #552]	@ (8001370 <main+0x7ec>)
 8001148:	6013      	str	r3, [r2, #0]

    pid_equation(ErrorRateYaw, PRateYaw, IRateYaw, DRateYaw,
 800114a:	4b7c      	ldr	r3, [pc, #496]	@ (800133c <main+0x7b8>)
 800114c:	edd3 7a00 	vldr	s15, [r3]
 8001150:	4b89      	ldr	r3, [pc, #548]	@ (8001378 <main+0x7f4>)
 8001152:	ed93 7a00 	vldr	s14, [r3]
 8001156:	4b89      	ldr	r3, [pc, #548]	@ (800137c <main+0x7f8>)
 8001158:	edd3 6a00 	vldr	s13, [r3]
 800115c:	4b88      	ldr	r3, [pc, #544]	@ (8001380 <main+0x7fc>)
 800115e:	ed93 6a00 	vldr	s12, [r3]
 8001162:	4b88      	ldr	r3, [pc, #544]	@ (8001384 <main+0x800>)
 8001164:	edd3 5a00 	vldr	s11, [r3]
 8001168:	4b87      	ldr	r3, [pc, #540]	@ (8001388 <main+0x804>)
 800116a:	ed93 5a00 	vldr	s10, [r3]
 800116e:	4b79      	ldr	r3, [pc, #484]	@ (8001354 <main+0x7d0>)
 8001170:	edd3 4a00 	vldr	s9, [r3]
 8001174:	ed9f 4a78 	vldr	s8, [pc, #480]	@ 8001358 <main+0x7d4>
 8001178:	eddf 3a77 	vldr	s7, [pc, #476]	@ 8001358 <main+0x7d4>
 800117c:	eeb0 3a64 	vmov.f32	s6, s9
 8001180:	eef0 2a45 	vmov.f32	s5, s10
 8001184:	eeb0 2a65 	vmov.f32	s4, s11
 8001188:	eef0 1a46 	vmov.f32	s3, s12
 800118c:	eeb0 1a66 	vmov.f32	s2, s13
 8001190:	eef0 0a47 	vmov.f32	s1, s14
 8001194:	eeb0 0a67 	vmov.f32	s0, s15
 8001198:	f7ff fb44 	bl	8000824 <pid_equation>
                 PrevErrorRateYaw, PrevItermRateYaw, dt,
                 RATE_I_LIMIT, RATE_OUT_LIMIT); 
    InputYaw = PIDReturn[0];
 800119c:	4b5c      	ldr	r3, [pc, #368]	@ (8001310 <main+0x78c>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a7a      	ldr	r2, [pc, #488]	@ (800138c <main+0x808>)
 80011a2:	6013      	str	r3, [r2, #0]
    PrevErrorRateYaw = PIDReturn[1];
 80011a4:	4b5a      	ldr	r3, [pc, #360]	@ (8001310 <main+0x78c>)
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	4a76      	ldr	r2, [pc, #472]	@ (8001384 <main+0x800>)
 80011aa:	6013      	str	r3, [r2, #0]
    PrevItermRateYaw = PIDReturn[2];
 80011ac:	4b58      	ldr	r3, [pc, #352]	@ (8001310 <main+0x78c>)
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	4a75      	ldr	r2, [pc, #468]	@ (8001388 <main+0x804>)
 80011b2:	6013      	str	r3, [r2, #0]
    
    int throttle = 1200;
 80011b4:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 80011b8:	60bb      	str	r3, [r7, #8]
    //gioi han 1000 den 2000 us
    uint16_t m1 = us_saturate((int)(throttle - InputRoll - InputPitch - InputYaw));
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	ee07 3a90 	vmov	s15, r3
 80011c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011c4:	4b65      	ldr	r3, [pc, #404]	@ (800135c <main+0x7d8>)
 80011c6:	edd3 7a00 	vldr	s15, [r3]
 80011ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011ce:	4b69      	ldr	r3, [pc, #420]	@ (8001374 <main+0x7f0>)
 80011d0:	edd3 7a00 	vldr	s15, [r3]
 80011d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011d8:	4b6c      	ldr	r3, [pc, #432]	@ (800138c <main+0x808>)
 80011da:	edd3 7a00 	vldr	s15, [r3]
 80011de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011e6:	ee17 0a90 	vmov	r0, s15
 80011ea:	f7ff fc5b 	bl	8000aa4 <us_saturate>
 80011ee:	4603      	mov	r3, r0
 80011f0:	80fb      	strh	r3, [r7, #6]
    uint16_t m2 = us_saturate((int)(throttle - InputRoll + InputPitch + InputYaw));
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	ee07 3a90 	vmov	s15, r3
 80011f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011fc:	4b57      	ldr	r3, [pc, #348]	@ (800135c <main+0x7d8>)
 80011fe:	edd3 7a00 	vldr	s15, [r3]
 8001202:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001206:	4b5b      	ldr	r3, [pc, #364]	@ (8001374 <main+0x7f0>)
 8001208:	edd3 7a00 	vldr	s15, [r3]
 800120c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001210:	4b5e      	ldr	r3, [pc, #376]	@ (800138c <main+0x808>)
 8001212:	edd3 7a00 	vldr	s15, [r3]
 8001216:	ee77 7a27 	vadd.f32	s15, s14, s15
 800121a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800121e:	ee17 0a90 	vmov	r0, s15
 8001222:	f7ff fc3f 	bl	8000aa4 <us_saturate>
 8001226:	4603      	mov	r3, r0
 8001228:	80bb      	strh	r3, [r7, #4]
    uint16_t m3 = us_saturate((int)(throttle + InputRoll + InputPitch - InputYaw));
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	ee07 3a90 	vmov	s15, r3
 8001230:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001234:	4b49      	ldr	r3, [pc, #292]	@ (800135c <main+0x7d8>)
 8001236:	edd3 7a00 	vldr	s15, [r3]
 800123a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800123e:	4b4d      	ldr	r3, [pc, #308]	@ (8001374 <main+0x7f0>)
 8001240:	edd3 7a00 	vldr	s15, [r3]
 8001244:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001248:	4b50      	ldr	r3, [pc, #320]	@ (800138c <main+0x808>)
 800124a:	edd3 7a00 	vldr	s15, [r3]
 800124e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001252:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001256:	ee17 0a90 	vmov	r0, s15
 800125a:	f7ff fc23 	bl	8000aa4 <us_saturate>
 800125e:	4603      	mov	r3, r0
 8001260:	807b      	strh	r3, [r7, #2]
    uint16_t m4 = us_saturate((int)(throttle + InputRoll - InputPitch + InputYaw));
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	ee07 3a90 	vmov	s15, r3
 8001268:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800126c:	4b3b      	ldr	r3, [pc, #236]	@ (800135c <main+0x7d8>)
 800126e:	edd3 7a00 	vldr	s15, [r3]
 8001272:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001276:	4b3f      	ldr	r3, [pc, #252]	@ (8001374 <main+0x7f0>)
 8001278:	edd3 7a00 	vldr	s15, [r3]
 800127c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001280:	4b42      	ldr	r3, [pc, #264]	@ (800138c <main+0x808>)
 8001282:	edd3 7a00 	vldr	s15, [r3]
 8001286:	ee77 7a27 	vadd.f32	s15, s14, s15
 800128a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800128e:	ee17 0a90 	vmov	r0, s15
 8001292:	f7ff fc07 	bl	8000aa4 <us_saturate>
 8001296:	4603      	mov	r3, r0
 8001298:	803b      	strh	r3, [r7, #0]

    //gui cho dong co power (us)
    set_motor_us(&htim3, TIM_CHANNEL_1, m1);
 800129a:	88fb      	ldrh	r3, [r7, #6]
 800129c:	461a      	mov	r2, r3
 800129e:	2100      	movs	r1, #0
 80012a0:	483b      	ldr	r0, [pc, #236]	@ (8001390 <main+0x80c>)
 80012a2:	f7ff fc19 	bl	8000ad8 <set_motor_us>
    set_motor_us(&htim3, TIM_CHANNEL_2, m2);
 80012a6:	88bb      	ldrh	r3, [r7, #4]
 80012a8:	461a      	mov	r2, r3
 80012aa:	2104      	movs	r1, #4
 80012ac:	4838      	ldr	r0, [pc, #224]	@ (8001390 <main+0x80c>)
 80012ae:	f7ff fc13 	bl	8000ad8 <set_motor_us>
    set_motor_us(&htim3, TIM_CHANNEL_3, m3);
 80012b2:	887b      	ldrh	r3, [r7, #2]
 80012b4:	461a      	mov	r2, r3
 80012b6:	2108      	movs	r1, #8
 80012b8:	4835      	ldr	r0, [pc, #212]	@ (8001390 <main+0x80c>)
 80012ba:	f7ff fc0d 	bl	8000ad8 <set_motor_us>
    set_motor_us(&htim3, TIM_CHANNEL_4, m4);
 80012be:	883b      	ldrh	r3, [r7, #0]
 80012c0:	461a      	mov	r2, r3
 80012c2:	210c      	movs	r1, #12
 80012c4:	4832      	ldr	r0, [pc, #200]	@ (8001390 <main+0x80c>)
 80012c6:	f7ff fc07 	bl	8000ad8 <set_motor_us>

    //phan nay de hien thi monitor
    Throttle_us = throttle;
 80012ca:	4a32      	ldr	r2, [pc, #200]	@ (8001394 <main+0x810>)
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	6013      	str	r3, [r2, #0]
    M1_us = m1; M2_us = m2; M3_us = m3; M4_us = m4;
 80012d0:	4a31      	ldr	r2, [pc, #196]	@ (8001398 <main+0x814>)
 80012d2:	88fb      	ldrh	r3, [r7, #6]
 80012d4:	8013      	strh	r3, [r2, #0]
 80012d6:	4a31      	ldr	r2, [pc, #196]	@ (800139c <main+0x818>)
 80012d8:	88bb      	ldrh	r3, [r7, #4]
 80012da:	8013      	strh	r3, [r2, #0]
 80012dc:	4a30      	ldr	r2, [pc, #192]	@ (80013a0 <main+0x81c>)
 80012de:	887b      	ldrh	r3, [r7, #2]
 80012e0:	8013      	strh	r3, [r2, #0]
 80012e2:	4a30      	ldr	r2, [pc, #192]	@ (80013a4 <main+0x820>)
 80012e4:	883b      	ldrh	r3, [r7, #0]
 80012e6:	8013      	strh	r3, [r2, #0]
    Throttle_pct = us_to_percent((uint16_t)Throttle_us);
 80012e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001394 <main+0x810>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff fc1c 	bl	8000b2c <us_to_percent>
 80012f4:	eef0 7a40 	vmov.f32	s15, s0
 80012f8:	4b2b      	ldr	r3, [pc, #172]	@ (80013a8 <main+0x824>)
 80012fa:	edc3 7a00 	vstr	s15, [r3]
    M1_pct = us_to_percent(M1_us);
 80012fe:	4b26      	ldr	r3, [pc, #152]	@ (8001398 <main+0x814>)
 8001300:	881b      	ldrh	r3, [r3, #0]
 8001302:	b29b      	uxth	r3, r3
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff fc11 	bl	8000b2c <us_to_percent>
 800130a:	eef0 7a40 	vmov.f32	s15, s0
 800130e:	e04d      	b.n	80013ac <main+0x828>
 8001310:	2000025c 	.word	0x2000025c
 8001314:	2000026c 	.word	0x2000026c
 8001318:	200002d0 	.word	0x200002d0
 800131c:	200002d8 	.word	0x200002d8
 8001320:	20000268 	.word	0x20000268
 8001324:	2000021c 	.word	0x2000021c
 8001328:	20000274 	.word	0x20000274
 800132c:	20000220 	.word	0x20000220
 8001330:	20000278 	.word	0x20000278
 8001334:	20000270 	.word	0x20000270
 8001338:	20000224 	.word	0x20000224
 800133c:	2000027c 	.word	0x2000027c
 8001340:	2000000c 	.word	0x2000000c
 8001344:	200002a4 	.word	0x200002a4
 8001348:	200002b0 	.word	0x200002b0
 800134c:	2000028c 	.word	0x2000028c
 8001350:	20000298 	.word	0x20000298
 8001354:	20000000 	.word	0x20000000
 8001358:	43c80000 	.word	0x43c80000
 800135c:	20000280 	.word	0x20000280
 8001360:	20000010 	.word	0x20000010
 8001364:	200002a8 	.word	0x200002a8
 8001368:	200002b4 	.word	0x200002b4
 800136c:	20000290 	.word	0x20000290
 8001370:	2000029c 	.word	0x2000029c
 8001374:	20000284 	.word	0x20000284
 8001378:	20000014 	.word	0x20000014
 800137c:	200002ac 	.word	0x200002ac
 8001380:	200002b8 	.word	0x200002b8
 8001384:	20000294 	.word	0x20000294
 8001388:	200002a0 	.word	0x200002a0
 800138c:	20000288 	.word	0x20000288
 8001390:	200000f8 	.word	0x200000f8
 8001394:	20000028 	.word	0x20000028
 8001398:	20000020 	.word	0x20000020
 800139c:	20000022 	.word	0x20000022
 80013a0:	20000024 	.word	0x20000024
 80013a4:	20000026 	.word	0x20000026
 80013a8:	200002fc 	.word	0x200002fc
 80013ac:	4b12      	ldr	r3, [pc, #72]	@ (80013f8 <main+0x874>)
 80013ae:	edc3 7a00 	vstr	s15, [r3]
    M2_pct = us_to_percent(M2_us);
 80013b2:	4b12      	ldr	r3, [pc, #72]	@ (80013fc <main+0x878>)
 80013b4:	881b      	ldrh	r3, [r3, #0]
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff fbb7 	bl	8000b2c <us_to_percent>
 80013be:	eef0 7a40 	vmov.f32	s15, s0
 80013c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001400 <main+0x87c>)
 80013c4:	edc3 7a00 	vstr	s15, [r3]
    M3_pct = us_to_percent(M3_us);
 80013c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001404 <main+0x880>)
 80013ca:	881b      	ldrh	r3, [r3, #0]
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff fbac 	bl	8000b2c <us_to_percent>
 80013d4:	eef0 7a40 	vmov.f32	s15, s0
 80013d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001408 <main+0x884>)
 80013da:	edc3 7a00 	vstr	s15, [r3]
    M4_pct = us_to_percent(M4_us);
 80013de:	4b0b      	ldr	r3, [pc, #44]	@ (800140c <main+0x888>)
 80013e0:	881b      	ldrh	r3, [r3, #0]
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff fba1 	bl	8000b2c <us_to_percent>
 80013ea:	eef0 7a40 	vmov.f32	s15, s0
 80013ee:	4b08      	ldr	r3, [pc, #32]	@ (8001410 <main+0x88c>)
 80013f0:	edc3 7a00 	vstr	s15, [r3]
  {
 80013f4:	e4a7      	b.n	8000d46 <main+0x1c2>
 80013f6:	bf00      	nop
 80013f8:	200002ec 	.word	0x200002ec
 80013fc:	20000022 	.word	0x20000022
 8001400:	200002f0 	.word	0x200002f0
 8001404:	20000024 	.word	0x20000024
 8001408:	200002f4 	.word	0x200002f4
 800140c:	20000026 	.word	0x20000026
 8001410:	200002f8 	.word	0x200002f8

08001414 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b094      	sub	sp, #80	@ 0x50
 8001418:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800141a:	f107 0320 	add.w	r3, r7, #32
 800141e:	2230      	movs	r2, #48	@ 0x30
 8001420:	2100      	movs	r1, #0
 8001422:	4618      	mov	r0, r3
 8001424:	f003 fa66 	bl	80048f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001428:	f107 030c 	add.w	r3, r7, #12
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
 8001436:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001438:	2300      	movs	r3, #0
 800143a:	60bb      	str	r3, [r7, #8]
 800143c:	4b27      	ldr	r3, [pc, #156]	@ (80014dc <SystemClock_Config+0xc8>)
 800143e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001440:	4a26      	ldr	r2, [pc, #152]	@ (80014dc <SystemClock_Config+0xc8>)
 8001442:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001446:	6413      	str	r3, [r2, #64]	@ 0x40
 8001448:	4b24      	ldr	r3, [pc, #144]	@ (80014dc <SystemClock_Config+0xc8>)
 800144a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800144c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001450:	60bb      	str	r3, [r7, #8]
 8001452:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001454:	2300      	movs	r3, #0
 8001456:	607b      	str	r3, [r7, #4]
 8001458:	4b21      	ldr	r3, [pc, #132]	@ (80014e0 <SystemClock_Config+0xcc>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a20      	ldr	r2, [pc, #128]	@ (80014e0 <SystemClock_Config+0xcc>)
 800145e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001462:	6013      	str	r3, [r2, #0]
 8001464:	4b1e      	ldr	r3, [pc, #120]	@ (80014e0 <SystemClock_Config+0xcc>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800146c:	607b      	str	r3, [r7, #4]
 800146e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001470:	2302      	movs	r3, #2
 8001472:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001474:	2301      	movs	r3, #1
 8001476:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001478:	2310      	movs	r3, #16
 800147a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800147c:	2302      	movs	r3, #2
 800147e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001480:	2300      	movs	r3, #0
 8001482:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001484:	2308      	movs	r3, #8
 8001486:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001488:	2364      	movs	r3, #100	@ 0x64
 800148a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800148c:	2302      	movs	r3, #2
 800148e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001490:	2304      	movs	r3, #4
 8001492:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001494:	f107 0320 	add.w	r3, r7, #32
 8001498:	4618      	mov	r0, r3
 800149a:	f001 fea7 	bl	80031ec <HAL_RCC_OscConfig>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014a4:	f000 f96e 	bl	8001784 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014a8:	230f      	movs	r3, #15
 80014aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014ac:	2302      	movs	r3, #2
 80014ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014ba:	2300      	movs	r3, #0
 80014bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80014be:	f107 030c 	add.w	r3, r7, #12
 80014c2:	2103      	movs	r1, #3
 80014c4:	4618      	mov	r0, r3
 80014c6:	f002 f909 	bl	80036dc <HAL_RCC_ClockConfig>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80014d0:	f000 f958 	bl	8001784 <Error_Handler>
  }
}
 80014d4:	bf00      	nop
 80014d6:	3750      	adds	r7, #80	@ 0x50
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40023800 	.word	0x40023800
 80014e0:	40007000 	.word	0x40007000

080014e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014e8:	4b12      	ldr	r3, [pc, #72]	@ (8001534 <MX_I2C1_Init+0x50>)
 80014ea:	4a13      	ldr	r2, [pc, #76]	@ (8001538 <MX_I2C1_Init+0x54>)
 80014ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80014ee:	4b11      	ldr	r3, [pc, #68]	@ (8001534 <MX_I2C1_Init+0x50>)
 80014f0:	4a12      	ldr	r2, [pc, #72]	@ (800153c <MX_I2C1_Init+0x58>)
 80014f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001534 <MX_I2C1_Init+0x50>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001534 <MX_I2C1_Init+0x50>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001500:	4b0c      	ldr	r3, [pc, #48]	@ (8001534 <MX_I2C1_Init+0x50>)
 8001502:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001506:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001508:	4b0a      	ldr	r3, [pc, #40]	@ (8001534 <MX_I2C1_Init+0x50>)
 800150a:	2200      	movs	r2, #0
 800150c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800150e:	4b09      	ldr	r3, [pc, #36]	@ (8001534 <MX_I2C1_Init+0x50>)
 8001510:	2200      	movs	r2, #0
 8001512:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001514:	4b07      	ldr	r3, [pc, #28]	@ (8001534 <MX_I2C1_Init+0x50>)
 8001516:	2200      	movs	r2, #0
 8001518:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800151a:	4b06      	ldr	r3, [pc, #24]	@ (8001534 <MX_I2C1_Init+0x50>)
 800151c:	2200      	movs	r2, #0
 800151e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001520:	4804      	ldr	r0, [pc, #16]	@ (8001534 <MX_I2C1_Init+0x50>)
 8001522:	f000 fe3f 	bl	80021a4 <HAL_I2C_Init>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800152c:	f000 f92a 	bl	8001784 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001530:	bf00      	nop
 8001532:	bd80      	pop	{r7, pc}
 8001534:	200000a4 	.word	0x200000a4
 8001538:	40005400 	.word	0x40005400
 800153c:	000186a0 	.word	0x000186a0

08001540 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b08a      	sub	sp, #40	@ 0x28
 8001544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001546:	f107 0320 	add.w	r3, r7, #32
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001550:	1d3b      	adds	r3, r7, #4
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	605a      	str	r2, [r3, #4]
 8001558:	609a      	str	r2, [r3, #8]
 800155a:	60da      	str	r2, [r3, #12]
 800155c:	611a      	str	r2, [r3, #16]
 800155e:	615a      	str	r2, [r3, #20]
 8001560:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001562:	4b33      	ldr	r3, [pc, #204]	@ (8001630 <MX_TIM3_Init+0xf0>)
 8001564:	4a33      	ldr	r2, [pc, #204]	@ (8001634 <MX_TIM3_Init+0xf4>)
 8001566:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 8001568:	4b31      	ldr	r3, [pc, #196]	@ (8001630 <MX_TIM3_Init+0xf0>)
 800156a:	2263      	movs	r2, #99	@ 0x63
 800156c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800156e:	4b30      	ldr	r3, [pc, #192]	@ (8001630 <MX_TIM3_Init+0xf0>)
 8001570:	2200      	movs	r2, #0
 8001572:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2499;
 8001574:	4b2e      	ldr	r3, [pc, #184]	@ (8001630 <MX_TIM3_Init+0xf0>)
 8001576:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 800157a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800157c:	4b2c      	ldr	r3, [pc, #176]	@ (8001630 <MX_TIM3_Init+0xf0>)
 800157e:	2200      	movs	r2, #0
 8001580:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001582:	4b2b      	ldr	r3, [pc, #172]	@ (8001630 <MX_TIM3_Init+0xf0>)
 8001584:	2200      	movs	r2, #0
 8001586:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001588:	4829      	ldr	r0, [pc, #164]	@ (8001630 <MX_TIM3_Init+0xf0>)
 800158a:	f002 fa87 	bl	8003a9c <HAL_TIM_PWM_Init>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001594:	f000 f8f6 	bl	8001784 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001598:	2300      	movs	r3, #0
 800159a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800159c:	2300      	movs	r3, #0
 800159e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015a0:	f107 0320 	add.w	r3, r7, #32
 80015a4:	4619      	mov	r1, r3
 80015a6:	4822      	ldr	r0, [pc, #136]	@ (8001630 <MX_TIM3_Init+0xf0>)
 80015a8:	f002 fe72 	bl	8004290 <HAL_TIMEx_MasterConfigSynchronization>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80015b2:	f000 f8e7 	bl	8001784 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015b6:	2360      	movs	r3, #96	@ 0x60
 80015b8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 80015ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015c0:	2300      	movs	r3, #0
 80015c2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015c4:	2300      	movs	r3, #0
 80015c6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015c8:	1d3b      	adds	r3, r7, #4
 80015ca:	2200      	movs	r2, #0
 80015cc:	4619      	mov	r1, r3
 80015ce:	4818      	ldr	r0, [pc, #96]	@ (8001630 <MX_TIM3_Init+0xf0>)
 80015d0:	f002 fb64 	bl	8003c9c <HAL_TIM_PWM_ConfigChannel>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80015da:	f000 f8d3 	bl	8001784 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015de:	1d3b      	adds	r3, r7, #4
 80015e0:	2204      	movs	r2, #4
 80015e2:	4619      	mov	r1, r3
 80015e4:	4812      	ldr	r0, [pc, #72]	@ (8001630 <MX_TIM3_Init+0xf0>)
 80015e6:	f002 fb59 	bl	8003c9c <HAL_TIM_PWM_ConfigChannel>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80015f0:	f000 f8c8 	bl	8001784 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015f4:	1d3b      	adds	r3, r7, #4
 80015f6:	2208      	movs	r2, #8
 80015f8:	4619      	mov	r1, r3
 80015fa:	480d      	ldr	r0, [pc, #52]	@ (8001630 <MX_TIM3_Init+0xf0>)
 80015fc:	f002 fb4e 	bl	8003c9c <HAL_TIM_PWM_ConfigChannel>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8001606:	f000 f8bd 	bl	8001784 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800160a:	1d3b      	adds	r3, r7, #4
 800160c:	220c      	movs	r2, #12
 800160e:	4619      	mov	r1, r3
 8001610:	4807      	ldr	r0, [pc, #28]	@ (8001630 <MX_TIM3_Init+0xf0>)
 8001612:	f002 fb43 	bl	8003c9c <HAL_TIM_PWM_ConfigChannel>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 800161c:	f000 f8b2 	bl	8001784 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001620:	4803      	ldr	r0, [pc, #12]	@ (8001630 <MX_TIM3_Init+0xf0>)
 8001622:	f000 f947 	bl	80018b4 <HAL_TIM_MspPostInit>

}
 8001626:	bf00      	nop
 8001628:	3728      	adds	r7, #40	@ 0x28
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	200000f8 	.word	0x200000f8
 8001634:	40000400 	.word	0x40000400

08001638 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800163c:	4b11      	ldr	r3, [pc, #68]	@ (8001684 <MX_USART1_UART_Init+0x4c>)
 800163e:	4a12      	ldr	r2, [pc, #72]	@ (8001688 <MX_USART1_UART_Init+0x50>)
 8001640:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001642:	4b10      	ldr	r3, [pc, #64]	@ (8001684 <MX_USART1_UART_Init+0x4c>)
 8001644:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001648:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800164a:	4b0e      	ldr	r3, [pc, #56]	@ (8001684 <MX_USART1_UART_Init+0x4c>)
 800164c:	2200      	movs	r2, #0
 800164e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001650:	4b0c      	ldr	r3, [pc, #48]	@ (8001684 <MX_USART1_UART_Init+0x4c>)
 8001652:	2200      	movs	r2, #0
 8001654:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001656:	4b0b      	ldr	r3, [pc, #44]	@ (8001684 <MX_USART1_UART_Init+0x4c>)
 8001658:	2200      	movs	r2, #0
 800165a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800165c:	4b09      	ldr	r3, [pc, #36]	@ (8001684 <MX_USART1_UART_Init+0x4c>)
 800165e:	220c      	movs	r2, #12
 8001660:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001662:	4b08      	ldr	r3, [pc, #32]	@ (8001684 <MX_USART1_UART_Init+0x4c>)
 8001664:	2200      	movs	r2, #0
 8001666:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001668:	4b06      	ldr	r3, [pc, #24]	@ (8001684 <MX_USART1_UART_Init+0x4c>)
 800166a:	2200      	movs	r2, #0
 800166c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800166e:	4805      	ldr	r0, [pc, #20]	@ (8001684 <MX_USART1_UART_Init+0x4c>)
 8001670:	f002 fe7c 	bl	800436c <HAL_UART_Init>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800167a:	f000 f883 	bl	8001784 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000140 	.word	0x20000140
 8001688:	40011000 	.word	0x40011000

0800168c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001690:	4b11      	ldr	r3, [pc, #68]	@ (80016d8 <MX_USART2_UART_Init+0x4c>)
 8001692:	4a12      	ldr	r2, [pc, #72]	@ (80016dc <MX_USART2_UART_Init+0x50>)
 8001694:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001696:	4b10      	ldr	r3, [pc, #64]	@ (80016d8 <MX_USART2_UART_Init+0x4c>)
 8001698:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800169c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800169e:	4b0e      	ldr	r3, [pc, #56]	@ (80016d8 <MX_USART2_UART_Init+0x4c>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016a4:	4b0c      	ldr	r3, [pc, #48]	@ (80016d8 <MX_USART2_UART_Init+0x4c>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016aa:	4b0b      	ldr	r3, [pc, #44]	@ (80016d8 <MX_USART2_UART_Init+0x4c>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016b0:	4b09      	ldr	r3, [pc, #36]	@ (80016d8 <MX_USART2_UART_Init+0x4c>)
 80016b2:	220c      	movs	r2, #12
 80016b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016b6:	4b08      	ldr	r3, [pc, #32]	@ (80016d8 <MX_USART2_UART_Init+0x4c>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016bc:	4b06      	ldr	r3, [pc, #24]	@ (80016d8 <MX_USART2_UART_Init+0x4c>)
 80016be:	2200      	movs	r2, #0
 80016c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016c2:	4805      	ldr	r0, [pc, #20]	@ (80016d8 <MX_USART2_UART_Init+0x4c>)
 80016c4:	f002 fe52 	bl	800436c <HAL_UART_Init>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016ce:	f000 f859 	bl	8001784 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20000188 	.word	0x20000188
 80016dc:	40004400 	.word	0x40004400

080016e0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80016e4:	4b11      	ldr	r3, [pc, #68]	@ (800172c <MX_USART6_UART_Init+0x4c>)
 80016e6:	4a12      	ldr	r2, [pc, #72]	@ (8001730 <MX_USART6_UART_Init+0x50>)
 80016e8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80016ea:	4b10      	ldr	r3, [pc, #64]	@ (800172c <MX_USART6_UART_Init+0x4c>)
 80016ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016f0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80016f2:	4b0e      	ldr	r3, [pc, #56]	@ (800172c <MX_USART6_UART_Init+0x4c>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80016f8:	4b0c      	ldr	r3, [pc, #48]	@ (800172c <MX_USART6_UART_Init+0x4c>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80016fe:	4b0b      	ldr	r3, [pc, #44]	@ (800172c <MX_USART6_UART_Init+0x4c>)
 8001700:	2200      	movs	r2, #0
 8001702:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001704:	4b09      	ldr	r3, [pc, #36]	@ (800172c <MX_USART6_UART_Init+0x4c>)
 8001706:	220c      	movs	r2, #12
 8001708:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800170a:	4b08      	ldr	r3, [pc, #32]	@ (800172c <MX_USART6_UART_Init+0x4c>)
 800170c:	2200      	movs	r2, #0
 800170e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001710:	4b06      	ldr	r3, [pc, #24]	@ (800172c <MX_USART6_UART_Init+0x4c>)
 8001712:	2200      	movs	r2, #0
 8001714:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001716:	4805      	ldr	r0, [pc, #20]	@ (800172c <MX_USART6_UART_Init+0x4c>)
 8001718:	f002 fe28 	bl	800436c <HAL_UART_Init>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001722:	f000 f82f 	bl	8001784 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	200001d0 	.word	0x200001d0
 8001730:	40011400 	.word	0x40011400

08001734 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	607b      	str	r3, [r7, #4]
 800173e:	4b10      	ldr	r3, [pc, #64]	@ (8001780 <MX_GPIO_Init+0x4c>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001742:	4a0f      	ldr	r2, [pc, #60]	@ (8001780 <MX_GPIO_Init+0x4c>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	6313      	str	r3, [r2, #48]	@ 0x30
 800174a:	4b0d      	ldr	r3, [pc, #52]	@ (8001780 <MX_GPIO_Init+0x4c>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	607b      	str	r3, [r7, #4]
 8001754:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	603b      	str	r3, [r7, #0]
 800175a:	4b09      	ldr	r3, [pc, #36]	@ (8001780 <MX_GPIO_Init+0x4c>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175e:	4a08      	ldr	r2, [pc, #32]	@ (8001780 <MX_GPIO_Init+0x4c>)
 8001760:	f043 0302 	orr.w	r3, r3, #2
 8001764:	6313      	str	r3, [r2, #48]	@ 0x30
 8001766:	4b06      	ldr	r3, [pc, #24]	@ (8001780 <MX_GPIO_Init+0x4c>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	603b      	str	r3, [r7, #0]
 8001770:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	40023800 	.word	0x40023800

08001784 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001788:	b672      	cpsid	i
}
 800178a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800178c:	bf00      	nop
 800178e:	e7fd      	b.n	800178c <Error_Handler+0x8>

08001790 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	607b      	str	r3, [r7, #4]
 800179a:	4b10      	ldr	r3, [pc, #64]	@ (80017dc <HAL_MspInit+0x4c>)
 800179c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800179e:	4a0f      	ldr	r2, [pc, #60]	@ (80017dc <HAL_MspInit+0x4c>)
 80017a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80017a6:	4b0d      	ldr	r3, [pc, #52]	@ (80017dc <HAL_MspInit+0x4c>)
 80017a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017ae:	607b      	str	r3, [r7, #4]
 80017b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	603b      	str	r3, [r7, #0]
 80017b6:	4b09      	ldr	r3, [pc, #36]	@ (80017dc <HAL_MspInit+0x4c>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ba:	4a08      	ldr	r2, [pc, #32]	@ (80017dc <HAL_MspInit+0x4c>)
 80017bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80017c2:	4b06      	ldr	r3, [pc, #24]	@ (80017dc <HAL_MspInit+0x4c>)
 80017c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017ca:	603b      	str	r3, [r7, #0]
 80017cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ce:	bf00      	nop
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	40023800 	.word	0x40023800

080017e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b08a      	sub	sp, #40	@ 0x28
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e8:	f107 0314 	add.w	r3, r7, #20
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a19      	ldr	r2, [pc, #100]	@ (8001864 <HAL_I2C_MspInit+0x84>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d12b      	bne.n	800185a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	613b      	str	r3, [r7, #16]
 8001806:	4b18      	ldr	r3, [pc, #96]	@ (8001868 <HAL_I2C_MspInit+0x88>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180a:	4a17      	ldr	r2, [pc, #92]	@ (8001868 <HAL_I2C_MspInit+0x88>)
 800180c:	f043 0302 	orr.w	r3, r3, #2
 8001810:	6313      	str	r3, [r2, #48]	@ 0x30
 8001812:	4b15      	ldr	r3, [pc, #84]	@ (8001868 <HAL_I2C_MspInit+0x88>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	613b      	str	r3, [r7, #16]
 800181c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800181e:	23c0      	movs	r3, #192	@ 0xc0
 8001820:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001822:	2312      	movs	r3, #18
 8001824:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800182a:	2303      	movs	r3, #3
 800182c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800182e:	2304      	movs	r3, #4
 8001830:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001832:	f107 0314 	add.w	r3, r7, #20
 8001836:	4619      	mov	r1, r3
 8001838:	480c      	ldr	r0, [pc, #48]	@ (800186c <HAL_I2C_MspInit+0x8c>)
 800183a:	f000 fb2f 	bl	8001e9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	4b09      	ldr	r3, [pc, #36]	@ (8001868 <HAL_I2C_MspInit+0x88>)
 8001844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001846:	4a08      	ldr	r2, [pc, #32]	@ (8001868 <HAL_I2C_MspInit+0x88>)
 8001848:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800184c:	6413      	str	r3, [r2, #64]	@ 0x40
 800184e:	4b06      	ldr	r3, [pc, #24]	@ (8001868 <HAL_I2C_MspInit+0x88>)
 8001850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001852:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800185a:	bf00      	nop
 800185c:	3728      	adds	r7, #40	@ 0x28
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40005400 	.word	0x40005400
 8001868:	40023800 	.word	0x40023800
 800186c:	40020400 	.word	0x40020400

08001870 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a0b      	ldr	r2, [pc, #44]	@ (80018ac <HAL_TIM_PWM_MspInit+0x3c>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d10d      	bne.n	800189e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	60fb      	str	r3, [r7, #12]
 8001886:	4b0a      	ldr	r3, [pc, #40]	@ (80018b0 <HAL_TIM_PWM_MspInit+0x40>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188a:	4a09      	ldr	r2, [pc, #36]	@ (80018b0 <HAL_TIM_PWM_MspInit+0x40>)
 800188c:	f043 0302 	orr.w	r3, r3, #2
 8001890:	6413      	str	r3, [r2, #64]	@ 0x40
 8001892:	4b07      	ldr	r3, [pc, #28]	@ (80018b0 <HAL_TIM_PWM_MspInit+0x40>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 800189e:	bf00      	nop
 80018a0:	3714      	adds	r7, #20
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	40000400 	.word	0x40000400
 80018b0:	40023800 	.word	0x40023800

080018b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b08a      	sub	sp, #40	@ 0x28
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018bc:	f107 0314 	add.w	r3, r7, #20
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	609a      	str	r2, [r3, #8]
 80018c8:	60da      	str	r2, [r3, #12]
 80018ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a21      	ldr	r2, [pc, #132]	@ (8001958 <HAL_TIM_MspPostInit+0xa4>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d13b      	bne.n	800194e <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	613b      	str	r3, [r7, #16]
 80018da:	4b20      	ldr	r3, [pc, #128]	@ (800195c <HAL_TIM_MspPostInit+0xa8>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018de:	4a1f      	ldr	r2, [pc, #124]	@ (800195c <HAL_TIM_MspPostInit+0xa8>)
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018e6:	4b1d      	ldr	r3, [pc, #116]	@ (800195c <HAL_TIM_MspPostInit+0xa8>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	613b      	str	r3, [r7, #16]
 80018f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	4b19      	ldr	r3, [pc, #100]	@ (800195c <HAL_TIM_MspPostInit+0xa8>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fa:	4a18      	ldr	r2, [pc, #96]	@ (800195c <HAL_TIM_MspPostInit+0xa8>)
 80018fc:	f043 0302 	orr.w	r3, r3, #2
 8001900:	6313      	str	r3, [r2, #48]	@ 0x30
 8001902:	4b16      	ldr	r3, [pc, #88]	@ (800195c <HAL_TIM_MspPostInit+0xa8>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800190e:	23c0      	movs	r3, #192	@ 0xc0
 8001910:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001912:	2302      	movs	r3, #2
 8001914:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001916:	2300      	movs	r3, #0
 8001918:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191a:	2300      	movs	r3, #0
 800191c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800191e:	2302      	movs	r3, #2
 8001920:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001922:	f107 0314 	add.w	r3, r7, #20
 8001926:	4619      	mov	r1, r3
 8001928:	480d      	ldr	r0, [pc, #52]	@ (8001960 <HAL_TIM_MspPostInit+0xac>)
 800192a:	f000 fab7 	bl	8001e9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800192e:	2303      	movs	r3, #3
 8001930:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001932:	2302      	movs	r3, #2
 8001934:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193a:	2300      	movs	r3, #0
 800193c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800193e:	2302      	movs	r3, #2
 8001940:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001942:	f107 0314 	add.w	r3, r7, #20
 8001946:	4619      	mov	r1, r3
 8001948:	4806      	ldr	r0, [pc, #24]	@ (8001964 <HAL_TIM_MspPostInit+0xb0>)
 800194a:	f000 faa7 	bl	8001e9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800194e:	bf00      	nop
 8001950:	3728      	adds	r7, #40	@ 0x28
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40000400 	.word	0x40000400
 800195c:	40023800 	.word	0x40023800
 8001960:	40020000 	.word	0x40020000
 8001964:	40020400 	.word	0x40020400

08001968 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b08e      	sub	sp, #56	@ 0x38
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001970:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a4c      	ldr	r2, [pc, #304]	@ (8001ab8 <HAL_UART_MspInit+0x150>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d12d      	bne.n	80019e6 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	623b      	str	r3, [r7, #32]
 800198e:	4b4b      	ldr	r3, [pc, #300]	@ (8001abc <HAL_UART_MspInit+0x154>)
 8001990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001992:	4a4a      	ldr	r2, [pc, #296]	@ (8001abc <HAL_UART_MspInit+0x154>)
 8001994:	f043 0310 	orr.w	r3, r3, #16
 8001998:	6453      	str	r3, [r2, #68]	@ 0x44
 800199a:	4b48      	ldr	r3, [pc, #288]	@ (8001abc <HAL_UART_MspInit+0x154>)
 800199c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800199e:	f003 0310 	and.w	r3, r3, #16
 80019a2:	623b      	str	r3, [r7, #32]
 80019a4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	61fb      	str	r3, [r7, #28]
 80019aa:	4b44      	ldr	r3, [pc, #272]	@ (8001abc <HAL_UART_MspInit+0x154>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ae:	4a43      	ldr	r2, [pc, #268]	@ (8001abc <HAL_UART_MspInit+0x154>)
 80019b0:	f043 0301 	orr.w	r3, r3, #1
 80019b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019b6:	4b41      	ldr	r3, [pc, #260]	@ (8001abc <HAL_UART_MspInit+0x154>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	61fb      	str	r3, [r7, #28]
 80019c0:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80019c2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80019c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c8:	2302      	movs	r3, #2
 80019ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d0:	2303      	movs	r3, #3
 80019d2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019d4:	2307      	movs	r3, #7
 80019d6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019dc:	4619      	mov	r1, r3
 80019de:	4838      	ldr	r0, [pc, #224]	@ (8001ac0 <HAL_UART_MspInit+0x158>)
 80019e0:	f000 fa5c 	bl	8001e9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80019e4:	e063      	b.n	8001aae <HAL_UART_MspInit+0x146>
  else if(huart->Instance==USART2)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a36      	ldr	r2, [pc, #216]	@ (8001ac4 <HAL_UART_MspInit+0x15c>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d12c      	bne.n	8001a4a <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 80019f0:	2300      	movs	r3, #0
 80019f2:	61bb      	str	r3, [r7, #24]
 80019f4:	4b31      	ldr	r3, [pc, #196]	@ (8001abc <HAL_UART_MspInit+0x154>)
 80019f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f8:	4a30      	ldr	r2, [pc, #192]	@ (8001abc <HAL_UART_MspInit+0x154>)
 80019fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a00:	4b2e      	ldr	r3, [pc, #184]	@ (8001abc <HAL_UART_MspInit+0x154>)
 8001a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a08:	61bb      	str	r3, [r7, #24]
 8001a0a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]
 8001a10:	4b2a      	ldr	r3, [pc, #168]	@ (8001abc <HAL_UART_MspInit+0x154>)
 8001a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a14:	4a29      	ldr	r2, [pc, #164]	@ (8001abc <HAL_UART_MspInit+0x154>)
 8001a16:	f043 0301 	orr.w	r3, r3, #1
 8001a1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a1c:	4b27      	ldr	r3, [pc, #156]	@ (8001abc <HAL_UART_MspInit+0x154>)
 8001a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a20:	f003 0301 	and.w	r3, r3, #1
 8001a24:	617b      	str	r3, [r7, #20]
 8001a26:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a28:	230c      	movs	r3, #12
 8001a2a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a34:	2303      	movs	r3, #3
 8001a36:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a38:	2307      	movs	r3, #7
 8001a3a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a40:	4619      	mov	r1, r3
 8001a42:	481f      	ldr	r0, [pc, #124]	@ (8001ac0 <HAL_UART_MspInit+0x158>)
 8001a44:	f000 fa2a 	bl	8001e9c <HAL_GPIO_Init>
}
 8001a48:	e031      	b.n	8001aae <HAL_UART_MspInit+0x146>
  else if(huart->Instance==USART6)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a1e      	ldr	r2, [pc, #120]	@ (8001ac8 <HAL_UART_MspInit+0x160>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d12c      	bne.n	8001aae <HAL_UART_MspInit+0x146>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001a54:	2300      	movs	r3, #0
 8001a56:	613b      	str	r3, [r7, #16]
 8001a58:	4b18      	ldr	r3, [pc, #96]	@ (8001abc <HAL_UART_MspInit+0x154>)
 8001a5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a5c:	4a17      	ldr	r2, [pc, #92]	@ (8001abc <HAL_UART_MspInit+0x154>)
 8001a5e:	f043 0320 	orr.w	r3, r3, #32
 8001a62:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a64:	4b15      	ldr	r3, [pc, #84]	@ (8001abc <HAL_UART_MspInit+0x154>)
 8001a66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a68:	f003 0320 	and.w	r3, r3, #32
 8001a6c:	613b      	str	r3, [r7, #16]
 8001a6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a70:	2300      	movs	r3, #0
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	4b11      	ldr	r3, [pc, #68]	@ (8001abc <HAL_UART_MspInit+0x154>)
 8001a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a78:	4a10      	ldr	r2, [pc, #64]	@ (8001abc <HAL_UART_MspInit+0x154>)
 8001a7a:	f043 0301 	orr.w	r3, r3, #1
 8001a7e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a80:	4b0e      	ldr	r3, [pc, #56]	@ (8001abc <HAL_UART_MspInit+0x154>)
 8001a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a84:	f003 0301 	and.w	r3, r3, #1
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001a8c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001a90:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a92:	2302      	movs	r3, #2
 8001a94:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a96:	2300      	movs	r3, #0
 8001a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001a9e:	2308      	movs	r3, #8
 8001aa0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4805      	ldr	r0, [pc, #20]	@ (8001ac0 <HAL_UART_MspInit+0x158>)
 8001aaa:	f000 f9f7 	bl	8001e9c <HAL_GPIO_Init>
}
 8001aae:	bf00      	nop
 8001ab0:	3738      	adds	r7, #56	@ 0x38
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	40011000 	.word	0x40011000
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	40020000 	.word	0x40020000
 8001ac4:	40004400 	.word	0x40004400
 8001ac8:	40011400 	.word	0x40011400

08001acc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ad0:	bf00      	nop
 8001ad2:	e7fd      	b.n	8001ad0 <NMI_Handler+0x4>

08001ad4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ad8:	bf00      	nop
 8001ada:	e7fd      	b.n	8001ad8 <HardFault_Handler+0x4>

08001adc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ae0:	bf00      	nop
 8001ae2:	e7fd      	b.n	8001ae0 <MemManage_Handler+0x4>

08001ae4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ae8:	bf00      	nop
 8001aea:	e7fd      	b.n	8001ae8 <BusFault_Handler+0x4>

08001aec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001af0:	bf00      	nop
 8001af2:	e7fd      	b.n	8001af0 <UsageFault_Handler+0x4>

08001af4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001af8:	bf00      	nop
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr

08001b02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b02:	b480      	push	{r7}
 8001b04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b22:	f000 f891 	bl	8001c48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b26:	bf00      	nop
 8001b28:	bd80      	pop	{r7, pc}
	...

08001b2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b30:	4b06      	ldr	r3, [pc, #24]	@ (8001b4c <SystemInit+0x20>)
 8001b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b36:	4a05      	ldr	r2, [pc, #20]	@ (8001b4c <SystemInit+0x20>)
 8001b38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b40:	bf00      	nop
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	e000ed00 	.word	0xe000ed00

08001b50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b50:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b88 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b54:	f7ff ffea 	bl	8001b2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b58:	480c      	ldr	r0, [pc, #48]	@ (8001b8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b5a:	490d      	ldr	r1, [pc, #52]	@ (8001b90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b5c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b60:	e002      	b.n	8001b68 <LoopCopyDataInit>

08001b62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b66:	3304      	adds	r3, #4

08001b68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b6c:	d3f9      	bcc.n	8001b62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b6e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b70:	4c0a      	ldr	r4, [pc, #40]	@ (8001b9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b74:	e001      	b.n	8001b7a <LoopFillZerobss>

08001b76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b78:	3204      	adds	r2, #4

08001b7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b7c:	d3fb      	bcc.n	8001b76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b7e:	f002 fec7 	bl	8004910 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b82:	f7fe ffff 	bl	8000b84 <main>
  bx  lr    
 8001b86:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b90:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001b94:	08004bb0 	.word	0x08004bb0
  ldr r2, =_sbss
 8001b98:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001b9c:	2000043c 	.word	0x2000043c

08001ba0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ba0:	e7fe      	b.n	8001ba0 <ADC_IRQHandler>
	...

08001ba4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ba8:	4b0e      	ldr	r3, [pc, #56]	@ (8001be4 <HAL_Init+0x40>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a0d      	ldr	r2, [pc, #52]	@ (8001be4 <HAL_Init+0x40>)
 8001bae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bb4:	4b0b      	ldr	r3, [pc, #44]	@ (8001be4 <HAL_Init+0x40>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a0a      	ldr	r2, [pc, #40]	@ (8001be4 <HAL_Init+0x40>)
 8001bba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bc0:	4b08      	ldr	r3, [pc, #32]	@ (8001be4 <HAL_Init+0x40>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a07      	ldr	r2, [pc, #28]	@ (8001be4 <HAL_Init+0x40>)
 8001bc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bcc:	2003      	movs	r0, #3
 8001bce:	f000 f931 	bl	8001e34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bd2:	200f      	movs	r0, #15
 8001bd4:	f000 f808 	bl	8001be8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bd8:	f7ff fdda 	bl	8001790 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40023c00 	.word	0x40023c00

08001be8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bf0:	4b12      	ldr	r3, [pc, #72]	@ (8001c3c <HAL_InitTick+0x54>)
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	4b12      	ldr	r3, [pc, #72]	@ (8001c40 <HAL_InitTick+0x58>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c06:	4618      	mov	r0, r3
 8001c08:	f000 f93b 	bl	8001e82 <HAL_SYSTICK_Config>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e00e      	b.n	8001c34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b0f      	cmp	r3, #15
 8001c1a:	d80a      	bhi.n	8001c32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	6879      	ldr	r1, [r7, #4]
 8001c20:	f04f 30ff 	mov.w	r0, #4294967295
 8001c24:	f000 f911 	bl	8001e4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c28:	4a06      	ldr	r2, [pc, #24]	@ (8001c44 <HAL_InitTick+0x5c>)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	e000      	b.n	8001c34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	2000002c 	.word	0x2000002c
 8001c40:	20000034 	.word	0x20000034
 8001c44:	20000030 	.word	0x20000030

08001c48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c4c:	4b06      	ldr	r3, [pc, #24]	@ (8001c68 <HAL_IncTick+0x20>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	461a      	mov	r2, r3
 8001c52:	4b06      	ldr	r3, [pc, #24]	@ (8001c6c <HAL_IncTick+0x24>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4413      	add	r3, r2
 8001c58:	4a04      	ldr	r2, [pc, #16]	@ (8001c6c <HAL_IncTick+0x24>)
 8001c5a:	6013      	str	r3, [r2, #0]
}
 8001c5c:	bf00      	nop
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	20000034 	.word	0x20000034
 8001c6c:	20000300 	.word	0x20000300

08001c70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  return uwTick;
 8001c74:	4b03      	ldr	r3, [pc, #12]	@ (8001c84 <HAL_GetTick+0x14>)
 8001c76:	681b      	ldr	r3, [r3, #0]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	20000300 	.word	0x20000300

08001c88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c90:	f7ff ffee 	bl	8001c70 <HAL_GetTick>
 8001c94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca0:	d005      	beq.n	8001cae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8001ccc <HAL_Delay+0x44>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	4413      	add	r3, r2
 8001cac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cae:	bf00      	nop
 8001cb0:	f7ff ffde 	bl	8001c70 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d8f7      	bhi.n	8001cb0 <HAL_Delay+0x28>
  {
  }
}
 8001cc0:	bf00      	nop
 8001cc2:	bf00      	nop
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	20000034 	.word	0x20000034

08001cd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8001d14 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ce6:	68ba      	ldr	r2, [r7, #8]
 8001ce8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cec:	4013      	ands	r3, r2
 8001cee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cf8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d02:	4a04      	ldr	r2, [pc, #16]	@ (8001d14 <__NVIC_SetPriorityGrouping+0x44>)
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	60d3      	str	r3, [r2, #12]
}
 8001d08:	bf00      	nop
 8001d0a:	3714      	adds	r7, #20
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	e000ed00 	.word	0xe000ed00

08001d18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d1c:	4b04      	ldr	r3, [pc, #16]	@ (8001d30 <__NVIC_GetPriorityGrouping+0x18>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	0a1b      	lsrs	r3, r3, #8
 8001d22:	f003 0307 	and.w	r3, r3, #7
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	6039      	str	r1, [r7, #0]
 8001d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	db0a      	blt.n	8001d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	b2da      	uxtb	r2, r3
 8001d4c:	490c      	ldr	r1, [pc, #48]	@ (8001d80 <__NVIC_SetPriority+0x4c>)
 8001d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d52:	0112      	lsls	r2, r2, #4
 8001d54:	b2d2      	uxtb	r2, r2
 8001d56:	440b      	add	r3, r1
 8001d58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d5c:	e00a      	b.n	8001d74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	b2da      	uxtb	r2, r3
 8001d62:	4908      	ldr	r1, [pc, #32]	@ (8001d84 <__NVIC_SetPriority+0x50>)
 8001d64:	79fb      	ldrb	r3, [r7, #7]
 8001d66:	f003 030f 	and.w	r3, r3, #15
 8001d6a:	3b04      	subs	r3, #4
 8001d6c:	0112      	lsls	r2, r2, #4
 8001d6e:	b2d2      	uxtb	r2, r2
 8001d70:	440b      	add	r3, r1
 8001d72:	761a      	strb	r2, [r3, #24]
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	e000e100 	.word	0xe000e100
 8001d84:	e000ed00 	.word	0xe000ed00

08001d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b089      	sub	sp, #36	@ 0x24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	f1c3 0307 	rsb	r3, r3, #7
 8001da2:	2b04      	cmp	r3, #4
 8001da4:	bf28      	it	cs
 8001da6:	2304      	movcs	r3, #4
 8001da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	3304      	adds	r3, #4
 8001dae:	2b06      	cmp	r3, #6
 8001db0:	d902      	bls.n	8001db8 <NVIC_EncodePriority+0x30>
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	3b03      	subs	r3, #3
 8001db6:	e000      	b.n	8001dba <NVIC_EncodePriority+0x32>
 8001db8:	2300      	movs	r3, #0
 8001dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	43da      	mvns	r2, r3
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	401a      	ands	r2, r3
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dda:	43d9      	mvns	r1, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de0:	4313      	orrs	r3, r2
         );
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3724      	adds	r7, #36	@ 0x24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
	...

08001df0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e00:	d301      	bcc.n	8001e06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e02:	2301      	movs	r3, #1
 8001e04:	e00f      	b.n	8001e26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e06:	4a0a      	ldr	r2, [pc, #40]	@ (8001e30 <SysTick_Config+0x40>)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e0e:	210f      	movs	r1, #15
 8001e10:	f04f 30ff 	mov.w	r0, #4294967295
 8001e14:	f7ff ff8e 	bl	8001d34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e18:	4b05      	ldr	r3, [pc, #20]	@ (8001e30 <SysTick_Config+0x40>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e1e:	4b04      	ldr	r3, [pc, #16]	@ (8001e30 <SysTick_Config+0x40>)
 8001e20:	2207      	movs	r2, #7
 8001e22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	e000e010 	.word	0xe000e010

08001e34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f7ff ff47 	bl	8001cd0 <__NVIC_SetPriorityGrouping>
}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b086      	sub	sp, #24
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	4603      	mov	r3, r0
 8001e52:	60b9      	str	r1, [r7, #8]
 8001e54:	607a      	str	r2, [r7, #4]
 8001e56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e5c:	f7ff ff5c 	bl	8001d18 <__NVIC_GetPriorityGrouping>
 8001e60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	68b9      	ldr	r1, [r7, #8]
 8001e66:	6978      	ldr	r0, [r7, #20]
 8001e68:	f7ff ff8e 	bl	8001d88 <NVIC_EncodePriority>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e72:	4611      	mov	r1, r2
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff ff5d 	bl	8001d34 <__NVIC_SetPriority>
}
 8001e7a:	bf00      	nop
 8001e7c:	3718      	adds	r7, #24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b082      	sub	sp, #8
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7ff ffb0 	bl	8001df0 <SysTick_Config>
 8001e90:	4603      	mov	r3, r0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
	...

08001e9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b089      	sub	sp, #36	@ 0x24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61fb      	str	r3, [r7, #28]
 8001eb6:	e159      	b.n	800216c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001eb8:	2201      	movs	r2, #1
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	697a      	ldr	r2, [r7, #20]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	f040 8148 	bne.w	8002166 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f003 0303 	and.w	r3, r3, #3
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d005      	beq.n	8001eee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d130      	bne.n	8001f50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	2203      	movs	r2, #3
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	43db      	mvns	r3, r3
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	4013      	ands	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	68da      	ldr	r2, [r3, #12]
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f24:	2201      	movs	r2, #1
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	4013      	ands	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	091b      	lsrs	r3, r3, #4
 8001f3a:	f003 0201 	and.w	r2, r3, #1
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f003 0303 	and.w	r3, r3, #3
 8001f58:	2b03      	cmp	r3, #3
 8001f5a:	d017      	beq.n	8001f8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	2203      	movs	r2, #3
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	4013      	ands	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f003 0303 	and.w	r3, r3, #3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d123      	bne.n	8001fe0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	08da      	lsrs	r2, r3, #3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3208      	adds	r2, #8
 8001fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	f003 0307 	and.w	r3, r3, #7
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	220f      	movs	r2, #15
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	691a      	ldr	r2, [r3, #16]
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	f003 0307 	and.w	r3, r3, #7
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	08da      	lsrs	r2, r3, #3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	3208      	adds	r2, #8
 8001fda:	69b9      	ldr	r1, [r7, #24]
 8001fdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	2203      	movs	r2, #3
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f003 0203 	and.w	r2, r3, #3
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4313      	orrs	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800201c:	2b00      	cmp	r3, #0
 800201e:	f000 80a2 	beq.w	8002166 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	60fb      	str	r3, [r7, #12]
 8002026:	4b57      	ldr	r3, [pc, #348]	@ (8002184 <HAL_GPIO_Init+0x2e8>)
 8002028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800202a:	4a56      	ldr	r2, [pc, #344]	@ (8002184 <HAL_GPIO_Init+0x2e8>)
 800202c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002030:	6453      	str	r3, [r2, #68]	@ 0x44
 8002032:	4b54      	ldr	r3, [pc, #336]	@ (8002184 <HAL_GPIO_Init+0x2e8>)
 8002034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002036:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800203e:	4a52      	ldr	r2, [pc, #328]	@ (8002188 <HAL_GPIO_Init+0x2ec>)
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	089b      	lsrs	r3, r3, #2
 8002044:	3302      	adds	r3, #2
 8002046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800204a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	f003 0303 	and.w	r3, r3, #3
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	220f      	movs	r2, #15
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	43db      	mvns	r3, r3
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	4013      	ands	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a49      	ldr	r2, [pc, #292]	@ (800218c <HAL_GPIO_Init+0x2f0>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d019      	beq.n	800209e <HAL_GPIO_Init+0x202>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a48      	ldr	r2, [pc, #288]	@ (8002190 <HAL_GPIO_Init+0x2f4>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d013      	beq.n	800209a <HAL_GPIO_Init+0x1fe>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a47      	ldr	r2, [pc, #284]	@ (8002194 <HAL_GPIO_Init+0x2f8>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d00d      	beq.n	8002096 <HAL_GPIO_Init+0x1fa>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a46      	ldr	r2, [pc, #280]	@ (8002198 <HAL_GPIO_Init+0x2fc>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d007      	beq.n	8002092 <HAL_GPIO_Init+0x1f6>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a45      	ldr	r2, [pc, #276]	@ (800219c <HAL_GPIO_Init+0x300>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d101      	bne.n	800208e <HAL_GPIO_Init+0x1f2>
 800208a:	2304      	movs	r3, #4
 800208c:	e008      	b.n	80020a0 <HAL_GPIO_Init+0x204>
 800208e:	2307      	movs	r3, #7
 8002090:	e006      	b.n	80020a0 <HAL_GPIO_Init+0x204>
 8002092:	2303      	movs	r3, #3
 8002094:	e004      	b.n	80020a0 <HAL_GPIO_Init+0x204>
 8002096:	2302      	movs	r3, #2
 8002098:	e002      	b.n	80020a0 <HAL_GPIO_Init+0x204>
 800209a:	2301      	movs	r3, #1
 800209c:	e000      	b.n	80020a0 <HAL_GPIO_Init+0x204>
 800209e:	2300      	movs	r3, #0
 80020a0:	69fa      	ldr	r2, [r7, #28]
 80020a2:	f002 0203 	and.w	r2, r2, #3
 80020a6:	0092      	lsls	r2, r2, #2
 80020a8:	4093      	lsls	r3, r2
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020b0:	4935      	ldr	r1, [pc, #212]	@ (8002188 <HAL_GPIO_Init+0x2ec>)
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	089b      	lsrs	r3, r3, #2
 80020b6:	3302      	adds	r3, #2
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020be:	4b38      	ldr	r3, [pc, #224]	@ (80021a0 <HAL_GPIO_Init+0x304>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	43db      	mvns	r3, r3
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	4013      	ands	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d003      	beq.n	80020e2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	4313      	orrs	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020e2:	4a2f      	ldr	r2, [pc, #188]	@ (80021a0 <HAL_GPIO_Init+0x304>)
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020e8:	4b2d      	ldr	r3, [pc, #180]	@ (80021a0 <HAL_GPIO_Init+0x304>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	43db      	mvns	r3, r3
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	4013      	ands	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d003      	beq.n	800210c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	4313      	orrs	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800210c:	4a24      	ldr	r2, [pc, #144]	@ (80021a0 <HAL_GPIO_Init+0x304>)
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002112:	4b23      	ldr	r3, [pc, #140]	@ (80021a0 <HAL_GPIO_Init+0x304>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	43db      	mvns	r3, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4013      	ands	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	4313      	orrs	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002136:	4a1a      	ldr	r2, [pc, #104]	@ (80021a0 <HAL_GPIO_Init+0x304>)
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800213c:	4b18      	ldr	r3, [pc, #96]	@ (80021a0 <HAL_GPIO_Init+0x304>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	43db      	mvns	r3, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4013      	ands	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d003      	beq.n	8002160 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	4313      	orrs	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002160:	4a0f      	ldr	r2, [pc, #60]	@ (80021a0 <HAL_GPIO_Init+0x304>)
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	3301      	adds	r3, #1
 800216a:	61fb      	str	r3, [r7, #28]
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	2b0f      	cmp	r3, #15
 8002170:	f67f aea2 	bls.w	8001eb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002174:	bf00      	nop
 8002176:	bf00      	nop
 8002178:	3724      	adds	r7, #36	@ 0x24
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	40023800 	.word	0x40023800
 8002188:	40013800 	.word	0x40013800
 800218c:	40020000 	.word	0x40020000
 8002190:	40020400 	.word	0x40020400
 8002194:	40020800 	.word	0x40020800
 8002198:	40020c00 	.word	0x40020c00
 800219c:	40021000 	.word	0x40021000
 80021a0:	40013c00 	.word	0x40013c00

080021a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e12b      	b.n	800240e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d106      	bne.n	80021d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7ff fb08 	bl	80017e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2224      	movs	r2, #36	@ 0x24
 80021d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f022 0201 	bic.w	r2, r2, #1
 80021e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80021f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002206:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002208:	f001 fc20 	bl	8003a4c <HAL_RCC_GetPCLK1Freq>
 800220c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	4a81      	ldr	r2, [pc, #516]	@ (8002418 <HAL_I2C_Init+0x274>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d807      	bhi.n	8002228 <HAL_I2C_Init+0x84>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	4a80      	ldr	r2, [pc, #512]	@ (800241c <HAL_I2C_Init+0x278>)
 800221c:	4293      	cmp	r3, r2
 800221e:	bf94      	ite	ls
 8002220:	2301      	movls	r3, #1
 8002222:	2300      	movhi	r3, #0
 8002224:	b2db      	uxtb	r3, r3
 8002226:	e006      	b.n	8002236 <HAL_I2C_Init+0x92>
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	4a7d      	ldr	r2, [pc, #500]	@ (8002420 <HAL_I2C_Init+0x27c>)
 800222c:	4293      	cmp	r3, r2
 800222e:	bf94      	ite	ls
 8002230:	2301      	movls	r3, #1
 8002232:	2300      	movhi	r3, #0
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e0e7      	b.n	800240e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	4a78      	ldr	r2, [pc, #480]	@ (8002424 <HAL_I2C_Init+0x280>)
 8002242:	fba2 2303 	umull	r2, r3, r2, r3
 8002246:	0c9b      	lsrs	r3, r3, #18
 8002248:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	68ba      	ldr	r2, [r7, #8]
 800225a:	430a      	orrs	r2, r1
 800225c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	6a1b      	ldr	r3, [r3, #32]
 8002264:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	4a6a      	ldr	r2, [pc, #424]	@ (8002418 <HAL_I2C_Init+0x274>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d802      	bhi.n	8002278 <HAL_I2C_Init+0xd4>
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	3301      	adds	r3, #1
 8002276:	e009      	b.n	800228c <HAL_I2C_Init+0xe8>
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800227e:	fb02 f303 	mul.w	r3, r2, r3
 8002282:	4a69      	ldr	r2, [pc, #420]	@ (8002428 <HAL_I2C_Init+0x284>)
 8002284:	fba2 2303 	umull	r2, r3, r2, r3
 8002288:	099b      	lsrs	r3, r3, #6
 800228a:	3301      	adds	r3, #1
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	6812      	ldr	r2, [r2, #0]
 8002290:	430b      	orrs	r3, r1
 8002292:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	69db      	ldr	r3, [r3, #28]
 800229a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800229e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	495c      	ldr	r1, [pc, #368]	@ (8002418 <HAL_I2C_Init+0x274>)
 80022a8:	428b      	cmp	r3, r1
 80022aa:	d819      	bhi.n	80022e0 <HAL_I2C_Init+0x13c>
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	1e59      	subs	r1, r3, #1
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80022ba:	1c59      	adds	r1, r3, #1
 80022bc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80022c0:	400b      	ands	r3, r1
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d00a      	beq.n	80022dc <HAL_I2C_Init+0x138>
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	1e59      	subs	r1, r3, #1
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80022d4:	3301      	adds	r3, #1
 80022d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022da:	e051      	b.n	8002380 <HAL_I2C_Init+0x1dc>
 80022dc:	2304      	movs	r3, #4
 80022de:	e04f      	b.n	8002380 <HAL_I2C_Init+0x1dc>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d111      	bne.n	800230c <HAL_I2C_Init+0x168>
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	1e58      	subs	r0, r3, #1
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6859      	ldr	r1, [r3, #4]
 80022f0:	460b      	mov	r3, r1
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	440b      	add	r3, r1
 80022f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80022fa:	3301      	adds	r3, #1
 80022fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002300:	2b00      	cmp	r3, #0
 8002302:	bf0c      	ite	eq
 8002304:	2301      	moveq	r3, #1
 8002306:	2300      	movne	r3, #0
 8002308:	b2db      	uxtb	r3, r3
 800230a:	e012      	b.n	8002332 <HAL_I2C_Init+0x18e>
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	1e58      	subs	r0, r3, #1
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6859      	ldr	r1, [r3, #4]
 8002314:	460b      	mov	r3, r1
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	440b      	add	r3, r1
 800231a:	0099      	lsls	r1, r3, #2
 800231c:	440b      	add	r3, r1
 800231e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002322:	3301      	adds	r3, #1
 8002324:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002328:	2b00      	cmp	r3, #0
 800232a:	bf0c      	ite	eq
 800232c:	2301      	moveq	r3, #1
 800232e:	2300      	movne	r3, #0
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <HAL_I2C_Init+0x196>
 8002336:	2301      	movs	r3, #1
 8002338:	e022      	b.n	8002380 <HAL_I2C_Init+0x1dc>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d10e      	bne.n	8002360 <HAL_I2C_Init+0x1bc>
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	1e58      	subs	r0, r3, #1
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6859      	ldr	r1, [r3, #4]
 800234a:	460b      	mov	r3, r1
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	440b      	add	r3, r1
 8002350:	fbb0 f3f3 	udiv	r3, r0, r3
 8002354:	3301      	adds	r3, #1
 8002356:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800235a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800235e:	e00f      	b.n	8002380 <HAL_I2C_Init+0x1dc>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	1e58      	subs	r0, r3, #1
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6859      	ldr	r1, [r3, #4]
 8002368:	460b      	mov	r3, r1
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	440b      	add	r3, r1
 800236e:	0099      	lsls	r1, r3, #2
 8002370:	440b      	add	r3, r1
 8002372:	fbb0 f3f3 	udiv	r3, r0, r3
 8002376:	3301      	adds	r3, #1
 8002378:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800237c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002380:	6879      	ldr	r1, [r7, #4]
 8002382:	6809      	ldr	r1, [r1, #0]
 8002384:	4313      	orrs	r3, r2
 8002386:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	69da      	ldr	r2, [r3, #28]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a1b      	ldr	r3, [r3, #32]
 800239a:	431a      	orrs	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	430a      	orrs	r2, r1
 80023a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80023ae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	6911      	ldr	r1, [r2, #16]
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	68d2      	ldr	r2, [r2, #12]
 80023ba:	4311      	orrs	r1, r2
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	6812      	ldr	r2, [r2, #0]
 80023c0:	430b      	orrs	r3, r1
 80023c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	695a      	ldr	r2, [r3, #20]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	431a      	orrs	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	430a      	orrs	r2, r1
 80023de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f042 0201 	orr.w	r2, r2, #1
 80023ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2220      	movs	r2, #32
 80023fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	000186a0 	.word	0x000186a0
 800241c:	001e847f 	.word	0x001e847f
 8002420:	003d08ff 	.word	0x003d08ff
 8002424:	431bde83 	.word	0x431bde83
 8002428:	10624dd3 	.word	0x10624dd3

0800242c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b088      	sub	sp, #32
 8002430:	af02      	add	r7, sp, #8
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	4608      	mov	r0, r1
 8002436:	4611      	mov	r1, r2
 8002438:	461a      	mov	r2, r3
 800243a:	4603      	mov	r3, r0
 800243c:	817b      	strh	r3, [r7, #10]
 800243e:	460b      	mov	r3, r1
 8002440:	813b      	strh	r3, [r7, #8]
 8002442:	4613      	mov	r3, r2
 8002444:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002446:	f7ff fc13 	bl	8001c70 <HAL_GetTick>
 800244a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002452:	b2db      	uxtb	r3, r3
 8002454:	2b20      	cmp	r3, #32
 8002456:	f040 80d9 	bne.w	800260c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	9300      	str	r3, [sp, #0]
 800245e:	2319      	movs	r3, #25
 8002460:	2201      	movs	r2, #1
 8002462:	496d      	ldr	r1, [pc, #436]	@ (8002618 <HAL_I2C_Mem_Write+0x1ec>)
 8002464:	68f8      	ldr	r0, [r7, #12]
 8002466:	f000 fc8b 	bl	8002d80 <I2C_WaitOnFlagUntilTimeout>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002470:	2302      	movs	r3, #2
 8002472:	e0cc      	b.n	800260e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800247a:	2b01      	cmp	r3, #1
 800247c:	d101      	bne.n	8002482 <HAL_I2C_Mem_Write+0x56>
 800247e:	2302      	movs	r3, #2
 8002480:	e0c5      	b.n	800260e <HAL_I2C_Mem_Write+0x1e2>
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2201      	movs	r2, #1
 8002486:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	2b01      	cmp	r3, #1
 8002496:	d007      	beq.n	80024a8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f042 0201 	orr.w	r2, r2, #1
 80024a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2221      	movs	r2, #33	@ 0x21
 80024bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2240      	movs	r2, #64	@ 0x40
 80024c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2200      	movs	r2, #0
 80024cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6a3a      	ldr	r2, [r7, #32]
 80024d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80024d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024de:	b29a      	uxth	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	4a4d      	ldr	r2, [pc, #308]	@ (800261c <HAL_I2C_Mem_Write+0x1f0>)
 80024e8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024ea:	88f8      	ldrh	r0, [r7, #6]
 80024ec:	893a      	ldrh	r2, [r7, #8]
 80024ee:	8979      	ldrh	r1, [r7, #10]
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	9301      	str	r3, [sp, #4]
 80024f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024f6:	9300      	str	r3, [sp, #0]
 80024f8:	4603      	mov	r3, r0
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f000 fac2 	bl	8002a84 <I2C_RequestMemoryWrite>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d052      	beq.n	80025ac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e081      	b.n	800260e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800250e:	68f8      	ldr	r0, [r7, #12]
 8002510:	f000 fd50 	bl	8002fb4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00d      	beq.n	8002536 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251e:	2b04      	cmp	r3, #4
 8002520:	d107      	bne.n	8002532 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002530:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e06b      	b.n	800260e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800253a:	781a      	ldrb	r2, [r3, #0]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002546:	1c5a      	adds	r2, r3, #1
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002550:	3b01      	subs	r3, #1
 8002552:	b29a      	uxth	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800255c:	b29b      	uxth	r3, r3
 800255e:	3b01      	subs	r3, #1
 8002560:	b29a      	uxth	r2, r3
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	695b      	ldr	r3, [r3, #20]
 800256c:	f003 0304 	and.w	r3, r3, #4
 8002570:	2b04      	cmp	r3, #4
 8002572:	d11b      	bne.n	80025ac <HAL_I2C_Mem_Write+0x180>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002578:	2b00      	cmp	r3, #0
 800257a:	d017      	beq.n	80025ac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002580:	781a      	ldrb	r2, [r3, #0]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800258c:	1c5a      	adds	r2, r3, #1
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002596:	3b01      	subs	r3, #1
 8002598:	b29a      	uxth	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	3b01      	subs	r3, #1
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d1aa      	bne.n	800250a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025b4:	697a      	ldr	r2, [r7, #20]
 80025b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80025b8:	68f8      	ldr	r0, [r7, #12]
 80025ba:	f000 fd43 	bl	8003044 <I2C_WaitOnBTFFlagUntilTimeout>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d00d      	beq.n	80025e0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c8:	2b04      	cmp	r3, #4
 80025ca:	d107      	bne.n	80025dc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025da:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e016      	b.n	800260e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2220      	movs	r2, #32
 80025f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002608:	2300      	movs	r3, #0
 800260a:	e000      	b.n	800260e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800260c:	2302      	movs	r3, #2
  }
}
 800260e:	4618      	mov	r0, r3
 8002610:	3718      	adds	r7, #24
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	00100002 	.word	0x00100002
 800261c:	ffff0000 	.word	0xffff0000

08002620 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b08c      	sub	sp, #48	@ 0x30
 8002624:	af02      	add	r7, sp, #8
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	4608      	mov	r0, r1
 800262a:	4611      	mov	r1, r2
 800262c:	461a      	mov	r2, r3
 800262e:	4603      	mov	r3, r0
 8002630:	817b      	strh	r3, [r7, #10]
 8002632:	460b      	mov	r3, r1
 8002634:	813b      	strh	r3, [r7, #8]
 8002636:	4613      	mov	r3, r2
 8002638:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800263a:	f7ff fb19 	bl	8001c70 <HAL_GetTick>
 800263e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002646:	b2db      	uxtb	r3, r3
 8002648:	2b20      	cmp	r3, #32
 800264a:	f040 8214 	bne.w	8002a76 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800264e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002650:	9300      	str	r3, [sp, #0]
 8002652:	2319      	movs	r3, #25
 8002654:	2201      	movs	r2, #1
 8002656:	497b      	ldr	r1, [pc, #492]	@ (8002844 <HAL_I2C_Mem_Read+0x224>)
 8002658:	68f8      	ldr	r0, [r7, #12]
 800265a:	f000 fb91 	bl	8002d80 <I2C_WaitOnFlagUntilTimeout>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002664:	2302      	movs	r3, #2
 8002666:	e207      	b.n	8002a78 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800266e:	2b01      	cmp	r3, #1
 8002670:	d101      	bne.n	8002676 <HAL_I2C_Mem_Read+0x56>
 8002672:	2302      	movs	r3, #2
 8002674:	e200      	b.n	8002a78 <HAL_I2C_Mem_Read+0x458>
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2201      	movs	r2, #1
 800267a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0301 	and.w	r3, r3, #1
 8002688:	2b01      	cmp	r3, #1
 800268a:	d007      	beq.n	800269c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f042 0201 	orr.w	r2, r2, #1
 800269a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2222      	movs	r2, #34	@ 0x22
 80026b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2240      	movs	r2, #64	@ 0x40
 80026b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2200      	movs	r2, #0
 80026c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80026c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80026cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	4a5b      	ldr	r2, [pc, #364]	@ (8002848 <HAL_I2C_Mem_Read+0x228>)
 80026dc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026de:	88f8      	ldrh	r0, [r7, #6]
 80026e0:	893a      	ldrh	r2, [r7, #8]
 80026e2:	8979      	ldrh	r1, [r7, #10]
 80026e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e6:	9301      	str	r3, [sp, #4]
 80026e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026ea:	9300      	str	r3, [sp, #0]
 80026ec:	4603      	mov	r3, r0
 80026ee:	68f8      	ldr	r0, [r7, #12]
 80026f0:	f000 fa5e 	bl	8002bb0 <I2C_RequestMemoryRead>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e1bc      	b.n	8002a78 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002702:	2b00      	cmp	r3, #0
 8002704:	d113      	bne.n	800272e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002706:	2300      	movs	r3, #0
 8002708:	623b      	str	r3, [r7, #32]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	695b      	ldr	r3, [r3, #20]
 8002710:	623b      	str	r3, [r7, #32]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	623b      	str	r3, [r7, #32]
 800271a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	e190      	b.n	8002a50 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002732:	2b01      	cmp	r3, #1
 8002734:	d11b      	bne.n	800276e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002744:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002746:	2300      	movs	r3, #0
 8002748:	61fb      	str	r3, [r7, #28]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	695b      	ldr	r3, [r3, #20]
 8002750:	61fb      	str	r3, [r7, #28]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	61fb      	str	r3, [r7, #28]
 800275a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	e170      	b.n	8002a50 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002772:	2b02      	cmp	r3, #2
 8002774:	d11b      	bne.n	80027ae <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002784:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002794:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002796:	2300      	movs	r3, #0
 8002798:	61bb      	str	r3, [r7, #24]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	695b      	ldr	r3, [r3, #20]
 80027a0:	61bb      	str	r3, [r7, #24]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	61bb      	str	r3, [r7, #24]
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	e150      	b.n	8002a50 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027ae:	2300      	movs	r3, #0
 80027b0:	617b      	str	r3, [r7, #20]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	695b      	ldr	r3, [r3, #20]
 80027b8:	617b      	str	r3, [r7, #20]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	617b      	str	r3, [r7, #20]
 80027c2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80027c4:	e144      	b.n	8002a50 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027ca:	2b03      	cmp	r3, #3
 80027cc:	f200 80f1 	bhi.w	80029b2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d123      	bne.n	8002820 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027da:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80027dc:	68f8      	ldr	r0, [r7, #12]
 80027de:	f000 fc79 	bl	80030d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e145      	b.n	8002a78 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	691a      	ldr	r2, [r3, #16]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f6:	b2d2      	uxtb	r2, r2
 80027f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002808:	3b01      	subs	r3, #1
 800280a:	b29a      	uxth	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002814:	b29b      	uxth	r3, r3
 8002816:	3b01      	subs	r3, #1
 8002818:	b29a      	uxth	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800281e:	e117      	b.n	8002a50 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002824:	2b02      	cmp	r3, #2
 8002826:	d14e      	bne.n	80028c6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800282a:	9300      	str	r3, [sp, #0]
 800282c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800282e:	2200      	movs	r2, #0
 8002830:	4906      	ldr	r1, [pc, #24]	@ (800284c <HAL_I2C_Mem_Read+0x22c>)
 8002832:	68f8      	ldr	r0, [r7, #12]
 8002834:	f000 faa4 	bl	8002d80 <I2C_WaitOnFlagUntilTimeout>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d008      	beq.n	8002850 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e11a      	b.n	8002a78 <HAL_I2C_Mem_Read+0x458>
 8002842:	bf00      	nop
 8002844:	00100002 	.word	0x00100002
 8002848:	ffff0000 	.word	0xffff0000
 800284c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800285e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	691a      	ldr	r2, [r3, #16]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800286a:	b2d2      	uxtb	r2, r2
 800286c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002872:	1c5a      	adds	r2, r3, #1
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800287c:	3b01      	subs	r3, #1
 800287e:	b29a      	uxth	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002888:	b29b      	uxth	r3, r3
 800288a:	3b01      	subs	r3, #1
 800288c:	b29a      	uxth	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	691a      	ldr	r2, [r3, #16]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800289c:	b2d2      	uxtb	r2, r2
 800289e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a4:	1c5a      	adds	r2, r3, #1
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ae:	3b01      	subs	r3, #1
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	3b01      	subs	r3, #1
 80028be:	b29a      	uxth	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80028c4:	e0c4      	b.n	8002a50 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c8:	9300      	str	r3, [sp, #0]
 80028ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028cc:	2200      	movs	r2, #0
 80028ce:	496c      	ldr	r1, [pc, #432]	@ (8002a80 <HAL_I2C_Mem_Read+0x460>)
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f000 fa55 	bl	8002d80 <I2C_WaitOnFlagUntilTimeout>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e0cb      	b.n	8002a78 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	691a      	ldr	r2, [r3, #16]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028fa:	b2d2      	uxtb	r2, r2
 80028fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002902:	1c5a      	adds	r2, r3, #1
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800290c:	3b01      	subs	r3, #1
 800290e:	b29a      	uxth	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002918:	b29b      	uxth	r3, r3
 800291a:	3b01      	subs	r3, #1
 800291c:	b29a      	uxth	r2, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002924:	9300      	str	r3, [sp, #0]
 8002926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002928:	2200      	movs	r2, #0
 800292a:	4955      	ldr	r1, [pc, #340]	@ (8002a80 <HAL_I2C_Mem_Read+0x460>)
 800292c:	68f8      	ldr	r0, [r7, #12]
 800292e:	f000 fa27 	bl	8002d80 <I2C_WaitOnFlagUntilTimeout>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e09d      	b.n	8002a78 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800294a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	691a      	ldr	r2, [r3, #16]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002956:	b2d2      	uxtb	r2, r2
 8002958:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800295e:	1c5a      	adds	r2, r3, #1
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002968:	3b01      	subs	r3, #1
 800296a:	b29a      	uxth	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002974:	b29b      	uxth	r3, r3
 8002976:	3b01      	subs	r3, #1
 8002978:	b29a      	uxth	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	691a      	ldr	r2, [r3, #16]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002988:	b2d2      	uxtb	r2, r2
 800298a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002990:	1c5a      	adds	r2, r3, #1
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800299a:	3b01      	subs	r3, #1
 800299c:	b29a      	uxth	r2, r3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	3b01      	subs	r3, #1
 80029aa:	b29a      	uxth	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80029b0:	e04e      	b.n	8002a50 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029b4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80029b6:	68f8      	ldr	r0, [r7, #12]
 80029b8:	f000 fb8c 	bl	80030d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e058      	b.n	8002a78 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	691a      	ldr	r2, [r3, #16]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d0:	b2d2      	uxtb	r2, r2
 80029d2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d8:	1c5a      	adds	r2, r3, #1
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029e2:	3b01      	subs	r3, #1
 80029e4:	b29a      	uxth	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	3b01      	subs	r3, #1
 80029f2:	b29a      	uxth	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	f003 0304 	and.w	r3, r3, #4
 8002a02:	2b04      	cmp	r3, #4
 8002a04:	d124      	bne.n	8002a50 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a0a:	2b03      	cmp	r3, #3
 8002a0c:	d107      	bne.n	8002a1e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a1c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	691a      	ldr	r2, [r3, #16]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a28:	b2d2      	uxtb	r2, r2
 8002a2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a30:	1c5a      	adds	r2, r3, #1
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	b29a      	uxth	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	f47f aeb6 	bne.w	80027c6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2220      	movs	r2, #32
 8002a5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002a72:	2300      	movs	r3, #0
 8002a74:	e000      	b.n	8002a78 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002a76:	2302      	movs	r3, #2
  }
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3728      	adds	r7, #40	@ 0x28
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	00010004 	.word	0x00010004

08002a84 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b088      	sub	sp, #32
 8002a88:	af02      	add	r7, sp, #8
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	4608      	mov	r0, r1
 8002a8e:	4611      	mov	r1, r2
 8002a90:	461a      	mov	r2, r3
 8002a92:	4603      	mov	r3, r0
 8002a94:	817b      	strh	r3, [r7, #10]
 8002a96:	460b      	mov	r3, r1
 8002a98:	813b      	strh	r3, [r7, #8]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002aac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab0:	9300      	str	r3, [sp, #0]
 8002ab2:	6a3b      	ldr	r3, [r7, #32]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002aba:	68f8      	ldr	r0, [r7, #12]
 8002abc:	f000 f960 	bl	8002d80 <I2C_WaitOnFlagUntilTimeout>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00d      	beq.n	8002ae2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ad0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ad4:	d103      	bne.n	8002ade <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002adc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e05f      	b.n	8002ba2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ae2:	897b      	ldrh	r3, [r7, #10]
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002af0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af4:	6a3a      	ldr	r2, [r7, #32]
 8002af6:	492d      	ldr	r1, [pc, #180]	@ (8002bac <I2C_RequestMemoryWrite+0x128>)
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f000 f9bb 	bl	8002e74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e04c      	b.n	8002ba2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b08:	2300      	movs	r3, #0
 8002b0a:	617b      	str	r3, [r7, #20]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	617b      	str	r3, [r7, #20]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	617b      	str	r3, [r7, #20]
 8002b1c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b20:	6a39      	ldr	r1, [r7, #32]
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f000 fa46 	bl	8002fb4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00d      	beq.n	8002b4a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b32:	2b04      	cmp	r3, #4
 8002b34:	d107      	bne.n	8002b46 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b44:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e02b      	b.n	8002ba2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b4a:	88fb      	ldrh	r3, [r7, #6]
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d105      	bne.n	8002b5c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b50:	893b      	ldrh	r3, [r7, #8]
 8002b52:	b2da      	uxtb	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	611a      	str	r2, [r3, #16]
 8002b5a:	e021      	b.n	8002ba0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002b5c:	893b      	ldrh	r3, [r7, #8]
 8002b5e:	0a1b      	lsrs	r3, r3, #8
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	b2da      	uxtb	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b6c:	6a39      	ldr	r1, [r7, #32]
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f000 fa20 	bl	8002fb4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00d      	beq.n	8002b96 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	d107      	bne.n	8002b92 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b90:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e005      	b.n	8002ba2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b96:	893b      	ldrh	r3, [r7, #8]
 8002b98:	b2da      	uxtb	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3718      	adds	r7, #24
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	00010002 	.word	0x00010002

08002bb0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b088      	sub	sp, #32
 8002bb4:	af02      	add	r7, sp, #8
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	4608      	mov	r0, r1
 8002bba:	4611      	mov	r1, r2
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	817b      	strh	r3, [r7, #10]
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	813b      	strh	r3, [r7, #8]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002bd8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002be8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bec:	9300      	str	r3, [sp, #0]
 8002bee:	6a3b      	ldr	r3, [r7, #32]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002bf6:	68f8      	ldr	r0, [r7, #12]
 8002bf8:	f000 f8c2 	bl	8002d80 <I2C_WaitOnFlagUntilTimeout>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00d      	beq.n	8002c1e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c10:	d103      	bne.n	8002c1a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c18:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e0aa      	b.n	8002d74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c1e:	897b      	ldrh	r3, [r7, #10]
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	461a      	mov	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002c2c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c30:	6a3a      	ldr	r2, [r7, #32]
 8002c32:	4952      	ldr	r1, [pc, #328]	@ (8002d7c <I2C_RequestMemoryRead+0x1cc>)
 8002c34:	68f8      	ldr	r0, [r7, #12]
 8002c36:	f000 f91d 	bl	8002e74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e097      	b.n	8002d74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c44:	2300      	movs	r3, #0
 8002c46:	617b      	str	r3, [r7, #20]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	617b      	str	r3, [r7, #20]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	617b      	str	r3, [r7, #20]
 8002c58:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c5c:	6a39      	ldr	r1, [r7, #32]
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	f000 f9a8 	bl	8002fb4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00d      	beq.n	8002c86 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6e:	2b04      	cmp	r3, #4
 8002c70:	d107      	bne.n	8002c82 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c80:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e076      	b.n	8002d74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c86:	88fb      	ldrh	r3, [r7, #6]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d105      	bne.n	8002c98 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c8c:	893b      	ldrh	r3, [r7, #8]
 8002c8e:	b2da      	uxtb	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	611a      	str	r2, [r3, #16]
 8002c96:	e021      	b.n	8002cdc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002c98:	893b      	ldrh	r3, [r7, #8]
 8002c9a:	0a1b      	lsrs	r3, r3, #8
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	b2da      	uxtb	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ca6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ca8:	6a39      	ldr	r1, [r7, #32]
 8002caa:	68f8      	ldr	r0, [r7, #12]
 8002cac:	f000 f982 	bl	8002fb4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00d      	beq.n	8002cd2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cba:	2b04      	cmp	r3, #4
 8002cbc:	d107      	bne.n	8002cce <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ccc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e050      	b.n	8002d74 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002cd2:	893b      	ldrh	r3, [r7, #8]
 8002cd4:	b2da      	uxtb	r2, r3
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cde:	6a39      	ldr	r1, [r7, #32]
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f000 f967 	bl	8002fb4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00d      	beq.n	8002d08 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf0:	2b04      	cmp	r3, #4
 8002cf2:	d107      	bne.n	8002d04 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d02:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e035      	b.n	8002d74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d16:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d1a:	9300      	str	r3, [sp, #0]
 8002d1c:	6a3b      	ldr	r3, [r7, #32]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d24:	68f8      	ldr	r0, [r7, #12]
 8002d26:	f000 f82b 	bl	8002d80 <I2C_WaitOnFlagUntilTimeout>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d00d      	beq.n	8002d4c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d3e:	d103      	bne.n	8002d48 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d46:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e013      	b.n	8002d74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002d4c:	897b      	ldrh	r3, [r7, #10]
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	f043 0301 	orr.w	r3, r3, #1
 8002d54:	b2da      	uxtb	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d5e:	6a3a      	ldr	r2, [r7, #32]
 8002d60:	4906      	ldr	r1, [pc, #24]	@ (8002d7c <I2C_RequestMemoryRead+0x1cc>)
 8002d62:	68f8      	ldr	r0, [r7, #12]
 8002d64:	f000 f886 	bl	8002e74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e000      	b.n	8002d74 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3718      	adds	r7, #24
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	00010002 	.word	0x00010002

08002d80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	603b      	str	r3, [r7, #0]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d90:	e048      	b.n	8002e24 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d98:	d044      	beq.n	8002e24 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d9a:	f7fe ff69 	bl	8001c70 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	683a      	ldr	r2, [r7, #0]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d302      	bcc.n	8002db0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d139      	bne.n	8002e24 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	0c1b      	lsrs	r3, r3, #16
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d10d      	bne.n	8002dd6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	695b      	ldr	r3, [r3, #20]
 8002dc0:	43da      	mvns	r2, r3
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	bf0c      	ite	eq
 8002dcc:	2301      	moveq	r3, #1
 8002dce:	2300      	movne	r3, #0
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	e00c      	b.n	8002df0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	43da      	mvns	r2, r3
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	4013      	ands	r3, r2
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	bf0c      	ite	eq
 8002de8:	2301      	moveq	r3, #1
 8002dea:	2300      	movne	r3, #0
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	461a      	mov	r2, r3
 8002df0:	79fb      	ldrb	r3, [r7, #7]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d116      	bne.n	8002e24 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2220      	movs	r2, #32
 8002e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e10:	f043 0220 	orr.w	r2, r3, #32
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e023      	b.n	8002e6c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	0c1b      	lsrs	r3, r3, #16
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d10d      	bne.n	8002e4a <I2C_WaitOnFlagUntilTimeout+0xca>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	695b      	ldr	r3, [r3, #20]
 8002e34:	43da      	mvns	r2, r3
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	bf0c      	ite	eq
 8002e40:	2301      	moveq	r3, #1
 8002e42:	2300      	movne	r3, #0
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	461a      	mov	r2, r3
 8002e48:	e00c      	b.n	8002e64 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	43da      	mvns	r2, r3
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	4013      	ands	r3, r2
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	bf0c      	ite	eq
 8002e5c:	2301      	moveq	r3, #1
 8002e5e:	2300      	movne	r3, #0
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	461a      	mov	r2, r3
 8002e64:	79fb      	ldrb	r3, [r7, #7]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d093      	beq.n	8002d92 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3710      	adds	r7, #16
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
 8002e80:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e82:	e071      	b.n	8002f68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e92:	d123      	bne.n	8002edc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ea2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002eac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec8:	f043 0204 	orr.w	r2, r3, #4
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e067      	b.n	8002fac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee2:	d041      	beq.n	8002f68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ee4:	f7fe fec4 	bl	8001c70 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d302      	bcc.n	8002efa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d136      	bne.n	8002f68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	0c1b      	lsrs	r3, r3, #16
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d10c      	bne.n	8002f1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	43da      	mvns	r2, r3
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	4013      	ands	r3, r2
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	bf14      	ite	ne
 8002f16:	2301      	movne	r3, #1
 8002f18:	2300      	moveq	r3, #0
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	e00b      	b.n	8002f36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	43da      	mvns	r2, r3
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	bf14      	ite	ne
 8002f30:	2301      	movne	r3, #1
 8002f32:	2300      	moveq	r3, #0
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d016      	beq.n	8002f68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2220      	movs	r2, #32
 8002f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f54:	f043 0220 	orr.w	r2, r3, #32
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e021      	b.n	8002fac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	0c1b      	lsrs	r3, r3, #16
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d10c      	bne.n	8002f8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	695b      	ldr	r3, [r3, #20]
 8002f78:	43da      	mvns	r2, r3
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	bf14      	ite	ne
 8002f84:	2301      	movne	r3, #1
 8002f86:	2300      	moveq	r3, #0
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	e00b      	b.n	8002fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	43da      	mvns	r2, r3
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	4013      	ands	r3, r2
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	bf14      	ite	ne
 8002f9e:	2301      	movne	r3, #1
 8002fa0:	2300      	moveq	r3, #0
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	f47f af6d 	bne.w	8002e84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3710      	adds	r7, #16
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fc0:	e034      	b.n	800302c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f000 f8e3 	bl	800318e <I2C_IsAcknowledgeFailed>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e034      	b.n	800303c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd8:	d028      	beq.n	800302c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fda:	f7fe fe49 	bl	8001c70 <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	68ba      	ldr	r2, [r7, #8]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d302      	bcc.n	8002ff0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d11d      	bne.n	800302c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ffa:	2b80      	cmp	r3, #128	@ 0x80
 8002ffc:	d016      	beq.n	800302c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2220      	movs	r2, #32
 8003008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003018:	f043 0220 	orr.w	r2, r3, #32
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e007      	b.n	800303c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003036:	2b80      	cmp	r3, #128	@ 0x80
 8003038:	d1c3      	bne.n	8002fc2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800303a:	2300      	movs	r3, #0
}
 800303c:	4618      	mov	r0, r3
 800303e:	3710      	adds	r7, #16
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003050:	e034      	b.n	80030bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f000 f89b 	bl	800318e <I2C_IsAcknowledgeFailed>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e034      	b.n	80030cc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003068:	d028      	beq.n	80030bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800306a:	f7fe fe01 	bl	8001c70 <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	68ba      	ldr	r2, [r7, #8]
 8003076:	429a      	cmp	r2, r3
 8003078:	d302      	bcc.n	8003080 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d11d      	bne.n	80030bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	f003 0304 	and.w	r3, r3, #4
 800308a:	2b04      	cmp	r3, #4
 800308c:	d016      	beq.n	80030bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2200      	movs	r2, #0
 8003092:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2220      	movs	r2, #32
 8003098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a8:	f043 0220 	orr.w	r2, r3, #32
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e007      	b.n	80030cc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	f003 0304 	and.w	r3, r3, #4
 80030c6:	2b04      	cmp	r3, #4
 80030c8:	d1c3      	bne.n	8003052 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80030ca:	2300      	movs	r3, #0
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3710      	adds	r7, #16
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030e0:	e049      	b.n	8003176 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	695b      	ldr	r3, [r3, #20]
 80030e8:	f003 0310 	and.w	r3, r3, #16
 80030ec:	2b10      	cmp	r3, #16
 80030ee:	d119      	bne.n	8003124 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f06f 0210 	mvn.w	r2, #16
 80030f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2220      	movs	r2, #32
 8003104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e030      	b.n	8003186 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003124:	f7fe fda4 	bl	8001c70 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	68ba      	ldr	r2, [r7, #8]
 8003130:	429a      	cmp	r2, r3
 8003132:	d302      	bcc.n	800313a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d11d      	bne.n	8003176 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	695b      	ldr	r3, [r3, #20]
 8003140:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003144:	2b40      	cmp	r3, #64	@ 0x40
 8003146:	d016      	beq.n	8003176 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2200      	movs	r2, #0
 800314c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2220      	movs	r2, #32
 8003152:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003162:	f043 0220 	orr.w	r2, r3, #32
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e007      	b.n	8003186 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	695b      	ldr	r3, [r3, #20]
 800317c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003180:	2b40      	cmp	r3, #64	@ 0x40
 8003182:	d1ae      	bne.n	80030e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3710      	adds	r7, #16
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800318e:	b480      	push	{r7}
 8003190:	b083      	sub	sp, #12
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	695b      	ldr	r3, [r3, #20]
 800319c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031a4:	d11b      	bne.n	80031de <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80031ae:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2220      	movs	r2, #32
 80031ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ca:	f043 0204 	orr.w	r2, r3, #4
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e000      	b.n	80031e0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e267      	b.n	80036ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	2b00      	cmp	r3, #0
 8003208:	d075      	beq.n	80032f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800320a:	4b88      	ldr	r3, [pc, #544]	@ (800342c <HAL_RCC_OscConfig+0x240>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f003 030c 	and.w	r3, r3, #12
 8003212:	2b04      	cmp	r3, #4
 8003214:	d00c      	beq.n	8003230 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003216:	4b85      	ldr	r3, [pc, #532]	@ (800342c <HAL_RCC_OscConfig+0x240>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800321e:	2b08      	cmp	r3, #8
 8003220:	d112      	bne.n	8003248 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003222:	4b82      	ldr	r3, [pc, #520]	@ (800342c <HAL_RCC_OscConfig+0x240>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800322a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800322e:	d10b      	bne.n	8003248 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003230:	4b7e      	ldr	r3, [pc, #504]	@ (800342c <HAL_RCC_OscConfig+0x240>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d05b      	beq.n	80032f4 <HAL_RCC_OscConfig+0x108>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d157      	bne.n	80032f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e242      	b.n	80036ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003250:	d106      	bne.n	8003260 <HAL_RCC_OscConfig+0x74>
 8003252:	4b76      	ldr	r3, [pc, #472]	@ (800342c <HAL_RCC_OscConfig+0x240>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a75      	ldr	r2, [pc, #468]	@ (800342c <HAL_RCC_OscConfig+0x240>)
 8003258:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800325c:	6013      	str	r3, [r2, #0]
 800325e:	e01d      	b.n	800329c <HAL_RCC_OscConfig+0xb0>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003268:	d10c      	bne.n	8003284 <HAL_RCC_OscConfig+0x98>
 800326a:	4b70      	ldr	r3, [pc, #448]	@ (800342c <HAL_RCC_OscConfig+0x240>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a6f      	ldr	r2, [pc, #444]	@ (800342c <HAL_RCC_OscConfig+0x240>)
 8003270:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003274:	6013      	str	r3, [r2, #0]
 8003276:	4b6d      	ldr	r3, [pc, #436]	@ (800342c <HAL_RCC_OscConfig+0x240>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a6c      	ldr	r2, [pc, #432]	@ (800342c <HAL_RCC_OscConfig+0x240>)
 800327c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003280:	6013      	str	r3, [r2, #0]
 8003282:	e00b      	b.n	800329c <HAL_RCC_OscConfig+0xb0>
 8003284:	4b69      	ldr	r3, [pc, #420]	@ (800342c <HAL_RCC_OscConfig+0x240>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a68      	ldr	r2, [pc, #416]	@ (800342c <HAL_RCC_OscConfig+0x240>)
 800328a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800328e:	6013      	str	r3, [r2, #0]
 8003290:	4b66      	ldr	r3, [pc, #408]	@ (800342c <HAL_RCC_OscConfig+0x240>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a65      	ldr	r2, [pc, #404]	@ (800342c <HAL_RCC_OscConfig+0x240>)
 8003296:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800329a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d013      	beq.n	80032cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a4:	f7fe fce4 	bl	8001c70 <HAL_GetTick>
 80032a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032aa:	e008      	b.n	80032be <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032ac:	f7fe fce0 	bl	8001c70 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b64      	cmp	r3, #100	@ 0x64
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e207      	b.n	80036ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032be:	4b5b      	ldr	r3, [pc, #364]	@ (800342c <HAL_RCC_OscConfig+0x240>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d0f0      	beq.n	80032ac <HAL_RCC_OscConfig+0xc0>
 80032ca:	e014      	b.n	80032f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032cc:	f7fe fcd0 	bl	8001c70 <HAL_GetTick>
 80032d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032d2:	e008      	b.n	80032e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032d4:	f7fe fccc 	bl	8001c70 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b64      	cmp	r3, #100	@ 0x64
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e1f3      	b.n	80036ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032e6:	4b51      	ldr	r3, [pc, #324]	@ (800342c <HAL_RCC_OscConfig+0x240>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1f0      	bne.n	80032d4 <HAL_RCC_OscConfig+0xe8>
 80032f2:	e000      	b.n	80032f6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d063      	beq.n	80033ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003302:	4b4a      	ldr	r3, [pc, #296]	@ (800342c <HAL_RCC_OscConfig+0x240>)
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f003 030c 	and.w	r3, r3, #12
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00b      	beq.n	8003326 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800330e:	4b47      	ldr	r3, [pc, #284]	@ (800342c <HAL_RCC_OscConfig+0x240>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003316:	2b08      	cmp	r3, #8
 8003318:	d11c      	bne.n	8003354 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800331a:	4b44      	ldr	r3, [pc, #272]	@ (800342c <HAL_RCC_OscConfig+0x240>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d116      	bne.n	8003354 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003326:	4b41      	ldr	r3, [pc, #260]	@ (800342c <HAL_RCC_OscConfig+0x240>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d005      	beq.n	800333e <HAL_RCC_OscConfig+0x152>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d001      	beq.n	800333e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e1c7      	b.n	80036ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800333e:	4b3b      	ldr	r3, [pc, #236]	@ (800342c <HAL_RCC_OscConfig+0x240>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	00db      	lsls	r3, r3, #3
 800334c:	4937      	ldr	r1, [pc, #220]	@ (800342c <HAL_RCC_OscConfig+0x240>)
 800334e:	4313      	orrs	r3, r2
 8003350:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003352:	e03a      	b.n	80033ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d020      	beq.n	800339e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800335c:	4b34      	ldr	r3, [pc, #208]	@ (8003430 <HAL_RCC_OscConfig+0x244>)
 800335e:	2201      	movs	r2, #1
 8003360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003362:	f7fe fc85 	bl	8001c70 <HAL_GetTick>
 8003366:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003368:	e008      	b.n	800337c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800336a:	f7fe fc81 	bl	8001c70 <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	2b02      	cmp	r3, #2
 8003376:	d901      	bls.n	800337c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e1a8      	b.n	80036ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800337c:	4b2b      	ldr	r3, [pc, #172]	@ (800342c <HAL_RCC_OscConfig+0x240>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d0f0      	beq.n	800336a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003388:	4b28      	ldr	r3, [pc, #160]	@ (800342c <HAL_RCC_OscConfig+0x240>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	00db      	lsls	r3, r3, #3
 8003396:	4925      	ldr	r1, [pc, #148]	@ (800342c <HAL_RCC_OscConfig+0x240>)
 8003398:	4313      	orrs	r3, r2
 800339a:	600b      	str	r3, [r1, #0]
 800339c:	e015      	b.n	80033ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800339e:	4b24      	ldr	r3, [pc, #144]	@ (8003430 <HAL_RCC_OscConfig+0x244>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a4:	f7fe fc64 	bl	8001c70 <HAL_GetTick>
 80033a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033aa:	e008      	b.n	80033be <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033ac:	f7fe fc60 	bl	8001c70 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e187      	b.n	80036ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033be:	4b1b      	ldr	r3, [pc, #108]	@ (800342c <HAL_RCC_OscConfig+0x240>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1f0      	bne.n	80033ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0308 	and.w	r3, r3, #8
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d036      	beq.n	8003444 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d016      	beq.n	800340c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033de:	4b15      	ldr	r3, [pc, #84]	@ (8003434 <HAL_RCC_OscConfig+0x248>)
 80033e0:	2201      	movs	r2, #1
 80033e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e4:	f7fe fc44 	bl	8001c70 <HAL_GetTick>
 80033e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ea:	e008      	b.n	80033fe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033ec:	f7fe fc40 	bl	8001c70 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e167      	b.n	80036ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033fe:	4b0b      	ldr	r3, [pc, #44]	@ (800342c <HAL_RCC_OscConfig+0x240>)
 8003400:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d0f0      	beq.n	80033ec <HAL_RCC_OscConfig+0x200>
 800340a:	e01b      	b.n	8003444 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800340c:	4b09      	ldr	r3, [pc, #36]	@ (8003434 <HAL_RCC_OscConfig+0x248>)
 800340e:	2200      	movs	r2, #0
 8003410:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003412:	f7fe fc2d 	bl	8001c70 <HAL_GetTick>
 8003416:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003418:	e00e      	b.n	8003438 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800341a:	f7fe fc29 	bl	8001c70 <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	2b02      	cmp	r3, #2
 8003426:	d907      	bls.n	8003438 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e150      	b.n	80036ce <HAL_RCC_OscConfig+0x4e2>
 800342c:	40023800 	.word	0x40023800
 8003430:	42470000 	.word	0x42470000
 8003434:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003438:	4b88      	ldr	r3, [pc, #544]	@ (800365c <HAL_RCC_OscConfig+0x470>)
 800343a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800343c:	f003 0302 	and.w	r3, r3, #2
 8003440:	2b00      	cmp	r3, #0
 8003442:	d1ea      	bne.n	800341a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0304 	and.w	r3, r3, #4
 800344c:	2b00      	cmp	r3, #0
 800344e:	f000 8097 	beq.w	8003580 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003452:	2300      	movs	r3, #0
 8003454:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003456:	4b81      	ldr	r3, [pc, #516]	@ (800365c <HAL_RCC_OscConfig+0x470>)
 8003458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d10f      	bne.n	8003482 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003462:	2300      	movs	r3, #0
 8003464:	60bb      	str	r3, [r7, #8]
 8003466:	4b7d      	ldr	r3, [pc, #500]	@ (800365c <HAL_RCC_OscConfig+0x470>)
 8003468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346a:	4a7c      	ldr	r2, [pc, #496]	@ (800365c <HAL_RCC_OscConfig+0x470>)
 800346c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003470:	6413      	str	r3, [r2, #64]	@ 0x40
 8003472:	4b7a      	ldr	r3, [pc, #488]	@ (800365c <HAL_RCC_OscConfig+0x470>)
 8003474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003476:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800347a:	60bb      	str	r3, [r7, #8]
 800347c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800347e:	2301      	movs	r3, #1
 8003480:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003482:	4b77      	ldr	r3, [pc, #476]	@ (8003660 <HAL_RCC_OscConfig+0x474>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800348a:	2b00      	cmp	r3, #0
 800348c:	d118      	bne.n	80034c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800348e:	4b74      	ldr	r3, [pc, #464]	@ (8003660 <HAL_RCC_OscConfig+0x474>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a73      	ldr	r2, [pc, #460]	@ (8003660 <HAL_RCC_OscConfig+0x474>)
 8003494:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003498:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800349a:	f7fe fbe9 	bl	8001c70 <HAL_GetTick>
 800349e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034a0:	e008      	b.n	80034b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034a2:	f7fe fbe5 	bl	8001c70 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d901      	bls.n	80034b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e10c      	b.n	80036ce <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034b4:	4b6a      	ldr	r3, [pc, #424]	@ (8003660 <HAL_RCC_OscConfig+0x474>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d0f0      	beq.n	80034a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d106      	bne.n	80034d6 <HAL_RCC_OscConfig+0x2ea>
 80034c8:	4b64      	ldr	r3, [pc, #400]	@ (800365c <HAL_RCC_OscConfig+0x470>)
 80034ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034cc:	4a63      	ldr	r2, [pc, #396]	@ (800365c <HAL_RCC_OscConfig+0x470>)
 80034ce:	f043 0301 	orr.w	r3, r3, #1
 80034d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80034d4:	e01c      	b.n	8003510 <HAL_RCC_OscConfig+0x324>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	2b05      	cmp	r3, #5
 80034dc:	d10c      	bne.n	80034f8 <HAL_RCC_OscConfig+0x30c>
 80034de:	4b5f      	ldr	r3, [pc, #380]	@ (800365c <HAL_RCC_OscConfig+0x470>)
 80034e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034e2:	4a5e      	ldr	r2, [pc, #376]	@ (800365c <HAL_RCC_OscConfig+0x470>)
 80034e4:	f043 0304 	orr.w	r3, r3, #4
 80034e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80034ea:	4b5c      	ldr	r3, [pc, #368]	@ (800365c <HAL_RCC_OscConfig+0x470>)
 80034ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034ee:	4a5b      	ldr	r2, [pc, #364]	@ (800365c <HAL_RCC_OscConfig+0x470>)
 80034f0:	f043 0301 	orr.w	r3, r3, #1
 80034f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80034f6:	e00b      	b.n	8003510 <HAL_RCC_OscConfig+0x324>
 80034f8:	4b58      	ldr	r3, [pc, #352]	@ (800365c <HAL_RCC_OscConfig+0x470>)
 80034fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034fc:	4a57      	ldr	r2, [pc, #348]	@ (800365c <HAL_RCC_OscConfig+0x470>)
 80034fe:	f023 0301 	bic.w	r3, r3, #1
 8003502:	6713      	str	r3, [r2, #112]	@ 0x70
 8003504:	4b55      	ldr	r3, [pc, #340]	@ (800365c <HAL_RCC_OscConfig+0x470>)
 8003506:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003508:	4a54      	ldr	r2, [pc, #336]	@ (800365c <HAL_RCC_OscConfig+0x470>)
 800350a:	f023 0304 	bic.w	r3, r3, #4
 800350e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d015      	beq.n	8003544 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003518:	f7fe fbaa 	bl	8001c70 <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800351e:	e00a      	b.n	8003536 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003520:	f7fe fba6 	bl	8001c70 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800352e:	4293      	cmp	r3, r2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e0cb      	b.n	80036ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003536:	4b49      	ldr	r3, [pc, #292]	@ (800365c <HAL_RCC_OscConfig+0x470>)
 8003538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d0ee      	beq.n	8003520 <HAL_RCC_OscConfig+0x334>
 8003542:	e014      	b.n	800356e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003544:	f7fe fb94 	bl	8001c70 <HAL_GetTick>
 8003548:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800354a:	e00a      	b.n	8003562 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800354c:	f7fe fb90 	bl	8001c70 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	f241 3288 	movw	r2, #5000	@ 0x1388
 800355a:	4293      	cmp	r3, r2
 800355c:	d901      	bls.n	8003562 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e0b5      	b.n	80036ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003562:	4b3e      	ldr	r3, [pc, #248]	@ (800365c <HAL_RCC_OscConfig+0x470>)
 8003564:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1ee      	bne.n	800354c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800356e:	7dfb      	ldrb	r3, [r7, #23]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d105      	bne.n	8003580 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003574:	4b39      	ldr	r3, [pc, #228]	@ (800365c <HAL_RCC_OscConfig+0x470>)
 8003576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003578:	4a38      	ldr	r2, [pc, #224]	@ (800365c <HAL_RCC_OscConfig+0x470>)
 800357a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800357e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	699b      	ldr	r3, [r3, #24]
 8003584:	2b00      	cmp	r3, #0
 8003586:	f000 80a1 	beq.w	80036cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800358a:	4b34      	ldr	r3, [pc, #208]	@ (800365c <HAL_RCC_OscConfig+0x470>)
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f003 030c 	and.w	r3, r3, #12
 8003592:	2b08      	cmp	r3, #8
 8003594:	d05c      	beq.n	8003650 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	2b02      	cmp	r3, #2
 800359c:	d141      	bne.n	8003622 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800359e:	4b31      	ldr	r3, [pc, #196]	@ (8003664 <HAL_RCC_OscConfig+0x478>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a4:	f7fe fb64 	bl	8001c70 <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035aa:	e008      	b.n	80035be <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035ac:	f7fe fb60 	bl	8001c70 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e087      	b.n	80036ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035be:	4b27      	ldr	r3, [pc, #156]	@ (800365c <HAL_RCC_OscConfig+0x470>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1f0      	bne.n	80035ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	69da      	ldr	r2, [r3, #28]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a1b      	ldr	r3, [r3, #32]
 80035d2:	431a      	orrs	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d8:	019b      	lsls	r3, r3, #6
 80035da:	431a      	orrs	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035e0:	085b      	lsrs	r3, r3, #1
 80035e2:	3b01      	subs	r3, #1
 80035e4:	041b      	lsls	r3, r3, #16
 80035e6:	431a      	orrs	r2, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ec:	061b      	lsls	r3, r3, #24
 80035ee:	491b      	ldr	r1, [pc, #108]	@ (800365c <HAL_RCC_OscConfig+0x470>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035f4:	4b1b      	ldr	r3, [pc, #108]	@ (8003664 <HAL_RCC_OscConfig+0x478>)
 80035f6:	2201      	movs	r2, #1
 80035f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035fa:	f7fe fb39 	bl	8001c70 <HAL_GetTick>
 80035fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003600:	e008      	b.n	8003614 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003602:	f7fe fb35 	bl	8001c70 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	2b02      	cmp	r3, #2
 800360e:	d901      	bls.n	8003614 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e05c      	b.n	80036ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003614:	4b11      	ldr	r3, [pc, #68]	@ (800365c <HAL_RCC_OscConfig+0x470>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d0f0      	beq.n	8003602 <HAL_RCC_OscConfig+0x416>
 8003620:	e054      	b.n	80036cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003622:	4b10      	ldr	r3, [pc, #64]	@ (8003664 <HAL_RCC_OscConfig+0x478>)
 8003624:	2200      	movs	r2, #0
 8003626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003628:	f7fe fb22 	bl	8001c70 <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800362e:	e008      	b.n	8003642 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003630:	f7fe fb1e 	bl	8001c70 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b02      	cmp	r3, #2
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e045      	b.n	80036ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003642:	4b06      	ldr	r3, [pc, #24]	@ (800365c <HAL_RCC_OscConfig+0x470>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d1f0      	bne.n	8003630 <HAL_RCC_OscConfig+0x444>
 800364e:	e03d      	b.n	80036cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d107      	bne.n	8003668 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e038      	b.n	80036ce <HAL_RCC_OscConfig+0x4e2>
 800365c:	40023800 	.word	0x40023800
 8003660:	40007000 	.word	0x40007000
 8003664:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003668:	4b1b      	ldr	r3, [pc, #108]	@ (80036d8 <HAL_RCC_OscConfig+0x4ec>)
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d028      	beq.n	80036c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003680:	429a      	cmp	r2, r3
 8003682:	d121      	bne.n	80036c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800368e:	429a      	cmp	r2, r3
 8003690:	d11a      	bne.n	80036c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003698:	4013      	ands	r3, r2
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800369e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d111      	bne.n	80036c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ae:	085b      	lsrs	r3, r3, #1
 80036b0:	3b01      	subs	r3, #1
 80036b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d107      	bne.n	80036c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d001      	beq.n	80036cc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e000      	b.n	80036ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3718      	adds	r7, #24
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	40023800 	.word	0x40023800

080036dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d101      	bne.n	80036f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e0cc      	b.n	800388a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036f0:	4b68      	ldr	r3, [pc, #416]	@ (8003894 <HAL_RCC_ClockConfig+0x1b8>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0307 	and.w	r3, r3, #7
 80036f8:	683a      	ldr	r2, [r7, #0]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d90c      	bls.n	8003718 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036fe:	4b65      	ldr	r3, [pc, #404]	@ (8003894 <HAL_RCC_ClockConfig+0x1b8>)
 8003700:	683a      	ldr	r2, [r7, #0]
 8003702:	b2d2      	uxtb	r2, r2
 8003704:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003706:	4b63      	ldr	r3, [pc, #396]	@ (8003894 <HAL_RCC_ClockConfig+0x1b8>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0307 	and.w	r3, r3, #7
 800370e:	683a      	ldr	r2, [r7, #0]
 8003710:	429a      	cmp	r2, r3
 8003712:	d001      	beq.n	8003718 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e0b8      	b.n	800388a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0302 	and.w	r3, r3, #2
 8003720:	2b00      	cmp	r3, #0
 8003722:	d020      	beq.n	8003766 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0304 	and.w	r3, r3, #4
 800372c:	2b00      	cmp	r3, #0
 800372e:	d005      	beq.n	800373c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003730:	4b59      	ldr	r3, [pc, #356]	@ (8003898 <HAL_RCC_ClockConfig+0x1bc>)
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	4a58      	ldr	r2, [pc, #352]	@ (8003898 <HAL_RCC_ClockConfig+0x1bc>)
 8003736:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800373a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0308 	and.w	r3, r3, #8
 8003744:	2b00      	cmp	r3, #0
 8003746:	d005      	beq.n	8003754 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003748:	4b53      	ldr	r3, [pc, #332]	@ (8003898 <HAL_RCC_ClockConfig+0x1bc>)
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	4a52      	ldr	r2, [pc, #328]	@ (8003898 <HAL_RCC_ClockConfig+0x1bc>)
 800374e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003752:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003754:	4b50      	ldr	r3, [pc, #320]	@ (8003898 <HAL_RCC_ClockConfig+0x1bc>)
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	494d      	ldr	r1, [pc, #308]	@ (8003898 <HAL_RCC_ClockConfig+0x1bc>)
 8003762:	4313      	orrs	r3, r2
 8003764:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b00      	cmp	r3, #0
 8003770:	d044      	beq.n	80037fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	2b01      	cmp	r3, #1
 8003778:	d107      	bne.n	800378a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800377a:	4b47      	ldr	r3, [pc, #284]	@ (8003898 <HAL_RCC_ClockConfig+0x1bc>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d119      	bne.n	80037ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e07f      	b.n	800388a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	2b02      	cmp	r3, #2
 8003790:	d003      	beq.n	800379a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003796:	2b03      	cmp	r3, #3
 8003798:	d107      	bne.n	80037aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800379a:	4b3f      	ldr	r3, [pc, #252]	@ (8003898 <HAL_RCC_ClockConfig+0x1bc>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d109      	bne.n	80037ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e06f      	b.n	800388a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037aa:	4b3b      	ldr	r3, [pc, #236]	@ (8003898 <HAL_RCC_ClockConfig+0x1bc>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e067      	b.n	800388a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037ba:	4b37      	ldr	r3, [pc, #220]	@ (8003898 <HAL_RCC_ClockConfig+0x1bc>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f023 0203 	bic.w	r2, r3, #3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	4934      	ldr	r1, [pc, #208]	@ (8003898 <HAL_RCC_ClockConfig+0x1bc>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037cc:	f7fe fa50 	bl	8001c70 <HAL_GetTick>
 80037d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037d2:	e00a      	b.n	80037ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037d4:	f7fe fa4c 	bl	8001c70 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e04f      	b.n	800388a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ea:	4b2b      	ldr	r3, [pc, #172]	@ (8003898 <HAL_RCC_ClockConfig+0x1bc>)
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f003 020c 	and.w	r2, r3, #12
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d1eb      	bne.n	80037d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037fc:	4b25      	ldr	r3, [pc, #148]	@ (8003894 <HAL_RCC_ClockConfig+0x1b8>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0307 	and.w	r3, r3, #7
 8003804:	683a      	ldr	r2, [r7, #0]
 8003806:	429a      	cmp	r2, r3
 8003808:	d20c      	bcs.n	8003824 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800380a:	4b22      	ldr	r3, [pc, #136]	@ (8003894 <HAL_RCC_ClockConfig+0x1b8>)
 800380c:	683a      	ldr	r2, [r7, #0]
 800380e:	b2d2      	uxtb	r2, r2
 8003810:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003812:	4b20      	ldr	r3, [pc, #128]	@ (8003894 <HAL_RCC_ClockConfig+0x1b8>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0307 	and.w	r3, r3, #7
 800381a:	683a      	ldr	r2, [r7, #0]
 800381c:	429a      	cmp	r2, r3
 800381e:	d001      	beq.n	8003824 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e032      	b.n	800388a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0304 	and.w	r3, r3, #4
 800382c:	2b00      	cmp	r3, #0
 800382e:	d008      	beq.n	8003842 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003830:	4b19      	ldr	r3, [pc, #100]	@ (8003898 <HAL_RCC_ClockConfig+0x1bc>)
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	4916      	ldr	r1, [pc, #88]	@ (8003898 <HAL_RCC_ClockConfig+0x1bc>)
 800383e:	4313      	orrs	r3, r2
 8003840:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0308 	and.w	r3, r3, #8
 800384a:	2b00      	cmp	r3, #0
 800384c:	d009      	beq.n	8003862 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800384e:	4b12      	ldr	r3, [pc, #72]	@ (8003898 <HAL_RCC_ClockConfig+0x1bc>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	00db      	lsls	r3, r3, #3
 800385c:	490e      	ldr	r1, [pc, #56]	@ (8003898 <HAL_RCC_ClockConfig+0x1bc>)
 800385e:	4313      	orrs	r3, r2
 8003860:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003862:	f000 f821 	bl	80038a8 <HAL_RCC_GetSysClockFreq>
 8003866:	4602      	mov	r2, r0
 8003868:	4b0b      	ldr	r3, [pc, #44]	@ (8003898 <HAL_RCC_ClockConfig+0x1bc>)
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	091b      	lsrs	r3, r3, #4
 800386e:	f003 030f 	and.w	r3, r3, #15
 8003872:	490a      	ldr	r1, [pc, #40]	@ (800389c <HAL_RCC_ClockConfig+0x1c0>)
 8003874:	5ccb      	ldrb	r3, [r1, r3]
 8003876:	fa22 f303 	lsr.w	r3, r2, r3
 800387a:	4a09      	ldr	r2, [pc, #36]	@ (80038a0 <HAL_RCC_ClockConfig+0x1c4>)
 800387c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800387e:	4b09      	ldr	r3, [pc, #36]	@ (80038a4 <HAL_RCC_ClockConfig+0x1c8>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4618      	mov	r0, r3
 8003884:	f7fe f9b0 	bl	8001be8 <HAL_InitTick>

  return HAL_OK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	3710      	adds	r7, #16
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	40023c00 	.word	0x40023c00
 8003898:	40023800 	.word	0x40023800
 800389c:	08004b68 	.word	0x08004b68
 80038a0:	2000002c 	.word	0x2000002c
 80038a4:	20000030 	.word	0x20000030

080038a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038ac:	b090      	sub	sp, #64	@ 0x40
 80038ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80038b0:	2300      	movs	r3, #0
 80038b2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80038b4:	2300      	movs	r3, #0
 80038b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80038b8:	2300      	movs	r3, #0
 80038ba:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80038bc:	2300      	movs	r3, #0
 80038be:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038c0:	4b59      	ldr	r3, [pc, #356]	@ (8003a28 <HAL_RCC_GetSysClockFreq+0x180>)
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f003 030c 	and.w	r3, r3, #12
 80038c8:	2b08      	cmp	r3, #8
 80038ca:	d00d      	beq.n	80038e8 <HAL_RCC_GetSysClockFreq+0x40>
 80038cc:	2b08      	cmp	r3, #8
 80038ce:	f200 80a1 	bhi.w	8003a14 <HAL_RCC_GetSysClockFreq+0x16c>
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d002      	beq.n	80038dc <HAL_RCC_GetSysClockFreq+0x34>
 80038d6:	2b04      	cmp	r3, #4
 80038d8:	d003      	beq.n	80038e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80038da:	e09b      	b.n	8003a14 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038dc:	4b53      	ldr	r3, [pc, #332]	@ (8003a2c <HAL_RCC_GetSysClockFreq+0x184>)
 80038de:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80038e0:	e09b      	b.n	8003a1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038e2:	4b53      	ldr	r3, [pc, #332]	@ (8003a30 <HAL_RCC_GetSysClockFreq+0x188>)
 80038e4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80038e6:	e098      	b.n	8003a1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038e8:	4b4f      	ldr	r3, [pc, #316]	@ (8003a28 <HAL_RCC_GetSysClockFreq+0x180>)
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80038f0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038f2:	4b4d      	ldr	r3, [pc, #308]	@ (8003a28 <HAL_RCC_GetSysClockFreq+0x180>)
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d028      	beq.n	8003950 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038fe:	4b4a      	ldr	r3, [pc, #296]	@ (8003a28 <HAL_RCC_GetSysClockFreq+0x180>)
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	099b      	lsrs	r3, r3, #6
 8003904:	2200      	movs	r2, #0
 8003906:	623b      	str	r3, [r7, #32]
 8003908:	627a      	str	r2, [r7, #36]	@ 0x24
 800390a:	6a3b      	ldr	r3, [r7, #32]
 800390c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003910:	2100      	movs	r1, #0
 8003912:	4b47      	ldr	r3, [pc, #284]	@ (8003a30 <HAL_RCC_GetSysClockFreq+0x188>)
 8003914:	fb03 f201 	mul.w	r2, r3, r1
 8003918:	2300      	movs	r3, #0
 800391a:	fb00 f303 	mul.w	r3, r0, r3
 800391e:	4413      	add	r3, r2
 8003920:	4a43      	ldr	r2, [pc, #268]	@ (8003a30 <HAL_RCC_GetSysClockFreq+0x188>)
 8003922:	fba0 1202 	umull	r1, r2, r0, r2
 8003926:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003928:	460a      	mov	r2, r1
 800392a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800392c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800392e:	4413      	add	r3, r2
 8003930:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003932:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003934:	2200      	movs	r2, #0
 8003936:	61bb      	str	r3, [r7, #24]
 8003938:	61fa      	str	r2, [r7, #28]
 800393a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800393e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003942:	f7fc fc49 	bl	80001d8 <__aeabi_uldivmod>
 8003946:	4602      	mov	r2, r0
 8003948:	460b      	mov	r3, r1
 800394a:	4613      	mov	r3, r2
 800394c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800394e:	e053      	b.n	80039f8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003950:	4b35      	ldr	r3, [pc, #212]	@ (8003a28 <HAL_RCC_GetSysClockFreq+0x180>)
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	099b      	lsrs	r3, r3, #6
 8003956:	2200      	movs	r2, #0
 8003958:	613b      	str	r3, [r7, #16]
 800395a:	617a      	str	r2, [r7, #20]
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003962:	f04f 0b00 	mov.w	fp, #0
 8003966:	4652      	mov	r2, sl
 8003968:	465b      	mov	r3, fp
 800396a:	f04f 0000 	mov.w	r0, #0
 800396e:	f04f 0100 	mov.w	r1, #0
 8003972:	0159      	lsls	r1, r3, #5
 8003974:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003978:	0150      	lsls	r0, r2, #5
 800397a:	4602      	mov	r2, r0
 800397c:	460b      	mov	r3, r1
 800397e:	ebb2 080a 	subs.w	r8, r2, sl
 8003982:	eb63 090b 	sbc.w	r9, r3, fp
 8003986:	f04f 0200 	mov.w	r2, #0
 800398a:	f04f 0300 	mov.w	r3, #0
 800398e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003992:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003996:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800399a:	ebb2 0408 	subs.w	r4, r2, r8
 800399e:	eb63 0509 	sbc.w	r5, r3, r9
 80039a2:	f04f 0200 	mov.w	r2, #0
 80039a6:	f04f 0300 	mov.w	r3, #0
 80039aa:	00eb      	lsls	r3, r5, #3
 80039ac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039b0:	00e2      	lsls	r2, r4, #3
 80039b2:	4614      	mov	r4, r2
 80039b4:	461d      	mov	r5, r3
 80039b6:	eb14 030a 	adds.w	r3, r4, sl
 80039ba:	603b      	str	r3, [r7, #0]
 80039bc:	eb45 030b 	adc.w	r3, r5, fp
 80039c0:	607b      	str	r3, [r7, #4]
 80039c2:	f04f 0200 	mov.w	r2, #0
 80039c6:	f04f 0300 	mov.w	r3, #0
 80039ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039ce:	4629      	mov	r1, r5
 80039d0:	028b      	lsls	r3, r1, #10
 80039d2:	4621      	mov	r1, r4
 80039d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039d8:	4621      	mov	r1, r4
 80039da:	028a      	lsls	r2, r1, #10
 80039dc:	4610      	mov	r0, r2
 80039de:	4619      	mov	r1, r3
 80039e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039e2:	2200      	movs	r2, #0
 80039e4:	60bb      	str	r3, [r7, #8]
 80039e6:	60fa      	str	r2, [r7, #12]
 80039e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80039ec:	f7fc fbf4 	bl	80001d8 <__aeabi_uldivmod>
 80039f0:	4602      	mov	r2, r0
 80039f2:	460b      	mov	r3, r1
 80039f4:	4613      	mov	r3, r2
 80039f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80039f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003a28 <HAL_RCC_GetSysClockFreq+0x180>)
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	0c1b      	lsrs	r3, r3, #16
 80039fe:	f003 0303 	and.w	r3, r3, #3
 8003a02:	3301      	adds	r3, #1
 8003a04:	005b      	lsls	r3, r3, #1
 8003a06:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003a08:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a10:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003a12:	e002      	b.n	8003a1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a14:	4b05      	ldr	r3, [pc, #20]	@ (8003a2c <HAL_RCC_GetSysClockFreq+0x184>)
 8003a16:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003a18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3740      	adds	r7, #64	@ 0x40
 8003a20:	46bd      	mov	sp, r7
 8003a22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a26:	bf00      	nop
 8003a28:	40023800 	.word	0x40023800
 8003a2c:	00f42400 	.word	0x00f42400
 8003a30:	017d7840 	.word	0x017d7840

08003a34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a34:	b480      	push	{r7}
 8003a36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a38:	4b03      	ldr	r3, [pc, #12]	@ (8003a48 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	2000002c 	.word	0x2000002c

08003a4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a50:	f7ff fff0 	bl	8003a34 <HAL_RCC_GetHCLKFreq>
 8003a54:	4602      	mov	r2, r0
 8003a56:	4b05      	ldr	r3, [pc, #20]	@ (8003a6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	0a9b      	lsrs	r3, r3, #10
 8003a5c:	f003 0307 	and.w	r3, r3, #7
 8003a60:	4903      	ldr	r1, [pc, #12]	@ (8003a70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a62:	5ccb      	ldrb	r3, [r1, r3]
 8003a64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	40023800 	.word	0x40023800
 8003a70:	08004b78 	.word	0x08004b78

08003a74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a78:	f7ff ffdc 	bl	8003a34 <HAL_RCC_GetHCLKFreq>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	4b05      	ldr	r3, [pc, #20]	@ (8003a94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	0b5b      	lsrs	r3, r3, #13
 8003a84:	f003 0307 	and.w	r3, r3, #7
 8003a88:	4903      	ldr	r1, [pc, #12]	@ (8003a98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a8a:	5ccb      	ldrb	r3, [r1, r3]
 8003a8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	40023800 	.word	0x40023800
 8003a98:	08004b78 	.word	0x08004b78

08003a9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e041      	b.n	8003b32 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d106      	bne.n	8003ac8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f7fd fed4 	bl	8001870 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2202      	movs	r2, #2
 8003acc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	3304      	adds	r3, #4
 8003ad8:	4619      	mov	r1, r3
 8003ada:	4610      	mov	r0, r2
 8003adc:	f000 f9a0 	bl	8003e20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3708      	adds	r7, #8
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
	...

08003b3c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d109      	bne.n	8003b60 <HAL_TIM_PWM_Start+0x24>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	bf14      	ite	ne
 8003b58:	2301      	movne	r3, #1
 8003b5a:	2300      	moveq	r3, #0
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	e022      	b.n	8003ba6 <HAL_TIM_PWM_Start+0x6a>
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	2b04      	cmp	r3, #4
 8003b64:	d109      	bne.n	8003b7a <HAL_TIM_PWM_Start+0x3e>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	bf14      	ite	ne
 8003b72:	2301      	movne	r3, #1
 8003b74:	2300      	moveq	r3, #0
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	e015      	b.n	8003ba6 <HAL_TIM_PWM_Start+0x6a>
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	2b08      	cmp	r3, #8
 8003b7e:	d109      	bne.n	8003b94 <HAL_TIM_PWM_Start+0x58>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	bf14      	ite	ne
 8003b8c:	2301      	movne	r3, #1
 8003b8e:	2300      	moveq	r3, #0
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	e008      	b.n	8003ba6 <HAL_TIM_PWM_Start+0x6a>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	bf14      	ite	ne
 8003ba0:	2301      	movne	r3, #1
 8003ba2:	2300      	moveq	r3, #0
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e068      	b.n	8003c80 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d104      	bne.n	8003bbe <HAL_TIM_PWM_Start+0x82>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2202      	movs	r2, #2
 8003bb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003bbc:	e013      	b.n	8003be6 <HAL_TIM_PWM_Start+0xaa>
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	2b04      	cmp	r3, #4
 8003bc2:	d104      	bne.n	8003bce <HAL_TIM_PWM_Start+0x92>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2202      	movs	r2, #2
 8003bc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003bcc:	e00b      	b.n	8003be6 <HAL_TIM_PWM_Start+0xaa>
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	2b08      	cmp	r3, #8
 8003bd2:	d104      	bne.n	8003bde <HAL_TIM_PWM_Start+0xa2>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2202      	movs	r2, #2
 8003bd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003bdc:	e003      	b.n	8003be6 <HAL_TIM_PWM_Start+0xaa>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2202      	movs	r2, #2
 8003be2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2201      	movs	r2, #1
 8003bec:	6839      	ldr	r1, [r7, #0]
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f000 fb28 	bl	8004244 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a23      	ldr	r2, [pc, #140]	@ (8003c88 <HAL_TIM_PWM_Start+0x14c>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d107      	bne.n	8003c0e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c0c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a1d      	ldr	r2, [pc, #116]	@ (8003c88 <HAL_TIM_PWM_Start+0x14c>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d018      	beq.n	8003c4a <HAL_TIM_PWM_Start+0x10e>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c20:	d013      	beq.n	8003c4a <HAL_TIM_PWM_Start+0x10e>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a19      	ldr	r2, [pc, #100]	@ (8003c8c <HAL_TIM_PWM_Start+0x150>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d00e      	beq.n	8003c4a <HAL_TIM_PWM_Start+0x10e>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a17      	ldr	r2, [pc, #92]	@ (8003c90 <HAL_TIM_PWM_Start+0x154>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d009      	beq.n	8003c4a <HAL_TIM_PWM_Start+0x10e>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a16      	ldr	r2, [pc, #88]	@ (8003c94 <HAL_TIM_PWM_Start+0x158>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d004      	beq.n	8003c4a <HAL_TIM_PWM_Start+0x10e>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a14      	ldr	r2, [pc, #80]	@ (8003c98 <HAL_TIM_PWM_Start+0x15c>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d111      	bne.n	8003c6e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f003 0307 	and.w	r3, r3, #7
 8003c54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2b06      	cmp	r3, #6
 8003c5a:	d010      	beq.n	8003c7e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f042 0201 	orr.w	r2, r2, #1
 8003c6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c6c:	e007      	b.n	8003c7e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f042 0201 	orr.w	r2, r2, #1
 8003c7c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3710      	adds	r7, #16
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	40010000 	.word	0x40010000
 8003c8c:	40000400 	.word	0x40000400
 8003c90:	40000800 	.word	0x40000800
 8003c94:	40000c00 	.word	0x40000c00
 8003c98:	40014000 	.word	0x40014000

08003c9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b086      	sub	sp, #24
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d101      	bne.n	8003cba <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003cb6:	2302      	movs	r3, #2
 8003cb8:	e0ae      	b.n	8003e18 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2b0c      	cmp	r3, #12
 8003cc6:	f200 809f 	bhi.w	8003e08 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003cca:	a201      	add	r2, pc, #4	@ (adr r2, 8003cd0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd0:	08003d05 	.word	0x08003d05
 8003cd4:	08003e09 	.word	0x08003e09
 8003cd8:	08003e09 	.word	0x08003e09
 8003cdc:	08003e09 	.word	0x08003e09
 8003ce0:	08003d45 	.word	0x08003d45
 8003ce4:	08003e09 	.word	0x08003e09
 8003ce8:	08003e09 	.word	0x08003e09
 8003cec:	08003e09 	.word	0x08003e09
 8003cf0:	08003d87 	.word	0x08003d87
 8003cf4:	08003e09 	.word	0x08003e09
 8003cf8:	08003e09 	.word	0x08003e09
 8003cfc:	08003e09 	.word	0x08003e09
 8003d00:	08003dc7 	.word	0x08003dc7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68b9      	ldr	r1, [r7, #8]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f000 f90e 	bl	8003f2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	699a      	ldr	r2, [r3, #24]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f042 0208 	orr.w	r2, r2, #8
 8003d1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	699a      	ldr	r2, [r3, #24]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f022 0204 	bic.w	r2, r2, #4
 8003d2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	6999      	ldr	r1, [r3, #24]
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	691a      	ldr	r2, [r3, #16]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	619a      	str	r2, [r3, #24]
      break;
 8003d42:	e064      	b.n	8003e0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68b9      	ldr	r1, [r7, #8]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f000 f954 	bl	8003ff8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	699a      	ldr	r2, [r3, #24]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	699a      	ldr	r2, [r3, #24]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	6999      	ldr	r1, [r3, #24]
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	021a      	lsls	r2, r3, #8
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	430a      	orrs	r2, r1
 8003d82:	619a      	str	r2, [r3, #24]
      break;
 8003d84:	e043      	b.n	8003e0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68b9      	ldr	r1, [r7, #8]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f000 f99f 	bl	80040d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	69da      	ldr	r2, [r3, #28]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f042 0208 	orr.w	r2, r2, #8
 8003da0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	69da      	ldr	r2, [r3, #28]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 0204 	bic.w	r2, r2, #4
 8003db0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	69d9      	ldr	r1, [r3, #28]
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	691a      	ldr	r2, [r3, #16]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	61da      	str	r2, [r3, #28]
      break;
 8003dc4:	e023      	b.n	8003e0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68b9      	ldr	r1, [r7, #8]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f000 f9e9 	bl	80041a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	69da      	ldr	r2, [r3, #28]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003de0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	69da      	ldr	r2, [r3, #28]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003df0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	69d9      	ldr	r1, [r3, #28]
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	021a      	lsls	r2, r3, #8
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	430a      	orrs	r2, r1
 8003e04:	61da      	str	r2, [r3, #28]
      break;
 8003e06:	e002      	b.n	8003e0e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	75fb      	strb	r3, [r7, #23]
      break;
 8003e0c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e16:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3718      	adds	r7, #24
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b085      	sub	sp, #20
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a37      	ldr	r2, [pc, #220]	@ (8003f10 <TIM_Base_SetConfig+0xf0>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d00f      	beq.n	8003e58 <TIM_Base_SetConfig+0x38>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e3e:	d00b      	beq.n	8003e58 <TIM_Base_SetConfig+0x38>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a34      	ldr	r2, [pc, #208]	@ (8003f14 <TIM_Base_SetConfig+0xf4>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d007      	beq.n	8003e58 <TIM_Base_SetConfig+0x38>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a33      	ldr	r2, [pc, #204]	@ (8003f18 <TIM_Base_SetConfig+0xf8>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d003      	beq.n	8003e58 <TIM_Base_SetConfig+0x38>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a32      	ldr	r2, [pc, #200]	@ (8003f1c <TIM_Base_SetConfig+0xfc>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d108      	bne.n	8003e6a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a28      	ldr	r2, [pc, #160]	@ (8003f10 <TIM_Base_SetConfig+0xf0>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d01b      	beq.n	8003eaa <TIM_Base_SetConfig+0x8a>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e78:	d017      	beq.n	8003eaa <TIM_Base_SetConfig+0x8a>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a25      	ldr	r2, [pc, #148]	@ (8003f14 <TIM_Base_SetConfig+0xf4>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d013      	beq.n	8003eaa <TIM_Base_SetConfig+0x8a>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a24      	ldr	r2, [pc, #144]	@ (8003f18 <TIM_Base_SetConfig+0xf8>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d00f      	beq.n	8003eaa <TIM_Base_SetConfig+0x8a>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a23      	ldr	r2, [pc, #140]	@ (8003f1c <TIM_Base_SetConfig+0xfc>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d00b      	beq.n	8003eaa <TIM_Base_SetConfig+0x8a>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a22      	ldr	r2, [pc, #136]	@ (8003f20 <TIM_Base_SetConfig+0x100>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d007      	beq.n	8003eaa <TIM_Base_SetConfig+0x8a>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a21      	ldr	r2, [pc, #132]	@ (8003f24 <TIM_Base_SetConfig+0x104>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d003      	beq.n	8003eaa <TIM_Base_SetConfig+0x8a>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a20      	ldr	r2, [pc, #128]	@ (8003f28 <TIM_Base_SetConfig+0x108>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d108      	bne.n	8003ebc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003eb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	689a      	ldr	r2, [r3, #8]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a0c      	ldr	r2, [pc, #48]	@ (8003f10 <TIM_Base_SetConfig+0xf0>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d103      	bne.n	8003eea <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	691a      	ldr	r2, [r3, #16]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f043 0204 	orr.w	r2, r3, #4
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	601a      	str	r2, [r3, #0]
}
 8003f02:	bf00      	nop
 8003f04:	3714      	adds	r7, #20
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	40010000 	.word	0x40010000
 8003f14:	40000400 	.word	0x40000400
 8003f18:	40000800 	.word	0x40000800
 8003f1c:	40000c00 	.word	0x40000c00
 8003f20:	40014000 	.word	0x40014000
 8003f24:	40014400 	.word	0x40014400
 8003f28:	40014800 	.word	0x40014800

08003f2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b087      	sub	sp, #28
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a1b      	ldr	r3, [r3, #32]
 8003f3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a1b      	ldr	r3, [r3, #32]
 8003f40:	f023 0201 	bic.w	r2, r3, #1
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f023 0303 	bic.w	r3, r3, #3
 8003f62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	f023 0302 	bic.w	r3, r3, #2
 8003f74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a1c      	ldr	r2, [pc, #112]	@ (8003ff4 <TIM_OC1_SetConfig+0xc8>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d10c      	bne.n	8003fa2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	f023 0308 	bic.w	r3, r3, #8
 8003f8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	697a      	ldr	r2, [r7, #20]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	f023 0304 	bic.w	r3, r3, #4
 8003fa0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a13      	ldr	r2, [pc, #76]	@ (8003ff4 <TIM_OC1_SetConfig+0xc8>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d111      	bne.n	8003fce <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003fb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003fb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	693a      	ldr	r2, [r7, #16]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	693a      	ldr	r2, [r7, #16]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	685a      	ldr	r2, [r3, #4]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	697a      	ldr	r2, [r7, #20]
 8003fe6:	621a      	str	r2, [r3, #32]
}
 8003fe8:	bf00      	nop
 8003fea:	371c      	adds	r7, #28
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr
 8003ff4:	40010000 	.word	0x40010000

08003ff8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b087      	sub	sp, #28
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a1b      	ldr	r3, [r3, #32]
 8004006:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a1b      	ldr	r3, [r3, #32]
 800400c:	f023 0210 	bic.w	r2, r3, #16
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800402e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	021b      	lsls	r3, r3, #8
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	4313      	orrs	r3, r2
 800403a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	f023 0320 	bic.w	r3, r3, #32
 8004042:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	011b      	lsls	r3, r3, #4
 800404a:	697a      	ldr	r2, [r7, #20]
 800404c:	4313      	orrs	r3, r2
 800404e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a1e      	ldr	r2, [pc, #120]	@ (80040cc <TIM_OC2_SetConfig+0xd4>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d10d      	bne.n	8004074 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800405e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	011b      	lsls	r3, r3, #4
 8004066:	697a      	ldr	r2, [r7, #20]
 8004068:	4313      	orrs	r3, r2
 800406a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004072:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a15      	ldr	r2, [pc, #84]	@ (80040cc <TIM_OC2_SetConfig+0xd4>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d113      	bne.n	80040a4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004082:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800408a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	695b      	ldr	r3, [r3, #20]
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	4313      	orrs	r3, r2
 8004096:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	693a      	ldr	r2, [r7, #16]
 80040a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	685a      	ldr	r2, [r3, #4]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	697a      	ldr	r2, [r7, #20]
 80040bc:	621a      	str	r2, [r3, #32]
}
 80040be:	bf00      	nop
 80040c0:	371c      	adds	r7, #28
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	40010000 	.word	0x40010000

080040d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b087      	sub	sp, #28
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a1b      	ldr	r3, [r3, #32]
 80040e4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	69db      	ldr	r3, [r3, #28]
 80040f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f023 0303 	bic.w	r3, r3, #3
 8004106:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	4313      	orrs	r3, r2
 8004110:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004118:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	021b      	lsls	r3, r3, #8
 8004120:	697a      	ldr	r2, [r7, #20]
 8004122:	4313      	orrs	r3, r2
 8004124:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a1d      	ldr	r2, [pc, #116]	@ (80041a0 <TIM_OC3_SetConfig+0xd0>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d10d      	bne.n	800414a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004134:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	021b      	lsls	r3, r3, #8
 800413c:	697a      	ldr	r2, [r7, #20]
 800413e:	4313      	orrs	r3, r2
 8004140:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004148:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a14      	ldr	r2, [pc, #80]	@ (80041a0 <TIM_OC3_SetConfig+0xd0>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d113      	bne.n	800417a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004158:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004160:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	011b      	lsls	r3, r3, #4
 8004168:	693a      	ldr	r2, [r7, #16]
 800416a:	4313      	orrs	r3, r2
 800416c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	011b      	lsls	r3, r3, #4
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	4313      	orrs	r3, r2
 8004178:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	685a      	ldr	r2, [r3, #4]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	697a      	ldr	r2, [r7, #20]
 8004192:	621a      	str	r2, [r3, #32]
}
 8004194:	bf00      	nop
 8004196:	371c      	adds	r7, #28
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr
 80041a0:	40010000 	.word	0x40010000

080041a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b087      	sub	sp, #28
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a1b      	ldr	r3, [r3, #32]
 80041b2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a1b      	ldr	r3, [r3, #32]
 80041b8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	69db      	ldr	r3, [r3, #28]
 80041ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	021b      	lsls	r3, r3, #8
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80041ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	031b      	lsls	r3, r3, #12
 80041f6:	693a      	ldr	r2, [r7, #16]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a10      	ldr	r2, [pc, #64]	@ (8004240 <TIM_OC4_SetConfig+0x9c>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d109      	bne.n	8004218 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800420a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	695b      	ldr	r3, [r3, #20]
 8004210:	019b      	lsls	r3, r3, #6
 8004212:	697a      	ldr	r2, [r7, #20]
 8004214:	4313      	orrs	r3, r2
 8004216:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	697a      	ldr	r2, [r7, #20]
 800421c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	685a      	ldr	r2, [r3, #4]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	693a      	ldr	r2, [r7, #16]
 8004230:	621a      	str	r2, [r3, #32]
}
 8004232:	bf00      	nop
 8004234:	371c      	adds	r7, #28
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	40010000 	.word	0x40010000

08004244 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004244:	b480      	push	{r7}
 8004246:	b087      	sub	sp, #28
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	f003 031f 	and.w	r3, r3, #31
 8004256:	2201      	movs	r2, #1
 8004258:	fa02 f303 	lsl.w	r3, r2, r3
 800425c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6a1a      	ldr	r2, [r3, #32]
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	43db      	mvns	r3, r3
 8004266:	401a      	ands	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6a1a      	ldr	r2, [r3, #32]
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	f003 031f 	and.w	r3, r3, #31
 8004276:	6879      	ldr	r1, [r7, #4]
 8004278:	fa01 f303 	lsl.w	r3, r1, r3
 800427c:	431a      	orrs	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	621a      	str	r2, [r3, #32]
}
 8004282:	bf00      	nop
 8004284:	371c      	adds	r7, #28
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
	...

08004290 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004290:	b480      	push	{r7}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d101      	bne.n	80042a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042a4:	2302      	movs	r3, #2
 80042a6:	e050      	b.n	800434a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2202      	movs	r2, #2
 80042b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68fa      	ldr	r2, [r7, #12]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a1c      	ldr	r2, [pc, #112]	@ (8004358 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d018      	beq.n	800431e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042f4:	d013      	beq.n	800431e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a18      	ldr	r2, [pc, #96]	@ (800435c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d00e      	beq.n	800431e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a16      	ldr	r2, [pc, #88]	@ (8004360 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d009      	beq.n	800431e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a15      	ldr	r2, [pc, #84]	@ (8004364 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d004      	beq.n	800431e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a13      	ldr	r2, [pc, #76]	@ (8004368 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d10c      	bne.n	8004338 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004324:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	68ba      	ldr	r2, [r7, #8]
 800432c:	4313      	orrs	r3, r2
 800432e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68ba      	ldr	r2, [r7, #8]
 8004336:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3714      	adds	r7, #20
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	40010000 	.word	0x40010000
 800435c:	40000400 	.word	0x40000400
 8004360:	40000800 	.word	0x40000800
 8004364:	40000c00 	.word	0x40000c00
 8004368:	40014000 	.word	0x40014000

0800436c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d101      	bne.n	800437e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e042      	b.n	8004404 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d106      	bne.n	8004398 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f7fd fae8 	bl	8001968 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2224      	movs	r2, #36	@ 0x24
 800439c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68da      	ldr	r2, [r3, #12]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80043ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 f82b 	bl	800440c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	691a      	ldr	r2, [r3, #16]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80043c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	695a      	ldr	r2, [r3, #20]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80043d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68da      	ldr	r2, [r3, #12]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80043e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2220      	movs	r2, #32
 80043f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2220      	movs	r2, #32
 80043f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004402:	2300      	movs	r3, #0
}
 8004404:	4618      	mov	r0, r3
 8004406:	3708      	adds	r7, #8
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800440c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004410:	b0c0      	sub	sp, #256	@ 0x100
 8004412:	af00      	add	r7, sp, #0
 8004414:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004428:	68d9      	ldr	r1, [r3, #12]
 800442a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	ea40 0301 	orr.w	r3, r0, r1
 8004434:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800443a:	689a      	ldr	r2, [r3, #8]
 800443c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	431a      	orrs	r2, r3
 8004444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	431a      	orrs	r2, r3
 800444c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004450:	69db      	ldr	r3, [r3, #28]
 8004452:	4313      	orrs	r3, r2
 8004454:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004464:	f021 010c 	bic.w	r1, r1, #12
 8004468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004472:	430b      	orrs	r3, r1
 8004474:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004486:	6999      	ldr	r1, [r3, #24]
 8004488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	ea40 0301 	orr.w	r3, r0, r1
 8004492:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	4b8f      	ldr	r3, [pc, #572]	@ (80046d8 <UART_SetConfig+0x2cc>)
 800449c:	429a      	cmp	r2, r3
 800449e:	d005      	beq.n	80044ac <UART_SetConfig+0xa0>
 80044a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	4b8d      	ldr	r3, [pc, #564]	@ (80046dc <UART_SetConfig+0x2d0>)
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d104      	bne.n	80044b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80044ac:	f7ff fae2 	bl	8003a74 <HAL_RCC_GetPCLK2Freq>
 80044b0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80044b4:	e003      	b.n	80044be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80044b6:	f7ff fac9 	bl	8003a4c <HAL_RCC_GetPCLK1Freq>
 80044ba:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044c2:	69db      	ldr	r3, [r3, #28]
 80044c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044c8:	f040 810c 	bne.w	80046e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80044cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044d0:	2200      	movs	r2, #0
 80044d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80044d6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80044da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80044de:	4622      	mov	r2, r4
 80044e0:	462b      	mov	r3, r5
 80044e2:	1891      	adds	r1, r2, r2
 80044e4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80044e6:	415b      	adcs	r3, r3
 80044e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80044ee:	4621      	mov	r1, r4
 80044f0:	eb12 0801 	adds.w	r8, r2, r1
 80044f4:	4629      	mov	r1, r5
 80044f6:	eb43 0901 	adc.w	r9, r3, r1
 80044fa:	f04f 0200 	mov.w	r2, #0
 80044fe:	f04f 0300 	mov.w	r3, #0
 8004502:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004506:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800450a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800450e:	4690      	mov	r8, r2
 8004510:	4699      	mov	r9, r3
 8004512:	4623      	mov	r3, r4
 8004514:	eb18 0303 	adds.w	r3, r8, r3
 8004518:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800451c:	462b      	mov	r3, r5
 800451e:	eb49 0303 	adc.w	r3, r9, r3
 8004522:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004532:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004536:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800453a:	460b      	mov	r3, r1
 800453c:	18db      	adds	r3, r3, r3
 800453e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004540:	4613      	mov	r3, r2
 8004542:	eb42 0303 	adc.w	r3, r2, r3
 8004546:	657b      	str	r3, [r7, #84]	@ 0x54
 8004548:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800454c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004550:	f7fb fe42 	bl	80001d8 <__aeabi_uldivmod>
 8004554:	4602      	mov	r2, r0
 8004556:	460b      	mov	r3, r1
 8004558:	4b61      	ldr	r3, [pc, #388]	@ (80046e0 <UART_SetConfig+0x2d4>)
 800455a:	fba3 2302 	umull	r2, r3, r3, r2
 800455e:	095b      	lsrs	r3, r3, #5
 8004560:	011c      	lsls	r4, r3, #4
 8004562:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004566:	2200      	movs	r2, #0
 8004568:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800456c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004570:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004574:	4642      	mov	r2, r8
 8004576:	464b      	mov	r3, r9
 8004578:	1891      	adds	r1, r2, r2
 800457a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800457c:	415b      	adcs	r3, r3
 800457e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004580:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004584:	4641      	mov	r1, r8
 8004586:	eb12 0a01 	adds.w	sl, r2, r1
 800458a:	4649      	mov	r1, r9
 800458c:	eb43 0b01 	adc.w	fp, r3, r1
 8004590:	f04f 0200 	mov.w	r2, #0
 8004594:	f04f 0300 	mov.w	r3, #0
 8004598:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800459c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80045a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80045a4:	4692      	mov	sl, r2
 80045a6:	469b      	mov	fp, r3
 80045a8:	4643      	mov	r3, r8
 80045aa:	eb1a 0303 	adds.w	r3, sl, r3
 80045ae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80045b2:	464b      	mov	r3, r9
 80045b4:	eb4b 0303 	adc.w	r3, fp, r3
 80045b8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80045bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80045c8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80045cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80045d0:	460b      	mov	r3, r1
 80045d2:	18db      	adds	r3, r3, r3
 80045d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80045d6:	4613      	mov	r3, r2
 80045d8:	eb42 0303 	adc.w	r3, r2, r3
 80045dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80045de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80045e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80045e6:	f7fb fdf7 	bl	80001d8 <__aeabi_uldivmod>
 80045ea:	4602      	mov	r2, r0
 80045ec:	460b      	mov	r3, r1
 80045ee:	4611      	mov	r1, r2
 80045f0:	4b3b      	ldr	r3, [pc, #236]	@ (80046e0 <UART_SetConfig+0x2d4>)
 80045f2:	fba3 2301 	umull	r2, r3, r3, r1
 80045f6:	095b      	lsrs	r3, r3, #5
 80045f8:	2264      	movs	r2, #100	@ 0x64
 80045fa:	fb02 f303 	mul.w	r3, r2, r3
 80045fe:	1acb      	subs	r3, r1, r3
 8004600:	00db      	lsls	r3, r3, #3
 8004602:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004606:	4b36      	ldr	r3, [pc, #216]	@ (80046e0 <UART_SetConfig+0x2d4>)
 8004608:	fba3 2302 	umull	r2, r3, r3, r2
 800460c:	095b      	lsrs	r3, r3, #5
 800460e:	005b      	lsls	r3, r3, #1
 8004610:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004614:	441c      	add	r4, r3
 8004616:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800461a:	2200      	movs	r2, #0
 800461c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004620:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004624:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004628:	4642      	mov	r2, r8
 800462a:	464b      	mov	r3, r9
 800462c:	1891      	adds	r1, r2, r2
 800462e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004630:	415b      	adcs	r3, r3
 8004632:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004634:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004638:	4641      	mov	r1, r8
 800463a:	1851      	adds	r1, r2, r1
 800463c:	6339      	str	r1, [r7, #48]	@ 0x30
 800463e:	4649      	mov	r1, r9
 8004640:	414b      	adcs	r3, r1
 8004642:	637b      	str	r3, [r7, #52]	@ 0x34
 8004644:	f04f 0200 	mov.w	r2, #0
 8004648:	f04f 0300 	mov.w	r3, #0
 800464c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004650:	4659      	mov	r1, fp
 8004652:	00cb      	lsls	r3, r1, #3
 8004654:	4651      	mov	r1, sl
 8004656:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800465a:	4651      	mov	r1, sl
 800465c:	00ca      	lsls	r2, r1, #3
 800465e:	4610      	mov	r0, r2
 8004660:	4619      	mov	r1, r3
 8004662:	4603      	mov	r3, r0
 8004664:	4642      	mov	r2, r8
 8004666:	189b      	adds	r3, r3, r2
 8004668:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800466c:	464b      	mov	r3, r9
 800466e:	460a      	mov	r2, r1
 8004670:	eb42 0303 	adc.w	r3, r2, r3
 8004674:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004684:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004688:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800468c:	460b      	mov	r3, r1
 800468e:	18db      	adds	r3, r3, r3
 8004690:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004692:	4613      	mov	r3, r2
 8004694:	eb42 0303 	adc.w	r3, r2, r3
 8004698:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800469a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800469e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80046a2:	f7fb fd99 	bl	80001d8 <__aeabi_uldivmod>
 80046a6:	4602      	mov	r2, r0
 80046a8:	460b      	mov	r3, r1
 80046aa:	4b0d      	ldr	r3, [pc, #52]	@ (80046e0 <UART_SetConfig+0x2d4>)
 80046ac:	fba3 1302 	umull	r1, r3, r3, r2
 80046b0:	095b      	lsrs	r3, r3, #5
 80046b2:	2164      	movs	r1, #100	@ 0x64
 80046b4:	fb01 f303 	mul.w	r3, r1, r3
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	00db      	lsls	r3, r3, #3
 80046bc:	3332      	adds	r3, #50	@ 0x32
 80046be:	4a08      	ldr	r2, [pc, #32]	@ (80046e0 <UART_SetConfig+0x2d4>)
 80046c0:	fba2 2303 	umull	r2, r3, r2, r3
 80046c4:	095b      	lsrs	r3, r3, #5
 80046c6:	f003 0207 	and.w	r2, r3, #7
 80046ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4422      	add	r2, r4
 80046d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80046d4:	e106      	b.n	80048e4 <UART_SetConfig+0x4d8>
 80046d6:	bf00      	nop
 80046d8:	40011000 	.word	0x40011000
 80046dc:	40011400 	.word	0x40011400
 80046e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046e8:	2200      	movs	r2, #0
 80046ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80046ee:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80046f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80046f6:	4642      	mov	r2, r8
 80046f8:	464b      	mov	r3, r9
 80046fa:	1891      	adds	r1, r2, r2
 80046fc:	6239      	str	r1, [r7, #32]
 80046fe:	415b      	adcs	r3, r3
 8004700:	627b      	str	r3, [r7, #36]	@ 0x24
 8004702:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004706:	4641      	mov	r1, r8
 8004708:	1854      	adds	r4, r2, r1
 800470a:	4649      	mov	r1, r9
 800470c:	eb43 0501 	adc.w	r5, r3, r1
 8004710:	f04f 0200 	mov.w	r2, #0
 8004714:	f04f 0300 	mov.w	r3, #0
 8004718:	00eb      	lsls	r3, r5, #3
 800471a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800471e:	00e2      	lsls	r2, r4, #3
 8004720:	4614      	mov	r4, r2
 8004722:	461d      	mov	r5, r3
 8004724:	4643      	mov	r3, r8
 8004726:	18e3      	adds	r3, r4, r3
 8004728:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800472c:	464b      	mov	r3, r9
 800472e:	eb45 0303 	adc.w	r3, r5, r3
 8004732:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004736:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004742:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004746:	f04f 0200 	mov.w	r2, #0
 800474a:	f04f 0300 	mov.w	r3, #0
 800474e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004752:	4629      	mov	r1, r5
 8004754:	008b      	lsls	r3, r1, #2
 8004756:	4621      	mov	r1, r4
 8004758:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800475c:	4621      	mov	r1, r4
 800475e:	008a      	lsls	r2, r1, #2
 8004760:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004764:	f7fb fd38 	bl	80001d8 <__aeabi_uldivmod>
 8004768:	4602      	mov	r2, r0
 800476a:	460b      	mov	r3, r1
 800476c:	4b60      	ldr	r3, [pc, #384]	@ (80048f0 <UART_SetConfig+0x4e4>)
 800476e:	fba3 2302 	umull	r2, r3, r3, r2
 8004772:	095b      	lsrs	r3, r3, #5
 8004774:	011c      	lsls	r4, r3, #4
 8004776:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800477a:	2200      	movs	r2, #0
 800477c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004780:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004784:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004788:	4642      	mov	r2, r8
 800478a:	464b      	mov	r3, r9
 800478c:	1891      	adds	r1, r2, r2
 800478e:	61b9      	str	r1, [r7, #24]
 8004790:	415b      	adcs	r3, r3
 8004792:	61fb      	str	r3, [r7, #28]
 8004794:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004798:	4641      	mov	r1, r8
 800479a:	1851      	adds	r1, r2, r1
 800479c:	6139      	str	r1, [r7, #16]
 800479e:	4649      	mov	r1, r9
 80047a0:	414b      	adcs	r3, r1
 80047a2:	617b      	str	r3, [r7, #20]
 80047a4:	f04f 0200 	mov.w	r2, #0
 80047a8:	f04f 0300 	mov.w	r3, #0
 80047ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047b0:	4659      	mov	r1, fp
 80047b2:	00cb      	lsls	r3, r1, #3
 80047b4:	4651      	mov	r1, sl
 80047b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047ba:	4651      	mov	r1, sl
 80047bc:	00ca      	lsls	r2, r1, #3
 80047be:	4610      	mov	r0, r2
 80047c0:	4619      	mov	r1, r3
 80047c2:	4603      	mov	r3, r0
 80047c4:	4642      	mov	r2, r8
 80047c6:	189b      	adds	r3, r3, r2
 80047c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80047cc:	464b      	mov	r3, r9
 80047ce:	460a      	mov	r2, r1
 80047d0:	eb42 0303 	adc.w	r3, r2, r3
 80047d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80047d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80047e2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80047e4:	f04f 0200 	mov.w	r2, #0
 80047e8:	f04f 0300 	mov.w	r3, #0
 80047ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80047f0:	4649      	mov	r1, r9
 80047f2:	008b      	lsls	r3, r1, #2
 80047f4:	4641      	mov	r1, r8
 80047f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047fa:	4641      	mov	r1, r8
 80047fc:	008a      	lsls	r2, r1, #2
 80047fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004802:	f7fb fce9 	bl	80001d8 <__aeabi_uldivmod>
 8004806:	4602      	mov	r2, r0
 8004808:	460b      	mov	r3, r1
 800480a:	4611      	mov	r1, r2
 800480c:	4b38      	ldr	r3, [pc, #224]	@ (80048f0 <UART_SetConfig+0x4e4>)
 800480e:	fba3 2301 	umull	r2, r3, r3, r1
 8004812:	095b      	lsrs	r3, r3, #5
 8004814:	2264      	movs	r2, #100	@ 0x64
 8004816:	fb02 f303 	mul.w	r3, r2, r3
 800481a:	1acb      	subs	r3, r1, r3
 800481c:	011b      	lsls	r3, r3, #4
 800481e:	3332      	adds	r3, #50	@ 0x32
 8004820:	4a33      	ldr	r2, [pc, #204]	@ (80048f0 <UART_SetConfig+0x4e4>)
 8004822:	fba2 2303 	umull	r2, r3, r2, r3
 8004826:	095b      	lsrs	r3, r3, #5
 8004828:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800482c:	441c      	add	r4, r3
 800482e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004832:	2200      	movs	r2, #0
 8004834:	673b      	str	r3, [r7, #112]	@ 0x70
 8004836:	677a      	str	r2, [r7, #116]	@ 0x74
 8004838:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800483c:	4642      	mov	r2, r8
 800483e:	464b      	mov	r3, r9
 8004840:	1891      	adds	r1, r2, r2
 8004842:	60b9      	str	r1, [r7, #8]
 8004844:	415b      	adcs	r3, r3
 8004846:	60fb      	str	r3, [r7, #12]
 8004848:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800484c:	4641      	mov	r1, r8
 800484e:	1851      	adds	r1, r2, r1
 8004850:	6039      	str	r1, [r7, #0]
 8004852:	4649      	mov	r1, r9
 8004854:	414b      	adcs	r3, r1
 8004856:	607b      	str	r3, [r7, #4]
 8004858:	f04f 0200 	mov.w	r2, #0
 800485c:	f04f 0300 	mov.w	r3, #0
 8004860:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004864:	4659      	mov	r1, fp
 8004866:	00cb      	lsls	r3, r1, #3
 8004868:	4651      	mov	r1, sl
 800486a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800486e:	4651      	mov	r1, sl
 8004870:	00ca      	lsls	r2, r1, #3
 8004872:	4610      	mov	r0, r2
 8004874:	4619      	mov	r1, r3
 8004876:	4603      	mov	r3, r0
 8004878:	4642      	mov	r2, r8
 800487a:	189b      	adds	r3, r3, r2
 800487c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800487e:	464b      	mov	r3, r9
 8004880:	460a      	mov	r2, r1
 8004882:	eb42 0303 	adc.w	r3, r2, r3
 8004886:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	663b      	str	r3, [r7, #96]	@ 0x60
 8004892:	667a      	str	r2, [r7, #100]	@ 0x64
 8004894:	f04f 0200 	mov.w	r2, #0
 8004898:	f04f 0300 	mov.w	r3, #0
 800489c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80048a0:	4649      	mov	r1, r9
 80048a2:	008b      	lsls	r3, r1, #2
 80048a4:	4641      	mov	r1, r8
 80048a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048aa:	4641      	mov	r1, r8
 80048ac:	008a      	lsls	r2, r1, #2
 80048ae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80048b2:	f7fb fc91 	bl	80001d8 <__aeabi_uldivmod>
 80048b6:	4602      	mov	r2, r0
 80048b8:	460b      	mov	r3, r1
 80048ba:	4b0d      	ldr	r3, [pc, #52]	@ (80048f0 <UART_SetConfig+0x4e4>)
 80048bc:	fba3 1302 	umull	r1, r3, r3, r2
 80048c0:	095b      	lsrs	r3, r3, #5
 80048c2:	2164      	movs	r1, #100	@ 0x64
 80048c4:	fb01 f303 	mul.w	r3, r1, r3
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	011b      	lsls	r3, r3, #4
 80048cc:	3332      	adds	r3, #50	@ 0x32
 80048ce:	4a08      	ldr	r2, [pc, #32]	@ (80048f0 <UART_SetConfig+0x4e4>)
 80048d0:	fba2 2303 	umull	r2, r3, r2, r3
 80048d4:	095b      	lsrs	r3, r3, #5
 80048d6:	f003 020f 	and.w	r2, r3, #15
 80048da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4422      	add	r2, r4
 80048e2:	609a      	str	r2, [r3, #8]
}
 80048e4:	bf00      	nop
 80048e6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80048ea:	46bd      	mov	sp, r7
 80048ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048f0:	51eb851f 	.word	0x51eb851f

080048f4 <memset>:
 80048f4:	4402      	add	r2, r0
 80048f6:	4603      	mov	r3, r0
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d100      	bne.n	80048fe <memset+0xa>
 80048fc:	4770      	bx	lr
 80048fe:	f803 1b01 	strb.w	r1, [r3], #1
 8004902:	e7f9      	b.n	80048f8 <memset+0x4>

08004904 <__errno>:
 8004904:	4b01      	ldr	r3, [pc, #4]	@ (800490c <__errno+0x8>)
 8004906:	6818      	ldr	r0, [r3, #0]
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	20000038 	.word	0x20000038

08004910 <__libc_init_array>:
 8004910:	b570      	push	{r4, r5, r6, lr}
 8004912:	4d0d      	ldr	r5, [pc, #52]	@ (8004948 <__libc_init_array+0x38>)
 8004914:	4c0d      	ldr	r4, [pc, #52]	@ (800494c <__libc_init_array+0x3c>)
 8004916:	1b64      	subs	r4, r4, r5
 8004918:	10a4      	asrs	r4, r4, #2
 800491a:	2600      	movs	r6, #0
 800491c:	42a6      	cmp	r6, r4
 800491e:	d109      	bne.n	8004934 <__libc_init_array+0x24>
 8004920:	4d0b      	ldr	r5, [pc, #44]	@ (8004950 <__libc_init_array+0x40>)
 8004922:	4c0c      	ldr	r4, [pc, #48]	@ (8004954 <__libc_init_array+0x44>)
 8004924:	f000 f914 	bl	8004b50 <_init>
 8004928:	1b64      	subs	r4, r4, r5
 800492a:	10a4      	asrs	r4, r4, #2
 800492c:	2600      	movs	r6, #0
 800492e:	42a6      	cmp	r6, r4
 8004930:	d105      	bne.n	800493e <__libc_init_array+0x2e>
 8004932:	bd70      	pop	{r4, r5, r6, pc}
 8004934:	f855 3b04 	ldr.w	r3, [r5], #4
 8004938:	4798      	blx	r3
 800493a:	3601      	adds	r6, #1
 800493c:	e7ee      	b.n	800491c <__libc_init_array+0xc>
 800493e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004942:	4798      	blx	r3
 8004944:	3601      	adds	r6, #1
 8004946:	e7f2      	b.n	800492e <__libc_init_array+0x1e>
 8004948:	08004ba8 	.word	0x08004ba8
 800494c:	08004ba8 	.word	0x08004ba8
 8004950:	08004ba8 	.word	0x08004ba8
 8004954:	08004bac 	.word	0x08004bac

08004958 <sqrtf>:
 8004958:	b508      	push	{r3, lr}
 800495a:	ed2d 8b02 	vpush	{d8}
 800495e:	eeb0 8a40 	vmov.f32	s16, s0
 8004962:	f000 f8f2 	bl	8004b4a <__ieee754_sqrtf>
 8004966:	eeb4 8a48 	vcmp.f32	s16, s16
 800496a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800496e:	d60c      	bvs.n	800498a <sqrtf+0x32>
 8004970:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8004990 <sqrtf+0x38>
 8004974:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8004978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800497c:	d505      	bpl.n	800498a <sqrtf+0x32>
 800497e:	f7ff ffc1 	bl	8004904 <__errno>
 8004982:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8004986:	2321      	movs	r3, #33	@ 0x21
 8004988:	6003      	str	r3, [r0, #0]
 800498a:	ecbd 8b02 	vpop	{d8}
 800498e:	bd08      	pop	{r3, pc}
 8004990:	00000000 	.word	0x00000000

08004994 <atanf>:
 8004994:	b538      	push	{r3, r4, r5, lr}
 8004996:	ee10 5a10 	vmov	r5, s0
 800499a:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800499e:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 80049a2:	eef0 7a40 	vmov.f32	s15, s0
 80049a6:	d310      	bcc.n	80049ca <atanf+0x36>
 80049a8:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 80049ac:	d904      	bls.n	80049b8 <atanf+0x24>
 80049ae:	ee70 7a00 	vadd.f32	s15, s0, s0
 80049b2:	eeb0 0a67 	vmov.f32	s0, s15
 80049b6:	bd38      	pop	{r3, r4, r5, pc}
 80049b8:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8004af0 <atanf+0x15c>
 80049bc:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8004af4 <atanf+0x160>
 80049c0:	2d00      	cmp	r5, #0
 80049c2:	bfc8      	it	gt
 80049c4:	eef0 7a47 	vmovgt.f32	s15, s14
 80049c8:	e7f3      	b.n	80049b2 <atanf+0x1e>
 80049ca:	4b4b      	ldr	r3, [pc, #300]	@ (8004af8 <atanf+0x164>)
 80049cc:	429c      	cmp	r4, r3
 80049ce:	d810      	bhi.n	80049f2 <atanf+0x5e>
 80049d0:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 80049d4:	d20a      	bcs.n	80049ec <atanf+0x58>
 80049d6:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8004afc <atanf+0x168>
 80049da:	ee30 7a07 	vadd.f32	s14, s0, s14
 80049de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049e2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80049e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049ea:	dce2      	bgt.n	80049b2 <atanf+0x1e>
 80049ec:	f04f 33ff 	mov.w	r3, #4294967295
 80049f0:	e013      	b.n	8004a1a <atanf+0x86>
 80049f2:	f000 f8a3 	bl	8004b3c <fabsf>
 80049f6:	4b42      	ldr	r3, [pc, #264]	@ (8004b00 <atanf+0x16c>)
 80049f8:	429c      	cmp	r4, r3
 80049fa:	d84f      	bhi.n	8004a9c <atanf+0x108>
 80049fc:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8004a00:	429c      	cmp	r4, r3
 8004a02:	d841      	bhi.n	8004a88 <atanf+0xf4>
 8004a04:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8004a08:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8004a0c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8004a10:	2300      	movs	r3, #0
 8004a12:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004a16:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8004a1a:	1c5a      	adds	r2, r3, #1
 8004a1c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8004a20:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8004b04 <atanf+0x170>
 8004a24:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8004b08 <atanf+0x174>
 8004a28:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8004b0c <atanf+0x178>
 8004a2c:	ee66 6a06 	vmul.f32	s13, s12, s12
 8004a30:	eee6 5a87 	vfma.f32	s11, s13, s14
 8004a34:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8004b10 <atanf+0x17c>
 8004a38:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8004a3c:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8004b14 <atanf+0x180>
 8004a40:	eee7 5a26 	vfma.f32	s11, s14, s13
 8004a44:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8004b18 <atanf+0x184>
 8004a48:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8004a4c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8004b1c <atanf+0x188>
 8004a50:	eee7 5a26 	vfma.f32	s11, s14, s13
 8004a54:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8004b20 <atanf+0x18c>
 8004a58:	eea6 5a87 	vfma.f32	s10, s13, s14
 8004a5c:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8004b24 <atanf+0x190>
 8004a60:	eea5 7a26 	vfma.f32	s14, s10, s13
 8004a64:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8004b28 <atanf+0x194>
 8004a68:	eea7 5a26 	vfma.f32	s10, s14, s13
 8004a6c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8004b2c <atanf+0x198>
 8004a70:	eea5 7a26 	vfma.f32	s14, s10, s13
 8004a74:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004a78:	eea5 7a86 	vfma.f32	s14, s11, s12
 8004a7c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004a80:	d121      	bne.n	8004ac6 <atanf+0x132>
 8004a82:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004a86:	e794      	b.n	80049b2 <atanf+0x1e>
 8004a88:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8004a8c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8004a90:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004a94:	2301      	movs	r3, #1
 8004a96:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8004a9a:	e7be      	b.n	8004a1a <atanf+0x86>
 8004a9c:	4b24      	ldr	r3, [pc, #144]	@ (8004b30 <atanf+0x19c>)
 8004a9e:	429c      	cmp	r4, r3
 8004aa0:	d80b      	bhi.n	8004aba <atanf+0x126>
 8004aa2:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8004aa6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004aaa:	eea0 7a27 	vfma.f32	s14, s0, s15
 8004aae:	2302      	movs	r3, #2
 8004ab0:	ee70 6a67 	vsub.f32	s13, s0, s15
 8004ab4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ab8:	e7af      	b.n	8004a1a <atanf+0x86>
 8004aba:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8004abe:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e7a9      	b.n	8004a1a <atanf+0x86>
 8004ac6:	4a1b      	ldr	r2, [pc, #108]	@ (8004b34 <atanf+0x1a0>)
 8004ac8:	491b      	ldr	r1, [pc, #108]	@ (8004b38 <atanf+0x1a4>)
 8004aca:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8004ace:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8004ad2:	edd3 6a00 	vldr	s13, [r3]
 8004ad6:	ee37 7a66 	vsub.f32	s14, s14, s13
 8004ada:	2d00      	cmp	r5, #0
 8004adc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004ae0:	edd2 7a00 	vldr	s15, [r2]
 8004ae4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004ae8:	bfb8      	it	lt
 8004aea:	eef1 7a67 	vneglt.f32	s15, s15
 8004aee:	e760      	b.n	80049b2 <atanf+0x1e>
 8004af0:	bfc90fdb 	.word	0xbfc90fdb
 8004af4:	3fc90fdb 	.word	0x3fc90fdb
 8004af8:	3edfffff 	.word	0x3edfffff
 8004afc:	7149f2ca 	.word	0x7149f2ca
 8004b00:	3f97ffff 	.word	0x3f97ffff
 8004b04:	3c8569d7 	.word	0x3c8569d7
 8004b08:	3d4bda59 	.word	0x3d4bda59
 8004b0c:	bd6ef16b 	.word	0xbd6ef16b
 8004b10:	3d886b35 	.word	0x3d886b35
 8004b14:	3dba2e6e 	.word	0x3dba2e6e
 8004b18:	3e124925 	.word	0x3e124925
 8004b1c:	3eaaaaab 	.word	0x3eaaaaab
 8004b20:	bd15a221 	.word	0xbd15a221
 8004b24:	bd9d8795 	.word	0xbd9d8795
 8004b28:	bde38e38 	.word	0xbde38e38
 8004b2c:	be4ccccd 	.word	0xbe4ccccd
 8004b30:	401bffff 	.word	0x401bffff
 8004b34:	08004b90 	.word	0x08004b90
 8004b38:	08004b80 	.word	0x08004b80

08004b3c <fabsf>:
 8004b3c:	ee10 3a10 	vmov	r3, s0
 8004b40:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004b44:	ee00 3a10 	vmov	s0, r3
 8004b48:	4770      	bx	lr

08004b4a <__ieee754_sqrtf>:
 8004b4a:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8004b4e:	4770      	bx	lr

08004b50 <_init>:
 8004b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b52:	bf00      	nop
 8004b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b56:	bc08      	pop	{r3}
 8004b58:	469e      	mov	lr, r3
 8004b5a:	4770      	bx	lr

08004b5c <_fini>:
 8004b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b5e:	bf00      	nop
 8004b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b62:	bc08      	pop	{r3}
 8004b64:	469e      	mov	lr, r3
 8004b66:	4770      	bx	lr
